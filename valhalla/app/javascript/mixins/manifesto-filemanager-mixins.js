import default_image from 'default.png'
import default_vol from 'default_vol.png'
import Pluralize from 'pluralize'

const ManifestoFilemanagerMixins = {

  mainSequence: function () {
    const s = this.getSequences()
    const main_sequence = s.filter((seq) => seq.id !== 'undefined')
    // the default Sequence is the first in the list
    return main_sequence[0]
  },

  getBibId: function () {
    let bibid = null
    const md = this.getMetadata()
    let bibArray = md.filter((el) =>
        el.resource.label === 'Source Metadata Identifier'
    )
    if (bibArray.length) {
      bibid = bibArray[0].resource.value[0]
    }

    return bibid
  },

  getCanvasMainThumb: function (canvas) {
    const images = canvas.getImages()
    let thumb = default_image
    let services = images[0].getResource().getServices()
    if (services.length) {
      thumb = services[0].id + '/full/400,/0/default.jpg'
    }
    return thumb
  },

  getManifestThumb: function (manifest) {
    let thumb = default_vol
    // ToDo: if a manifest must be dereferenced, return a promise via manifest.load
    if(manifest.isLoaded){
      let t = manifest.getThumbnail()
      if (t.id) {
        thumb = t.id
      }
    }
    return thumb
  },

  getMemberId: function (manifest) {
    let uriArray = manifest.id.split('/')
    // this "string hack" will parse a manifest @id generated by Princeton Figgy
    let id = uriArray[uriArray.length-2]
    return id
  },

  getResourceId: function (canvas) {
    const images = canvas.getImages()
    const r = images[0].getResource()
    // the double id property is due to a bug in our manifests ...
    // see https://github.com/pulibrary/figgy/issues/598
    return r.id.id
  },

  getEnglishTitle: function (manifest) {
    const translations = manifest.getLabel()
    const english = translations.find(translation => translation.locale === "en-GB")
    return english.value
  },

  getEnglishLabel: function (canvas) {
    const translations = canvas.getLabel()
    const english = translations.find(translation => translation.locale === "en-GB")
    return english.value
  },

  getMVWImageCollection: function (imageCollection) {
    const manifests = this.getManifests()
    imageCollection.isMultiVolume = true
    imageCollection.viewingDirection = ''
    if (typeof viewDir != 'undefined') {
      imageCollection.viewingDirection = viewDir.value
    }
    imageCollection.viewingHint = 'multi-part'
    imageCollection.images = manifests.map(manifest => ({
      label: this.getEnglishTitle(manifest),
      id: this.getMemberId(manifest),
      url: this.getManifestThumb(manifest)
    }))
    return imageCollection
  },

  getStartCanvasId: function (s) {
    const sc = s.getStartCanvas()
    var id = ''
    if (typeof sc != 'undefined') {
      if(sc){
        const parse = sc.split('/')
        id = parse[parse.length-1]
      }
    }
    return id
  },

  getThumbnailId: function () {
    const t = this.getThumbnail()
    var id = ''
    if (typeof t != 'undefined') {
      if(t){
        const parse = t.__jsonld.service["@id"].split('/')
        id = parse[parse.length-1]
      }
    }
    return id
  },

  imageCollection: function (resource) {
    const IIIFResourceType = this.getIIIFResourceType()
    let imageCollection = {}
    imageCollection.id = resource.id
    imageCollection.bibid = this.getBibId()
    imageCollection.resourceClassName = Pluralize.singular(resource.class_name)
    if (IIIFResourceType.value == 'collection') {
      imageCollection = this.getMVWImageCollection(imageCollection)
    } else {
      const s = this.mainSequence()
      const viewDir = this.getViewingDirection()
      const viewHint = this.getViewingHint()
      imageCollection.isMultiVolume = false
      imageCollection.thumbnail = ''
      imageCollection.viewingDirection = ''
      imageCollection.startPage = ''
      if (typeof viewDir != 'undefined') {
        imageCollection.viewingDirection = viewDir.value
      }
      imageCollection.viewingHint = ''
      if (typeof viewHint != 'undefined') {
        imageCollection.viewingHint = viewHint.value
      }
      // if this is a "blank" manifest, we can't get canvases
      if(typeof s != 'undefined') {
        const canvases = s.getCanvases()
        imageCollection.thumbnail = this.getThumbnailId()
        imageCollection.startPage = this.getStartCanvasId(s)
        imageCollection.images = canvases.map(canvas => ({
          label: this.getEnglishLabel(canvas),
          id: this.getResourceId(canvas),
          page_type: "single",
          url: this.getCanvasMainThumb(canvas)
        }))
      } else {
        imageCollection.images = []
      }

    }
    return imageCollection
  },

}

export default ManifestoFilemanagerMixins
