(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/vue/dist/vue.common.dev.js
  var require_vue_common_dev = __commonJS({
    "node_modules/vue/dist/vue.common.dev.js"(exports2, module2) {
      "use strict";
      var emptyObject = Object.freeze({});
      var isArray = Array.isArray;
      function isUndef(v) {
        return v === void 0 || v === null;
      }
      function isDef(v) {
        return v !== void 0 && v !== null;
      }
      function isTrue(v) {
        return v === true;
      }
      function isFalse(v) {
        return v === false;
      }
      function isPrimitive(value) {
        return typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "boolean";
      }
      function isFunction(value) {
        return typeof value === "function";
      }
      function isObject3(obj) {
        return obj !== null && typeof obj === "object";
      }
      var _toString = Object.prototype.toString;
      function toRawType(value) {
        return _toString.call(value).slice(8, -1);
      }
      function isPlainObject(obj) {
        return _toString.call(obj) === "[object Object]";
      }
      function isRegExp(v) {
        return _toString.call(v) === "[object RegExp]";
      }
      function isValidArrayIndex(val) {
        const n = parseFloat(String(val));
        return n >= 0 && Math.floor(n) === n && isFinite(val);
      }
      function isPromise2(val) {
        return isDef(val) && typeof val.then === "function" && typeof val.catch === "function";
      }
      function toString3(val) {
        return val == null ? "" : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
      }
      function toNumber(val) {
        const n = parseFloat(val);
        return isNaN(n) ? val : n;
      }
      function makeMap(str2, expectsLowerCase) {
        const map = /* @__PURE__ */ Object.create(null);
        const list = str2.split(",");
        for (let i = 0; i < list.length; i++) {
          map[list[i]] = true;
        }
        return expectsLowerCase ? (val) => map[val.toLowerCase()] : (val) => map[val];
      }
      var isBuiltInTag = makeMap("slot,component", true);
      var isReservedAttribute = makeMap("key,ref,slot,slot-scope,is");
      function remove$2(arr, item) {
        if (arr.length) {
          const index2 = arr.indexOf(item);
          if (index2 > -1) {
            return arr.splice(index2, 1);
          }
        }
      }
      var hasOwnProperty4 = Object.prototype.hasOwnProperty;
      function hasOwn2(obj, key) {
        return hasOwnProperty4.call(obj, key);
      }
      function cached(fn) {
        const cache = /* @__PURE__ */ Object.create(null);
        return function cachedFn(str2) {
          const hit = cache[str2];
          return hit || (cache[str2] = fn(str2));
        };
      }
      var camelizeRE = /-(\w)/g;
      var camelize = cached((str2) => {
        return str2.replace(camelizeRE, (_2, c) => c ? c.toUpperCase() : "");
      });
      var capitalize = cached((str2) => {
        return str2.charAt(0).toUpperCase() + str2.slice(1);
      });
      var hyphenateRE = /\B([A-Z])/g;
      var hyphenate = cached((str2) => {
        return str2.replace(hyphenateRE, "-$1").toLowerCase();
      });
      function polyfillBind(fn, ctx) {
        function boundFn(a) {
          const l = arguments.length;
          return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
        }
        boundFn._length = fn.length;
        return boundFn;
      }
      function nativeBind(fn, ctx) {
        return fn.bind(ctx);
      }
      var bind$1 = Function.prototype.bind ? nativeBind : polyfillBind;
      function toArray(list, start) {
        start = start || 0;
        let i = list.length - start;
        const ret = new Array(i);
        while (i--) {
          ret[i] = list[i + start];
        }
        return ret;
      }
      function extend(to, _from) {
        for (const key in _from) {
          to[key] = _from[key];
        }
        return to;
      }
      function toObject(arr) {
        const res = {};
        for (let i = 0; i < arr.length; i++) {
          if (arr[i]) {
            extend(res, arr[i]);
          }
        }
        return res;
      }
      function noop(a, b, c) {
      }
      var no = (a, b, c) => false;
      var identity = (_2) => _2;
      function genStaticKeys$1(modules3) {
        return modules3.reduce((keys, m) => {
          return keys.concat(m.staticKeys || []);
        }, []).join(",");
      }
      function looseEqual(a, b) {
        if (a === b)
          return true;
        const isObjectA = isObject3(a);
        const isObjectB = isObject3(b);
        if (isObjectA && isObjectB) {
          try {
            const isArrayA = Array.isArray(a);
            const isArrayB = Array.isArray(b);
            if (isArrayA && isArrayB) {
              return a.length === b.length && a.every((e, i) => {
                return looseEqual(e, b[i]);
              });
            } else if (a instanceof Date && b instanceof Date) {
              return a.getTime() === b.getTime();
            } else if (!isArrayA && !isArrayB) {
              const keysA = Object.keys(a);
              const keysB = Object.keys(b);
              return keysA.length === keysB.length && keysA.every((key) => {
                return looseEqual(a[key], b[key]);
              });
            } else {
              return false;
            }
          } catch (e) {
            return false;
          }
        } else if (!isObjectA && !isObjectB) {
          return String(a) === String(b);
        } else {
          return false;
        }
      }
      function looseIndexOf(arr, val) {
        for (let i = 0; i < arr.length; i++) {
          if (looseEqual(arr[i], val))
            return i;
        }
        return -1;
      }
      function once(fn) {
        let called = false;
        return function() {
          if (!called) {
            called = true;
            fn.apply(this, arguments);
          }
        };
      }
      function hasChanged(x, y) {
        if (x === y) {
          return x === 0 && 1 / x !== 1 / y;
        } else {
          return x === x || y === y;
        }
      }
      var SSR_ATTR = "data-server-rendered";
      var ASSET_TYPES = ["component", "directive", "filter"];
      var LIFECYCLE_HOOKS = [
        "beforeCreate",
        "created",
        "beforeMount",
        "mounted",
        "beforeUpdate",
        "updated",
        "beforeDestroy",
        "destroyed",
        "activated",
        "deactivated",
        "errorCaptured",
        "serverPrefetch",
        "renderTracked",
        "renderTriggered"
      ];
      var config = {
        optionMergeStrategies: /* @__PURE__ */ Object.create(null),
        silent: false,
        productionTip: true,
        devtools: true,
        performance: false,
        errorHandler: null,
        warnHandler: null,
        ignoredElements: [],
        keyCodes: /* @__PURE__ */ Object.create(null),
        isReservedTag: no,
        isReservedAttr: no,
        isUnknownElement: no,
        getTagNamespace: noop,
        parsePlatformTagName: identity,
        mustUseProp: no,
        async: true,
        _lifecycleHooks: LIFECYCLE_HOOKS
      };
      var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
      function isReserved(str2) {
        const c = (str2 + "").charCodeAt(0);
        return c === 36 || c === 95;
      }
      function def(obj, key, val, enumerable) {
        Object.defineProperty(obj, key, {
          value: val,
          enumerable: !!enumerable,
          writable: true,
          configurable: true
        });
      }
      var bailRE = new RegExp(`[^${unicodeRegExp.source}.$_\\d]`);
      function parsePath(path) {
        if (bailRE.test(path)) {
          return;
        }
        const segments = path.split(".");
        return function(obj) {
          for (let i = 0; i < segments.length; i++) {
            if (!obj)
              return;
            obj = obj[segments[i]];
          }
          return obj;
        };
      }
      var hasProto = "__proto__" in {};
      var inBrowser = typeof window !== "undefined";
      var UA = inBrowser && window.navigator.userAgent.toLowerCase();
      var isIE = UA && /msie|trident/.test(UA);
      var isIE9 = UA && UA.indexOf("msie 9.0") > 0;
      var isEdge = UA && UA.indexOf("edge/") > 0;
      UA && UA.indexOf("android") > 0;
      var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
      UA && /chrome\/\d+/.test(UA) && !isEdge;
      UA && /phantomjs/.test(UA);
      var isFF = UA && UA.match(/firefox\/(\d+)/);
      var nativeWatch = {}.watch;
      var supportsPassive = false;
      if (inBrowser) {
        try {
          const opts = {};
          Object.defineProperty(opts, "passive", {
            get() {
              supportsPassive = true;
            }
          });
          window.addEventListener("test-passive", null, opts);
        } catch (e) {
        }
      }
      var _isServer;
      var isServerRendering = () => {
        if (_isServer === void 0) {
          if (!inBrowser && typeof global !== "undefined") {
            _isServer = global["process"] && global["process"].env.VUE_ENV === "server";
          } else {
            _isServer = false;
          }
        }
        return _isServer;
      };
      var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
      function isNative(Ctor) {
        return typeof Ctor === "function" && /native code/.test(Ctor.toString());
      }
      var hasSymbol = typeof Symbol !== "undefined" && isNative(Symbol) && typeof Reflect !== "undefined" && isNative(Reflect.ownKeys);
      var _Set;
      if (typeof Set !== "undefined" && isNative(Set)) {
        _Set = Set;
      } else {
        _Set = class Set {
          constructor() {
            this.set = /* @__PURE__ */ Object.create(null);
          }
          has(key) {
            return this.set[key] === true;
          }
          add(key) {
            this.set[key] = true;
          }
          clear() {
            this.set = /* @__PURE__ */ Object.create(null);
          }
        };
      }
      var currentInstance = null;
      function getCurrentInstance() {
        return currentInstance && { proxy: currentInstance };
      }
      function setCurrentInstance(vm = null) {
        if (!vm)
          currentInstance && currentInstance._scope.off();
        currentInstance = vm;
        vm && vm._scope.on();
      }
      var VNode = class {
        constructor(tag, data, children, text2, elm, context, componentOptions, asyncFactory) {
          this.tag = tag;
          this.data = data;
          this.children = children;
          this.text = text2;
          this.elm = elm;
          this.ns = void 0;
          this.context = context;
          this.fnContext = void 0;
          this.fnOptions = void 0;
          this.fnScopeId = void 0;
          this.key = data && data.key;
          this.componentOptions = componentOptions;
          this.componentInstance = void 0;
          this.parent = void 0;
          this.raw = false;
          this.isStatic = false;
          this.isRootInsert = true;
          this.isComment = false;
          this.isCloned = false;
          this.isOnce = false;
          this.asyncFactory = asyncFactory;
          this.asyncMeta = void 0;
          this.isAsyncPlaceholder = false;
        }
        get child() {
          return this.componentInstance;
        }
      };
      var createEmptyVNode = (text2 = "") => {
        const node = new VNode();
        node.text = text2;
        node.isComment = true;
        return node;
      };
      function createTextVNode(val) {
        return new VNode(void 0, void 0, void 0, String(val));
      }
      function cloneVNode(vnode) {
        const cloned = new VNode(
          vnode.tag,
          vnode.data,
          vnode.children && vnode.children.slice(),
          vnode.text,
          vnode.elm,
          vnode.context,
          vnode.componentOptions,
          vnode.asyncFactory
        );
        cloned.ns = vnode.ns;
        cloned.isStatic = vnode.isStatic;
        cloned.key = vnode.key;
        cloned.isComment = vnode.isComment;
        cloned.fnContext = vnode.fnContext;
        cloned.fnOptions = vnode.fnOptions;
        cloned.fnScopeId = vnode.fnScopeId;
        cloned.asyncMeta = vnode.asyncMeta;
        cloned.isCloned = true;
        return cloned;
      }
      var initProxy;
      {
        const allowedGlobals = makeMap(
          "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"
        );
        const warnNonPresent = (target2, key) => {
          warn$2(`Property or method "${key}" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.`, target2);
        };
        const warnReservedPrefix = (target2, key) => {
          warn$2(`Property "${key}" must be accessed with "$data.${key}" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data`, target2);
        };
        const hasProxy = typeof Proxy !== "undefined" && isNative(Proxy);
        if (hasProxy) {
          const isBuiltInModifier = makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");
          config.keyCodes = new Proxy(config.keyCodes, {
            set(target2, key, value) {
              if (isBuiltInModifier(key)) {
                warn$2(`Avoid overwriting built-in modifier in config.keyCodes: .${key}`);
                return false;
              } else {
                target2[key] = value;
                return true;
              }
            }
          });
        }
        const hasHandler = {
          has(target2, key) {
            const has2 = key in target2;
            const isAllowed = allowedGlobals(key) || typeof key === "string" && key.charAt(0) === "_" && !(key in target2.$data);
            if (!has2 && !isAllowed) {
              if (key in target2.$data)
                warnReservedPrefix(target2, key);
              else
                warnNonPresent(target2, key);
            }
            return has2 || !isAllowed;
          }
        };
        const getHandler = {
          get(target2, key) {
            if (typeof key === "string" && !(key in target2)) {
              if (key in target2.$data)
                warnReservedPrefix(target2, key);
              else
                warnNonPresent(target2, key);
            }
            return target2[key];
          }
        };
        initProxy = function initProxy2(vm) {
          if (hasProxy) {
            const options = vm.$options;
            const handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
            vm._renderProxy = new Proxy(vm, handlers);
          } else {
            vm._renderProxy = vm;
          }
        };
      }
      var uid$2 = 0;
      var Dep = class {
        constructor() {
          this.id = uid$2++;
          this.subs = [];
        }
        addSub(sub) {
          this.subs.push(sub);
        }
        removeSub(sub) {
          remove$2(this.subs, sub);
        }
        depend(info) {
          if (Dep.target) {
            Dep.target.addDep(this);
            if (info && Dep.target.onTrack) {
              Dep.target.onTrack(Object.assign({ effect: Dep.target }, info));
            }
          }
        }
        notify(info) {
          const subs = this.subs.slice();
          if (!config.async) {
            subs.sort((a, b) => a.id - b.id);
          }
          for (let i = 0, l = subs.length; i < l; i++) {
            if (info) {
              const sub = subs[i];
              sub.onTrigger && sub.onTrigger(Object.assign({ effect: subs[i] }, info));
            }
            subs[i].update();
          }
        }
      };
      Dep.target = null;
      var targetStack = [];
      function pushTarget(target2) {
        targetStack.push(target2);
        Dep.target = target2;
      }
      function popTarget() {
        targetStack.pop();
        Dep.target = targetStack[targetStack.length - 1];
      }
      var arrayProto = Array.prototype;
      var arrayMethods = Object.create(arrayProto);
      var methodsToPatch = [
        "push",
        "pop",
        "shift",
        "unshift",
        "splice",
        "sort",
        "reverse"
      ];
      methodsToPatch.forEach(function(method) {
        const original = arrayProto[method];
        def(arrayMethods, method, function mutator(...args) {
          const result2 = original.apply(this, args);
          const ob = this.__ob__;
          let inserted;
          switch (method) {
            case "push":
            case "unshift":
              inserted = args;
              break;
            case "splice":
              inserted = args.slice(2);
              break;
          }
          if (inserted)
            ob.observeArray(inserted);
          {
            ob.dep.notify({
              type: "array mutation",
              target: this,
              key: method
            });
          }
          return result2;
        });
      });
      var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
      var NO_INIITIAL_VALUE = {};
      var shouldObserve = true;
      function toggleObserving(value) {
        shouldObserve = value;
      }
      var mockDep = {
        notify: noop,
        depend: noop,
        addSub: noop,
        removeSub: noop
      };
      var Observer = class {
        constructor(value, shallow = false, mock = false) {
          this.value = value;
          this.shallow = shallow;
          this.mock = mock;
          this.dep = mock ? mockDep : new Dep();
          this.vmCount = 0;
          def(value, "__ob__", this);
          if (isArray(value)) {
            if (!mock) {
              if (hasProto) {
                value.__proto__ = arrayMethods;
              } else {
                for (let i = 0, l = arrayKeys.length; i < l; i++) {
                  const key = arrayKeys[i];
                  def(value, key, arrayMethods[key]);
                }
              }
            }
            if (!shallow) {
              this.observeArray(value);
            }
          } else {
            const keys = Object.keys(value);
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              defineReactive(value, key, NO_INIITIAL_VALUE, void 0, shallow, mock);
            }
          }
        }
        observeArray(value) {
          for (let i = 0, l = value.length; i < l; i++) {
            observe(value[i], false, this.mock);
          }
        }
      };
      function observe(value, shallow, ssrMockReactivity) {
        if (!isObject3(value) || isRef(value) || value instanceof VNode) {
          return;
        }
        let ob;
        if (hasOwn2(value, "__ob__") && value.__ob__ instanceof Observer) {
          ob = value.__ob__;
        } else if (shouldObserve && (ssrMockReactivity || !isServerRendering()) && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value.__v_skip) {
          ob = new Observer(value, shallow, ssrMockReactivity);
        }
        return ob;
      }
      function defineReactive(obj, key, val, customSetter, shallow, mock) {
        const dep = new Dep();
        const property = Object.getOwnPropertyDescriptor(obj, key);
        if (property && property.configurable === false) {
          return;
        }
        const getter = property && property.get;
        const setter = property && property.set;
        if ((!getter || setter) && (val === NO_INIITIAL_VALUE || arguments.length === 2)) {
          val = obj[key];
        }
        let childOb = !shallow && observe(val, false, mock);
        Object.defineProperty(obj, key, {
          enumerable: true,
          configurable: true,
          get: function reactiveGetter() {
            const value = getter ? getter.call(obj) : val;
            if (Dep.target) {
              {
                dep.depend({
                  target: obj,
                  type: "get",
                  key
                });
              }
              if (childOb) {
                childOb.dep.depend();
                if (isArray(value)) {
                  dependArray(value);
                }
              }
            }
            return isRef(value) && !shallow ? value.value : value;
          },
          set: function reactiveSetter(newVal) {
            const value = getter ? getter.call(obj) : val;
            if (!hasChanged(value, newVal)) {
              return;
            }
            if (customSetter) {
              customSetter();
            }
            if (setter) {
              setter.call(obj, newVal);
            } else if (getter) {
              return;
            } else if (!shallow && isRef(value) && !isRef(newVal)) {
              value.value = newVal;
              return;
            } else {
              val = newVal;
            }
            childOb = !shallow && observe(newVal, false, mock);
            {
              dep.notify({
                type: "set",
                target: obj,
                key,
                newValue: newVal,
                oldValue: value
              });
            }
          }
        });
        return dep;
      }
      function set(target2, key, val) {
        if (isUndef(target2) || isPrimitive(target2)) {
          warn$2(`Cannot set reactive property on undefined, null, or primitive value: ${target2}`);
        }
        if (isReadonly(target2)) {
          warn$2(`Set operation on key "${key}" failed: target is readonly.`);
          return;
        }
        const ob = target2.__ob__;
        if (isArray(target2) && isValidArrayIndex(key)) {
          target2.length = Math.max(target2.length, key);
          target2.splice(key, 1, val);
          if (ob && !ob.shallow && ob.mock) {
            observe(val, false, true);
          }
          return val;
        }
        if (key in target2 && !(key in Object.prototype)) {
          target2[key] = val;
          return val;
        }
        if (target2._isVue || ob && ob.vmCount) {
          warn$2("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.");
          return val;
        }
        if (!ob) {
          target2[key] = val;
          return val;
        }
        defineReactive(ob.value, key, val, void 0, ob.shallow, ob.mock);
        {
          ob.dep.notify({
            type: "add",
            target: target2,
            key,
            newValue: val,
            oldValue: void 0
          });
        }
        return val;
      }
      function del(target2, key) {
        if (isUndef(target2) || isPrimitive(target2)) {
          warn$2(`Cannot delete reactive property on undefined, null, or primitive value: ${target2}`);
        }
        if (isArray(target2) && isValidArrayIndex(key)) {
          target2.splice(key, 1);
          return;
        }
        const ob = target2.__ob__;
        if (target2._isVue || ob && ob.vmCount) {
          warn$2("Avoid deleting properties on a Vue instance or its root $data - just set it to null.");
          return;
        }
        if (isReadonly(target2)) {
          warn$2(`Delete operation on key "${key}" failed: target is readonly.`);
          return;
        }
        if (!hasOwn2(target2, key)) {
          return;
        }
        delete target2[key];
        if (!ob) {
          return;
        }
        {
          ob.dep.notify({
            type: "delete",
            target: target2,
            key
          });
        }
      }
      function dependArray(value) {
        for (let e, i = 0, l = value.length; i < l; i++) {
          e = value[i];
          if (e && e.__ob__) {
            e.__ob__.dep.depend();
          }
          if (isArray(e)) {
            dependArray(e);
          }
        }
      }
      function reactive(target2) {
        makeReactive(target2, false);
        return target2;
      }
      function shallowReactive(target2) {
        makeReactive(target2, true);
        def(target2, "__v_isShallow", true);
        return target2;
      }
      function makeReactive(target2, shallow) {
        if (!isReadonly(target2)) {
          {
            if (isArray(target2)) {
              warn$2(`Avoid using Array as root value for ${shallow ? `shallowReactive()` : `reactive()`} as it cannot be tracked in watch() or watchEffect(). Use ${shallow ? `shallowRef()` : `ref()`} instead. This is a Vue-2-only limitation.`);
            }
            const existingOb = target2 && target2.__ob__;
            if (existingOb && existingOb.shallow !== shallow) {
              warn$2(`Target is already a ${existingOb.shallow ? `` : `non-`}shallow reactive object, and cannot be converted to ${shallow ? `` : `non-`}shallow.`);
            }
          }
          const ob = observe(target2, shallow, isServerRendering());
          if (!ob) {
            if (target2 == null || isPrimitive(target2)) {
              warn$2(`value cannot be made reactive: ${String(target2)}`);
            }
            if (isCollectionType(target2)) {
              warn$2(`Vue 2 does not support reactive collection types such as Map or Set.`);
            }
          }
        }
      }
      function isReactive(value) {
        if (isReadonly(value)) {
          return isReactive(value["__v_raw"]);
        }
        return !!(value && value.__ob__);
      }
      function isShallow(value) {
        return !!(value && value.__v_isShallow);
      }
      function isReadonly(value) {
        return !!(value && value.__v_isReadonly);
      }
      function isProxy(value) {
        return isReactive(value) || isReadonly(value);
      }
      function toRaw(observed) {
        const raw = observed && observed["__v_raw"];
        return raw ? toRaw(raw) : observed;
      }
      function markRaw(value) {
        def(value, "__v_skip", true);
        return value;
      }
      function isCollectionType(value) {
        const type = toRawType(value);
        return type === "Map" || type === "WeakMap" || type === "Set" || type === "WeakSet";
      }
      var RefFlag = `__v_isRef`;
      function isRef(r) {
        return !!(r && r.__v_isRef === true);
      }
      function ref$1(value) {
        return createRef(value, false);
      }
      function shallowRef(value) {
        return createRef(value, true);
      }
      function createRef(rawValue, shallow) {
        if (isRef(rawValue)) {
          return rawValue;
        }
        const ref2 = {};
        def(ref2, RefFlag, true);
        def(ref2, "__v_isShallow", shallow);
        def(ref2, "dep", defineReactive(ref2, "value", rawValue, null, shallow, isServerRendering()));
        return ref2;
      }
      function triggerRef(ref2) {
        if (!ref2.dep) {
          warn$2(`received object is not a triggerable ref.`);
        }
        {
          ref2.dep && ref2.dep.notify({
            type: "set",
            target: ref2,
            key: "value"
          });
        }
      }
      function unref(ref2) {
        return isRef(ref2) ? ref2.value : ref2;
      }
      function proxyRefs(objectWithRefs) {
        if (isReactive(objectWithRefs)) {
          return objectWithRefs;
        }
        const proxy2 = {};
        const keys = Object.keys(objectWithRefs);
        for (let i = 0; i < keys.length; i++) {
          proxyWithRefUnwrap(proxy2, objectWithRefs, keys[i]);
        }
        return proxy2;
      }
      function proxyWithRefUnwrap(target2, source, key) {
        Object.defineProperty(target2, key, {
          enumerable: true,
          configurable: true,
          get: () => {
            const val = source[key];
            if (isRef(val)) {
              return val.value;
            } else {
              const ob = val && val.__ob__;
              if (ob)
                ob.dep.depend();
              return val;
            }
          },
          set: (value) => {
            const oldValue = source[key];
            if (isRef(oldValue) && !isRef(value)) {
              oldValue.value = value;
            } else {
              source[key] = value;
            }
          }
        });
      }
      function customRef(factory) {
        const dep = new Dep();
        const { get: get2, set: set2 } = factory(() => {
          {
            dep.depend({
              target: ref2,
              type: "get",
              key: "value"
            });
          }
        }, () => {
          {
            dep.notify({
              target: ref2,
              type: "set",
              key: "value"
            });
          }
        });
        const ref2 = {
          get value() {
            return get2();
          },
          set value(newVal) {
            set2(newVal);
          }
        };
        def(ref2, RefFlag, true);
        return ref2;
      }
      function toRefs(object) {
        if (!isReactive(object)) {
          warn$2(`toRefs() expects a reactive object but received a plain one.`);
        }
        const ret = isArray(object) ? new Array(object.length) : {};
        for (const key in object) {
          ret[key] = toRef(object, key);
        }
        return ret;
      }
      function toRef(object, key, defaultValue) {
        const val = object[key];
        if (isRef(val)) {
          return val;
        }
        const ref2 = {
          get value() {
            const val2 = object[key];
            return val2 === void 0 ? defaultValue : val2;
          },
          set value(newVal) {
            object[key] = newVal;
          }
        };
        def(ref2, RefFlag, true);
        return ref2;
      }
      var rawToReadonlyFlag = `__v_rawToReadonly`;
      var rawToShallowReadonlyFlag = `__v_rawToShallowReadonly`;
      function readonly(target2) {
        return createReadonly(target2, false);
      }
      function createReadonly(target2, shallow) {
        if (!isPlainObject(target2)) {
          {
            if (isArray(target2)) {
              warn$2(`Vue 2 does not support readonly arrays.`);
            } else if (isCollectionType(target2)) {
              warn$2(`Vue 2 does not support readonly collection types such as Map or Set.`);
            } else {
              warn$2(`value cannot be made readonly: ${typeof target2}`);
            }
          }
          return target2;
        }
        if (isReadonly(target2)) {
          return target2;
        }
        const existingFlag = shallow ? rawToShallowReadonlyFlag : rawToReadonlyFlag;
        const existingProxy = target2[existingFlag];
        if (existingProxy) {
          return existingProxy;
        }
        const proxy2 = Object.create(Object.getPrototypeOf(target2));
        def(target2, existingFlag, proxy2);
        def(proxy2, "__v_isReadonly", true);
        def(proxy2, "__v_raw", target2);
        if (isRef(target2)) {
          def(proxy2, RefFlag, true);
        }
        if (shallow || isShallow(target2)) {
          def(proxy2, "__v_isShallow", true);
        }
        const keys = Object.keys(target2);
        for (let i = 0; i < keys.length; i++) {
          defineReadonlyProperty(proxy2, target2, keys[i], shallow);
        }
        return proxy2;
      }
      function defineReadonlyProperty(proxy2, target2, key, shallow) {
        Object.defineProperty(proxy2, key, {
          enumerable: true,
          configurable: true,
          get() {
            const val = target2[key];
            return shallow || !isPlainObject(val) ? val : readonly(val);
          },
          set() {
            warn$2(`Set operation on key "${key}" failed: target is readonly.`);
          }
        });
      }
      function shallowReadonly(target2) {
        return createReadonly(target2, true);
      }
      function computed(getterOrOptions, debugOptions) {
        let getter;
        let setter;
        const onlyGetter = isFunction(getterOrOptions);
        if (onlyGetter) {
          getter = getterOrOptions;
          setter = () => {
            warn$2("Write operation failed: computed value is readonly");
          };
        } else {
          getter = getterOrOptions.get;
          setter = getterOrOptions.set;
        }
        const watcher = isServerRendering() ? null : new Watcher(currentInstance, getter, noop, { lazy: true });
        if (watcher && debugOptions) {
          watcher.onTrack = debugOptions.onTrack;
          watcher.onTrigger = debugOptions.onTrigger;
        }
        const ref2 = {
          effect: watcher,
          get value() {
            if (watcher) {
              if (watcher.dirty) {
                watcher.evaluate();
              }
              if (Dep.target) {
                if (Dep.target.onTrack) {
                  Dep.target.onTrack({
                    effect: Dep.target,
                    target: ref2,
                    type: "get",
                    key: "value"
                  });
                }
                watcher.depend();
              }
              return watcher.value;
            } else {
              return getter();
            }
          },
          set value(newVal) {
            setter(newVal);
          }
        };
        def(ref2, RefFlag, true);
        def(ref2, "__v_isReadonly", onlyGetter);
        return ref2;
      }
      var mark;
      var measure;
      {
        const perf = inBrowser && window.performance;
        if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
          mark = (tag) => perf.mark(tag);
          measure = (name, startTag, endTag2) => {
            perf.measure(name, startTag, endTag2);
            perf.clearMarks(startTag);
            perf.clearMarks(endTag2);
          };
        }
      }
      var normalizeEvent = cached((name) => {
        const passive = name.charAt(0) === "&";
        name = passive ? name.slice(1) : name;
        const once2 = name.charAt(0) === "~";
        name = once2 ? name.slice(1) : name;
        const capture = name.charAt(0) === "!";
        name = capture ? name.slice(1) : name;
        return {
          name,
          once: once2,
          capture,
          passive
        };
      });
      function createFnInvoker(fns, vm) {
        function invoker() {
          const fns2 = invoker.fns;
          if (isArray(fns2)) {
            const cloned = fns2.slice();
            for (let i = 0; i < cloned.length; i++) {
              invokeWithErrorHandling(cloned[i], null, arguments, vm, `v-on handler`);
            }
          } else {
            return invokeWithErrorHandling(fns2, null, arguments, vm, `v-on handler`);
          }
        }
        invoker.fns = fns;
        return invoker;
      }
      function updateListeners(on2, oldOn, add2, remove2, createOnceHandler2, vm) {
        let name, cur, old, event;
        for (name in on2) {
          cur = on2[name];
          old = oldOn[name];
          event = normalizeEvent(name);
          if (isUndef(cur)) {
            warn$2(`Invalid handler for event "${event.name}": got ` + String(cur), vm);
          } else if (isUndef(old)) {
            if (isUndef(cur.fns)) {
              cur = on2[name] = createFnInvoker(cur, vm);
            }
            if (isTrue(event.once)) {
              cur = on2[name] = createOnceHandler2(event.name, cur, event.capture);
            }
            add2(event.name, cur, event.capture, event.passive, event.params);
          } else if (cur !== old) {
            old.fns = cur;
            on2[name] = old;
          }
        }
        for (name in oldOn) {
          if (isUndef(on2[name])) {
            event = normalizeEvent(name);
            remove2(event.name, oldOn[name], event.capture);
          }
        }
      }
      function mergeVNodeHook(def2, hookKey, hook) {
        if (def2 instanceof VNode) {
          def2 = def2.data.hook || (def2.data.hook = {});
        }
        let invoker;
        const oldHook = def2[hookKey];
        function wrappedHook() {
          hook.apply(this, arguments);
          remove$2(invoker.fns, wrappedHook);
        }
        if (isUndef(oldHook)) {
          invoker = createFnInvoker([wrappedHook]);
        } else {
          if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
            invoker = oldHook;
            invoker.fns.push(wrappedHook);
          } else {
            invoker = createFnInvoker([oldHook, wrappedHook]);
          }
        }
        invoker.merged = true;
        def2[hookKey] = invoker;
      }
      function extractPropsFromVNodeData(data, Ctor, tag) {
        const propOptions = Ctor.options.props;
        if (isUndef(propOptions)) {
          return;
        }
        const res = {};
        const { attrs: attrs2, props: props2 } = data;
        if (isDef(attrs2) || isDef(props2)) {
          for (const key in propOptions) {
            const altKey = hyphenate(key);
            {
              const keyInLowerCase = key.toLowerCase();
              if (key !== keyInLowerCase && attrs2 && hasOwn2(attrs2, keyInLowerCase)) {
                tip(`Prop "${keyInLowerCase}" is passed to component ${formatComponentName(
                  tag || Ctor
                )}, but the declared prop name is "${key}". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "${altKey}" instead of "${key}".`);
              }
            }
            checkProp(res, props2, key, altKey, true) || checkProp(res, attrs2, key, altKey, false);
          }
        }
        return res;
      }
      function checkProp(res, hash2, key, altKey, preserve) {
        if (isDef(hash2)) {
          if (hasOwn2(hash2, key)) {
            res[key] = hash2[key];
            if (!preserve) {
              delete hash2[key];
            }
            return true;
          } else if (hasOwn2(hash2, altKey)) {
            res[key] = hash2[altKey];
            if (!preserve) {
              delete hash2[altKey];
            }
            return true;
          }
        }
        return false;
      }
      function simpleNormalizeChildren(children) {
        for (let i = 0; i < children.length; i++) {
          if (isArray(children[i])) {
            return Array.prototype.concat.apply([], children);
          }
        }
        return children;
      }
      function normalizeChildren(children) {
        return isPrimitive(children) ? [createTextVNode(children)] : isArray(children) ? normalizeArrayChildren(children) : void 0;
      }
      function isTextNode(node) {
        return isDef(node) && isDef(node.text) && isFalse(node.isComment);
      }
      function normalizeArrayChildren(children, nestedIndex) {
        const res = [];
        let i, c, lastIndex, last;
        for (i = 0; i < children.length; i++) {
          c = children[i];
          if (isUndef(c) || typeof c === "boolean")
            continue;
          lastIndex = res.length - 1;
          last = res[lastIndex];
          if (isArray(c)) {
            if (c.length > 0) {
              c = normalizeArrayChildren(c, `${nestedIndex || ""}_${i}`);
              if (isTextNode(c[0]) && isTextNode(last)) {
                res[lastIndex] = createTextVNode(last.text + c[0].text);
                c.shift();
              }
              res.push.apply(res, c);
            }
          } else if (isPrimitive(c)) {
            if (isTextNode(last)) {
              res[lastIndex] = createTextVNode(last.text + c);
            } else if (c !== "") {
              res.push(createTextVNode(c));
            }
          } else {
            if (isTextNode(c) && isTextNode(last)) {
              res[lastIndex] = createTextVNode(last.text + c.text);
            } else {
              if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
                c.key = `__vlist${nestedIndex}_${i}__`;
              }
              res.push(c);
            }
          }
        }
        return res;
      }
      var SIMPLE_NORMALIZE = 1;
      var ALWAYS_NORMALIZE = 2;
      function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {
        if (isArray(data) || isPrimitive(data)) {
          normalizationType = children;
          children = data;
          data = void 0;
        }
        if (isTrue(alwaysNormalize)) {
          normalizationType = ALWAYS_NORMALIZE;
        }
        return _createElement(context, tag, data, children, normalizationType);
      }
      function _createElement(context, tag, data, children, normalizationType) {
        if (isDef(data) && isDef(data.__ob__)) {
          warn$2(`Avoid using observed data object as vnode data: ${JSON.stringify(data)}
Always create fresh vnode data objects in each render!`, context);
          return createEmptyVNode();
        }
        if (isDef(data) && isDef(data.is)) {
          tag = data.is;
        }
        if (!tag) {
          return createEmptyVNode();
        }
        if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
          warn$2("Avoid using non-primitive value as key, use string/number value instead.", context);
        }
        if (isArray(children) && isFunction(children[0])) {
          data = data || {};
          data.scopedSlots = { default: children[0] };
          children.length = 0;
        }
        if (normalizationType === ALWAYS_NORMALIZE) {
          children = normalizeChildren(children);
        } else if (normalizationType === SIMPLE_NORMALIZE) {
          children = simpleNormalizeChildren(children);
        }
        let vnode, ns;
        if (typeof tag === "string") {
          let Ctor;
          ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
          if (config.isReservedTag(tag)) {
            if (isDef(data) && isDef(data.nativeOn) && data.tag !== "component") {
              warn$2(`The .native modifier for v-on is only valid on components but it was used on <${tag}>.`, context);
            }
            vnode = new VNode(config.parsePlatformTagName(tag), data, children, void 0, void 0, context);
          } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, "components", tag))) {
            vnode = createComponent(Ctor, data, context, children, tag);
          } else {
            vnode = new VNode(tag, data, children, void 0, void 0, context);
          }
        } else {
          vnode = createComponent(tag, data, context, children);
        }
        if (isArray(vnode)) {
          return vnode;
        } else if (isDef(vnode)) {
          if (isDef(ns))
            applyNS(vnode, ns);
          if (isDef(data))
            registerDeepBindings(data);
          return vnode;
        } else {
          return createEmptyVNode();
        }
      }
      function applyNS(vnode, ns, force) {
        vnode.ns = ns;
        if (vnode.tag === "foreignObject") {
          ns = void 0;
          force = true;
        }
        if (isDef(vnode.children)) {
          for (let i = 0, l = vnode.children.length; i < l; i++) {
            const child = vnode.children[i];
            if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== "svg")) {
              applyNS(child, ns, force);
            }
          }
        }
      }
      function registerDeepBindings(data) {
        if (isObject3(data.style)) {
          traverse(data.style);
        }
        if (isObject3(data.class)) {
          traverse(data.class);
        }
      }
      function renderList(val, render) {
        let ret = null, i, l, keys, key;
        if (isArray(val) || typeof val === "string") {
          ret = new Array(val.length);
          for (i = 0, l = val.length; i < l; i++) {
            ret[i] = render(val[i], i);
          }
        } else if (typeof val === "number") {
          ret = new Array(val);
          for (i = 0; i < val; i++) {
            ret[i] = render(i + 1, i);
          }
        } else if (isObject3(val)) {
          if (hasSymbol && val[Symbol.iterator]) {
            ret = [];
            const iterator = val[Symbol.iterator]();
            let result2 = iterator.next();
            while (!result2.done) {
              ret.push(render(result2.value, ret.length));
              result2 = iterator.next();
            }
          } else {
            keys = Object.keys(val);
            ret = new Array(keys.length);
            for (i = 0, l = keys.length; i < l; i++) {
              key = keys[i];
              ret[i] = render(val[key], key, i);
            }
          }
        }
        if (!isDef(ret)) {
          ret = [];
        }
        ret._isVList = true;
        return ret;
      }
      function renderSlot(name, fallbackRender, props2, bindObject) {
        const scopedSlotFn = this.$scopedSlots[name];
        let nodes;
        if (scopedSlotFn) {
          props2 = props2 || {};
          if (bindObject) {
            if (!isObject3(bindObject)) {
              warn$2("slot v-bind without argument expects an Object", this);
            }
            props2 = extend(extend({}, bindObject), props2);
          }
          nodes = scopedSlotFn(props2) || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);
        } else {
          nodes = this.$slots[name] || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);
        }
        const target2 = props2 && props2.slot;
        if (target2) {
          return this.$createElement("template", { slot: target2 }, nodes);
        } else {
          return nodes;
        }
      }
      function resolveFilter(id) {
        return resolveAsset(this.$options, "filters", id, true) || identity;
      }
      function isKeyNotMatch(expect, actual) {
        if (isArray(expect)) {
          return expect.indexOf(actual) === -1;
        } else {
          return expect !== actual;
        }
      }
      function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
        const mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
        if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
          return isKeyNotMatch(builtInKeyName, eventKeyName);
        } else if (mappedKeyCode) {
          return isKeyNotMatch(mappedKeyCode, eventKeyCode);
        } else if (eventKeyName) {
          return hyphenate(eventKeyName) !== key;
        }
        return eventKeyCode === void 0;
      }
      function bindObjectProps(data, tag, value, asProp, isSync) {
        if (value) {
          if (!isObject3(value)) {
            warn$2("v-bind without argument expects an Object or Array value", this);
          } else {
            if (isArray(value)) {
              value = toObject(value);
            }
            let hash2;
            for (const key in value) {
              if (key === "class" || key === "style" || isReservedAttribute(key)) {
                hash2 = data;
              } else {
                const type = data.attrs && data.attrs.type;
                hash2 = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
              }
              const camelizedKey = camelize(key);
              const hyphenatedKey = hyphenate(key);
              if (!(camelizedKey in hash2) && !(hyphenatedKey in hash2)) {
                hash2[key] = value[key];
                if (isSync) {
                  const on2 = data.on || (data.on = {});
                  on2[`update:${key}`] = function($event) {
                    value[key] = $event;
                  };
                }
              }
            }
          }
        }
        return data;
      }
      function renderStatic(index2, isInFor) {
        const cached2 = this._staticTrees || (this._staticTrees = []);
        let tree = cached2[index2];
        if (tree && !isInFor) {
          return tree;
        }
        tree = cached2[index2] = this.$options.staticRenderFns[index2].call(
          this._renderProxy,
          this._c,
          this
        );
        markStatic$1(tree, `__static__${index2}`, false);
        return tree;
      }
      function markOnce(tree, index2, key) {
        markStatic$1(tree, `__once__${index2}${key ? `_${key}` : ``}`, true);
        return tree;
      }
      function markStatic$1(tree, key, isOnce) {
        if (isArray(tree)) {
          for (let i = 0; i < tree.length; i++) {
            if (tree[i] && typeof tree[i] !== "string") {
              markStaticNode(tree[i], `${key}_${i}`, isOnce);
            }
          }
        } else {
          markStaticNode(tree, key, isOnce);
        }
      }
      function markStaticNode(node, key, isOnce) {
        node.isStatic = true;
        node.key = key;
        node.isOnce = isOnce;
      }
      function bindObjectListeners(data, value) {
        if (value) {
          if (!isPlainObject(value)) {
            warn$2("v-on without argument expects an Object value", this);
          } else {
            const on2 = data.on = data.on ? extend({}, data.on) : {};
            for (const key in value) {
              const existing = on2[key];
              const ours = value[key];
              on2[key] = existing ? [].concat(existing, ours) : ours;
            }
          }
        }
        return data;
      }
      function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
        res = res || { $stable: !hasDynamicKeys };
        for (let i = 0; i < fns.length; i++) {
          const slot = fns[i];
          if (isArray(slot)) {
            resolveScopedSlots(slot, res, hasDynamicKeys);
          } else if (slot) {
            if (slot.proxy) {
              slot.fn.proxy = true;
            }
            res[slot.key] = slot.fn;
          }
        }
        if (contentHashKey) {
          res.$key = contentHashKey;
        }
        return res;
      }
      function bindDynamicKeys(baseObj, values) {
        for (let i = 0; i < values.length; i += 2) {
          const key = values[i];
          if (typeof key === "string" && key) {
            baseObj[values[i]] = values[i + 1];
          } else if (key !== "" && key !== null) {
            warn$2(`Invalid value for dynamic directive argument (expected string or null): ${key}`, this);
          }
        }
        return baseObj;
      }
      function prependModifier(value, symbol) {
        return typeof value === "string" ? symbol + value : value;
      }
      function installRenderHelpers(target2) {
        target2._o = markOnce;
        target2._n = toNumber;
        target2._s = toString3;
        target2._l = renderList;
        target2._t = renderSlot;
        target2._q = looseEqual;
        target2._i = looseIndexOf;
        target2._m = renderStatic;
        target2._f = resolveFilter;
        target2._k = checkKeyCodes;
        target2._b = bindObjectProps;
        target2._v = createTextVNode;
        target2._e = createEmptyVNode;
        target2._u = resolveScopedSlots;
        target2._g = bindObjectListeners;
        target2._d = bindDynamicKeys;
        target2._p = prependModifier;
      }
      function resolveSlots(children, context) {
        if (!children || !children.length) {
          return {};
        }
        const slots = {};
        for (let i = 0, l = children.length; i < l; i++) {
          const child = children[i];
          const data = child.data;
          if (data && data.attrs && data.attrs.slot) {
            delete data.attrs.slot;
          }
          if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
            const name = data.slot;
            const slot = slots[name] || (slots[name] = []);
            if (child.tag === "template") {
              slot.push.apply(slot, child.children || []);
            } else {
              slot.push(child);
            }
          } else {
            (slots.default || (slots.default = [])).push(child);
          }
        }
        for (const name in slots) {
          if (slots[name].every(isWhitespace)) {
            delete slots[name];
          }
        }
        return slots;
      }
      function isWhitespace(node) {
        return node.isComment && !node.asyncFactory || node.text === " ";
      }
      function isAsyncPlaceholder(node) {
        return node.isComment && node.asyncFactory;
      }
      function normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) {
        let res;
        const hasNormalSlots = Object.keys(normalSlots).length > 0;
        const isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots;
        const key = scopedSlots && scopedSlots.$key;
        if (!scopedSlots) {
          res = {};
        } else if (scopedSlots._normalized) {
          return scopedSlots._normalized;
        } else if (isStable && prevScopedSlots && prevScopedSlots !== emptyObject && key === prevScopedSlots.$key && !hasNormalSlots && !prevScopedSlots.$hasNormal) {
          return prevScopedSlots;
        } else {
          res = {};
          for (const key2 in scopedSlots) {
            if (scopedSlots[key2] && key2[0] !== "$") {
              res[key2] = normalizeScopedSlot(ownerVm, normalSlots, key2, scopedSlots[key2]);
            }
          }
        }
        for (const key2 in normalSlots) {
          if (!(key2 in res)) {
            res[key2] = proxyNormalSlot(normalSlots, key2);
          }
        }
        if (scopedSlots && Object.isExtensible(scopedSlots)) {
          scopedSlots._normalized = res;
        }
        def(res, "$stable", isStable);
        def(res, "$key", key);
        def(res, "$hasNormal", hasNormalSlots);
        return res;
      }
      function normalizeScopedSlot(vm, normalSlots, key, fn) {
        const normalized = function() {
          const cur = currentInstance;
          setCurrentInstance(vm);
          let res = arguments.length ? fn.apply(null, arguments) : fn({});
          res = res && typeof res === "object" && !isArray(res) ? [res] : normalizeChildren(res);
          const vnode = res && res[0];
          setCurrentInstance(cur);
          return res && (!vnode || res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) ? void 0 : res;
        };
        if (fn.proxy) {
          Object.defineProperty(normalSlots, key, {
            get: normalized,
            enumerable: true,
            configurable: true
          });
        }
        return normalized;
      }
      function proxyNormalSlot(slots, key) {
        return () => slots[key];
      }
      function initSetup(vm) {
        const options = vm.$options;
        const setup = options.setup;
        if (setup) {
          const ctx = vm._setupContext = createSetupContext(vm);
          setCurrentInstance(vm);
          pushTarget();
          const setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx], vm, `setup`);
          popTarget();
          setCurrentInstance();
          if (isFunction(setupResult)) {
            options.render = setupResult;
          } else if (isObject3(setupResult)) {
            if (setupResult instanceof VNode) {
              warn$2(`setup() should not return VNodes directly - return a render function instead.`);
            }
            vm._setupState = setupResult;
            if (!setupResult.__sfc) {
              for (const key in setupResult) {
                if (!isReserved(key)) {
                  proxyWithRefUnwrap(vm, setupResult, key);
                } else {
                  warn$2(`Avoid using variables that start with _ or $ in setup().`);
                }
              }
            } else {
              const proxy2 = vm._setupProxy = {};
              for (const key in setupResult) {
                if (key !== "__sfc") {
                  proxyWithRefUnwrap(proxy2, setupResult, key);
                }
              }
            }
          } else if (setupResult !== void 0) {
            warn$2(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
          }
        }
      }
      function createSetupContext(vm) {
        let exposeCalled = false;
        return {
          get attrs() {
            if (!vm._attrsProxy) {
              const proxy2 = vm._attrsProxy = {};
              def(proxy2, "_v_attr_proxy", true);
              syncSetupProxy(proxy2, vm.$attrs, emptyObject, vm, "$attrs");
            }
            return vm._attrsProxy;
          },
          get listeners() {
            if (!vm._listenersProxy) {
              const proxy2 = vm._listenersProxy = {};
              syncSetupProxy(proxy2, vm.$listeners, emptyObject, vm, "$listeners");
            }
            return vm._listenersProxy;
          },
          get slots() {
            return initSlotsProxy(vm);
          },
          emit: bind$1(vm.$emit, vm),
          expose(exposed) {
            {
              if (exposeCalled) {
                warn$2(`expose() should be called only once per setup().`, vm);
              }
              exposeCalled = true;
            }
            if (exposed) {
              Object.keys(exposed).forEach((key) => proxyWithRefUnwrap(vm, exposed, key));
            }
          }
        };
      }
      function syncSetupProxy(to, from2, prev, instance, type) {
        let changed = false;
        for (const key in from2) {
          if (!(key in to)) {
            changed = true;
            defineProxyAttr(to, key, instance, type);
          } else if (from2[key] !== prev[key]) {
            changed = true;
          }
        }
        for (const key in to) {
          if (!(key in from2)) {
            changed = true;
            delete to[key];
          }
        }
        return changed;
      }
      function defineProxyAttr(proxy2, key, instance, type) {
        Object.defineProperty(proxy2, key, {
          enumerable: true,
          configurable: true,
          get() {
            return instance[type][key];
          }
        });
      }
      function initSlotsProxy(vm) {
        if (!vm._slotsProxy) {
          syncSetupSlots(vm._slotsProxy = {}, vm.$scopedSlots);
        }
        return vm._slotsProxy;
      }
      function syncSetupSlots(to, from2) {
        for (const key in from2) {
          to[key] = from2[key];
        }
        for (const key in to) {
          if (!(key in from2)) {
            delete to[key];
          }
        }
      }
      function useSlots() {
        return getContext().slots;
      }
      function useAttrs() {
        return getContext().attrs;
      }
      function useListeners() {
        return getContext().listeners;
      }
      function getContext() {
        if (!currentInstance) {
          warn$2(`useContext() called without active instance.`);
        }
        const vm = currentInstance;
        return vm._setupContext || (vm._setupContext = createSetupContext(vm));
      }
      function mergeDefaults(raw, defaults) {
        const props2 = isArray(raw) ? raw.reduce((normalized, p) => (normalized[p] = {}, normalized), {}) : raw;
        for (const key in defaults) {
          const opt = props2[key];
          if (opt) {
            if (isArray(opt) || isFunction(opt)) {
              props2[key] = { type: opt, default: defaults[key] };
            } else {
              opt.default = defaults[key];
            }
          } else if (opt === null) {
            props2[key] = { default: defaults[key] };
          } else {
            warn$2(`props default key "${key}" has no corresponding declaration.`);
          }
        }
        return props2;
      }
      function initRender(vm) {
        vm._vnode = null;
        vm._staticTrees = null;
        const options = vm.$options;
        const parentVnode = vm.$vnode = options._parentVnode;
        const renderContext = parentVnode && parentVnode.context;
        vm.$slots = resolveSlots(options._renderChildren, renderContext);
        vm.$scopedSlots = parentVnode ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots) : emptyObject;
        vm._c = (a, b, c, d) => createElement$1(vm, a, b, c, d, false);
        vm.$createElement = (a, b, c, d) => createElement$1(vm, a, b, c, d, true);
        const parentData = parentVnode && parentVnode.data;
        {
          defineReactive(vm, "$attrs", parentData && parentData.attrs || emptyObject, () => {
            !isUpdatingChildComponent && warn$2(`$attrs is readonly.`, vm);
          }, true);
          defineReactive(vm, "$listeners", options._parentListeners || emptyObject, () => {
            !isUpdatingChildComponent && warn$2(`$listeners is readonly.`, vm);
          }, true);
        }
      }
      var currentRenderingInstance = null;
      function renderMixin(Vue6) {
        installRenderHelpers(Vue6.prototype);
        Vue6.prototype.$nextTick = function(fn) {
          return nextTick(fn, this);
        };
        Vue6.prototype._render = function() {
          const vm = this;
          const { render, _parentVnode } = vm.$options;
          if (_parentVnode && vm._isMounted) {
            vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
            if (vm._slotsProxy) {
              syncSetupSlots(vm._slotsProxy, vm.$scopedSlots);
            }
          }
          vm.$vnode = _parentVnode;
          let vnode;
          try {
            setCurrentInstance(vm);
            currentRenderingInstance = vm;
            vnode = render.call(vm._renderProxy, vm.$createElement);
          } catch (e) {
            handleError(e, vm, `render`);
            if (vm.$options.renderError) {
              try {
                vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
              } catch (e2) {
                handleError(e2, vm, `renderError`);
                vnode = vm._vnode;
              }
            } else {
              vnode = vm._vnode;
            }
          } finally {
            currentRenderingInstance = null;
            setCurrentInstance();
          }
          if (isArray(vnode) && vnode.length === 1) {
            vnode = vnode[0];
          }
          if (!(vnode instanceof VNode)) {
            if (isArray(vnode)) {
              warn$2("Multiple root nodes returned from render function. Render function should return a single root node.", vm);
            }
            vnode = createEmptyVNode();
          }
          vnode.parent = _parentVnode;
          return vnode;
        };
      }
      function ensureCtor(comp, base) {
        if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === "Module") {
          comp = comp.default;
        }
        return isObject3(comp) ? base.extend(comp) : comp;
      }
      function createAsyncPlaceholder(factory, data, context, children, tag) {
        const node = createEmptyVNode();
        node.asyncFactory = factory;
        node.asyncMeta = { data, context, children, tag };
        return node;
      }
      function resolveAsyncComponent(factory, baseCtor) {
        if (isTrue(factory.error) && isDef(factory.errorComp)) {
          return factory.errorComp;
        }
        if (isDef(factory.resolved)) {
          return factory.resolved;
        }
        const owner = currentRenderingInstance;
        if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
          factory.owners.push(owner);
        }
        if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
          return factory.loadingComp;
        }
        if (owner && !isDef(factory.owners)) {
          const owners = factory.owners = [owner];
          let sync = true;
          let timerLoading = null;
          let timerTimeout = null;
          owner.$on("hook:destroyed", () => remove$2(owners, owner));
          const forceRender = (renderCompleted) => {
            for (let i = 0, l = owners.length; i < l; i++) {
              owners[i].$forceUpdate();
            }
            if (renderCompleted) {
              owners.length = 0;
              if (timerLoading !== null) {
                clearTimeout(timerLoading);
                timerLoading = null;
              }
              if (timerTimeout !== null) {
                clearTimeout(timerTimeout);
                timerTimeout = null;
              }
            }
          };
          const resolve = once((res2) => {
            factory.resolved = ensureCtor(res2, baseCtor);
            if (!sync) {
              forceRender(true);
            } else {
              owners.length = 0;
            }
          });
          const reject = once((reason) => {
            warn$2(`Failed to resolve async component: ${String(factory)}` + (reason ? `
Reason: ${reason}` : ""));
            if (isDef(factory.errorComp)) {
              factory.error = true;
              forceRender(true);
            }
          });
          const res = factory(resolve, reject);
          if (isObject3(res)) {
            if (isPromise2(res)) {
              if (isUndef(factory.resolved)) {
                res.then(resolve, reject);
              }
            } else if (isPromise2(res.component)) {
              res.component.then(resolve, reject);
              if (isDef(res.error)) {
                factory.errorComp = ensureCtor(res.error, baseCtor);
              }
              if (isDef(res.loading)) {
                factory.loadingComp = ensureCtor(res.loading, baseCtor);
                if (res.delay === 0) {
                  factory.loading = true;
                } else {
                  timerLoading = setTimeout(() => {
                    timerLoading = null;
                    if (isUndef(factory.resolved) && isUndef(factory.error)) {
                      factory.loading = true;
                      forceRender(false);
                    }
                  }, res.delay || 200);
                }
              }
              if (isDef(res.timeout)) {
                timerTimeout = setTimeout(() => {
                  timerTimeout = null;
                  if (isUndef(factory.resolved)) {
                    reject(`timeout (${res.timeout}ms)`);
                  }
                }, res.timeout);
              }
            }
          }
          sync = false;
          return factory.loading ? factory.loadingComp : factory.resolved;
        }
      }
      function getFirstComponentChild(children) {
        if (isArray(children)) {
          for (let i = 0; i < children.length; i++) {
            const c = children[i];
            if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
              return c;
            }
          }
        }
      }
      function initEvents(vm) {
        vm._events = /* @__PURE__ */ Object.create(null);
        vm._hasHookEvent = false;
        const listeners = vm.$options._parentListeners;
        if (listeners) {
          updateComponentListeners(vm, listeners);
        }
      }
      var target$1;
      function add$1(event, fn) {
        target$1.$on(event, fn);
      }
      function remove$1(event, fn) {
        target$1.$off(event, fn);
      }
      function createOnceHandler$1(event, fn) {
        const _target = target$1;
        return function onceHandler() {
          const res = fn.apply(null, arguments);
          if (res !== null) {
            _target.$off(event, onceHandler);
          }
        };
      }
      function updateComponentListeners(vm, listeners, oldListeners) {
        target$1 = vm;
        updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm);
        target$1 = void 0;
      }
      function eventsMixin(Vue6) {
        const hookRE = /^hook:/;
        Vue6.prototype.$on = function(event, fn) {
          const vm = this;
          if (isArray(event)) {
            for (let i = 0, l = event.length; i < l; i++) {
              vm.$on(event[i], fn);
            }
          } else {
            (vm._events[event] || (vm._events[event] = [])).push(fn);
            if (hookRE.test(event)) {
              vm._hasHookEvent = true;
            }
          }
          return vm;
        };
        Vue6.prototype.$once = function(event, fn) {
          const vm = this;
          function on2() {
            vm.$off(event, on2);
            fn.apply(vm, arguments);
          }
          on2.fn = fn;
          vm.$on(event, on2);
          return vm;
        };
        Vue6.prototype.$off = function(event, fn) {
          const vm = this;
          if (!arguments.length) {
            vm._events = /* @__PURE__ */ Object.create(null);
            return vm;
          }
          if (isArray(event)) {
            for (let i2 = 0, l = event.length; i2 < l; i2++) {
              vm.$off(event[i2], fn);
            }
            return vm;
          }
          const cbs = vm._events[event];
          if (!cbs) {
            return vm;
          }
          if (!fn) {
            vm._events[event] = null;
            return vm;
          }
          let cb;
          let i = cbs.length;
          while (i--) {
            cb = cbs[i];
            if (cb === fn || cb.fn === fn) {
              cbs.splice(i, 1);
              break;
            }
          }
          return vm;
        };
        Vue6.prototype.$emit = function(event) {
          const vm = this;
          {
            const lowerCaseEvent = event.toLowerCase();
            if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
              tip(`Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(vm)} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(event)}" instead of "${event}".`);
            }
          }
          let cbs = vm._events[event];
          if (cbs) {
            cbs = cbs.length > 1 ? toArray(cbs) : cbs;
            const args = toArray(arguments, 1);
            const info = `event handler for "${event}"`;
            for (let i = 0, l = cbs.length; i < l; i++) {
              invokeWithErrorHandling(cbs[i], vm, args, vm, info);
            }
          }
          return vm;
        };
      }
      var activeInstance = null;
      var isUpdatingChildComponent = false;
      function setActiveInstance(vm) {
        const prevActiveInstance = activeInstance;
        activeInstance = vm;
        return () => {
          activeInstance = prevActiveInstance;
        };
      }
      function initLifecycle(vm) {
        const options = vm.$options;
        let parent = options.parent;
        if (parent && !options.abstract) {
          while (parent.$options.abstract && parent.$parent) {
            parent = parent.$parent;
          }
          parent.$children.push(vm);
        }
        vm.$parent = parent;
        vm.$root = parent ? parent.$root : vm;
        vm.$children = [];
        vm.$refs = {};
        vm._provided = parent ? parent._provided : /* @__PURE__ */ Object.create(null);
        vm._watcher = null;
        vm._inactive = null;
        vm._directInactive = false;
        vm._isMounted = false;
        vm._isDestroyed = false;
        vm._isBeingDestroyed = false;
      }
      function lifecycleMixin(Vue6) {
        Vue6.prototype._update = function(vnode, hydrating) {
          const vm = this;
          const prevEl = vm.$el;
          const prevVnode = vm._vnode;
          const restoreActiveInstance = setActiveInstance(vm);
          vm._vnode = vnode;
          if (!prevVnode) {
            vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false);
          } else {
            vm.$el = vm.__patch__(prevVnode, vnode);
          }
          restoreActiveInstance();
          if (prevEl) {
            prevEl.__vue__ = null;
          }
          if (vm.$el) {
            vm.$el.__vue__ = vm;
          }
          if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
            vm.$parent.$el = vm.$el;
          }
        };
        Vue6.prototype.$forceUpdate = function() {
          const vm = this;
          if (vm._watcher) {
            vm._watcher.update();
          }
        };
        Vue6.prototype.$destroy = function() {
          const vm = this;
          if (vm._isBeingDestroyed) {
            return;
          }
          callHook$1(vm, "beforeDestroy");
          vm._isBeingDestroyed = true;
          const parent = vm.$parent;
          if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
            remove$2(parent.$children, vm);
          }
          vm._scope.stop();
          if (vm._data.__ob__) {
            vm._data.__ob__.vmCount--;
          }
          vm._isDestroyed = true;
          vm.__patch__(vm._vnode, null);
          callHook$1(vm, "destroyed");
          vm.$off();
          if (vm.$el) {
            vm.$el.__vue__ = null;
          }
          if (vm.$vnode) {
            vm.$vnode.parent = null;
          }
        };
      }
      function mountComponent(vm, el, hydrating) {
        vm.$el = el;
        if (!vm.$options.render) {
          vm.$options.render = createEmptyVNode;
          {
            if (vm.$options.template && vm.$options.template.charAt(0) !== "#" || vm.$options.el || el) {
              warn$2("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.", vm);
            } else {
              warn$2("Failed to mount component: template or render function not defined.", vm);
            }
          }
        }
        callHook$1(vm, "beforeMount");
        let updateComponent;
        if (config.performance && mark) {
          updateComponent = () => {
            const name = vm._name;
            const id = vm._uid;
            const startTag = `vue-perf-start:${id}`;
            const endTag2 = `vue-perf-end:${id}`;
            mark(startTag);
            const vnode = vm._render();
            mark(endTag2);
            measure(`vue ${name} render`, startTag, endTag2);
            mark(startTag);
            vm._update(vnode, hydrating);
            mark(endTag2);
            measure(`vue ${name} patch`, startTag, endTag2);
          };
        } else {
          updateComponent = () => {
            vm._update(vm._render(), hydrating);
          };
        }
        const watcherOptions = {
          before() {
            if (vm._isMounted && !vm._isDestroyed) {
              callHook$1(vm, "beforeUpdate");
            }
          }
        };
        {
          watcherOptions.onTrack = (e) => callHook$1(vm, "renderTracked", [e]);
          watcherOptions.onTrigger = (e) => callHook$1(vm, "renderTriggered", [e]);
        }
        new Watcher(vm, updateComponent, noop, watcherOptions, true);
        hydrating = false;
        const preWatchers = vm._preWatchers;
        if (preWatchers) {
          for (let i = 0; i < preWatchers.length; i++) {
            preWatchers[i].run();
          }
        }
        if (vm.$vnode == null) {
          vm._isMounted = true;
          callHook$1(vm, "mounted");
        }
        return vm;
      }
      function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
        {
          isUpdatingChildComponent = true;
        }
        const newScopedSlots = parentVnode.data.scopedSlots;
        const oldScopedSlots = vm.$scopedSlots;
        const hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key || !newScopedSlots && vm.$scopedSlots.$key);
        let needsForceUpdate = !!(renderChildren || vm.$options._renderChildren || hasDynamicScopedSlot);
        const prevVNode = vm.$vnode;
        vm.$options._parentVnode = parentVnode;
        vm.$vnode = parentVnode;
        if (vm._vnode) {
          vm._vnode.parent = parentVnode;
        }
        vm.$options._renderChildren = renderChildren;
        const attrs2 = parentVnode.data.attrs || emptyObject;
        if (vm._attrsProxy) {
          if (syncSetupProxy(vm._attrsProxy, attrs2, prevVNode.data && prevVNode.data.attrs || emptyObject, vm, "$attrs")) {
            needsForceUpdate = true;
          }
        }
        vm.$attrs = attrs2;
        listeners = listeners || emptyObject;
        const prevListeners = vm.$options._parentListeners;
        if (vm._listenersProxy) {
          syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, "$listeners");
        }
        vm.$listeners = vm.$options._parentListeners = listeners;
        updateComponentListeners(vm, listeners, prevListeners);
        if (propsData && vm.$options.props) {
          toggleObserving(false);
          const props2 = vm._props;
          const propKeys = vm.$options._propKeys || [];
          for (let i = 0; i < propKeys.length; i++) {
            const key = propKeys[i];
            const propOptions = vm.$options.props;
            props2[key] = validateProp(key, propOptions, propsData, vm);
          }
          toggleObserving(true);
          vm.$options.propsData = propsData;
        }
        if (needsForceUpdate) {
          vm.$slots = resolveSlots(renderChildren, parentVnode.context);
          vm.$forceUpdate();
        }
        {
          isUpdatingChildComponent = false;
        }
      }
      function isInInactiveTree(vm) {
        while (vm && (vm = vm.$parent)) {
          if (vm._inactive)
            return true;
        }
        return false;
      }
      function activateChildComponent(vm, direct) {
        if (direct) {
          vm._directInactive = false;
          if (isInInactiveTree(vm)) {
            return;
          }
        } else if (vm._directInactive) {
          return;
        }
        if (vm._inactive || vm._inactive === null) {
          vm._inactive = false;
          for (let i = 0; i < vm.$children.length; i++) {
            activateChildComponent(vm.$children[i]);
          }
          callHook$1(vm, "activated");
        }
      }
      function deactivateChildComponent(vm, direct) {
        if (direct) {
          vm._directInactive = true;
          if (isInInactiveTree(vm)) {
            return;
          }
        }
        if (!vm._inactive) {
          vm._inactive = true;
          for (let i = 0; i < vm.$children.length; i++) {
            deactivateChildComponent(vm.$children[i]);
          }
          callHook$1(vm, "deactivated");
        }
      }
      function callHook$1(vm, hook, args, setContext = true) {
        pushTarget();
        const prev = currentInstance;
        setContext && setCurrentInstance(vm);
        const handlers = vm.$options[hook];
        const info = `${hook} hook`;
        if (handlers) {
          for (let i = 0, j = handlers.length; i < j; i++) {
            invokeWithErrorHandling(handlers[i], vm, args || null, vm, info);
          }
        }
        if (vm._hasHookEvent) {
          vm.$emit("hook:" + hook);
        }
        setContext && setCurrentInstance(prev);
        popTarget();
      }
      var MAX_UPDATE_COUNT = 100;
      var queue = [];
      var activatedChildren = [];
      var has = {};
      var circular = {};
      var waiting = false;
      var flushing = false;
      var index$1 = 0;
      function resetSchedulerState() {
        index$1 = queue.length = activatedChildren.length = 0;
        has = {};
        {
          circular = {};
        }
        waiting = flushing = false;
      }
      var currentFlushTimestamp = 0;
      var getNow = Date.now;
      if (inBrowser && !isIE) {
        const performance = window.performance;
        if (performance && typeof performance.now === "function" && getNow() > document.createEvent("Event").timeStamp) {
          getNow = () => performance.now();
        }
      }
      var sortCompareFn = (a, b) => {
        if (a.post) {
          if (!b.post)
            return 1;
        } else if (b.post) {
          return -1;
        }
        return a.id - b.id;
      };
      function flushSchedulerQueue() {
        currentFlushTimestamp = getNow();
        flushing = true;
        let watcher, id;
        queue.sort(sortCompareFn);
        for (index$1 = 0; index$1 < queue.length; index$1++) {
          watcher = queue[index$1];
          if (watcher.before) {
            watcher.before();
          }
          id = watcher.id;
          has[id] = null;
          watcher.run();
          if (has[id] != null) {
            circular[id] = (circular[id] || 0) + 1;
            if (circular[id] > MAX_UPDATE_COUNT) {
              warn$2("You may have an infinite update loop " + (watcher.user ? `in watcher with expression "${watcher.expression}"` : `in a component render function.`), watcher.vm);
              break;
            }
          }
        }
        const activatedQueue = activatedChildren.slice();
        const updatedQueue = queue.slice();
        resetSchedulerState();
        callActivatedHooks(activatedQueue);
        callUpdatedHooks(updatedQueue);
        if (devtools && config.devtools) {
          devtools.emit("flush");
        }
      }
      function callUpdatedHooks(queue2) {
        let i = queue2.length;
        while (i--) {
          const watcher = queue2[i];
          const vm = watcher.vm;
          if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
            callHook$1(vm, "updated");
          }
        }
      }
      function queueActivatedComponent(vm) {
        vm._inactive = false;
        activatedChildren.push(vm);
      }
      function callActivatedHooks(queue2) {
        for (let i = 0; i < queue2.length; i++) {
          queue2[i]._inactive = true;
          activateChildComponent(queue2[i], true);
        }
      }
      function queueWatcher(watcher) {
        const id = watcher.id;
        if (has[id] != null) {
          return;
        }
        if (watcher === Dep.target && watcher.noRecurse) {
          return;
        }
        has[id] = true;
        if (!flushing) {
          queue.push(watcher);
        } else {
          let i = queue.length - 1;
          while (i > index$1 && queue[i].id > watcher.id) {
            i--;
          }
          queue.splice(i + 1, 0, watcher);
        }
        if (!waiting) {
          waiting = true;
          if (!config.async) {
            flushSchedulerQueue();
            return;
          }
          nextTick(flushSchedulerQueue);
        }
      }
      var WATCHER = `watcher`;
      var WATCHER_CB = `${WATCHER} callback`;
      var WATCHER_GETTER = `${WATCHER} getter`;
      var WATCHER_CLEANUP = `${WATCHER} cleanup`;
      function watchEffect(effect2, options) {
        return doWatch(effect2, null, options);
      }
      function watchPostEffect(effect2, options) {
        return doWatch(effect2, null, Object.assign(Object.assign({}, options), { flush: "post" }));
      }
      function watchSyncEffect(effect2, options) {
        return doWatch(effect2, null, Object.assign(Object.assign({}, options), { flush: "sync" }));
      }
      var INITIAL_WATCHER_VALUE = {};
      function watch2(source, cb, options) {
        if (typeof cb !== "function") {
          warn$2(`\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`);
        }
        return doWatch(source, cb, options);
      }
      function doWatch(source, cb, { immediate, deep, flush = "pre", onTrack, onTrigger } = emptyObject) {
        if (!cb) {
          if (immediate !== void 0) {
            warn$2(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`);
          }
          if (deep !== void 0) {
            warn$2(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`);
          }
        }
        const warnInvalidSource = (s) => {
          warn$2(`Invalid watch source: ${s}. A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);
        };
        const instance = currentInstance;
        const call = (fn, type, args = null) => invokeWithErrorHandling(fn, null, args, instance, type);
        let getter;
        let forceTrigger = false;
        let isMultiSource = false;
        if (isRef(source)) {
          getter = () => source.value;
          forceTrigger = isShallow(source);
        } else if (isReactive(source)) {
          getter = () => {
            source.__ob__.dep.depend();
            return source;
          };
          deep = true;
        } else if (isArray(source)) {
          isMultiSource = true;
          forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
          getter = () => source.map((s) => {
            if (isRef(s)) {
              return s.value;
            } else if (isReactive(s)) {
              return traverse(s);
            } else if (isFunction(s)) {
              return call(s, WATCHER_GETTER);
            } else {
              warnInvalidSource(s);
            }
          });
        } else if (isFunction(source)) {
          if (cb) {
            getter = () => call(source, WATCHER_GETTER);
          } else {
            getter = () => {
              if (instance && instance._isDestroyed) {
                return;
              }
              if (cleanup) {
                cleanup();
              }
              return call(source, WATCHER, [onCleanup]);
            };
          }
        } else {
          getter = noop;
          warnInvalidSource(source);
        }
        if (cb && deep) {
          const baseGetter = getter;
          getter = () => traverse(baseGetter());
        }
        let cleanup;
        let onCleanup = (fn) => {
          cleanup = watcher.onStop = () => {
            call(fn, WATCHER_CLEANUP);
          };
        };
        if (isServerRendering()) {
          onCleanup = noop;
          if (!cb) {
            getter();
          } else if (immediate) {
            call(cb, WATCHER_CB, [
              getter(),
              isMultiSource ? [] : void 0,
              onCleanup
            ]);
          }
          return noop;
        }
        const watcher = new Watcher(currentInstance, getter, noop, {
          lazy: true
        });
        watcher.noRecurse = !cb;
        let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
        watcher.run = () => {
          if (!watcher.active && !(flush === "pre" && instance && instance._isBeingDestroyed)) {
            return;
          }
          if (cb) {
            const newValue = watcher.get();
            if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue))) {
              if (cleanup) {
                cleanup();
              }
              call(cb, WATCHER_CB, [
                newValue,
                oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
                onCleanup
              ]);
              oldValue = newValue;
            }
          } else {
            watcher.get();
          }
        };
        if (flush === "sync") {
          watcher.update = watcher.run;
        } else if (flush === "post") {
          watcher.post = true;
          watcher.update = () => queueWatcher(watcher);
        } else {
          watcher.update = () => {
            if (instance && instance === currentInstance && !instance._isMounted) {
              const buffer = instance._preWatchers || (instance._preWatchers = []);
              if (buffer.indexOf(watcher) < 0)
                buffer.push(watcher);
            } else {
              queueWatcher(watcher);
            }
          };
        }
        {
          watcher.onTrack = onTrack;
          watcher.onTrigger = onTrigger;
        }
        if (cb) {
          if (immediate) {
            watcher.run();
          } else {
            oldValue = watcher.get();
          }
        } else if (flush === "post" && instance) {
          instance.$once("hook:mounted", () => watcher.get());
        } else {
          watcher.get();
        }
        return () => {
          watcher.teardown();
        };
      }
      var activeEffectScope;
      var EffectScope = class {
        constructor(detached = false) {
          this.active = true;
          this.effects = [];
          this.cleanups = [];
          if (!detached && activeEffectScope) {
            this.parent = activeEffectScope;
            this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
          }
        }
        run(fn) {
          if (this.active) {
            const currentEffectScope = activeEffectScope;
            try {
              activeEffectScope = this;
              return fn();
            } finally {
              activeEffectScope = currentEffectScope;
            }
          } else {
            warn$2(`cannot run an inactive effect scope.`);
          }
        }
        on() {
          activeEffectScope = this;
        }
        off() {
          activeEffectScope = this.parent;
        }
        stop(fromParent) {
          if (this.active) {
            let i, l;
            for (i = 0, l = this.effects.length; i < l; i++) {
              this.effects[i].teardown();
            }
            for (i = 0, l = this.cleanups.length; i < l; i++) {
              this.cleanups[i]();
            }
            if (this.scopes) {
              for (i = 0, l = this.scopes.length; i < l; i++) {
                this.scopes[i].stop(true);
              }
            }
            if (this.parent && !fromParent) {
              const last = this.parent.scopes.pop();
              if (last && last !== this) {
                this.parent.scopes[this.index] = last;
                last.index = this.index;
              }
            }
            this.active = false;
          }
        }
      };
      function effectScope(detached) {
        return new EffectScope(detached);
      }
      function recordEffectScope(effect2, scope = activeEffectScope) {
        if (scope && scope.active) {
          scope.effects.push(effect2);
        }
      }
      function getCurrentScope() {
        return activeEffectScope;
      }
      function onScopeDispose(fn) {
        if (activeEffectScope) {
          activeEffectScope.cleanups.push(fn);
        } else {
          warn$2(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
        }
      }
      function provide(key, value) {
        if (!currentInstance) {
          {
            warn$2(`provide() can only be used inside setup().`);
          }
        } else {
          resolveProvided(currentInstance)[key] = value;
        }
      }
      function resolveProvided(vm) {
        const existing = vm._provided;
        const parentProvides = vm.$parent && vm.$parent._provided;
        if (parentProvides === existing) {
          return vm._provided = Object.create(parentProvides);
        } else {
          return existing;
        }
      }
      function inject(key, defaultValue, treatDefaultAsFactory = false) {
        const instance = currentInstance;
        if (instance) {
          const provides = instance.$parent && instance.$parent._provided;
          if (provides && key in provides) {
            return provides[key];
          } else if (arguments.length > 1) {
            return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance) : defaultValue;
          } else {
            warn$2(`injection "${String(key)}" not found.`);
          }
        } else {
          warn$2(`inject() can only be used inside setup() or functional components.`);
        }
      }
      function h(type, props2, children) {
        if (!currentInstance) {
          warn$2(`globally imported h() can only be invoked when there is an active component instance, e.g. synchronously in a component's render or setup function.`);
        }
        return createElement$1(currentInstance, type, props2, children, 2, true);
      }
      function handleError(err, vm, info) {
        pushTarget();
        try {
          if (vm) {
            let cur = vm;
            while (cur = cur.$parent) {
              const hooks2 = cur.$options.errorCaptured;
              if (hooks2) {
                for (let i = 0; i < hooks2.length; i++) {
                  try {
                    const capture = hooks2[i].call(cur, err, vm, info) === false;
                    if (capture)
                      return;
                  } catch (e) {
                    globalHandleError(e, cur, "errorCaptured hook");
                  }
                }
              }
            }
          }
          globalHandleError(err, vm, info);
        } finally {
          popTarget();
        }
      }
      function invokeWithErrorHandling(handler, context, args, vm, info) {
        let res;
        try {
          res = args ? handler.apply(context, args) : handler.call(context);
          if (res && !res._isVue && isPromise2(res) && !res._handled) {
            res.catch((e) => handleError(e, vm, info + ` (Promise/async)`));
            res._handled = true;
          }
        } catch (e) {
          handleError(e, vm, info);
        }
        return res;
      }
      function globalHandleError(err, vm, info) {
        if (config.errorHandler) {
          try {
            return config.errorHandler.call(null, err, vm, info);
          } catch (e) {
            if (e !== err) {
              logError(e, null, "config.errorHandler");
            }
          }
        }
        logError(err, vm, info);
      }
      function logError(err, vm, info) {
        {
          warn$2(`Error in ${info}: "${err.toString()}"`, vm);
        }
        if (inBrowser && typeof console !== "undefined") {
          console.error(err);
        } else {
          throw err;
        }
      }
      var isUsingMicroTask = false;
      var callbacks = [];
      var pending = false;
      function flushCallbacks() {
        pending = false;
        const copies = callbacks.slice(0);
        callbacks.length = 0;
        for (let i = 0; i < copies.length; i++) {
          copies[i]();
        }
      }
      var timerFunc;
      if (typeof Promise !== "undefined" && isNative(Promise)) {
        const p = Promise.resolve();
        timerFunc = () => {
          p.then(flushCallbacks);
          if (isIOS)
            setTimeout(noop);
        };
        isUsingMicroTask = true;
      } else if (!isIE && typeof MutationObserver !== "undefined" && (isNative(MutationObserver) || MutationObserver.toString() === "[object MutationObserverConstructor]")) {
        let counter = 1;
        const observer = new MutationObserver(flushCallbacks);
        const textNode = document.createTextNode(String(counter));
        observer.observe(textNode, {
          characterData: true
        });
        timerFunc = () => {
          counter = (counter + 1) % 2;
          textNode.data = String(counter);
        };
        isUsingMicroTask = true;
      } else if (typeof setImmediate !== "undefined" && isNative(setImmediate)) {
        timerFunc = () => {
          setImmediate(flushCallbacks);
        };
      } else {
        timerFunc = () => {
          setTimeout(flushCallbacks, 0);
        };
      }
      function nextTick(cb, ctx) {
        let _resolve;
        callbacks.push(() => {
          if (cb) {
            try {
              cb.call(ctx);
            } catch (e) {
              handleError(e, ctx, "nextTick");
            }
          } else if (_resolve) {
            _resolve(ctx);
          }
        });
        if (!pending) {
          pending = true;
          timerFunc();
        }
        if (!cb && typeof Promise !== "undefined") {
          return new Promise((resolve) => {
            _resolve = resolve;
          });
        }
      }
      function useCssModule(name = "$style") {
        {
          if (!currentInstance) {
            warn$2(`useCssModule must be called inside setup()`);
            return emptyObject;
          }
          const mod = currentInstance[name];
          if (!mod) {
            warn$2(`Current instance does not have CSS module named "${name}".`);
            return emptyObject;
          }
          return mod;
        }
      }
      function useCssVars(getter) {
        if (!inBrowser && true)
          return;
        const instance = currentInstance;
        if (!instance) {
          warn$2(`useCssVars is called without current active component instance.`);
          return;
        }
        watchPostEffect(() => {
          const el = instance.$el;
          const vars = getter(instance, instance._setupProxy);
          if (el && el.nodeType === 1) {
            const style2 = el.style;
            for (const key in vars) {
              style2.setProperty(`--${key}`, vars[key]);
            }
          }
        });
      }
      function defineAsyncComponent(source) {
        if (isFunction(source)) {
          source = { loader: source };
        }
        const {
          loader,
          loadingComponent,
          errorComponent,
          delay = 200,
          timeout,
          suspensible = false,
          onError: userOnError
        } = source;
        if (suspensible) {
          warn$2(`The suspensiblbe option for async components is not supported in Vue2. It is ignored.`);
        }
        let pendingRequest = null;
        let retries = 0;
        const retry = () => {
          retries++;
          pendingRequest = null;
          return load();
        };
        const load = () => {
          let thisRequest;
          return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) {
              return new Promise((resolve, reject) => {
                const userRetry = () => resolve(retry());
                const userFail = () => reject(err);
                userOnError(err, userRetry, userFail, retries + 1);
              });
            } else {
              throw err;
            }
          }).then((comp) => {
            if (thisRequest !== pendingRequest && pendingRequest) {
              return pendingRequest;
            }
            if (!comp) {
              warn$2(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);
            }
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
              comp = comp.default;
            }
            if (comp && !isObject3(comp) && !isFunction(comp)) {
              throw new Error(`Invalid async component load result: ${comp}`);
            }
            return comp;
          }));
        };
        return () => {
          const component = load();
          return {
            component,
            delay,
            timeout,
            error: errorComponent,
            loading: loadingComponent
          };
        };
      }
      function createLifeCycle(hookName) {
        return (fn, target2 = currentInstance) => {
          if (!target2) {
            warn$2(`${formatName(hookName)} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().`);
            return;
          }
          return injectHook(target2, hookName, fn);
        };
      }
      function formatName(name) {
        if (name === "beforeDestroy") {
          name = "beforeUnmount";
        } else if (name === "destroyed") {
          name = "unmounted";
        }
        return `on${name[0].toUpperCase() + name.slice(1)}`;
      }
      function injectHook(instance, hookName, fn) {
        const options = instance.$options;
        options[hookName] = mergeLifecycleHook(options[hookName], fn);
      }
      var onBeforeMount = createLifeCycle("beforeMount");
      var onMounted = createLifeCycle("mounted");
      var onBeforeUpdate = createLifeCycle("beforeUpdate");
      var onUpdated = createLifeCycle("updated");
      var onBeforeUnmount = createLifeCycle("beforeDestroy");
      var onUnmounted = createLifeCycle("destroyed");
      var onErrorCaptured = createLifeCycle("errorCaptured");
      var onActivated = createLifeCycle("activated");
      var onDeactivated = createLifeCycle("deactivated");
      var onServerPrefetch = createLifeCycle("serverPrefetch");
      var onRenderTracked = createLifeCycle("renderTracked");
      var onRenderTriggered = createLifeCycle("renderTriggered");
      var version2 = "2.7.8";
      function defineComponent(options) {
        return options;
      }
      var vca = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        version: version2,
        defineComponent,
        ref: ref$1,
        shallowRef,
        isRef,
        toRef,
        toRefs,
        unref,
        proxyRefs,
        customRef,
        triggerRef,
        reactive,
        isReactive,
        isReadonly,
        isShallow,
        isProxy,
        shallowReactive,
        markRaw,
        toRaw,
        readonly,
        shallowReadonly,
        computed,
        watch: watch2,
        watchEffect,
        watchPostEffect,
        watchSyncEffect,
        EffectScope,
        effectScope,
        onScopeDispose,
        getCurrentScope,
        provide,
        inject,
        h,
        getCurrentInstance,
        useSlots,
        useAttrs,
        useListeners,
        mergeDefaults,
        nextTick,
        set,
        del,
        useCssModule,
        useCssVars,
        defineAsyncComponent,
        onBeforeMount,
        onMounted,
        onBeforeUpdate,
        onUpdated,
        onBeforeUnmount,
        onUnmounted,
        onErrorCaptured,
        onActivated,
        onDeactivated,
        onServerPrefetch,
        onRenderTracked,
        onRenderTriggered
      });
      var seenObjects = new _Set();
      function traverse(val) {
        _traverse(val, seenObjects);
        seenObjects.clear();
        return val;
      }
      function _traverse(val, seen) {
        let i, keys;
        const isA = isArray(val);
        if (!isA && !isObject3(val) || Object.isFrozen(val) || val instanceof VNode) {
          return;
        }
        if (val.__ob__) {
          const depId = val.__ob__.dep.id;
          if (seen.has(depId)) {
            return;
          }
          seen.add(depId);
        }
        if (isA) {
          i = val.length;
          while (i--)
            _traverse(val[i], seen);
        } else if (isRef(val)) {
          _traverse(val.value, seen);
        } else {
          keys = Object.keys(val);
          i = keys.length;
          while (i--)
            _traverse(val[keys[i]], seen);
        }
      }
      var uid$1 = 0;
      var Watcher = class {
        constructor(vm, expOrFn, cb, options, isRenderWatcher) {
          recordEffectScope(this, activeEffectScope || (vm ? vm._scope : void 0));
          if (this.vm = vm) {
            if (isRenderWatcher) {
              vm._watcher = this;
            }
          }
          if (options) {
            this.deep = !!options.deep;
            this.user = !!options.user;
            this.lazy = !!options.lazy;
            this.sync = !!options.sync;
            this.before = options.before;
            {
              this.onTrack = options.onTrack;
              this.onTrigger = options.onTrigger;
            }
          } else {
            this.deep = this.user = this.lazy = this.sync = false;
          }
          this.cb = cb;
          this.id = ++uid$1;
          this.active = true;
          this.post = false;
          this.dirty = this.lazy;
          this.deps = [];
          this.newDeps = [];
          this.depIds = new _Set();
          this.newDepIds = new _Set();
          this.expression = expOrFn.toString();
          if (isFunction(expOrFn)) {
            this.getter = expOrFn;
          } else {
            this.getter = parsePath(expOrFn);
            if (!this.getter) {
              this.getter = noop;
              warn$2(`Failed watching path: "${expOrFn}" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.`, vm);
            }
          }
          this.value = this.lazy ? void 0 : this.get();
        }
        get() {
          pushTarget(this);
          let value;
          const vm = this.vm;
          try {
            value = this.getter.call(vm, vm);
          } catch (e) {
            if (this.user) {
              handleError(e, vm, `getter for watcher "${this.expression}"`);
            } else {
              throw e;
            }
          } finally {
            if (this.deep) {
              traverse(value);
            }
            popTarget();
            this.cleanupDeps();
          }
          return value;
        }
        addDep(dep) {
          const id = dep.id;
          if (!this.newDepIds.has(id)) {
            this.newDepIds.add(id);
            this.newDeps.push(dep);
            if (!this.depIds.has(id)) {
              dep.addSub(this);
            }
          }
        }
        cleanupDeps() {
          let i = this.deps.length;
          while (i--) {
            const dep = this.deps[i];
            if (!this.newDepIds.has(dep.id)) {
              dep.removeSub(this);
            }
          }
          let tmp = this.depIds;
          this.depIds = this.newDepIds;
          this.newDepIds = tmp;
          this.newDepIds.clear();
          tmp = this.deps;
          this.deps = this.newDeps;
          this.newDeps = tmp;
          this.newDeps.length = 0;
        }
        update() {
          if (this.lazy) {
            this.dirty = true;
          } else if (this.sync) {
            this.run();
          } else {
            queueWatcher(this);
          }
        }
        run() {
          if (this.active) {
            const value = this.get();
            if (value !== this.value || isObject3(value) || this.deep) {
              const oldValue = this.value;
              this.value = value;
              if (this.user) {
                const info = `callback for watcher "${this.expression}"`;
                invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
              } else {
                this.cb.call(this.vm, value, oldValue);
              }
            }
          }
        }
        evaluate() {
          this.value = this.get();
          this.dirty = false;
        }
        depend() {
          let i = this.deps.length;
          while (i--) {
            this.deps[i].depend();
          }
        }
        teardown() {
          if (this.vm && !this.vm._isBeingDestroyed) {
            remove$2(this.vm._scope.effects, this);
          }
          if (this.active) {
            let i = this.deps.length;
            while (i--) {
              this.deps[i].removeSub(this);
            }
            this.active = false;
            if (this.onStop) {
              this.onStop();
            }
          }
        }
      };
      var sharedPropertyDefinition = {
        enumerable: true,
        configurable: true,
        get: noop,
        set: noop
      };
      function proxy(target2, sourceKey, key) {
        sharedPropertyDefinition.get = function proxyGetter() {
          return this[sourceKey][key];
        };
        sharedPropertyDefinition.set = function proxySetter(val) {
          this[sourceKey][key] = val;
        };
        Object.defineProperty(target2, key, sharedPropertyDefinition);
      }
      function initState(vm) {
        const opts = vm.$options;
        if (opts.props)
          initProps$1(vm, opts.props);
        initSetup(vm);
        if (opts.methods)
          initMethods(vm, opts.methods);
        if (opts.data) {
          initData(vm);
        } else {
          const ob = observe(vm._data = {});
          ob && ob.vmCount++;
        }
        if (opts.computed)
          initComputed$1(vm, opts.computed);
        if (opts.watch && opts.watch !== nativeWatch) {
          initWatch(vm, opts.watch);
        }
      }
      function initProps$1(vm, propsOptions) {
        const propsData = vm.$options.propsData || {};
        const props2 = vm._props = shallowReactive({});
        const keys = vm.$options._propKeys = [];
        const isRoot = !vm.$parent;
        if (!isRoot) {
          toggleObserving(false);
        }
        for (const key in propsOptions) {
          keys.push(key);
          const value = validateProp(key, propsOptions, propsData, vm);
          {
            const hyphenatedKey = hyphenate(key);
            if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
              warn$2(`"${hyphenatedKey}" is a reserved attribute and cannot be used as component prop.`, vm);
            }
            defineReactive(props2, key, value, () => {
              if (!isRoot && !isUpdatingChildComponent) {
                warn$2(`Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: "${key}"`, vm);
              }
            });
          }
          if (!(key in vm)) {
            proxy(vm, `_props`, key);
          }
        }
        toggleObserving(true);
      }
      function initData(vm) {
        let data = vm.$options.data;
        data = vm._data = isFunction(data) ? getData(data, vm) : data || {};
        if (!isPlainObject(data)) {
          data = {};
          warn$2("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function", vm);
        }
        const keys = Object.keys(data);
        const props2 = vm.$options.props;
        const methods = vm.$options.methods;
        let i = keys.length;
        while (i--) {
          const key = keys[i];
          {
            if (methods && hasOwn2(methods, key)) {
              warn$2(`Method "${key}" has already been defined as a data property.`, vm);
            }
          }
          if (props2 && hasOwn2(props2, key)) {
            warn$2(`The data property "${key}" is already declared as a prop. Use prop default value instead.`, vm);
          } else if (!isReserved(key)) {
            proxy(vm, `_data`, key);
          }
        }
        const ob = observe(data);
        ob && ob.vmCount++;
      }
      function getData(data, vm) {
        pushTarget();
        try {
          return data.call(vm, vm);
        } catch (e) {
          handleError(e, vm, `data()`);
          return {};
        } finally {
          popTarget();
        }
      }
      var computedWatcherOptions = { lazy: true };
      function initComputed$1(vm, computed2) {
        const watchers = vm._computedWatchers = /* @__PURE__ */ Object.create(null);
        const isSSR = isServerRendering();
        for (const key in computed2) {
          const userDef = computed2[key];
          const getter = isFunction(userDef) ? userDef : userDef.get;
          if (getter == null) {
            warn$2(`Getter is missing for computed property "${key}".`, vm);
          }
          if (!isSSR) {
            watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
          }
          if (!(key in vm)) {
            defineComputed(vm, key, userDef);
          } else {
            if (key in vm.$data) {
              warn$2(`The computed property "${key}" is already defined in data.`, vm);
            } else if (vm.$options.props && key in vm.$options.props) {
              warn$2(`The computed property "${key}" is already defined as a prop.`, vm);
            } else if (vm.$options.methods && key in vm.$options.methods) {
              warn$2(`The computed property "${key}" is already defined as a method.`, vm);
            }
          }
        }
      }
      function defineComputed(target2, key, userDef) {
        const shouldCache = !isServerRendering();
        if (isFunction(userDef)) {
          sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
          sharedPropertyDefinition.set = noop;
        } else {
          sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
          sharedPropertyDefinition.set = userDef.set || noop;
        }
        if (sharedPropertyDefinition.set === noop) {
          sharedPropertyDefinition.set = function() {
            warn$2(`Computed property "${key}" was assigned to but it has no setter.`, this);
          };
        }
        Object.defineProperty(target2, key, sharedPropertyDefinition);
      }
      function createComputedGetter(key) {
        return function computedGetter() {
          const watcher = this._computedWatchers && this._computedWatchers[key];
          if (watcher) {
            if (watcher.dirty) {
              watcher.evaluate();
            }
            if (Dep.target) {
              if (Dep.target.onTrack) {
                Dep.target.onTrack({
                  effect: Dep.target,
                  target: this,
                  type: "get",
                  key
                });
              }
              watcher.depend();
            }
            return watcher.value;
          }
        };
      }
      function createGetterInvoker(fn) {
        return function computedGetter() {
          return fn.call(this, this);
        };
      }
      function initMethods(vm, methods) {
        const props2 = vm.$options.props;
        for (const key in methods) {
          {
            if (typeof methods[key] !== "function") {
              warn$2(`Method "${key}" has type "${typeof methods[key]}" in the component definition. Did you reference the function correctly?`, vm);
            }
            if (props2 && hasOwn2(props2, key)) {
              warn$2(`Method "${key}" has already been defined as a prop.`, vm);
            }
            if (key in vm && isReserved(key)) {
              warn$2(`Method "${key}" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.`);
            }
          }
          vm[key] = typeof methods[key] !== "function" ? noop : bind$1(methods[key], vm);
        }
      }
      function initWatch(vm, watch3) {
        for (const key in watch3) {
          const handler = watch3[key];
          if (isArray(handler)) {
            for (let i = 0; i < handler.length; i++) {
              createWatcher(vm, key, handler[i]);
            }
          } else {
            createWatcher(vm, key, handler);
          }
        }
      }
      function createWatcher(vm, expOrFn, handler, options) {
        if (isPlainObject(handler)) {
          options = handler;
          handler = handler.handler;
        }
        if (typeof handler === "string") {
          handler = vm[handler];
        }
        return vm.$watch(expOrFn, handler, options);
      }
      function stateMixin(Vue6) {
        const dataDef = {};
        dataDef.get = function() {
          return this._data;
        };
        const propsDef = {};
        propsDef.get = function() {
          return this._props;
        };
        {
          dataDef.set = function() {
            warn$2("Avoid replacing instance root $data. Use nested data properties instead.", this);
          };
          propsDef.set = function() {
            warn$2(`$props is readonly.`, this);
          };
        }
        Object.defineProperty(Vue6.prototype, "$data", dataDef);
        Object.defineProperty(Vue6.prototype, "$props", propsDef);
        Vue6.prototype.$set = set;
        Vue6.prototype.$delete = del;
        Vue6.prototype.$watch = function(expOrFn, cb, options) {
          const vm = this;
          if (isPlainObject(cb)) {
            return createWatcher(vm, expOrFn, cb, options);
          }
          options = options || {};
          options.user = true;
          const watcher = new Watcher(vm, expOrFn, cb, options);
          if (options.immediate) {
            const info = `callback for immediate watcher "${watcher.expression}"`;
            pushTarget();
            invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
            popTarget();
          }
          return function unwatchFn() {
            watcher.teardown();
          };
        };
      }
      function initProvide(vm) {
        const provideOption = vm.$options.provide;
        if (provideOption) {
          const provided = isFunction(provideOption) ? provideOption.call(vm) : provideOption;
          if (!isObject3(provided)) {
            return;
          }
          const source = resolveProvided(vm);
          const keys = hasSymbol ? Reflect.ownKeys(provided) : Object.keys(provided);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key));
          }
        }
      }
      function initInjections(vm) {
        const result2 = resolveInject(vm.$options.inject, vm);
        if (result2) {
          toggleObserving(false);
          Object.keys(result2).forEach((key) => {
            {
              defineReactive(vm, key, result2[key], () => {
                warn$2(`Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "${key}"`, vm);
              });
            }
          });
          toggleObserving(true);
        }
      }
      function resolveInject(inject2, vm) {
        if (inject2) {
          const result2 = /* @__PURE__ */ Object.create(null);
          const keys = hasSymbol ? Reflect.ownKeys(inject2) : Object.keys(inject2);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (key === "__ob__")
              continue;
            const provideKey = inject2[key].from;
            if (provideKey in vm._provided) {
              result2[key] = vm._provided[provideKey];
            } else if ("default" in inject2[key]) {
              const provideDefault = inject2[key].default;
              result2[key] = isFunction(provideDefault) ? provideDefault.call(vm) : provideDefault;
            } else {
              warn$2(`Injection "${key}" not found`, vm);
            }
          }
          return result2;
        }
      }
      var uid = 0;
      function initMixin$1(Vue6) {
        Vue6.prototype._init = function(options) {
          const vm = this;
          vm._uid = uid++;
          let startTag, endTag2;
          if (config.performance && mark) {
            startTag = `vue-perf-start:${vm._uid}`;
            endTag2 = `vue-perf-end:${vm._uid}`;
            mark(startTag);
          }
          vm._isVue = true;
          vm.__v_skip = true;
          vm._scope = new EffectScope(true);
          if (options && options._isComponent) {
            initInternalComponent(vm, options);
          } else {
            vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
          }
          {
            initProxy(vm);
          }
          vm._self = vm;
          initLifecycle(vm);
          initEvents(vm);
          initRender(vm);
          callHook$1(vm, "beforeCreate", void 0, false);
          initInjections(vm);
          initState(vm);
          initProvide(vm);
          callHook$1(vm, "created");
          if (config.performance && mark) {
            vm._name = formatComponentName(vm, false);
            mark(endTag2);
            measure(`vue ${vm._name} init`, startTag, endTag2);
          }
          if (vm.$options.el) {
            vm.$mount(vm.$options.el);
          }
        };
      }
      function initInternalComponent(vm, options) {
        const opts = vm.$options = Object.create(vm.constructor.options);
        const parentVnode = options._parentVnode;
        opts.parent = options.parent;
        opts._parentVnode = parentVnode;
        const vnodeComponentOptions = parentVnode.componentOptions;
        opts.propsData = vnodeComponentOptions.propsData;
        opts._parentListeners = vnodeComponentOptions.listeners;
        opts._renderChildren = vnodeComponentOptions.children;
        opts._componentTag = vnodeComponentOptions.tag;
        if (options.render) {
          opts.render = options.render;
          opts.staticRenderFns = options.staticRenderFns;
        }
      }
      function resolveConstructorOptions(Ctor) {
        let options = Ctor.options;
        if (Ctor.super) {
          const superOptions = resolveConstructorOptions(Ctor.super);
          const cachedSuperOptions = Ctor.superOptions;
          if (superOptions !== cachedSuperOptions) {
            Ctor.superOptions = superOptions;
            const modifiedOptions = resolveModifiedOptions(Ctor);
            if (modifiedOptions) {
              extend(Ctor.extendOptions, modifiedOptions);
            }
            options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
            if (options.name) {
              options.components[options.name] = Ctor;
            }
          }
        }
        return options;
      }
      function resolveModifiedOptions(Ctor) {
        let modified;
        const latest = Ctor.options;
        const sealed = Ctor.sealedOptions;
        for (const key in latest) {
          if (latest[key] !== sealed[key]) {
            if (!modified)
              modified = {};
            modified[key] = latest[key];
          }
        }
        return modified;
      }
      function FunctionalRenderContext(data, props2, children, parent, Ctor) {
        const options = Ctor.options;
        let contextVm;
        if (hasOwn2(parent, "_uid")) {
          contextVm = Object.create(parent);
          contextVm._original = parent;
        } else {
          contextVm = parent;
          parent = parent._original;
        }
        const isCompiled = isTrue(options._compiled);
        const needNormalization = !isCompiled;
        this.data = data;
        this.props = props2;
        this.children = children;
        this.parent = parent;
        this.listeners = data.on || emptyObject;
        this.injections = resolveInject(options.inject, parent);
        this.slots = () => {
          if (!this.$slots) {
            normalizeScopedSlots(parent, data.scopedSlots, this.$slots = resolveSlots(children, parent));
          }
          return this.$slots;
        };
        Object.defineProperty(this, "scopedSlots", {
          enumerable: true,
          get() {
            return normalizeScopedSlots(parent, data.scopedSlots, this.slots());
          }
        });
        if (isCompiled) {
          this.$options = options;
          this.$slots = this.slots();
          this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots);
        }
        if (options._scopeId) {
          this._c = (a, b, c, d) => {
            const vnode = createElement$1(contextVm, a, b, c, d, needNormalization);
            if (vnode && !isArray(vnode)) {
              vnode.fnScopeId = options._scopeId;
              vnode.fnContext = parent;
            }
            return vnode;
          };
        } else {
          this._c = (a, b, c, d) => createElement$1(contextVm, a, b, c, d, needNormalization);
        }
      }
      installRenderHelpers(FunctionalRenderContext.prototype);
      function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
        const options = Ctor.options;
        const props2 = {};
        const propOptions = options.props;
        if (isDef(propOptions)) {
          for (const key in propOptions) {
            props2[key] = validateProp(key, propOptions, propsData || emptyObject);
          }
        } else {
          if (isDef(data.attrs))
            mergeProps(props2, data.attrs);
          if (isDef(data.props))
            mergeProps(props2, data.props);
        }
        const renderContext = new FunctionalRenderContext(data, props2, children, contextVm, Ctor);
        const vnode = options.render.call(null, renderContext._c, renderContext);
        if (vnode instanceof VNode) {
          return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
        } else if (isArray(vnode)) {
          const vnodes = normalizeChildren(vnode) || [];
          const res = new Array(vnodes.length);
          for (let i = 0; i < vnodes.length; i++) {
            res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
          }
          return res;
        }
      }
      function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
        const clone = cloneVNode(vnode);
        clone.fnContext = contextVm;
        clone.fnOptions = options;
        {
          (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
        }
        if (data.slot) {
          (clone.data || (clone.data = {})).slot = data.slot;
        }
        return clone;
      }
      function mergeProps(to, from2) {
        for (const key in from2) {
          to[camelize(key)] = from2[key];
        }
      }
      function getComponentName(options) {
        return options.name || options.__name || options._componentTag;
      }
      var componentVNodeHooks = {
        init(vnode, hydrating) {
          if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
            const mountedNode = vnode;
            componentVNodeHooks.prepatch(mountedNode, mountedNode);
          } else {
            const child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
            child.$mount(hydrating ? vnode.elm : void 0, hydrating);
          }
        },
        prepatch(oldVnode, vnode) {
          const options = vnode.componentOptions;
          const child = vnode.componentInstance = oldVnode.componentInstance;
          updateChildComponent(
            child,
            options.propsData,
            options.listeners,
            vnode,
            options.children
          );
        },
        insert(vnode) {
          const { context, componentInstance } = vnode;
          if (!componentInstance._isMounted) {
            componentInstance._isMounted = true;
            callHook$1(componentInstance, "mounted");
          }
          if (vnode.data.keepAlive) {
            if (context._isMounted) {
              queueActivatedComponent(componentInstance);
            } else {
              activateChildComponent(componentInstance, true);
            }
          }
        },
        destroy(vnode) {
          const { componentInstance } = vnode;
          if (!componentInstance._isDestroyed) {
            if (!vnode.data.keepAlive) {
              componentInstance.$destroy();
            } else {
              deactivateChildComponent(componentInstance, true);
            }
          }
        }
      };
      var hooksToMerge = Object.keys(componentVNodeHooks);
      function createComponent(Ctor, data, context, children, tag) {
        if (isUndef(Ctor)) {
          return;
        }
        const baseCtor = context.$options._base;
        if (isObject3(Ctor)) {
          Ctor = baseCtor.extend(Ctor);
        }
        if (typeof Ctor !== "function") {
          {
            warn$2(`Invalid Component definition: ${String(Ctor)}`, context);
          }
          return;
        }
        let asyncFactory;
        if (isUndef(Ctor.cid)) {
          asyncFactory = Ctor;
          Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
          if (Ctor === void 0) {
            return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
          }
        }
        data = data || {};
        resolveConstructorOptions(Ctor);
        if (isDef(data.model)) {
          transformModel(Ctor.options, data);
        }
        const propsData = extractPropsFromVNodeData(data, Ctor, tag);
        if (isTrue(Ctor.options.functional)) {
          return createFunctionalComponent(Ctor, propsData, data, context, children);
        }
        const listeners = data.on;
        data.on = data.nativeOn;
        if (isTrue(Ctor.options.abstract)) {
          const slot = data.slot;
          data = {};
          if (slot) {
            data.slot = slot;
          }
        }
        installComponentHooks(data);
        const name = getComponentName(Ctor.options) || tag;
        const vnode = new VNode(
          `vue-component-${Ctor.cid}${name ? `-${name}` : ""}`,
          data,
          void 0,
          void 0,
          void 0,
          context,
          { Ctor, propsData, listeners, tag, children },
          asyncFactory
        );
        return vnode;
      }
      function createComponentInstanceForVnode(vnode, parent) {
        const options = {
          _isComponent: true,
          _parentVnode: vnode,
          parent
        };
        const inlineTemplate = vnode.data.inlineTemplate;
        if (isDef(inlineTemplate)) {
          options.render = inlineTemplate.render;
          options.staticRenderFns = inlineTemplate.staticRenderFns;
        }
        return new vnode.componentOptions.Ctor(options);
      }
      function installComponentHooks(data) {
        const hooks2 = data.hook || (data.hook = {});
        for (let i = 0; i < hooksToMerge.length; i++) {
          const key = hooksToMerge[i];
          const existing = hooks2[key];
          const toMerge = componentVNodeHooks[key];
          if (existing !== toMerge && !(existing && existing._merged)) {
            hooks2[key] = existing ? mergeHook(toMerge, existing) : toMerge;
          }
        }
      }
      function mergeHook(f1, f2) {
        const merged = (a, b) => {
          f1(a, b);
          f2(a, b);
        };
        merged._merged = true;
        return merged;
      }
      function transformModel(options, data) {
        const prop = options.model && options.model.prop || "value";
        const event = options.model && options.model.event || "input";
        (data.attrs || (data.attrs = {}))[prop] = data.model.value;
        const on2 = data.on || (data.on = {});
        const existing = on2[event];
        const callback = data.model.callback;
        if (isDef(existing)) {
          if (isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
            on2[event] = [callback].concat(existing);
          }
        } else {
          on2[event] = callback;
        }
      }
      var warn$2 = noop;
      var tip = noop;
      var generateComponentTrace;
      var formatComponentName;
      {
        const hasConsole = typeof console !== "undefined";
        const classifyRE = /(?:^|[-_])(\w)/g;
        const classify = (str2) => str2.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
        warn$2 = (msg, vm = currentInstance) => {
          const trace = vm ? generateComponentTrace(vm) : "";
          if (config.warnHandler) {
            config.warnHandler.call(null, msg, vm, trace);
          } else if (hasConsole && !config.silent) {
            console.error(`[Vue warn]: ${msg}${trace}`);
          }
        };
        tip = (msg, vm) => {
          if (hasConsole && !config.silent) {
            console.warn(`[Vue tip]: ${msg}` + (vm ? generateComponentTrace(vm) : ""));
          }
        };
        formatComponentName = (vm, includeFile) => {
          if (vm.$root === vm) {
            return "<Root>";
          }
          const options = isFunction(vm) && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
          let name = getComponentName(options);
          const file = options.__file;
          if (!name && file) {
            const match = file.match(/([^/\\]+)\.vue$/);
            name = match && match[1];
          }
          return (name ? `<${classify(name)}>` : `<Anonymous>`) + (file && includeFile !== false ? ` at ${file}` : "");
        };
        const repeat2 = (str2, n) => {
          let res = "";
          while (n) {
            if (n % 2 === 1)
              res += str2;
            if (n > 1)
              str2 += str2;
            n >>= 1;
          }
          return res;
        };
        generateComponentTrace = (vm) => {
          if (vm._isVue && vm.$parent) {
            const tree = [];
            let currentRecursiveSequence = 0;
            while (vm) {
              if (tree.length > 0) {
                const last = tree[tree.length - 1];
                if (last.constructor === vm.constructor) {
                  currentRecursiveSequence++;
                  vm = vm.$parent;
                  continue;
                } else if (currentRecursiveSequence > 0) {
                  tree[tree.length - 1] = [last, currentRecursiveSequence];
                  currentRecursiveSequence = 0;
                }
              }
              tree.push(vm);
              vm = vm.$parent;
            }
            return "\n\nfound in\n\n" + tree.map((vm2, i) => `${i === 0 ? "---> " : repeat2(" ", 5 + i * 2)}${isArray(vm2) ? `${formatComponentName(vm2[0])}... (${vm2[1]} recursive calls)` : formatComponentName(vm2)}`).join("\n");
          } else {
            return `

(found in ${formatComponentName(vm)})`;
          }
        };
      }
      var strats = config.optionMergeStrategies;
      {
        strats.el = strats.propsData = function(parent, child, vm, key) {
          if (!vm) {
            warn$2(`option "${key}" can only be used during instance creation with the \`new\` keyword.`);
          }
          return defaultStrat(parent, child);
        };
      }
      function mergeData(to, from2) {
        if (!from2)
          return to;
        let key, toVal, fromVal;
        const keys = hasSymbol ? Reflect.ownKeys(from2) : Object.keys(from2);
        for (let i = 0; i < keys.length; i++) {
          key = keys[i];
          if (key === "__ob__")
            continue;
          toVal = to[key];
          fromVal = from2[key];
          if (!hasOwn2(to, key)) {
            set(to, key, fromVal);
          } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
            mergeData(toVal, fromVal);
          }
        }
        return to;
      }
      function mergeDataOrFn(parentVal, childVal, vm) {
        if (!vm) {
          if (!childVal) {
            return parentVal;
          }
          if (!parentVal) {
            return childVal;
          }
          return function mergedDataFn() {
            return mergeData(isFunction(childVal) ? childVal.call(this, this) : childVal, isFunction(parentVal) ? parentVal.call(this, this) : parentVal);
          };
        } else {
          return function mergedInstanceDataFn() {
            const instanceData = isFunction(childVal) ? childVal.call(vm, vm) : childVal;
            const defaultData = isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal;
            if (instanceData) {
              return mergeData(instanceData, defaultData);
            } else {
              return defaultData;
            }
          };
        }
      }
      strats.data = function(parentVal, childVal, vm) {
        if (!vm) {
          if (childVal && typeof childVal !== "function") {
            warn$2('The "data" option should be a function that returns a per-instance value in component definitions.', vm);
            return parentVal;
          }
          return mergeDataOrFn(parentVal, childVal);
        }
        return mergeDataOrFn(parentVal, childVal, vm);
      };
      function mergeLifecycleHook(parentVal, childVal) {
        const res = childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
        return res ? dedupeHooks(res) : res;
      }
      function dedupeHooks(hooks2) {
        const res = [];
        for (let i = 0; i < hooks2.length; i++) {
          if (res.indexOf(hooks2[i]) === -1) {
            res.push(hooks2[i]);
          }
        }
        return res;
      }
      LIFECYCLE_HOOKS.forEach((hook) => {
        strats[hook] = mergeLifecycleHook;
      });
      function mergeAssets(parentVal, childVal, vm, key) {
        const res = Object.create(parentVal || null);
        if (childVal) {
          assertObjectType2(key, childVal, vm);
          return extend(res, childVal);
        } else {
          return res;
        }
      }
      ASSET_TYPES.forEach(function(type) {
        strats[type + "s"] = mergeAssets;
      });
      strats.watch = function(parentVal, childVal, vm, key) {
        if (parentVal === nativeWatch)
          parentVal = void 0;
        if (childVal === nativeWatch)
          childVal = void 0;
        if (!childVal)
          return Object.create(parentVal || null);
        {
          assertObjectType2(key, childVal, vm);
        }
        if (!parentVal)
          return childVal;
        const ret = {};
        extend(ret, parentVal);
        for (const key2 in childVal) {
          let parent = ret[key2];
          const child = childVal[key2];
          if (parent && !isArray(parent)) {
            parent = [parent];
          }
          ret[key2] = parent ? parent.concat(child) : isArray(child) ? child : [child];
        }
        return ret;
      };
      strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
        if (childVal && true) {
          assertObjectType2(key, childVal, vm);
        }
        if (!parentVal)
          return childVal;
        const ret = /* @__PURE__ */ Object.create(null);
        extend(ret, parentVal);
        if (childVal)
          extend(ret, childVal);
        return ret;
      };
      strats.provide = mergeDataOrFn;
      var defaultStrat = function(parentVal, childVal) {
        return childVal === void 0 ? parentVal : childVal;
      };
      function checkComponents(options) {
        for (const key in options.components) {
          validateComponentName(key);
        }
      }
      function validateComponentName(name) {
        if (!new RegExp(`^[a-zA-Z][\\-\\.0-9_${unicodeRegExp.source}]*$`).test(name)) {
          warn$2('Invalid component name: "' + name + '". Component names should conform to valid custom element name in html5 specification.');
        }
        if (isBuiltInTag(name) || config.isReservedTag(name)) {
          warn$2("Do not use built-in or reserved HTML elements as component id: " + name);
        }
      }
      function normalizeProps(options, vm) {
        const props2 = options.props;
        if (!props2)
          return;
        const res = {};
        let i, val, name;
        if (isArray(props2)) {
          i = props2.length;
          while (i--) {
            val = props2[i];
            if (typeof val === "string") {
              name = camelize(val);
              res[name] = { type: null };
            } else {
              warn$2("props must be strings when using array syntax.");
            }
          }
        } else if (isPlainObject(props2)) {
          for (const key in props2) {
            val = props2[key];
            name = camelize(key);
            res[name] = isPlainObject(val) ? val : { type: val };
          }
        } else {
          warn$2(`Invalid value for option "props": expected an Array or an Object, but got ${toRawType(props2)}.`, vm);
        }
        options.props = res;
      }
      function normalizeInject(options, vm) {
        const inject2 = options.inject;
        if (!inject2)
          return;
        const normalized = options.inject = {};
        if (isArray(inject2)) {
          for (let i = 0; i < inject2.length; i++) {
            normalized[inject2[i]] = { from: inject2[i] };
          }
        } else if (isPlainObject(inject2)) {
          for (const key in inject2) {
            const val = inject2[key];
            normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val };
          }
        } else {
          warn$2(`Invalid value for option "inject": expected an Array or an Object, but got ${toRawType(inject2)}.`, vm);
        }
      }
      function normalizeDirectives$1(options) {
        const dirs = options.directives;
        if (dirs) {
          for (const key in dirs) {
            const def2 = dirs[key];
            if (isFunction(def2)) {
              dirs[key] = { bind: def2, update: def2 };
            }
          }
        }
      }
      function assertObjectType2(name, value, vm) {
        if (!isPlainObject(value)) {
          warn$2(`Invalid value for option "${name}": expected an Object, but got ${toRawType(value)}.`, vm);
        }
      }
      function mergeOptions(parent, child, vm) {
        {
          checkComponents(child);
        }
        if (isFunction(child)) {
          child = child.options;
        }
        normalizeProps(child, vm);
        normalizeInject(child, vm);
        normalizeDirectives$1(child);
        if (!child._base) {
          if (child.extends) {
            parent = mergeOptions(parent, child.extends, vm);
          }
          if (child.mixins) {
            for (let i = 0, l = child.mixins.length; i < l; i++) {
              parent = mergeOptions(parent, child.mixins[i], vm);
            }
          }
        }
        const options = {};
        let key;
        for (key in parent) {
          mergeField(key);
        }
        for (key in child) {
          if (!hasOwn2(parent, key)) {
            mergeField(key);
          }
        }
        function mergeField(key2) {
          const strat = strats[key2] || defaultStrat;
          options[key2] = strat(parent[key2], child[key2], vm, key2);
        }
        return options;
      }
      function resolveAsset(options, type, id, warnMissing) {
        if (typeof id !== "string") {
          return;
        }
        const assets = options[type];
        if (hasOwn2(assets, id))
          return assets[id];
        const camelizedId = camelize(id);
        if (hasOwn2(assets, camelizedId))
          return assets[camelizedId];
        const PascalCaseId = capitalize(camelizedId);
        if (hasOwn2(assets, PascalCaseId))
          return assets[PascalCaseId];
        const res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
        if (warnMissing && !res) {
          warn$2("Failed to resolve " + type.slice(0, -1) + ": " + id);
        }
        return res;
      }
      function validateProp(key, propOptions, propsData, vm) {
        const prop = propOptions[key];
        const absent = !hasOwn2(propsData, key);
        let value = propsData[key];
        const booleanIndex = getTypeIndex(Boolean, prop.type);
        if (booleanIndex > -1) {
          if (absent && !hasOwn2(prop, "default")) {
            value = false;
          } else if (value === "" || value === hyphenate(key)) {
            const stringIndex = getTypeIndex(String, prop.type);
            if (stringIndex < 0 || booleanIndex < stringIndex) {
              value = true;
            }
          }
        }
        if (value === void 0) {
          value = getPropDefaultValue(vm, prop, key);
          const prevShouldObserve = shouldObserve;
          toggleObserving(true);
          observe(value);
          toggleObserving(prevShouldObserve);
        }
        {
          assertProp(prop, key, value, vm, absent);
        }
        return value;
      }
      function getPropDefaultValue(vm, prop, key) {
        if (!hasOwn2(prop, "default")) {
          return void 0;
        }
        const def2 = prop.default;
        if (isObject3(def2)) {
          warn$2('Invalid default value for prop "' + key + '": Props with type Object/Array must use a factory function to return the default value.', vm);
        }
        if (vm && vm.$options.propsData && vm.$options.propsData[key] === void 0 && vm._props[key] !== void 0) {
          return vm._props[key];
        }
        return isFunction(def2) && getType(prop.type) !== "Function" ? def2.call(vm) : def2;
      }
      function assertProp(prop, name, value, vm, absent) {
        if (prop.required && absent) {
          warn$2('Missing required prop: "' + name + '"', vm);
          return;
        }
        if (value == null && !prop.required) {
          return;
        }
        let type = prop.type;
        let valid = !type || type === true;
        const expectedTypes = [];
        if (type) {
          if (!isArray(type)) {
            type = [type];
          }
          for (let i = 0; i < type.length && !valid; i++) {
            const assertedType = assertType2(value, type[i], vm);
            expectedTypes.push(assertedType.expectedType || "");
            valid = assertedType.valid;
          }
        }
        const haveExpectedTypes = expectedTypes.some((t) => t);
        if (!valid && haveExpectedTypes) {
          warn$2(getInvalidTypeMessage(name, value, expectedTypes), vm);
          return;
        }
        const validator = prop.validator;
        if (validator) {
          if (!validator(value)) {
            warn$2('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
          }
        }
      }
      var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;
      function assertType2(value, type, vm) {
        let valid;
        const expectedType = getType(type);
        if (simpleCheckRE.test(expectedType)) {
          const t = typeof value;
          valid = t === expectedType.toLowerCase();
          if (!valid && t === "object") {
            valid = value instanceof type;
          }
        } else if (expectedType === "Object") {
          valid = isPlainObject(value);
        } else if (expectedType === "Array") {
          valid = isArray(value);
        } else {
          try {
            valid = value instanceof type;
          } catch (e) {
            warn$2('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
            valid = false;
          }
        }
        return {
          valid,
          expectedType
        };
      }
      var functionTypeCheckRE = /^\s*function (\w+)/;
      function getType(fn) {
        const match = fn && fn.toString().match(functionTypeCheckRE);
        return match ? match[1] : "";
      }
      function isSameType(a, b) {
        return getType(a) === getType(b);
      }
      function getTypeIndex(type, expectedTypes) {
        if (!isArray(expectedTypes)) {
          return isSameType(expectedTypes, type) ? 0 : -1;
        }
        for (let i = 0, len2 = expectedTypes.length; i < len2; i++) {
          if (isSameType(expectedTypes[i], type)) {
            return i;
          }
        }
        return -1;
      }
      function getInvalidTypeMessage(name, value, expectedTypes) {
        let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(", ")}`;
        const expectedType = expectedTypes[0];
        const receivedType = toRawType(value);
        if (expectedTypes.length === 1 && isExplicable(expectedType) && isExplicable(typeof value) && !isBoolean(expectedType, receivedType)) {
          message += ` with value ${styleValue(value, expectedType)}`;
        }
        message += `, got ${receivedType} `;
        if (isExplicable(receivedType)) {
          message += `with value ${styleValue(value, receivedType)}.`;
        }
        return message;
      }
      function styleValue(value, type) {
        if (type === "String") {
          return `"${value}"`;
        } else if (type === "Number") {
          return `${Number(value)}`;
        } else {
          return `${value}`;
        }
      }
      var EXPLICABLE_TYPES = ["string", "number", "boolean"];
      function isExplicable(value) {
        return EXPLICABLE_TYPES.some((elem) => value.toLowerCase() === elem);
      }
      function isBoolean(...args) {
        return args.some((elem) => elem.toLowerCase() === "boolean");
      }
      function Vue5(options) {
        if (!(this instanceof Vue5)) {
          warn$2("Vue is a constructor and should be called with the `new` keyword");
        }
        this._init(options);
      }
      initMixin$1(Vue5);
      stateMixin(Vue5);
      eventsMixin(Vue5);
      lifecycleMixin(Vue5);
      renderMixin(Vue5);
      function initUse(Vue6) {
        Vue6.use = function(plugin) {
          const installedPlugins = this._installedPlugins || (this._installedPlugins = []);
          if (installedPlugins.indexOf(plugin) > -1) {
            return this;
          }
          const args = toArray(arguments, 1);
          args.unshift(this);
          if (isFunction(plugin.install)) {
            plugin.install.apply(plugin, args);
          } else if (isFunction(plugin)) {
            plugin.apply(null, args);
          }
          installedPlugins.push(plugin);
          return this;
        };
      }
      function initMixin(Vue6) {
        Vue6.mixin = function(mixin) {
          this.options = mergeOptions(this.options, mixin);
          return this;
        };
      }
      function initExtend(Vue6) {
        Vue6.cid = 0;
        let cid = 1;
        Vue6.extend = function(extendOptions) {
          extendOptions = extendOptions || {};
          const Super = this;
          const SuperId = Super.cid;
          const cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
          if (cachedCtors[SuperId]) {
            return cachedCtors[SuperId];
          }
          const name = getComponentName(extendOptions) || getComponentName(Super.options);
          if (name) {
            validateComponentName(name);
          }
          const Sub = function VueComponent(options) {
            this._init(options);
          };
          Sub.prototype = Object.create(Super.prototype);
          Sub.prototype.constructor = Sub;
          Sub.cid = cid++;
          Sub.options = mergeOptions(Super.options, extendOptions);
          Sub["super"] = Super;
          if (Sub.options.props) {
            initProps(Sub);
          }
          if (Sub.options.computed) {
            initComputed(Sub);
          }
          Sub.extend = Super.extend;
          Sub.mixin = Super.mixin;
          Sub.use = Super.use;
          ASSET_TYPES.forEach(function(type) {
            Sub[type] = Super[type];
          });
          if (name) {
            Sub.options.components[name] = Sub;
          }
          Sub.superOptions = Super.options;
          Sub.extendOptions = extendOptions;
          Sub.sealedOptions = extend({}, Sub.options);
          cachedCtors[SuperId] = Sub;
          return Sub;
        };
      }
      function initProps(Comp) {
        const props2 = Comp.options.props;
        for (const key in props2) {
          proxy(Comp.prototype, `_props`, key);
        }
      }
      function initComputed(Comp) {
        const computed2 = Comp.options.computed;
        for (const key in computed2) {
          defineComputed(Comp.prototype, key, computed2[key]);
        }
      }
      function initAssetRegisters(Vue6) {
        ASSET_TYPES.forEach((type) => {
          Vue6[type] = function(id, definition) {
            if (!definition) {
              return this.options[type + "s"][id];
            } else {
              if (type === "component") {
                validateComponentName(id);
              }
              if (type === "component" && isPlainObject(definition)) {
                definition.name = definition.name || id;
                definition = this.options._base.extend(definition);
              }
              if (type === "directive" && isFunction(definition)) {
                definition = { bind: definition, update: definition };
              }
              this.options[type + "s"][id] = definition;
              return definition;
            }
          };
        });
      }
      function _getComponentName(opts) {
        return opts && (getComponentName(opts.Ctor.options) || opts.tag);
      }
      function matches(pattern, name) {
        if (isArray(pattern)) {
          return pattern.indexOf(name) > -1;
        } else if (typeof pattern === "string") {
          return pattern.split(",").indexOf(name) > -1;
        } else if (isRegExp(pattern)) {
          return pattern.test(name);
        }
        return false;
      }
      function pruneCache(keepAliveInstance, filter) {
        const { cache, keys, _vnode } = keepAliveInstance;
        for (const key in cache) {
          const entry = cache[key];
          if (entry) {
            const name = entry.name;
            if (name && !filter(name)) {
              pruneCacheEntry(cache, key, keys, _vnode);
            }
          }
        }
      }
      function pruneCacheEntry(cache, key, keys, current) {
        const entry = cache[key];
        if (entry && (!current || entry.tag !== current.tag)) {
          entry.componentInstance.$destroy();
        }
        cache[key] = null;
        remove$2(keys, key);
      }
      var patternTypes = [String, RegExp, Array];
      var KeepAlive = {
        name: "keep-alive",
        abstract: true,
        props: {
          include: patternTypes,
          exclude: patternTypes,
          max: [String, Number]
        },
        methods: {
          cacheVNode() {
            const { cache, keys, vnodeToCache, keyToCache } = this;
            if (vnodeToCache) {
              const { tag, componentInstance, componentOptions } = vnodeToCache;
              cache[keyToCache] = {
                name: _getComponentName(componentOptions),
                tag,
                componentInstance
              };
              keys.push(keyToCache);
              if (this.max && keys.length > parseInt(this.max)) {
                pruneCacheEntry(cache, keys[0], keys, this._vnode);
              }
              this.vnodeToCache = null;
            }
          }
        },
        created() {
          this.cache = /* @__PURE__ */ Object.create(null);
          this.keys = [];
        },
        destroyed() {
          for (const key in this.cache) {
            pruneCacheEntry(this.cache, key, this.keys);
          }
        },
        mounted() {
          this.cacheVNode();
          this.$watch("include", (val) => {
            pruneCache(this, (name) => matches(val, name));
          });
          this.$watch("exclude", (val) => {
            pruneCache(this, (name) => !matches(val, name));
          });
        },
        updated() {
          this.cacheVNode();
        },
        render() {
          const slot = this.$slots.default;
          const vnode = getFirstComponentChild(slot);
          const componentOptions = vnode && vnode.componentOptions;
          if (componentOptions) {
            const name = _getComponentName(componentOptions);
            const { include, exclude } = this;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
              return vnode;
            }
            const { cache, keys } = this;
            const key = vnode.key == null ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : "") : vnode.key;
            if (cache[key]) {
              vnode.componentInstance = cache[key].componentInstance;
              remove$2(keys, key);
              keys.push(key);
            } else {
              this.vnodeToCache = vnode;
              this.keyToCache = key;
            }
            vnode.data.keepAlive = true;
          }
          return vnode || slot && slot[0];
        }
      };
      var builtInComponents = {
        KeepAlive
      };
      function initGlobalAPI(Vue6) {
        const configDef = {};
        configDef.get = () => config;
        {
          configDef.set = () => {
            warn$2("Do not replace the Vue.config object, set individual fields instead.");
          };
        }
        Object.defineProperty(Vue6, "config", configDef);
        Vue6.util = {
          warn: warn$2,
          extend,
          mergeOptions,
          defineReactive
        };
        Vue6.set = set;
        Vue6.delete = del;
        Vue6.nextTick = nextTick;
        Vue6.observable = (obj) => {
          observe(obj);
          return obj;
        };
        Vue6.options = /* @__PURE__ */ Object.create(null);
        ASSET_TYPES.forEach((type) => {
          Vue6.options[type + "s"] = /* @__PURE__ */ Object.create(null);
        });
        Vue6.options._base = Vue6;
        extend(Vue6.options.components, builtInComponents);
        initUse(Vue6);
        initMixin(Vue6);
        initExtend(Vue6);
        initAssetRegisters(Vue6);
      }
      initGlobalAPI(Vue5);
      Object.defineProperty(Vue5.prototype, "$isServer", {
        get: isServerRendering
      });
      Object.defineProperty(Vue5.prototype, "$ssrContext", {
        get() {
          return this.$vnode && this.$vnode.ssrContext;
        }
      });
      Object.defineProperty(Vue5, "FunctionalRenderContext", {
        value: FunctionalRenderContext
      });
      Vue5.version = version2;
      var isReservedAttr = makeMap("style,class");
      var acceptValue = makeMap("input,textarea,option,select,progress");
      var mustUseProp = (tag, type, attr) => {
        return attr === "value" && acceptValue(tag) && type !== "button" || attr === "selected" && tag === "option" || attr === "checked" && tag === "input" || attr === "muted" && tag === "video";
      };
      var isEnumeratedAttr = makeMap("contenteditable,draggable,spellcheck");
      var isValidContentEditableValue = makeMap("events,caret,typing,plaintext-only");
      var convertEnumeratedValue = (key, value) => {
        return isFalsyAttrValue(value) || value === "false" ? "false" : key === "contenteditable" && isValidContentEditableValue(value) ? value : "true";
      };
      var isBooleanAttr = makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
      var xlinkNS = "http://www.w3.org/1999/xlink";
      var isXlink = (name) => {
        return name.charAt(5) === ":" && name.slice(0, 5) === "xlink";
      };
      var getXlinkProp = (name) => {
        return isXlink(name) ? name.slice(6, name.length) : "";
      };
      var isFalsyAttrValue = (val) => {
        return val == null || val === false;
      };
      function genClassForVnode(vnode) {
        let data = vnode.data;
        let parentNode2 = vnode;
        let childNode = vnode;
        while (isDef(childNode.componentInstance)) {
          childNode = childNode.componentInstance._vnode;
          if (childNode && childNode.data) {
            data = mergeClassData(childNode.data, data);
          }
        }
        while (isDef(parentNode2 = parentNode2.parent)) {
          if (parentNode2 && parentNode2.data) {
            data = mergeClassData(data, parentNode2.data);
          }
        }
        return renderClass(data.staticClass, data.class);
      }
      function mergeClassData(child, parent) {
        return {
          staticClass: concat2(child.staticClass, parent.staticClass),
          class: isDef(child.class) ? [child.class, parent.class] : parent.class
        };
      }
      function renderClass(staticClass, dynamicClass) {
        if (isDef(staticClass) || isDef(dynamicClass)) {
          return concat2(staticClass, stringifyClass(dynamicClass));
        }
        return "";
      }
      function concat2(a, b) {
        return a ? b ? a + " " + b : a : b || "";
      }
      function stringifyClass(value) {
        if (Array.isArray(value)) {
          return stringifyArray(value);
        }
        if (isObject3(value)) {
          return stringifyObject(value);
        }
        if (typeof value === "string") {
          return value;
        }
        return "";
      }
      function stringifyArray(value) {
        let res = "";
        let stringified;
        for (let i = 0, l = value.length; i < l; i++) {
          if (isDef(stringified = stringifyClass(value[i])) && stringified !== "") {
            if (res)
              res += " ";
            res += stringified;
          }
        }
        return res;
      }
      function stringifyObject(value) {
        let res = "";
        for (const key in value) {
          if (value[key]) {
            if (res)
              res += " ";
            res += key;
          }
        }
        return res;
      }
      var namespaceMap = {
        svg: "http://www.w3.org/2000/svg",
        math: "http://www.w3.org/1998/Math/MathML"
      };
      var isHTMLTag = makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot");
      var isSVG = makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", true);
      var isPreTag = (tag) => tag === "pre";
      var isReservedTag = (tag) => {
        return isHTMLTag(tag) || isSVG(tag);
      };
      function getTagNamespace(tag) {
        if (isSVG(tag)) {
          return "svg";
        }
        if (tag === "math") {
          return "math";
        }
      }
      var unknownElementCache = /* @__PURE__ */ Object.create(null);
      function isUnknownElement(tag) {
        if (!inBrowser) {
          return true;
        }
        if (isReservedTag(tag)) {
          return false;
        }
        tag = tag.toLowerCase();
        if (unknownElementCache[tag] != null) {
          return unknownElementCache[tag];
        }
        const el = document.createElement(tag);
        if (tag.indexOf("-") > -1) {
          return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
        } else {
          return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
        }
      }
      var isTextInputType = makeMap("text,number,password,search,email,tel,url");
      function query(el) {
        if (typeof el === "string") {
          const selected = document.querySelector(el);
          if (!selected) {
            warn$2("Cannot find element: " + el);
            return document.createElement("div");
          }
          return selected;
        } else {
          return el;
        }
      }
      function createElement(tagName2, vnode) {
        const elm = document.createElement(tagName2);
        if (tagName2 !== "select") {
          return elm;
        }
        if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== void 0) {
          elm.setAttribute("multiple", "multiple");
        }
        return elm;
      }
      function createElementNS(namespace, tagName2) {
        return document.createElementNS(namespaceMap[namespace], tagName2);
      }
      function createTextNode(text2) {
        return document.createTextNode(text2);
      }
      function createComment(text2) {
        return document.createComment(text2);
      }
      function insertBefore(parentNode2, newNode, referenceNode) {
        parentNode2.insertBefore(newNode, referenceNode);
      }
      function removeChild2(node, child) {
        node.removeChild(child);
      }
      function appendChild(node, child) {
        node.appendChild(child);
      }
      function parentNode(node) {
        return node.parentNode;
      }
      function nextSibling(node) {
        return node.nextSibling;
      }
      function tagName(node) {
        return node.tagName;
      }
      function setTextContent(node, text2) {
        node.textContent = text2;
      }
      function setStyleScope(node, scopeId) {
        node.setAttribute(scopeId, "");
      }
      var nodeOps = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        createElement,
        createElementNS,
        createTextNode,
        createComment,
        insertBefore,
        removeChild: removeChild2,
        appendChild,
        parentNode,
        nextSibling,
        tagName,
        setTextContent,
        setStyleScope
      });
      var ref = {
        create(_2, vnode) {
          registerRef(vnode);
        },
        update(oldVnode, vnode) {
          if (oldVnode.data.ref !== vnode.data.ref) {
            registerRef(oldVnode, true);
            registerRef(vnode);
          }
        },
        destroy(vnode) {
          registerRef(vnode, true);
        }
      };
      function registerRef(vnode, isRemoval) {
        const ref2 = vnode.data.ref;
        if (!isDef(ref2))
          return;
        const vm = vnode.context;
        const refValue = vnode.componentInstance || vnode.elm;
        const value = isRemoval ? null : refValue;
        const $refsValue = isRemoval ? void 0 : refValue;
        if (isFunction(ref2)) {
          invokeWithErrorHandling(ref2, vm, [value], vm, `template ref function`);
          return;
        }
        const isFor = vnode.data.refInFor;
        const _isString = typeof ref2 === "string" || typeof ref2 === "number";
        const _isRef = isRef(ref2);
        const refs = vm.$refs;
        if (_isString || _isRef) {
          if (isFor) {
            const existing = _isString ? refs[ref2] : ref2.value;
            if (isRemoval) {
              isArray(existing) && remove$2(existing, refValue);
            } else {
              if (!isArray(existing)) {
                if (_isString) {
                  refs[ref2] = [refValue];
                  setSetupRef(vm, ref2, refs[ref2]);
                } else {
                  ref2.value = [refValue];
                }
              } else if (!existing.includes(refValue)) {
                existing.push(refValue);
              }
            }
          } else if (_isString) {
            if (isRemoval && refs[ref2] !== refValue) {
              return;
            }
            refs[ref2] = $refsValue;
            setSetupRef(vm, ref2, value);
          } else if (_isRef) {
            if (isRemoval && ref2.value !== refValue) {
              return;
            }
            ref2.value = value;
          } else {
            warn$2(`Invalid template ref type: ${typeof ref2}`);
          }
        }
      }
      function setSetupRef({ _setupState }, key, val) {
        if (_setupState && hasOwn2(_setupState, key)) {
          if (isRef(_setupState[key])) {
            _setupState[key].value = val;
          } else {
            _setupState[key] = val;
          }
        }
      }
      var emptyNode = new VNode("", {}, []);
      var hooks = ["create", "activate", "update", "remove", "destroy"];
      function sameVnode(a, b) {
        return a.key === b.key && a.asyncFactory === b.asyncFactory && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error));
      }
      function sameInputType(a, b) {
        if (a.tag !== "input")
          return true;
        let i;
        const typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
        const typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
        return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
      }
      function createKeyToOldIdx(children, beginIdx, endIdx) {
        let i, key;
        const map = {};
        for (i = beginIdx; i <= endIdx; ++i) {
          key = children[i].key;
          if (isDef(key))
            map[key] = i;
        }
        return map;
      }
      function createPatchFunction(backend) {
        let i, j;
        const cbs = {};
        const { modules: modules3, nodeOps: nodeOps2 } = backend;
        for (i = 0; i < hooks.length; ++i) {
          cbs[hooks[i]] = [];
          for (j = 0; j < modules3.length; ++j) {
            if (isDef(modules3[j][hooks[i]])) {
              cbs[hooks[i]].push(modules3[j][hooks[i]]);
            }
          }
        }
        function emptyNodeAt(elm) {
          return new VNode(nodeOps2.tagName(elm).toLowerCase(), {}, [], void 0, elm);
        }
        function createRmCb(childElm, listeners) {
          function remove2() {
            if (--remove2.listeners === 0) {
              removeNode(childElm);
            }
          }
          remove2.listeners = listeners;
          return remove2;
        }
        function removeNode(el) {
          const parent = nodeOps2.parentNode(el);
          if (isDef(parent)) {
            nodeOps2.removeChild(parent, el);
          }
        }
        function isUnknownElement2(vnode, inVPre) {
          return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some((ignore) => {
            return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
          })) && config.isUnknownElement(vnode.tag);
        }
        let creatingElmInVPre = 0;
        function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index2) {
          if (isDef(vnode.elm) && isDef(ownerArray)) {
            vnode = ownerArray[index2] = cloneVNode(vnode);
          }
          vnode.isRootInsert = !nested;
          if (createComponent2(vnode, insertedVnodeQueue, parentElm, refElm)) {
            return;
          }
          const data = vnode.data;
          const children = vnode.children;
          const tag = vnode.tag;
          if (isDef(tag)) {
            {
              if (data && data.pre) {
                creatingElmInVPre++;
              }
              if (isUnknownElement2(vnode, creatingElmInVPre)) {
                warn$2("Unknown custom element: <" + tag + '> - did you register the component correctly? For recursive components, make sure to provide the "name" option.', vnode.context);
              }
            }
            vnode.elm = vnode.ns ? nodeOps2.createElementNS(vnode.ns, tag) : nodeOps2.createElement(tag, vnode);
            setScope(vnode);
            createChildren(vnode, children, insertedVnodeQueue);
            if (isDef(data)) {
              invokeCreateHooks(vnode, insertedVnodeQueue);
            }
            insert(parentElm, vnode.elm, refElm);
            if (data && data.pre) {
              creatingElmInVPre--;
            }
          } else if (isTrue(vnode.isComment)) {
            vnode.elm = nodeOps2.createComment(vnode.text);
            insert(parentElm, vnode.elm, refElm);
          } else {
            vnode.elm = nodeOps2.createTextNode(vnode.text);
            insert(parentElm, vnode.elm, refElm);
          }
        }
        function createComponent2(vnode, insertedVnodeQueue, parentElm, refElm) {
          let i2 = vnode.data;
          if (isDef(i2)) {
            const isReactivated = isDef(vnode.componentInstance) && i2.keepAlive;
            if (isDef(i2 = i2.hook) && isDef(i2 = i2.init)) {
              i2(vnode, false);
            }
            if (isDef(vnode.componentInstance)) {
              initComponent(vnode, insertedVnodeQueue);
              insert(parentElm, vnode.elm, refElm);
              if (isTrue(isReactivated)) {
                reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
              }
              return true;
            }
          }
        }
        function initComponent(vnode, insertedVnodeQueue) {
          if (isDef(vnode.data.pendingInsert)) {
            insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
            vnode.data.pendingInsert = null;
          }
          vnode.elm = vnode.componentInstance.$el;
          if (isPatchable(vnode)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            setScope(vnode);
          } else {
            registerRef(vnode);
            insertedVnodeQueue.push(vnode);
          }
        }
        function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
          let i2;
          let innerNode = vnode;
          while (innerNode.componentInstance) {
            innerNode = innerNode.componentInstance._vnode;
            if (isDef(i2 = innerNode.data) && isDef(i2 = i2.transition)) {
              for (i2 = 0; i2 < cbs.activate.length; ++i2) {
                cbs.activate[i2](emptyNode, innerNode);
              }
              insertedVnodeQueue.push(innerNode);
              break;
            }
          }
          insert(parentElm, vnode.elm, refElm);
        }
        function insert(parent, elm, ref2) {
          if (isDef(parent)) {
            if (isDef(ref2)) {
              if (nodeOps2.parentNode(ref2) === parent) {
                nodeOps2.insertBefore(parent, elm, ref2);
              }
            } else {
              nodeOps2.appendChild(parent, elm);
            }
          }
        }
        function createChildren(vnode, children, insertedVnodeQueue) {
          if (isArray(children)) {
            {
              checkDuplicateKeys(children);
            }
            for (let i2 = 0; i2 < children.length; ++i2) {
              createElm(children[i2], insertedVnodeQueue, vnode.elm, null, true, children, i2);
            }
          } else if (isPrimitive(vnode.text)) {
            nodeOps2.appendChild(vnode.elm, nodeOps2.createTextNode(String(vnode.text)));
          }
        }
        function isPatchable(vnode) {
          while (vnode.componentInstance) {
            vnode = vnode.componentInstance._vnode;
          }
          return isDef(vnode.tag);
        }
        function invokeCreateHooks(vnode, insertedVnodeQueue) {
          for (let i2 = 0; i2 < cbs.create.length; ++i2) {
            cbs.create[i2](emptyNode, vnode);
          }
          i = vnode.data.hook;
          if (isDef(i)) {
            if (isDef(i.create))
              i.create(emptyNode, vnode);
            if (isDef(i.insert))
              insertedVnodeQueue.push(vnode);
          }
        }
        function setScope(vnode) {
          let i2;
          if (isDef(i2 = vnode.fnScopeId)) {
            nodeOps2.setStyleScope(vnode.elm, i2);
          } else {
            let ancestor = vnode;
            while (ancestor) {
              if (isDef(i2 = ancestor.context) && isDef(i2 = i2.$options._scopeId)) {
                nodeOps2.setStyleScope(vnode.elm, i2);
              }
              ancestor = ancestor.parent;
            }
          }
          if (isDef(i2 = activeInstance) && i2 !== vnode.context && i2 !== vnode.fnContext && isDef(i2 = i2.$options._scopeId)) {
            nodeOps2.setStyleScope(vnode.elm, i2);
          }
        }
        function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
          for (; startIdx <= endIdx; ++startIdx) {
            createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
          }
        }
        function invokeDestroyHook(vnode) {
          let i2, j2;
          const data = vnode.data;
          if (isDef(data)) {
            if (isDef(i2 = data.hook) && isDef(i2 = i2.destroy))
              i2(vnode);
            for (i2 = 0; i2 < cbs.destroy.length; ++i2)
              cbs.destroy[i2](vnode);
          }
          if (isDef(i2 = vnode.children)) {
            for (j2 = 0; j2 < vnode.children.length; ++j2) {
              invokeDestroyHook(vnode.children[j2]);
            }
          }
        }
        function removeVnodes(vnodes, startIdx, endIdx) {
          for (; startIdx <= endIdx; ++startIdx) {
            const ch = vnodes[startIdx];
            if (isDef(ch)) {
              if (isDef(ch.tag)) {
                removeAndInvokeRemoveHook(ch);
                invokeDestroyHook(ch);
              } else {
                removeNode(ch.elm);
              }
            }
          }
        }
        function removeAndInvokeRemoveHook(vnode, rm) {
          if (isDef(rm) || isDef(vnode.data)) {
            let i2;
            const listeners = cbs.remove.length + 1;
            if (isDef(rm)) {
              rm.listeners += listeners;
            } else {
              rm = createRmCb(vnode.elm, listeners);
            }
            if (isDef(i2 = vnode.componentInstance) && isDef(i2 = i2._vnode) && isDef(i2.data)) {
              removeAndInvokeRemoveHook(i2, rm);
            }
            for (i2 = 0; i2 < cbs.remove.length; ++i2) {
              cbs.remove[i2](vnode, rm);
            }
            if (isDef(i2 = vnode.data.hook) && isDef(i2 = i2.remove)) {
              i2(vnode, rm);
            } else {
              rm();
            }
          } else {
            removeNode(vnode.elm);
          }
        }
        function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
          let oldStartIdx = 0;
          let newStartIdx = 0;
          let oldEndIdx = oldCh.length - 1;
          let oldStartVnode = oldCh[0];
          let oldEndVnode = oldCh[oldEndIdx];
          let newEndIdx = newCh.length - 1;
          let newStartVnode = newCh[0];
          let newEndVnode = newCh[newEndIdx];
          let oldKeyToIdx, idxInOld, vnodeToMove, refElm;
          const canMove = !removeOnly;
          {
            checkDuplicateKeys(newCh);
          }
          while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (isUndef(oldStartVnode)) {
              oldStartVnode = oldCh[++oldStartIdx];
            } else if (isUndef(oldEndVnode)) {
              oldEndVnode = oldCh[--oldEndIdx];
            } else if (sameVnode(oldStartVnode, newStartVnode)) {
              patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
              oldStartVnode = oldCh[++oldStartIdx];
              newStartVnode = newCh[++newStartIdx];
            } else if (sameVnode(oldEndVnode, newEndVnode)) {
              patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
              oldEndVnode = oldCh[--oldEndIdx];
              newEndVnode = newCh[--newEndIdx];
            } else if (sameVnode(oldStartVnode, newEndVnode)) {
              patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
              canMove && nodeOps2.insertBefore(parentElm, oldStartVnode.elm, nodeOps2.nextSibling(oldEndVnode.elm));
              oldStartVnode = oldCh[++oldStartIdx];
              newEndVnode = newCh[--newEndIdx];
            } else if (sameVnode(oldEndVnode, newStartVnode)) {
              patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
              canMove && nodeOps2.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
              oldEndVnode = oldCh[--oldEndIdx];
              newStartVnode = newCh[++newStartIdx];
            } else {
              if (isUndef(oldKeyToIdx))
                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
              idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
              if (isUndef(idxInOld)) {
                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
              } else {
                vnodeToMove = oldCh[idxInOld];
                if (sameVnode(vnodeToMove, newStartVnode)) {
                  patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                  oldCh[idxInOld] = void 0;
                  canMove && nodeOps2.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
                } else {
                  createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                }
              }
              newStartVnode = newCh[++newStartIdx];
            }
          }
          if (oldStartIdx > oldEndIdx) {
            refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
            addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
          } else if (newStartIdx > newEndIdx) {
            removeVnodes(oldCh, oldStartIdx, oldEndIdx);
          }
        }
        function checkDuplicateKeys(children) {
          const seenKeys = {};
          for (let i2 = 0; i2 < children.length; i2++) {
            const vnode = children[i2];
            const key = vnode.key;
            if (isDef(key)) {
              if (seenKeys[key]) {
                warn$2(`Duplicate keys detected: '${key}'. This may cause an update error.`, vnode.context);
              } else {
                seenKeys[key] = true;
              }
            }
          }
        }
        function findIdxInOld(node, oldCh, start, end) {
          for (let i2 = start; i2 < end; i2++) {
            const c = oldCh[i2];
            if (isDef(c) && sameVnode(node, c))
              return i2;
          }
        }
        function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index2, removeOnly) {
          if (oldVnode === vnode) {
            return;
          }
          if (isDef(vnode.elm) && isDef(ownerArray)) {
            vnode = ownerArray[index2] = cloneVNode(vnode);
          }
          const elm = vnode.elm = oldVnode.elm;
          if (isTrue(oldVnode.isAsyncPlaceholder)) {
            if (isDef(vnode.asyncFactory.resolved)) {
              hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
            } else {
              vnode.isAsyncPlaceholder = true;
            }
            return;
          }
          if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
            vnode.componentInstance = oldVnode.componentInstance;
            return;
          }
          let i2;
          const data = vnode.data;
          if (isDef(data) && isDef(i2 = data.hook) && isDef(i2 = i2.prepatch)) {
            i2(oldVnode, vnode);
          }
          const oldCh = oldVnode.children;
          const ch = vnode.children;
          if (isDef(data) && isPatchable(vnode)) {
            for (i2 = 0; i2 < cbs.update.length; ++i2)
              cbs.update[i2](oldVnode, vnode);
            if (isDef(i2 = data.hook) && isDef(i2 = i2.update))
              i2(oldVnode, vnode);
          }
          if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
              if (oldCh !== ch)
                updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
            } else if (isDef(ch)) {
              {
                checkDuplicateKeys(ch);
              }
              if (isDef(oldVnode.text))
                nodeOps2.setTextContent(elm, "");
              addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            } else if (isDef(oldCh)) {
              removeVnodes(oldCh, 0, oldCh.length - 1);
            } else if (isDef(oldVnode.text)) {
              nodeOps2.setTextContent(elm, "");
            }
          } else if (oldVnode.text !== vnode.text) {
            nodeOps2.setTextContent(elm, vnode.text);
          }
          if (isDef(data)) {
            if (isDef(i2 = data.hook) && isDef(i2 = i2.postpatch))
              i2(oldVnode, vnode);
          }
        }
        function invokeInsertHook(vnode, queue2, initial) {
          if (isTrue(initial) && isDef(vnode.parent)) {
            vnode.parent.data.pendingInsert = queue2;
          } else {
            for (let i2 = 0; i2 < queue2.length; ++i2) {
              queue2[i2].data.hook.insert(queue2[i2]);
            }
          }
        }
        let hydrationBailed = false;
        const isRenderedModule = makeMap("attrs,class,staticClass,staticStyle,key");
        function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
          let i2;
          const { tag, data, children } = vnode;
          inVPre = inVPre || data && data.pre;
          vnode.elm = elm;
          if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
            vnode.isAsyncPlaceholder = true;
            return true;
          }
          {
            if (!assertNodeMatch(elm, vnode, inVPre)) {
              return false;
            }
          }
          if (isDef(data)) {
            if (isDef(i2 = data.hook) && isDef(i2 = i2.init))
              i2(vnode, true);
            if (isDef(i2 = vnode.componentInstance)) {
              initComponent(vnode, insertedVnodeQueue);
              return true;
            }
          }
          if (isDef(tag)) {
            if (isDef(children)) {
              if (!elm.hasChildNodes()) {
                createChildren(vnode, children, insertedVnodeQueue);
              } else {
                if (isDef(i2 = data) && isDef(i2 = i2.domProps) && isDef(i2 = i2.innerHTML)) {
                  if (i2 !== elm.innerHTML) {
                    if (typeof console !== "undefined" && !hydrationBailed) {
                      hydrationBailed = true;
                      console.warn("Parent: ", elm);
                      console.warn("server innerHTML: ", i2);
                      console.warn("client innerHTML: ", elm.innerHTML);
                    }
                    return false;
                  }
                } else {
                  let childrenMatch = true;
                  let childNode = elm.firstChild;
                  for (let i3 = 0; i3 < children.length; i3++) {
                    if (!childNode || !hydrate(childNode, children[i3], insertedVnodeQueue, inVPre)) {
                      childrenMatch = false;
                      break;
                    }
                    childNode = childNode.nextSibling;
                  }
                  if (!childrenMatch || childNode) {
                    if (typeof console !== "undefined" && !hydrationBailed) {
                      hydrationBailed = true;
                      console.warn("Parent: ", elm);
                      console.warn("Mismatching childNodes vs. VNodes: ", elm.childNodes, children);
                    }
                    return false;
                  }
                }
              }
            }
            if (isDef(data)) {
              let fullInvoke = false;
              for (const key in data) {
                if (!isRenderedModule(key)) {
                  fullInvoke = true;
                  invokeCreateHooks(vnode, insertedVnodeQueue);
                  break;
                }
              }
              if (!fullInvoke && data["class"]) {
                traverse(data["class"]);
              }
            }
          } else if (elm.data !== vnode.text) {
            elm.data = vnode.text;
          }
          return true;
        }
        function assertNodeMatch(node, vnode, inVPre) {
          if (isDef(vnode.tag)) {
            return vnode.tag.indexOf("vue-component") === 0 || !isUnknownElement2(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
          } else {
            return node.nodeType === (vnode.isComment ? 8 : 3);
          }
        }
        return function patch2(oldVnode, vnode, hydrating, removeOnly) {
          if (isUndef(vnode)) {
            if (isDef(oldVnode))
              invokeDestroyHook(oldVnode);
            return;
          }
          let isInitialPatch = false;
          const insertedVnodeQueue = [];
          if (isUndef(oldVnode)) {
            isInitialPatch = true;
            createElm(vnode, insertedVnodeQueue);
          } else {
            const isRealElement = isDef(oldVnode.nodeType);
            if (!isRealElement && sameVnode(oldVnode, vnode)) {
              patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
            } else {
              if (isRealElement) {
                if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                  oldVnode.removeAttribute(SSR_ATTR);
                  hydrating = true;
                }
                if (isTrue(hydrating)) {
                  if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                    invokeInsertHook(vnode, insertedVnodeQueue, true);
                    return oldVnode;
                  } else {
                    warn$2("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.");
                  }
                }
                oldVnode = emptyNodeAt(oldVnode);
              }
              const oldElm = oldVnode.elm;
              const parentElm = nodeOps2.parentNode(oldElm);
              createElm(
                vnode,
                insertedVnodeQueue,
                oldElm._leaveCb ? null : parentElm,
                nodeOps2.nextSibling(oldElm)
              );
              if (isDef(vnode.parent)) {
                let ancestor = vnode.parent;
                const patchable = isPatchable(vnode);
                while (ancestor) {
                  for (let i2 = 0; i2 < cbs.destroy.length; ++i2) {
                    cbs.destroy[i2](ancestor);
                  }
                  ancestor.elm = vnode.elm;
                  if (patchable) {
                    for (let i2 = 0; i2 < cbs.create.length; ++i2) {
                      cbs.create[i2](emptyNode, ancestor);
                    }
                    const insert2 = ancestor.data.hook.insert;
                    if (insert2.merged) {
                      for (let i2 = 1; i2 < insert2.fns.length; i2++) {
                        insert2.fns[i2]();
                      }
                    }
                  } else {
                    registerRef(ancestor);
                  }
                  ancestor = ancestor.parent;
                }
              }
              if (isDef(parentElm)) {
                removeVnodes([oldVnode], 0, 0);
              } else if (isDef(oldVnode.tag)) {
                invokeDestroyHook(oldVnode);
              }
            }
          }
          invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
          return vnode.elm;
        };
      }
      var directives$1 = {
        create: updateDirectives,
        update: updateDirectives,
        destroy: function unbindDirectives(vnode) {
          updateDirectives(vnode, emptyNode);
        }
      };
      function updateDirectives(oldVnode, vnode) {
        if (oldVnode.data.directives || vnode.data.directives) {
          _update(oldVnode, vnode);
        }
      }
      function _update(oldVnode, vnode) {
        const isCreate = oldVnode === emptyNode;
        const isDestroy = vnode === emptyNode;
        const oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context);
        const newDirs = normalizeDirectives(vnode.data.directives, vnode.context);
        const dirsWithInsert = [];
        const dirsWithPostpatch = [];
        let key, oldDir, dir;
        for (key in newDirs) {
          oldDir = oldDirs[key];
          dir = newDirs[key];
          if (!oldDir) {
            callHook(dir, "bind", vnode, oldVnode);
            if (dir.def && dir.def.inserted) {
              dirsWithInsert.push(dir);
            }
          } else {
            dir.oldValue = oldDir.value;
            dir.oldArg = oldDir.arg;
            callHook(dir, "update", vnode, oldVnode);
            if (dir.def && dir.def.componentUpdated) {
              dirsWithPostpatch.push(dir);
            }
          }
        }
        if (dirsWithInsert.length) {
          const callInsert = () => {
            for (let i = 0; i < dirsWithInsert.length; i++) {
              callHook(dirsWithInsert[i], "inserted", vnode, oldVnode);
            }
          };
          if (isCreate) {
            mergeVNodeHook(vnode, "insert", callInsert);
          } else {
            callInsert();
          }
        }
        if (dirsWithPostpatch.length) {
          mergeVNodeHook(vnode, "postpatch", () => {
            for (let i = 0; i < dirsWithPostpatch.length; i++) {
              callHook(dirsWithPostpatch[i], "componentUpdated", vnode, oldVnode);
            }
          });
        }
        if (!isCreate) {
          for (key in oldDirs) {
            if (!newDirs[key]) {
              callHook(oldDirs[key], "unbind", oldVnode, oldVnode, isDestroy);
            }
          }
        }
      }
      var emptyModifiers = /* @__PURE__ */ Object.create(null);
      function normalizeDirectives(dirs, vm) {
        const res = /* @__PURE__ */ Object.create(null);
        if (!dirs) {
          return res;
        }
        let i, dir;
        for (i = 0; i < dirs.length; i++) {
          dir = dirs[i];
          if (!dir.modifiers) {
            dir.modifiers = emptyModifiers;
          }
          res[getRawDirName(dir)] = dir;
          if (vm._setupState && vm._setupState.__sfc) {
            dir.def = dir.def || resolveAsset(vm, "_setupState", "v-" + dir.name);
          }
          dir.def = dir.def || resolveAsset(vm.$options, "directives", dir.name, true);
        }
        return res;
      }
      function getRawDirName(dir) {
        return dir.rawName || `${dir.name}.${Object.keys(dir.modifiers || {}).join(".")}`;
      }
      function callHook(dir, hook, vnode, oldVnode, isDestroy) {
        const fn = dir.def && dir.def[hook];
        if (fn) {
          try {
            fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
          } catch (e) {
            handleError(e, vnode.context, `directive ${dir.name} ${hook} hook`);
          }
        }
      }
      var baseModules = [ref, directives$1];
      function updateAttrs(oldVnode, vnode) {
        const opts = vnode.componentOptions;
        if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
          return;
        }
        if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
          return;
        }
        let key, cur, old;
        const elm = vnode.elm;
        const oldAttrs = oldVnode.data.attrs || {};
        let attrs2 = vnode.data.attrs || {};
        if (isDef(attrs2.__ob__) || isTrue(attrs2._v_attr_proxy)) {
          attrs2 = vnode.data.attrs = extend({}, attrs2);
        }
        for (key in attrs2) {
          cur = attrs2[key];
          old = oldAttrs[key];
          if (old !== cur) {
            setAttr(elm, key, cur, vnode.data.pre);
          }
        }
        if ((isIE || isEdge) && attrs2.value !== oldAttrs.value) {
          setAttr(elm, "value", attrs2.value);
        }
        for (key in oldAttrs) {
          if (isUndef(attrs2[key])) {
            if (isXlink(key)) {
              elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
            } else if (!isEnumeratedAttr(key)) {
              elm.removeAttribute(key);
            }
          }
        }
      }
      function setAttr(el, key, value, isInPre) {
        if (isInPre || el.tagName.indexOf("-") > -1) {
          baseSetAttr(el, key, value);
        } else if (isBooleanAttr(key)) {
          if (isFalsyAttrValue(value)) {
            el.removeAttribute(key);
          } else {
            value = key === "allowfullscreen" && el.tagName === "EMBED" ? "true" : key;
            el.setAttribute(key, value);
          }
        } else if (isEnumeratedAttr(key)) {
          el.setAttribute(key, convertEnumeratedValue(key, value));
        } else if (isXlink(key)) {
          if (isFalsyAttrValue(value)) {
            el.removeAttributeNS(xlinkNS, getXlinkProp(key));
          } else {
            el.setAttributeNS(xlinkNS, key, value);
          }
        } else {
          baseSetAttr(el, key, value);
        }
      }
      function baseSetAttr(el, key, value) {
        if (isFalsyAttrValue(value)) {
          el.removeAttribute(key);
        } else {
          if (isIE && !isIE9 && el.tagName === "TEXTAREA" && key === "placeholder" && value !== "" && !el.__ieph) {
            const blocker = (e) => {
              e.stopImmediatePropagation();
              el.removeEventListener("input", blocker);
            };
            el.addEventListener("input", blocker);
            el.__ieph = true;
          }
          el.setAttribute(key, value);
        }
      }
      var attrs = {
        create: updateAttrs,
        update: updateAttrs
      };
      function updateClass(oldVnode, vnode) {
        const el = vnode.elm;
        const data = vnode.data;
        const oldData = oldVnode.data;
        if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
          return;
        }
        let cls = genClassForVnode(vnode);
        const transitionClass = el._transitionClasses;
        if (isDef(transitionClass)) {
          cls = concat2(cls, stringifyClass(transitionClass));
        }
        if (cls !== el._prevClass) {
          el.setAttribute("class", cls);
          el._prevClass = cls;
        }
      }
      var klass$1 = {
        create: updateClass,
        update: updateClass
      };
      var validDivisionCharRE = /[\w).+\-_$\]]/;
      function parseFilters(exp) {
        let inSingle = false;
        let inDouble = false;
        let inTemplateString = false;
        let inRegex = false;
        let curly = 0;
        let square = 0;
        let paren = 0;
        let lastFilterIndex = 0;
        let c, prev, i, expression, filters;
        for (i = 0; i < exp.length; i++) {
          prev = c;
          c = exp.charCodeAt(i);
          if (inSingle) {
            if (c === 39 && prev !== 92)
              inSingle = false;
          } else if (inDouble) {
            if (c === 34 && prev !== 92)
              inDouble = false;
          } else if (inTemplateString) {
            if (c === 96 && prev !== 92)
              inTemplateString = false;
          } else if (inRegex) {
            if (c === 47 && prev !== 92)
              inRegex = false;
          } else if (c === 124 && exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
            if (expression === void 0) {
              lastFilterIndex = i + 1;
              expression = exp.slice(0, i).trim();
            } else {
              pushFilter();
            }
          } else {
            switch (c) {
              case 34:
                inDouble = true;
                break;
              case 39:
                inSingle = true;
                break;
              case 96:
                inTemplateString = true;
                break;
              case 40:
                paren++;
                break;
              case 41:
                paren--;
                break;
              case 91:
                square++;
                break;
              case 93:
                square--;
                break;
              case 123:
                curly++;
                break;
              case 125:
                curly--;
                break;
            }
            if (c === 47) {
              let j = i - 1;
              let p;
              for (; j >= 0; j--) {
                p = exp.charAt(j);
                if (p !== " ")
                  break;
              }
              if (!p || !validDivisionCharRE.test(p)) {
                inRegex = true;
              }
            }
          }
        }
        if (expression === void 0) {
          expression = exp.slice(0, i).trim();
        } else if (lastFilterIndex !== 0) {
          pushFilter();
        }
        function pushFilter() {
          (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
          lastFilterIndex = i + 1;
        }
        if (filters) {
          for (i = 0; i < filters.length; i++) {
            expression = wrapFilter(expression, filters[i]);
          }
        }
        return expression;
      }
      function wrapFilter(exp, filter) {
        const i = filter.indexOf("(");
        if (i < 0) {
          return `_f("${filter}")(${exp})`;
        } else {
          const name = filter.slice(0, i);
          const args = filter.slice(i + 1);
          return `_f("${name}")(${exp}${args !== ")" ? "," + args : args}`;
        }
      }
      function baseWarn(msg, range2) {
        console.error(`[Vue compiler]: ${msg}`);
      }
      function pluckModuleFunction(modules3, key) {
        return modules3 ? modules3.map((m) => m[key]).filter((_2) => _2) : [];
      }
      function addProp(el, name, value, range2, dynamic) {
        (el.props || (el.props = [])).push(rangeSetItem({ name, value, dynamic }, range2));
        el.plain = false;
      }
      function addAttr(el, name, value, range2, dynamic) {
        const attrs2 = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
        attrs2.push(rangeSetItem({ name, value, dynamic }, range2));
        el.plain = false;
      }
      function addRawAttr(el, name, value, range2) {
        el.attrsMap[name] = value;
        el.attrsList.push(rangeSetItem({ name, value }, range2));
      }
      function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range2) {
        (el.directives || (el.directives = [])).push(rangeSetItem({
          name,
          rawName,
          value,
          arg,
          isDynamicArg,
          modifiers
        }, range2));
        el.plain = false;
      }
      function prependModifierMarker(symbol, name, dynamic) {
        return dynamic ? `_p(${name},"${symbol}")` : symbol + name;
      }
      function addHandler(el, name, value, modifiers, important, warn2, range2, dynamic) {
        modifiers = modifiers || emptyObject;
        if (warn2 && modifiers.prevent && modifiers.passive) {
          warn2("passive and prevent can't be used together. Passive handler can't prevent default event.", range2);
        }
        if (modifiers.right) {
          if (dynamic) {
            name = `(${name})==='click'?'contextmenu':(${name})`;
          } else if (name === "click") {
            name = "contextmenu";
            delete modifiers.right;
          }
        } else if (modifiers.middle) {
          if (dynamic) {
            name = `(${name})==='click'?'mouseup':(${name})`;
          } else if (name === "click") {
            name = "mouseup";
          }
        }
        if (modifiers.capture) {
          delete modifiers.capture;
          name = prependModifierMarker("!", name, dynamic);
        }
        if (modifiers.once) {
          delete modifiers.once;
          name = prependModifierMarker("~", name, dynamic);
        }
        if (modifiers.passive) {
          delete modifiers.passive;
          name = prependModifierMarker("&", name, dynamic);
        }
        let events2;
        if (modifiers.native) {
          delete modifiers.native;
          events2 = el.nativeEvents || (el.nativeEvents = {});
        } else {
          events2 = el.events || (el.events = {});
        }
        const newHandler = rangeSetItem({ value: value.trim(), dynamic }, range2);
        if (modifiers !== emptyObject) {
          newHandler.modifiers = modifiers;
        }
        const handlers = events2[name];
        if (Array.isArray(handlers)) {
          important ? handlers.unshift(newHandler) : handlers.push(newHandler);
        } else if (handlers) {
          events2[name] = important ? [newHandler, handlers] : [handlers, newHandler];
        } else {
          events2[name] = newHandler;
        }
        el.plain = false;
      }
      function getRawBindingAttr(el, name) {
        return el.rawAttrsMap[":" + name] || el.rawAttrsMap["v-bind:" + name] || el.rawAttrsMap[name];
      }
      function getBindingAttr(el, name, getStatic) {
        const dynamicValue = getAndRemoveAttr(el, ":" + name) || getAndRemoveAttr(el, "v-bind:" + name);
        if (dynamicValue != null) {
          return parseFilters(dynamicValue);
        } else if (getStatic !== false) {
          const staticValue = getAndRemoveAttr(el, name);
          if (staticValue != null) {
            return JSON.stringify(staticValue);
          }
        }
      }
      function getAndRemoveAttr(el, name, removeFromMap) {
        let val;
        if ((val = el.attrsMap[name]) != null) {
          const list = el.attrsList;
          for (let i = 0, l = list.length; i < l; i++) {
            if (list[i].name === name) {
              list.splice(i, 1);
              break;
            }
          }
        }
        if (removeFromMap) {
          delete el.attrsMap[name];
        }
        return val;
      }
      function getAndRemoveAttrByRegex(el, name) {
        const list = el.attrsList;
        for (let i = 0, l = list.length; i < l; i++) {
          const attr = list[i];
          if (name.test(attr.name)) {
            list.splice(i, 1);
            return attr;
          }
        }
      }
      function rangeSetItem(item, range2) {
        if (range2) {
          if (range2.start != null) {
            item.start = range2.start;
          }
          if (range2.end != null) {
            item.end = range2.end;
          }
        }
        return item;
      }
      function genComponentModel(el, value, modifiers) {
        const { number, trim } = modifiers || {};
        const baseValueExpression = "$$v";
        let valueExpression = baseValueExpression;
        if (trim) {
          valueExpression = `(typeof ${baseValueExpression} === 'string'? ${baseValueExpression}.trim(): ${baseValueExpression})`;
        }
        if (number) {
          valueExpression = `_n(${valueExpression})`;
        }
        const assignment = genAssignmentCode(value, valueExpression);
        el.model = {
          value: `(${value})`,
          expression: JSON.stringify(value),
          callback: `function (${baseValueExpression}) {${assignment}}`
        };
      }
      function genAssignmentCode(value, assignment) {
        const res = parseModel(value);
        if (res.key === null) {
          return `${value}=${assignment}`;
        } else {
          return `$set(${res.exp}, ${res.key}, ${assignment})`;
        }
      }
      var len;
      var str;
      var chr;
      var index;
      var expressionPos;
      var expressionEndPos;
      function parseModel(val) {
        val = val.trim();
        len = val.length;
        if (val.indexOf("[") < 0 || val.lastIndexOf("]") < len - 1) {
          index = val.lastIndexOf(".");
          if (index > -1) {
            return {
              exp: val.slice(0, index),
              key: '"' + val.slice(index + 1) + '"'
            };
          } else {
            return {
              exp: val,
              key: null
            };
          }
        }
        str = val;
        index = expressionPos = expressionEndPos = 0;
        while (!eof()) {
          chr = next();
          if (isStringStart(chr)) {
            parseString(chr);
          } else if (chr === 91) {
            parseBracket(chr);
          }
        }
        return {
          exp: val.slice(0, expressionPos),
          key: val.slice(expressionPos + 1, expressionEndPos)
        };
      }
      function next() {
        return str.charCodeAt(++index);
      }
      function eof() {
        return index >= len;
      }
      function isStringStart(chr2) {
        return chr2 === 34 || chr2 === 39;
      }
      function parseBracket(chr2) {
        let inBracket = 1;
        expressionPos = index;
        while (!eof()) {
          chr2 = next();
          if (isStringStart(chr2)) {
            parseString(chr2);
            continue;
          }
          if (chr2 === 91)
            inBracket++;
          if (chr2 === 93)
            inBracket--;
          if (inBracket === 0) {
            expressionEndPos = index;
            break;
          }
        }
      }
      function parseString(chr2) {
        const stringQuote = chr2;
        while (!eof()) {
          chr2 = next();
          if (chr2 === stringQuote) {
            break;
          }
        }
      }
      var warn$1;
      var RANGE_TOKEN = "__r";
      var CHECKBOX_RADIO_TOKEN = "__c";
      function model$1(el, dir, _warn) {
        warn$1 = _warn;
        const value = dir.value;
        const modifiers = dir.modifiers;
        const tag = el.tag;
        const type = el.attrsMap.type;
        {
          if (tag === "input" && type === "file") {
            warn$1(`<${el.tag} v-model="${value}" type="file">:
File inputs are read only. Use a v-on:change listener instead.`, el.rawAttrsMap["v-model"]);
          }
        }
        if (el.component) {
          genComponentModel(el, value, modifiers);
          return false;
        } else if (tag === "select") {
          genSelect(el, value, modifiers);
        } else if (tag === "input" && type === "checkbox") {
          genCheckboxModel(el, value, modifiers);
        } else if (tag === "input" && type === "radio") {
          genRadioModel(el, value, modifiers);
        } else if (tag === "input" || tag === "textarea") {
          genDefaultModel(el, value, modifiers);
        } else if (!config.isReservedTag(tag)) {
          genComponentModel(el, value, modifiers);
          return false;
        } else {
          warn$1(`<${el.tag} v-model="${value}">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.`, el.rawAttrsMap["v-model"]);
        }
        return true;
      }
      function genCheckboxModel(el, value, modifiers) {
        const number = modifiers && modifiers.number;
        const valueBinding = getBindingAttr(el, "value") || "null";
        const trueValueBinding = getBindingAttr(el, "true-value") || "true";
        const falseValueBinding = getBindingAttr(el, "false-value") || "false";
        addProp(el, "checked", `Array.isArray(${value})?_i(${value},${valueBinding})>-1` + (trueValueBinding === "true" ? `:(${value})` : `:_q(${value},${trueValueBinding})`));
        addHandler(el, "change", `var $$a=${value},$$el=$event.target,$$c=$$el.checked?(${trueValueBinding}):(${falseValueBinding});if(Array.isArray($$a)){var $$v=${number ? "_n(" + valueBinding + ")" : valueBinding},$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(${genAssignmentCode(value, "$$a.concat([$$v])")})}else{$$i>-1&&(${genAssignmentCode(value, "$$a.slice(0,$$i).concat($$a.slice($$i+1))")})}}else{${genAssignmentCode(value, "$$c")}}`, null, true);
      }
      function genRadioModel(el, value, modifiers) {
        const number = modifiers && modifiers.number;
        let valueBinding = getBindingAttr(el, "value") || "null";
        valueBinding = number ? `_n(${valueBinding})` : valueBinding;
        addProp(el, "checked", `_q(${value},${valueBinding})`);
        addHandler(el, "change", genAssignmentCode(value, valueBinding), null, true);
      }
      function genSelect(el, value, modifiers) {
        const number = modifiers && modifiers.number;
        const selectedVal = `Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return ${number ? "_n(val)" : "val"}})`;
        const assignment = "$event.target.multiple ? $$selectedVal : $$selectedVal[0]";
        let code = `var $$selectedVal = ${selectedVal};`;
        code = `${code} ${genAssignmentCode(value, assignment)}`;
        addHandler(el, "change", code, null, true);
      }
      function genDefaultModel(el, value, modifiers) {
        const type = el.attrsMap.type;
        {
          const value2 = el.attrsMap["v-bind:value"] || el.attrsMap[":value"];
          const typeBinding = el.attrsMap["v-bind:type"] || el.attrsMap[":type"];
          if (value2 && !typeBinding) {
            const binding = el.attrsMap["v-bind:value"] ? "v-bind:value" : ":value";
            warn$1(`${binding}="${value2}" conflicts with v-model on the same element because the latter already expands to a value binding internally`, el.rawAttrsMap[binding]);
          }
        }
        const { lazy, number, trim } = modifiers || {};
        const needCompositionGuard = !lazy && type !== "range";
        const event = lazy ? "change" : type === "range" ? RANGE_TOKEN : "input";
        let valueExpression = "$event.target.value";
        if (trim) {
          valueExpression = `$event.target.value.trim()`;
        }
        if (number) {
          valueExpression = `_n(${valueExpression})`;
        }
        let code = genAssignmentCode(value, valueExpression);
        if (needCompositionGuard) {
          code = `if($event.target.composing)return;${code}`;
        }
        addProp(el, "value", `(${value})`);
        addHandler(el, event, code, null, true);
        if (trim || number) {
          addHandler(el, "blur", "$forceUpdate()");
        }
      }
      function normalizeEvents(on2) {
        if (isDef(on2[RANGE_TOKEN])) {
          const event = isIE ? "change" : "input";
          on2[event] = [].concat(on2[RANGE_TOKEN], on2[event] || []);
          delete on2[RANGE_TOKEN];
        }
        if (isDef(on2[CHECKBOX_RADIO_TOKEN])) {
          on2.change = [].concat(on2[CHECKBOX_RADIO_TOKEN], on2.change || []);
          delete on2[CHECKBOX_RADIO_TOKEN];
        }
      }
      var target;
      function createOnceHandler(event, handler, capture) {
        const _target = target;
        return function onceHandler() {
          const res = handler.apply(null, arguments);
          if (res !== null) {
            remove(event, onceHandler, capture, _target);
          }
        };
      }
      var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
      function add(name, handler, capture, passive) {
        if (useMicrotaskFix) {
          const attachedTimestamp = currentFlushTimestamp;
          const original = handler;
          handler = original._wrapper = function(e) {
            if (e.target === e.currentTarget || e.timeStamp >= attachedTimestamp || e.timeStamp <= 0 || e.target.ownerDocument !== document) {
              return original.apply(this, arguments);
            }
          };
        }
        target.addEventListener(name, handler, supportsPassive ? { capture, passive } : capture);
      }
      function remove(name, handler, capture, _target) {
        (_target || target).removeEventListener(
          name,
          handler._wrapper || handler,
          capture
        );
      }
      function updateDOMListeners(oldVnode, vnode) {
        if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
          return;
        }
        const on2 = vnode.data.on || {};
        const oldOn = oldVnode.data.on || {};
        target = vnode.elm || oldVnode.elm;
        normalizeEvents(on2);
        updateListeners(on2, oldOn, add, remove, createOnceHandler, vnode.context);
        target = void 0;
      }
      var events = {
        create: updateDOMListeners,
        update: updateDOMListeners,
        destroy: (vnode) => updateDOMListeners(vnode, emptyNode)
      };
      var svgContainer;
      function updateDOMProps(oldVnode, vnode) {
        if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
          return;
        }
        let key, cur;
        const elm = vnode.elm;
        const oldProps = oldVnode.data.domProps || {};
        let props2 = vnode.data.domProps || {};
        if (isDef(props2.__ob__) || isTrue(props2._v_attr_proxy)) {
          props2 = vnode.data.domProps = extend({}, props2);
        }
        for (key in oldProps) {
          if (!(key in props2)) {
            elm[key] = "";
          }
        }
        for (key in props2) {
          cur = props2[key];
          if (key === "textContent" || key === "innerHTML") {
            if (vnode.children)
              vnode.children.length = 0;
            if (cur === oldProps[key])
              continue;
            if (elm.childNodes.length === 1) {
              elm.removeChild(elm.childNodes[0]);
            }
          }
          if (key === "value" && elm.tagName !== "PROGRESS") {
            elm._value = cur;
            const strCur = isUndef(cur) ? "" : String(cur);
            if (shouldUpdateValue(elm, strCur)) {
              elm.value = strCur;
            }
          } else if (key === "innerHTML" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
            svgContainer = svgContainer || document.createElement("div");
            svgContainer.innerHTML = `<svg>${cur}</svg>`;
            const svg = svgContainer.firstChild;
            while (elm.firstChild) {
              elm.removeChild(elm.firstChild);
            }
            while (svg.firstChild) {
              elm.appendChild(svg.firstChild);
            }
          } else if (cur !== oldProps[key]) {
            try {
              elm[key] = cur;
            } catch (e) {
            }
          }
        }
      }
      function shouldUpdateValue(elm, checkVal) {
        return !elm.composing && (elm.tagName === "OPTION" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
      }
      function isNotInFocusAndDirty(elm, checkVal) {
        let notInFocus = true;
        try {
          notInFocus = document.activeElement !== elm;
        } catch (e) {
        }
        return notInFocus && elm.value !== checkVal;
      }
      function isDirtyWithModifiers(elm, newVal) {
        const value = elm.value;
        const modifiers = elm._vModifiers;
        if (isDef(modifiers)) {
          if (modifiers.number) {
            return toNumber(value) !== toNumber(newVal);
          }
          if (modifiers.trim) {
            return value.trim() !== newVal.trim();
          }
        }
        return value !== newVal;
      }
      var domProps = {
        create: updateDOMProps,
        update: updateDOMProps
      };
      var parseStyleText = cached(function(cssText) {
        const res = {};
        const listDelimiter = /;(?![^(]*\))/g;
        const propertyDelimiter = /:(.+)/;
        cssText.split(listDelimiter).forEach(function(item) {
          if (item) {
            const tmp = item.split(propertyDelimiter);
            tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
          }
        });
        return res;
      });
      function normalizeStyleData(data) {
        const style2 = normalizeStyleBinding(data.style);
        return data.staticStyle ? extend(data.staticStyle, style2) : style2;
      }
      function normalizeStyleBinding(bindingStyle) {
        if (Array.isArray(bindingStyle)) {
          return toObject(bindingStyle);
        }
        if (typeof bindingStyle === "string") {
          return parseStyleText(bindingStyle);
        }
        return bindingStyle;
      }
      function getStyle(vnode, checkChild) {
        const res = {};
        let styleData;
        if (checkChild) {
          let childNode = vnode;
          while (childNode.componentInstance) {
            childNode = childNode.componentInstance._vnode;
            if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
              extend(res, styleData);
            }
          }
        }
        if (styleData = normalizeStyleData(vnode.data)) {
          extend(res, styleData);
        }
        let parentNode2 = vnode;
        while (parentNode2 = parentNode2.parent) {
          if (parentNode2.data && (styleData = normalizeStyleData(parentNode2.data))) {
            extend(res, styleData);
          }
        }
        return res;
      }
      var cssVarRE = /^--/;
      var importantRE = /\s*!important$/;
      var setProp = (el, name, val) => {
        if (cssVarRE.test(name)) {
          el.style.setProperty(name, val);
        } else if (importantRE.test(val)) {
          el.style.setProperty(hyphenate(name), val.replace(importantRE, ""), "important");
        } else {
          const normalizedName = normalize2(name);
          if (Array.isArray(val)) {
            for (let i = 0, len2 = val.length; i < len2; i++) {
              el.style[normalizedName] = val[i];
            }
          } else {
            el.style[normalizedName] = val;
          }
        }
      };
      var vendorNames = ["Webkit", "Moz", "ms"];
      var emptyStyle;
      var normalize2 = cached(function(prop) {
        emptyStyle = emptyStyle || document.createElement("div").style;
        prop = camelize(prop);
        if (prop !== "filter" && prop in emptyStyle) {
          return prop;
        }
        const capName = prop.charAt(0).toUpperCase() + prop.slice(1);
        for (let i = 0; i < vendorNames.length; i++) {
          const name = vendorNames[i] + capName;
          if (name in emptyStyle) {
            return name;
          }
        }
      });
      function updateStyle(oldVnode, vnode) {
        const data = vnode.data;
        const oldData = oldVnode.data;
        if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
          return;
        }
        let cur, name;
        const el = vnode.elm;
        const oldStaticStyle = oldData.staticStyle;
        const oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
        const oldStyle = oldStaticStyle || oldStyleBinding;
        const style2 = normalizeStyleBinding(vnode.data.style) || {};
        vnode.data.normalizedStyle = isDef(style2.__ob__) ? extend({}, style2) : style2;
        const newStyle = getStyle(vnode, true);
        for (name in oldStyle) {
          if (isUndef(newStyle[name])) {
            setProp(el, name, "");
          }
        }
        for (name in newStyle) {
          cur = newStyle[name];
          if (cur !== oldStyle[name]) {
            setProp(el, name, cur == null ? "" : cur);
          }
        }
      }
      var style$1 = {
        create: updateStyle,
        update: updateStyle
      };
      var whitespaceRE$1 = /\s+/;
      function addClass(el, cls) {
        if (!cls || !(cls = cls.trim())) {
          return;
        }
        if (el.classList) {
          if (cls.indexOf(" ") > -1) {
            cls.split(whitespaceRE$1).forEach((c) => el.classList.add(c));
          } else {
            el.classList.add(cls);
          }
        } else {
          const cur = ` ${el.getAttribute("class") || ""} `;
          if (cur.indexOf(" " + cls + " ") < 0) {
            el.setAttribute("class", (cur + cls).trim());
          }
        }
      }
      function removeClass(el, cls) {
        if (!cls || !(cls = cls.trim())) {
          return;
        }
        if (el.classList) {
          if (cls.indexOf(" ") > -1) {
            cls.split(whitespaceRE$1).forEach((c) => el.classList.remove(c));
          } else {
            el.classList.remove(cls);
          }
          if (!el.classList.length) {
            el.removeAttribute("class");
          }
        } else {
          let cur = ` ${el.getAttribute("class") || ""} `;
          const tar = " " + cls + " ";
          while (cur.indexOf(tar) >= 0) {
            cur = cur.replace(tar, " ");
          }
          cur = cur.trim();
          if (cur) {
            el.setAttribute("class", cur);
          } else {
            el.removeAttribute("class");
          }
        }
      }
      function resolveTransition(def2) {
        if (!def2) {
          return;
        }
        if (typeof def2 === "object") {
          const res = {};
          if (def2.css !== false) {
            extend(res, autoCssTransition(def2.name || "v"));
          }
          extend(res, def2);
          return res;
        } else if (typeof def2 === "string") {
          return autoCssTransition(def2);
        }
      }
      var autoCssTransition = cached((name) => {
        return {
          enterClass: `${name}-enter`,
          enterToClass: `${name}-enter-to`,
          enterActiveClass: `${name}-enter-active`,
          leaveClass: `${name}-leave`,
          leaveToClass: `${name}-leave-to`,
          leaveActiveClass: `${name}-leave-active`
        };
      });
      var hasTransition = inBrowser && !isIE9;
      var TRANSITION = "transition";
      var ANIMATION = "animation";
      var transitionProp = "transition";
      var transitionEndEvent = "transitionend";
      var animationProp = "animation";
      var animationEndEvent = "animationend";
      if (hasTransition) {
        if (window.ontransitionend === void 0 && window.onwebkittransitionend !== void 0) {
          transitionProp = "WebkitTransition";
          transitionEndEvent = "webkitTransitionEnd";
        }
        if (window.onanimationend === void 0 && window.onwebkitanimationend !== void 0) {
          animationProp = "WebkitAnimation";
          animationEndEvent = "webkitAnimationEnd";
        }
      }
      var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : (fn) => fn();
      function nextFrame(fn) {
        raf(() => {
          raf(fn);
        });
      }
      function addTransitionClass(el, cls) {
        const transitionClasses = el._transitionClasses || (el._transitionClasses = []);
        if (transitionClasses.indexOf(cls) < 0) {
          transitionClasses.push(cls);
          addClass(el, cls);
        }
      }
      function removeTransitionClass(el, cls) {
        if (el._transitionClasses) {
          remove$2(el._transitionClasses, cls);
        }
        removeClass(el, cls);
      }
      function whenTransitionEnds(el, expectedType, cb) {
        const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
        if (!type)
          return cb();
        const event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
        let ended = 0;
        const end = () => {
          el.removeEventListener(event, onEnd);
          cb();
        };
        const onEnd = (e) => {
          if (e.target === el) {
            if (++ended >= propCount) {
              end();
            }
          }
        };
        setTimeout(() => {
          if (ended < propCount) {
            end();
          }
        }, timeout + 1);
        el.addEventListener(event, onEnd);
      }
      var transformRE = /\b(transform|all)(,|$)/;
      function getTransitionInfo(el, expectedType) {
        const styles = window.getComputedStyle(el);
        const transitionDelays = (styles[transitionProp + "Delay"] || "").split(", ");
        const transitionDurations = (styles[transitionProp + "Duration"] || "").split(", ");
        const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
        const animationDelays = (styles[animationProp + "Delay"] || "").split(", ");
        const animationDurations = (styles[animationProp + "Duration"] || "").split(", ");
        const animationTimeout = getTimeout(animationDelays, animationDurations);
        let type;
        let timeout = 0;
        let propCount = 0;
        if (expectedType === TRANSITION) {
          if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
          }
        } else if (expectedType === ANIMATION) {
          if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
          }
        } else {
          timeout = Math.max(transitionTimeout, animationTimeout);
          type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
          propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
        }
        const hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + "Property"]);
        return {
          type,
          timeout,
          propCount,
          hasTransform
        };
      }
      function getTimeout(delays, durations) {
        while (delays.length < durations.length) {
          delays = delays.concat(delays);
        }
        return Math.max.apply(null, durations.map((d, i) => {
          return toMs(d) + toMs(delays[i]);
        }));
      }
      function toMs(s) {
        return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
      }
      function enter(vnode, toggleDisplay) {
        const el = vnode.elm;
        if (isDef(el._leaveCb)) {
          el._leaveCb.cancelled = true;
          el._leaveCb();
        }
        const data = resolveTransition(vnode.data.transition);
        if (isUndef(data)) {
          return;
        }
        if (isDef(el._enterCb) || el.nodeType !== 1) {
          return;
        }
        const { css, type, enterClass, enterToClass, enterActiveClass, appearClass, appearToClass, appearActiveClass, beforeEnter, enter: enter2, afterEnter, enterCancelled, beforeAppear, appear, afterAppear, appearCancelled, duration } = data;
        let context = activeInstance;
        let transitionNode = activeInstance.$vnode;
        while (transitionNode && transitionNode.parent) {
          context = transitionNode.context;
          transitionNode = transitionNode.parent;
        }
        const isAppear = !context._isMounted || !vnode.isRootInsert;
        if (isAppear && !appear && appear !== "") {
          return;
        }
        const startClass = isAppear && appearClass ? appearClass : enterClass;
        const activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
        const toClass = isAppear && appearToClass ? appearToClass : enterToClass;
        const beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
        const enterHook = isAppear ? isFunction(appear) ? appear : enter2 : enter2;
        const afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
        const enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
        const explicitEnterDuration = toNumber(isObject3(duration) ? duration.enter : duration);
        if (explicitEnterDuration != null) {
          checkDuration(explicitEnterDuration, "enter", vnode);
        }
        const expectsCSS = css !== false && !isIE9;
        const userWantsControl = getHookArgumentsLength(enterHook);
        const cb = el._enterCb = once(() => {
          if (expectsCSS) {
            removeTransitionClass(el, toClass);
            removeTransitionClass(el, activeClass);
          }
          if (cb.cancelled) {
            if (expectsCSS) {
              removeTransitionClass(el, startClass);
            }
            enterCancelledHook && enterCancelledHook(el);
          } else {
            afterEnterHook && afterEnterHook(el);
          }
          el._enterCb = null;
        });
        if (!vnode.data.show) {
          mergeVNodeHook(vnode, "insert", () => {
            const parent = el.parentNode;
            const pendingNode = parent && parent._pending && parent._pending[vnode.key];
            if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
              pendingNode.elm._leaveCb();
            }
            enterHook && enterHook(el, cb);
          });
        }
        beforeEnterHook && beforeEnterHook(el);
        if (expectsCSS) {
          addTransitionClass(el, startClass);
          addTransitionClass(el, activeClass);
          nextFrame(() => {
            removeTransitionClass(el, startClass);
            if (!cb.cancelled) {
              addTransitionClass(el, toClass);
              if (!userWantsControl) {
                if (isValidDuration(explicitEnterDuration)) {
                  setTimeout(cb, explicitEnterDuration);
                } else {
                  whenTransitionEnds(el, type, cb);
                }
              }
            }
          });
        }
        if (vnode.data.show) {
          toggleDisplay && toggleDisplay();
          enterHook && enterHook(el, cb);
        }
        if (!expectsCSS && !userWantsControl) {
          cb();
        }
      }
      function leave(vnode, rm) {
        const el = vnode.elm;
        if (isDef(el._enterCb)) {
          el._enterCb.cancelled = true;
          el._enterCb();
        }
        const data = resolveTransition(vnode.data.transition);
        if (isUndef(data) || el.nodeType !== 1) {
          return rm();
        }
        if (isDef(el._leaveCb)) {
          return;
        }
        const { css, type, leaveClass, leaveToClass, leaveActiveClass, beforeLeave, leave: leave2, afterLeave, leaveCancelled, delayLeave, duration } = data;
        const expectsCSS = css !== false && !isIE9;
        const userWantsControl = getHookArgumentsLength(leave2);
        const explicitLeaveDuration = toNumber(isObject3(duration) ? duration.leave : duration);
        if (isDef(explicitLeaveDuration)) {
          checkDuration(explicitLeaveDuration, "leave", vnode);
        }
        const cb = el._leaveCb = once(() => {
          if (el.parentNode && el.parentNode._pending) {
            el.parentNode._pending[vnode.key] = null;
          }
          if (expectsCSS) {
            removeTransitionClass(el, leaveToClass);
            removeTransitionClass(el, leaveActiveClass);
          }
          if (cb.cancelled) {
            if (expectsCSS) {
              removeTransitionClass(el, leaveClass);
            }
            leaveCancelled && leaveCancelled(el);
          } else {
            rm();
            afterLeave && afterLeave(el);
          }
          el._leaveCb = null;
        });
        if (delayLeave) {
          delayLeave(performLeave);
        } else {
          performLeave();
        }
        function performLeave() {
          if (cb.cancelled) {
            return;
          }
          if (!vnode.data.show && el.parentNode) {
            (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
          }
          beforeLeave && beforeLeave(el);
          if (expectsCSS) {
            addTransitionClass(el, leaveClass);
            addTransitionClass(el, leaveActiveClass);
            nextFrame(() => {
              removeTransitionClass(el, leaveClass);
              if (!cb.cancelled) {
                addTransitionClass(el, leaveToClass);
                if (!userWantsControl) {
                  if (isValidDuration(explicitLeaveDuration)) {
                    setTimeout(cb, explicitLeaveDuration);
                  } else {
                    whenTransitionEnds(el, type, cb);
                  }
                }
              }
            });
          }
          leave2 && leave2(el, cb);
          if (!expectsCSS && !userWantsControl) {
            cb();
          }
        }
      }
      function checkDuration(val, name, vnode) {
        if (typeof val !== "number") {
          warn$2(`<transition> explicit ${name} duration is not a valid number - got ${JSON.stringify(val)}.`, vnode.context);
        } else if (isNaN(val)) {
          warn$2(`<transition> explicit ${name} duration is NaN - the duration expression might be incorrect.`, vnode.context);
        }
      }
      function isValidDuration(val) {
        return typeof val === "number" && !isNaN(val);
      }
      function getHookArgumentsLength(fn) {
        if (isUndef(fn)) {
          return false;
        }
        const invokerFns = fn.fns;
        if (isDef(invokerFns)) {
          return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
        } else {
          return (fn._length || fn.length) > 1;
        }
      }
      function _enter(_2, vnode) {
        if (vnode.data.show !== true) {
          enter(vnode);
        }
      }
      var transition = inBrowser ? {
        create: _enter,
        activate: _enter,
        remove(vnode, rm) {
          if (vnode.data.show !== true) {
            leave(vnode, rm);
          } else {
            rm();
          }
        }
      } : {};
      var platformModules = [attrs, klass$1, events, domProps, style$1, transition];
      var modules$1 = platformModules.concat(baseModules);
      var patch = createPatchFunction({ nodeOps, modules: modules$1 });
      if (isIE9) {
        document.addEventListener("selectionchange", () => {
          const el = document.activeElement;
          if (el && el.vmodel) {
            trigger(el, "input");
          }
        });
      }
      var directive = {
        inserted(el, binding, vnode, oldVnode) {
          if (vnode.tag === "select") {
            if (oldVnode.elm && !oldVnode.elm._vOptions) {
              mergeVNodeHook(vnode, "postpatch", () => {
                directive.componentUpdated(el, binding, vnode);
              });
            } else {
              setSelected(el, binding, vnode.context);
            }
            el._vOptions = [].map.call(el.options, getValue);
          } else if (vnode.tag === "textarea" || isTextInputType(el.type)) {
            el._vModifiers = binding.modifiers;
            if (!binding.modifiers.lazy) {
              el.addEventListener("compositionstart", onCompositionStart);
              el.addEventListener("compositionend", onCompositionEnd);
              el.addEventListener("change", onCompositionEnd);
              if (isIE9) {
                el.vmodel = true;
              }
            }
          }
        },
        componentUpdated(el, binding, vnode) {
          if (vnode.tag === "select") {
            setSelected(el, binding, vnode.context);
            const prevOptions = el._vOptions;
            const curOptions = el._vOptions = [].map.call(el.options, getValue);
            if (curOptions.some((o, i) => !looseEqual(o, prevOptions[i]))) {
              const needReset = el.multiple ? binding.value.some((v) => hasNoMatchingOption(v, curOptions)) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
              if (needReset) {
                trigger(el, "change");
              }
            }
          }
        }
      };
      function setSelected(el, binding, vm) {
        actuallySetSelected(el, binding, vm);
        if (isIE || isEdge) {
          setTimeout(() => {
            actuallySetSelected(el, binding, vm);
          }, 0);
        }
      }
      function actuallySetSelected(el, binding, vm) {
        const value = binding.value;
        const isMultiple = el.multiple;
        if (isMultiple && !Array.isArray(value)) {
          warn$2(`<select multiple v-model="${binding.expression}"> expects an Array value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}`, vm);
          return;
        }
        let selected, option;
        for (let i = 0, l = el.options.length; i < l; i++) {
          option = el.options[i];
          if (isMultiple) {
            selected = looseIndexOf(value, getValue(option)) > -1;
            if (option.selected !== selected) {
              option.selected = selected;
            }
          } else {
            if (looseEqual(getValue(option), value)) {
              if (el.selectedIndex !== i) {
                el.selectedIndex = i;
              }
              return;
            }
          }
        }
        if (!isMultiple) {
          el.selectedIndex = -1;
        }
      }
      function hasNoMatchingOption(value, options) {
        return options.every((o) => !looseEqual(o, value));
      }
      function getValue(option) {
        return "_value" in option ? option._value : option.value;
      }
      function onCompositionStart(e) {
        e.target.composing = true;
      }
      function onCompositionEnd(e) {
        if (!e.target.composing)
          return;
        e.target.composing = false;
        trigger(e.target, "input");
      }
      function trigger(el, type) {
        const e = document.createEvent("HTMLEvents");
        e.initEvent(type, true, true);
        el.dispatchEvent(e);
      }
      function locateNode(vnode) {
        return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
      }
      var show = {
        bind(el, { value }, vnode) {
          vnode = locateNode(vnode);
          const transition2 = vnode.data && vnode.data.transition;
          const originalDisplay = el.__vOriginalDisplay = el.style.display === "none" ? "" : el.style.display;
          if (value && transition2) {
            vnode.data.show = true;
            enter(vnode, () => {
              el.style.display = originalDisplay;
            });
          } else {
            el.style.display = value ? originalDisplay : "none";
          }
        },
        update(el, { value, oldValue }, vnode) {
          if (!value === !oldValue)
            return;
          vnode = locateNode(vnode);
          const transition2 = vnode.data && vnode.data.transition;
          if (transition2) {
            vnode.data.show = true;
            if (value) {
              enter(vnode, () => {
                el.style.display = el.__vOriginalDisplay;
              });
            } else {
              leave(vnode, () => {
                el.style.display = "none";
              });
            }
          } else {
            el.style.display = value ? el.__vOriginalDisplay : "none";
          }
        },
        unbind(el, binding, vnode, oldVnode, isDestroy) {
          if (!isDestroy) {
            el.style.display = el.__vOriginalDisplay;
          }
        }
      };
      var platformDirectives = {
        model: directive,
        show
      };
      var transitionProps = {
        name: String,
        appear: Boolean,
        css: Boolean,
        mode: String,
        type: String,
        enterClass: String,
        leaveClass: String,
        enterToClass: String,
        leaveToClass: String,
        enterActiveClass: String,
        leaveActiveClass: String,
        appearClass: String,
        appearActiveClass: String,
        appearToClass: String,
        duration: [Number, String, Object]
      };
      function getRealChild(vnode) {
        const compOptions = vnode && vnode.componentOptions;
        if (compOptions && compOptions.Ctor.options.abstract) {
          return getRealChild(getFirstComponentChild(compOptions.children));
        } else {
          return vnode;
        }
      }
      function extractTransitionData(comp) {
        const data = {};
        const options = comp.$options;
        for (const key in options.propsData) {
          data[key] = comp[key];
        }
        const listeners = options._parentListeners;
        for (const key in listeners) {
          data[camelize(key)] = listeners[key];
        }
        return data;
      }
      function placeholder(h2, rawChild) {
        if (/\d-keep-alive$/.test(rawChild.tag)) {
          return h2("keep-alive", {
            props: rawChild.componentOptions.propsData
          });
        }
      }
      function hasParentTransition(vnode) {
        while (vnode = vnode.parent) {
          if (vnode.data.transition) {
            return true;
          }
        }
      }
      function isSameChild(child, oldChild) {
        return oldChild.key === child.key && oldChild.tag === child.tag;
      }
      var isNotTextNode = (c) => c.tag || isAsyncPlaceholder(c);
      var isVShowDirective = (d) => d.name === "show";
      var Transition = {
        name: "transition",
        props: transitionProps,
        abstract: true,
        render(h2) {
          let children = this.$slots.default;
          if (!children) {
            return;
          }
          children = children.filter(isNotTextNode);
          if (!children.length) {
            return;
          }
          if (children.length > 1) {
            warn$2("<transition> can only be used on a single element. Use <transition-group> for lists.", this.$parent);
          }
          const mode = this.mode;
          if (mode && mode !== "in-out" && mode !== "out-in") {
            warn$2("invalid <transition> mode: " + mode, this.$parent);
          }
          const rawChild = children[0];
          if (hasParentTransition(this.$vnode)) {
            return rawChild;
          }
          const child = getRealChild(rawChild);
          if (!child) {
            return rawChild;
          }
          if (this._leaving) {
            return placeholder(h2, rawChild);
          }
          const id = `__transition-${this._uid}-`;
          child.key = child.key == null ? child.isComment ? id + "comment" : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
          const data = (child.data || (child.data = {})).transition = extractTransitionData(this);
          const oldRawChild = this._vnode;
          const oldChild = getRealChild(oldRawChild);
          if (child.data.directives && child.data.directives.some(isVShowDirective)) {
            child.data.show = true;
          }
          if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
            const oldData = oldChild.data.transition = extend({}, data);
            if (mode === "out-in") {
              this._leaving = true;
              mergeVNodeHook(oldData, "afterLeave", () => {
                this._leaving = false;
                this.$forceUpdate();
              });
              return placeholder(h2, rawChild);
            } else if (mode === "in-out") {
              if (isAsyncPlaceholder(child)) {
                return oldRawChild;
              }
              let delayedLeave;
              const performLeave = () => {
                delayedLeave();
              };
              mergeVNodeHook(data, "afterEnter", performLeave);
              mergeVNodeHook(data, "enterCancelled", performLeave);
              mergeVNodeHook(oldData, "delayLeave", (leave2) => {
                delayedLeave = leave2;
              });
            }
          }
          return rawChild;
        }
      };
      var props = extend({
        tag: String,
        moveClass: String
      }, transitionProps);
      delete props.mode;
      var TransitionGroup = {
        props,
        beforeMount() {
          const update3 = this._update;
          this._update = (vnode, hydrating) => {
            const restoreActiveInstance = setActiveInstance(this);
            this.__patch__(
              this._vnode,
              this.kept,
              false,
              true
            );
            this._vnode = this.kept;
            restoreActiveInstance();
            update3.call(this, vnode, hydrating);
          };
        },
        render(h2) {
          const tag = this.tag || this.$vnode.data.tag || "span";
          const map = /* @__PURE__ */ Object.create(null);
          const prevChildren = this.prevChildren = this.children;
          const rawChildren = this.$slots.default || [];
          const children = this.children = [];
          const transitionData = extractTransitionData(this);
          for (let i = 0; i < rawChildren.length; i++) {
            const c = rawChildren[i];
            if (c.tag) {
              if (c.key != null && String(c.key).indexOf("__vlist") !== 0) {
                children.push(c);
                map[c.key] = c;
                (c.data || (c.data = {})).transition = transitionData;
              } else {
                const opts = c.componentOptions;
                const name = opts ? getComponentName(opts.Ctor.options) || opts.tag || "" : c.tag;
                warn$2(`<transition-group> children must be keyed: <${name}>`);
              }
            }
          }
          if (prevChildren) {
            const kept = [];
            const removed = [];
            for (let i = 0; i < prevChildren.length; i++) {
              const c = prevChildren[i];
              c.data.transition = transitionData;
              c.data.pos = c.elm.getBoundingClientRect();
              if (map[c.key]) {
                kept.push(c);
              } else {
                removed.push(c);
              }
            }
            this.kept = h2(tag, null, kept);
            this.removed = removed;
          }
          return h2(tag, null, children);
        },
        updated() {
          const children = this.prevChildren;
          const moveClass = this.moveClass || (this.name || "v") + "-move";
          if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
            return;
          }
          children.forEach(callPendingCbs);
          children.forEach(recordPosition);
          children.forEach(applyTranslation);
          this._reflow = document.body.offsetHeight;
          children.forEach((c) => {
            if (c.data.moved) {
              const el = c.elm;
              const s = el.style;
              addTransitionClass(el, moveClass);
              s.transform = s.WebkitTransform = s.transitionDuration = "";
              el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
                if (e && e.target !== el) {
                  return;
                }
                if (!e || /transform$/.test(e.propertyName)) {
                  el.removeEventListener(transitionEndEvent, cb);
                  el._moveCb = null;
                  removeTransitionClass(el, moveClass);
                }
              });
            }
          });
        },
        methods: {
          hasMove(el, moveClass) {
            if (!hasTransition) {
              return false;
            }
            if (this._hasMove) {
              return this._hasMove;
            }
            const clone = el.cloneNode();
            if (el._transitionClasses) {
              el._transitionClasses.forEach((cls) => {
                removeClass(clone, cls);
              });
            }
            addClass(clone, moveClass);
            clone.style.display = "none";
            this.$el.appendChild(clone);
            const info = getTransitionInfo(clone);
            this.$el.removeChild(clone);
            return this._hasMove = info.hasTransform;
          }
        }
      };
      function callPendingCbs(c) {
        if (c.elm._moveCb) {
          c.elm._moveCb();
        }
        if (c.elm._enterCb) {
          c.elm._enterCb();
        }
      }
      function recordPosition(c) {
        c.data.newPos = c.elm.getBoundingClientRect();
      }
      function applyTranslation(c) {
        const oldPos = c.data.pos;
        const newPos = c.data.newPos;
        const dx = oldPos.left - newPos.left;
        const dy = oldPos.top - newPos.top;
        if (dx || dy) {
          c.data.moved = true;
          const s = c.elm.style;
          s.transform = s.WebkitTransform = `translate(${dx}px,${dy}px)`;
          s.transitionDuration = "0s";
        }
      }
      var platformComponents = {
        Transition,
        TransitionGroup
      };
      Vue5.config.mustUseProp = mustUseProp;
      Vue5.config.isReservedTag = isReservedTag;
      Vue5.config.isReservedAttr = isReservedAttr;
      Vue5.config.getTagNamespace = getTagNamespace;
      Vue5.config.isUnknownElement = isUnknownElement;
      extend(Vue5.options.directives, platformDirectives);
      extend(Vue5.options.components, platformComponents);
      Vue5.prototype.__patch__ = inBrowser ? patch : noop;
      Vue5.prototype.$mount = function(el, hydrating) {
        el = el && inBrowser ? query(el) : void 0;
        return mountComponent(this, el, hydrating);
      };
      if (inBrowser) {
        setTimeout(() => {
          if (config.devtools) {
            if (devtools) {
              devtools.emit("init", Vue5);
            } else {
              console[console.info ? "info" : "log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools");
            }
          }
          if (config.productionTip !== false && typeof console !== "undefined") {
            console[console.info ? "info" : "log"](`You are running Vue in development mode.
Make sure to turn on production mode when deploying for production.
See more tips at https://vuejs.org/guide/deployment.html`);
          }
        }, 0);
      }
      var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
      var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
      var buildRegex = cached((delimiters2) => {
        const open = delimiters2[0].replace(regexEscapeRE, "\\$&");
        const close = delimiters2[1].replace(regexEscapeRE, "\\$&");
        return new RegExp(open + "((?:.|\\n)+?)" + close, "g");
      });
      function parseText(text2, delimiters2) {
        const tagRE = delimiters2 ? buildRegex(delimiters2) : defaultTagRE;
        if (!tagRE.test(text2)) {
          return;
        }
        const tokens = [];
        const rawTokens = [];
        let lastIndex = tagRE.lastIndex = 0;
        let match, index2, tokenValue;
        while (match = tagRE.exec(text2)) {
          index2 = match.index;
          if (index2 > lastIndex) {
            rawTokens.push(tokenValue = text2.slice(lastIndex, index2));
            tokens.push(JSON.stringify(tokenValue));
          }
          const exp = parseFilters(match[1].trim());
          tokens.push(`_s(${exp})`);
          rawTokens.push({ "@binding": exp });
          lastIndex = index2 + match[0].length;
        }
        if (lastIndex < text2.length) {
          rawTokens.push(tokenValue = text2.slice(lastIndex));
          tokens.push(JSON.stringify(tokenValue));
        }
        return {
          expression: tokens.join("+"),
          tokens: rawTokens
        };
      }
      function transformNode$1(el, options) {
        const warn2 = options.warn || baseWarn;
        const staticClass = getAndRemoveAttr(el, "class");
        if (staticClass) {
          const res = parseText(staticClass, options.delimiters);
          if (res) {
            warn2(`class="${staticClass}": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.`, el.rawAttrsMap["class"]);
          }
        }
        if (staticClass) {
          el.staticClass = JSON.stringify(staticClass.replace(/\s+/g, " ").trim());
        }
        const classBinding = getBindingAttr(el, "class", false);
        if (classBinding) {
          el.classBinding = classBinding;
        }
      }
      function genData$2(el) {
        let data = "";
        if (el.staticClass) {
          data += `staticClass:${el.staticClass},`;
        }
        if (el.classBinding) {
          data += `class:${el.classBinding},`;
        }
        return data;
      }
      var klass = {
        staticKeys: ["staticClass"],
        transformNode: transformNode$1,
        genData: genData$2
      };
      function transformNode(el, options) {
        const warn2 = options.warn || baseWarn;
        const staticStyle = getAndRemoveAttr(el, "style");
        if (staticStyle) {
          {
            const res = parseText(staticStyle, options.delimiters);
            if (res) {
              warn2(`style="${staticStyle}": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.`, el.rawAttrsMap["style"]);
            }
          }
          el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
        }
        const styleBinding = getBindingAttr(el, "style", false);
        if (styleBinding) {
          el.styleBinding = styleBinding;
        }
      }
      function genData$1(el) {
        let data = "";
        if (el.staticStyle) {
          data += `staticStyle:${el.staticStyle},`;
        }
        if (el.styleBinding) {
          data += `style:(${el.styleBinding}),`;
        }
        return data;
      }
      var style = {
        staticKeys: ["staticStyle"],
        transformNode,
        genData: genData$1
      };
      var decoder;
      var he = {
        decode(html2) {
          decoder = decoder || document.createElement("div");
          decoder.innerHTML = html2;
          return decoder.textContent;
        }
      };
      var isUnaryTag = makeMap("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr");
      var canBeLeftOpenTag = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source");
      var isNonPhrasingTag = makeMap("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track");
      var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
      var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
      var ncname = `[a-zA-Z_][\\-\\.0-9_a-zA-Z${unicodeRegExp.source}]*`;
      var qnameCapture = `((?:${ncname}\\:)?${ncname})`;
      var startTagOpen = new RegExp(`^<${qnameCapture}`);
      var startTagClose = /^\s*(\/?)>/;
      var endTag = new RegExp(`^<\\/${qnameCapture}[^>]*>`);
      var doctype = /^<!DOCTYPE [^>]+>/i;
      var comment = /^<!\--/;
      var conditionalComment = /^<!\[/;
      var isPlainTextElement = makeMap("script,style,textarea", true);
      var reCache = {};
      var decodingMap = {
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&amp;": "&",
        "&#10;": "\n",
        "&#9;": "	",
        "&#39;": "'"
      };
      var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
      var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;
      var isIgnoreNewlineTag = makeMap("pre,textarea", true);
      var shouldIgnoreFirstNewline = (tag, html2) => tag && isIgnoreNewlineTag(tag) && html2[0] === "\n";
      function decodeAttr(value, shouldDecodeNewlines2) {
        const re = shouldDecodeNewlines2 ? encodedAttrWithNewLines : encodedAttr;
        return value.replace(re, (match) => decodingMap[match]);
      }
      function parseHTML(html2, options) {
        const stack = [];
        const expectHTML = options.expectHTML;
        const isUnaryTag2 = options.isUnaryTag || no;
        const canBeLeftOpenTag2 = options.canBeLeftOpenTag || no;
        let index2 = 0;
        let last, lastTag;
        while (html2) {
          last = html2;
          if (!lastTag || !isPlainTextElement(lastTag)) {
            let textEnd = html2.indexOf("<");
            if (textEnd === 0) {
              if (comment.test(html2)) {
                const commentEnd = html2.indexOf("-->");
                if (commentEnd >= 0) {
                  if (options.shouldKeepComment && options.comment) {
                    options.comment(html2.substring(4, commentEnd), index2, index2 + commentEnd + 3);
                  }
                  advance(commentEnd + 3);
                  continue;
                }
              }
              if (conditionalComment.test(html2)) {
                const conditionalEnd = html2.indexOf("]>");
                if (conditionalEnd >= 0) {
                  advance(conditionalEnd + 2);
                  continue;
                }
              }
              const doctypeMatch = html2.match(doctype);
              if (doctypeMatch) {
                advance(doctypeMatch[0].length);
                continue;
              }
              const endTagMatch = html2.match(endTag);
              if (endTagMatch) {
                const curIndex = index2;
                advance(endTagMatch[0].length);
                parseEndTag(endTagMatch[1], curIndex, index2);
                continue;
              }
              const startTagMatch = parseStartTag();
              if (startTagMatch) {
                handleStartTag(startTagMatch);
                if (shouldIgnoreFirstNewline(startTagMatch.tagName, html2)) {
                  advance(1);
                }
                continue;
              }
            }
            let text2, rest, next2;
            if (textEnd >= 0) {
              rest = html2.slice(textEnd);
              while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
                next2 = rest.indexOf("<", 1);
                if (next2 < 0)
                  break;
                textEnd += next2;
                rest = html2.slice(textEnd);
              }
              text2 = html2.substring(0, textEnd);
            }
            if (textEnd < 0) {
              text2 = html2;
            }
            if (text2) {
              advance(text2.length);
            }
            if (options.chars && text2) {
              options.chars(text2, index2 - text2.length, index2);
            }
          } else {
            let endTagLength = 0;
            const stackedTag = lastTag.toLowerCase();
            const reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp("([\\s\\S]*?)(</" + stackedTag + "[^>]*>)", "i"));
            const rest = html2.replace(reStackedTag, function(all, text2, endTag2) {
              endTagLength = endTag2.length;
              if (!isPlainTextElement(stackedTag) && stackedTag !== "noscript") {
                text2 = text2.replace(/<!\--([\s\S]*?)-->/g, "$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g, "$1");
              }
              if (shouldIgnoreFirstNewline(stackedTag, text2)) {
                text2 = text2.slice(1);
              }
              if (options.chars) {
                options.chars(text2);
              }
              return "";
            });
            index2 += html2.length - rest.length;
            html2 = rest;
            parseEndTag(stackedTag, index2 - endTagLength, index2);
          }
          if (html2 === last) {
            options.chars && options.chars(html2);
            if (!stack.length && options.warn) {
              options.warn(`Mal-formatted tag at end of template: "${html2}"`, {
                start: index2 + html2.length
              });
            }
            break;
          }
        }
        parseEndTag();
        function advance(n) {
          index2 += n;
          html2 = html2.substring(n);
        }
        function parseStartTag() {
          const start = html2.match(startTagOpen);
          if (start) {
            const match = {
              tagName: start[1],
              attrs: [],
              start: index2
            };
            advance(start[0].length);
            let end, attr;
            while (!(end = html2.match(startTagClose)) && (attr = html2.match(dynamicArgAttribute) || html2.match(attribute))) {
              attr.start = index2;
              advance(attr[0].length);
              attr.end = index2;
              match.attrs.push(attr);
            }
            if (end) {
              match.unarySlash = end[1];
              advance(end[0].length);
              match.end = index2;
              return match;
            }
          }
        }
        function handleStartTag(match) {
          const tagName2 = match.tagName;
          const unarySlash = match.unarySlash;
          if (expectHTML) {
            if (lastTag === "p" && isNonPhrasingTag(tagName2)) {
              parseEndTag(lastTag);
            }
            if (canBeLeftOpenTag2(tagName2) && lastTag === tagName2) {
              parseEndTag(tagName2);
            }
          }
          const unary = isUnaryTag2(tagName2) || !!unarySlash;
          const l = match.attrs.length;
          const attrs2 = new Array(l);
          for (let i = 0; i < l; i++) {
            const args = match.attrs[i];
            const value = args[3] || args[4] || args[5] || "";
            const shouldDecodeNewlines2 = tagName2 === "a" && args[1] === "href" ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
            attrs2[i] = {
              name: args[1],
              value: decodeAttr(value, shouldDecodeNewlines2)
            };
            if (options.outputSourceRange) {
              attrs2[i].start = args.start + args[0].match(/^\s*/).length;
              attrs2[i].end = args.end;
            }
          }
          if (!unary) {
            stack.push({
              tag: tagName2,
              lowerCasedTag: tagName2.toLowerCase(),
              attrs: attrs2,
              start: match.start,
              end: match.end
            });
            lastTag = tagName2;
          }
          if (options.start) {
            options.start(tagName2, attrs2, unary, match.start, match.end);
          }
        }
        function parseEndTag(tagName2, start, end) {
          let pos, lowerCasedTagName;
          if (start == null)
            start = index2;
          if (end == null)
            end = index2;
          if (tagName2) {
            lowerCasedTagName = tagName2.toLowerCase();
            for (pos = stack.length - 1; pos >= 0; pos--) {
              if (stack[pos].lowerCasedTag === lowerCasedTagName) {
                break;
              }
            }
          } else {
            pos = 0;
          }
          if (pos >= 0) {
            for (let i = stack.length - 1; i >= pos; i--) {
              if ((i > pos || !tagName2) && options.warn) {
                options.warn(`tag <${stack[i].tag}> has no matching end tag.`, {
                  start: stack[i].start,
                  end: stack[i].end
                });
              }
              if (options.end) {
                options.end(stack[i].tag, start, end);
              }
            }
            stack.length = pos;
            lastTag = pos && stack[pos - 1].tag;
          } else if (lowerCasedTagName === "br") {
            if (options.start) {
              options.start(tagName2, [], true, start, end);
            }
          } else if (lowerCasedTagName === "p") {
            if (options.start) {
              options.start(tagName2, [], false, start, end);
            }
            if (options.end) {
              options.end(tagName2, start, end);
            }
          }
        }
      }
      var onRE = /^@|^v-on:/;
      var dirRE = /^v-|^@|^:|^#/;
      var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
      var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
      var stripParensRE = /^\(|\)$/g;
      var dynamicArgRE = /^\[.*\]$/;
      var argRE = /:(.*)$/;
      var bindRE = /^:|^\.|^v-bind:/;
      var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
      var slotRE = /^v-slot(:|$)|^#/;
      var lineBreakRE = /[\r\n]/;
      var whitespaceRE = /[ \f\t\r\n]+/g;
      var invalidAttributeRE = /[\s"'<>\/=]/;
      var decodeHTMLCached = cached(he.decode);
      var emptySlotScopeToken = `_empty_`;
      var warn;
      var delimiters;
      var transforms;
      var preTransforms;
      var postTransforms;
      var platformIsPreTag;
      var platformMustUseProp;
      var platformGetTagNamespace;
      var maybeComponent;
      function createASTElement(tag, attrs2, parent) {
        return {
          type: 1,
          tag,
          attrsList: attrs2,
          attrsMap: makeAttrsMap(attrs2),
          rawAttrsMap: {},
          parent,
          children: []
        };
      }
      function parse2(template, options) {
        warn = options.warn || baseWarn;
        platformIsPreTag = options.isPreTag || no;
        platformMustUseProp = options.mustUseProp || no;
        platformGetTagNamespace = options.getTagNamespace || no;
        const isReservedTag2 = options.isReservedTag || no;
        maybeComponent = (el) => !!(el.component || el.attrsMap[":is"] || el.attrsMap["v-bind:is"] || !(el.attrsMap.is ? isReservedTag2(el.attrsMap.is) : isReservedTag2(el.tag)));
        transforms = pluckModuleFunction(options.modules, "transformNode");
        preTransforms = pluckModuleFunction(options.modules, "preTransformNode");
        postTransforms = pluckModuleFunction(options.modules, "postTransformNode");
        delimiters = options.delimiters;
        const stack = [];
        const preserveWhitespace = options.preserveWhitespace !== false;
        const whitespaceOption = options.whitespace;
        let root2;
        let currentParent;
        let inVPre = false;
        let inPre = false;
        let warned = false;
        function warnOnce(msg, range2) {
          if (!warned) {
            warned = true;
            warn(msg, range2);
          }
        }
        function closeElement(element) {
          trimEndingWhitespace(element);
          if (!inVPre && !element.processed) {
            element = processElement(element, options);
          }
          if (!stack.length && element !== root2) {
            if (root2.if && (element.elseif || element.else)) {
              {
                checkRootConstraints(element);
              }
              addIfCondition(root2, {
                exp: element.elseif,
                block: element
              });
            } else {
              warnOnce(`Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.`, { start: element.start });
            }
          }
          if (currentParent && !element.forbidden) {
            if (element.elseif || element.else) {
              processIfConditions(element, currentParent);
            } else {
              if (element.slotScope) {
                const name = element.slotTarget || '"default"';
                (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
              }
              currentParent.children.push(element);
              element.parent = currentParent;
            }
          }
          element.children = element.children.filter((c) => !c.slotScope);
          trimEndingWhitespace(element);
          if (element.pre) {
            inVPre = false;
          }
          if (platformIsPreTag(element.tag)) {
            inPre = false;
          }
          for (let i = 0; i < postTransforms.length; i++) {
            postTransforms[i](element, options);
          }
        }
        function trimEndingWhitespace(el) {
          if (!inPre) {
            let lastNode;
            while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === " ") {
              el.children.pop();
            }
          }
        }
        function checkRootConstraints(el) {
          if (el.tag === "slot" || el.tag === "template") {
            warnOnce(`Cannot use <${el.tag}> as component root element because it may contain multiple nodes.`, { start: el.start });
          }
          if (el.attrsMap.hasOwnProperty("v-for")) {
            warnOnce("Cannot use v-for on stateful component root element because it renders multiple elements.", el.rawAttrsMap["v-for"]);
          }
        }
        parseHTML(template, {
          warn,
          expectHTML: options.expectHTML,
          isUnaryTag: options.isUnaryTag,
          canBeLeftOpenTag: options.canBeLeftOpenTag,
          shouldDecodeNewlines: options.shouldDecodeNewlines,
          shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
          shouldKeepComment: options.comments,
          outputSourceRange: options.outputSourceRange,
          start(tag, attrs2, unary, start, end) {
            const ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);
            if (isIE && ns === "svg") {
              attrs2 = guardIESVGBug(attrs2);
            }
            let element = createASTElement(tag, attrs2, currentParent);
            if (ns) {
              element.ns = ns;
            }
            {
              if (options.outputSourceRange) {
                element.start = start;
                element.end = end;
                element.rawAttrsMap = element.attrsList.reduce((cumulated, attr) => {
                  cumulated[attr.name] = attr;
                  return cumulated;
                }, {});
              }
              attrs2.forEach((attr) => {
                if (invalidAttributeRE.test(attr.name)) {
                  warn(`Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.`, options.outputSourceRange ? {
                    start: attr.start + attr.name.indexOf(`[`),
                    end: attr.start + attr.name.length
                  } : void 0);
                }
              });
            }
            if (isForbiddenTag(element) && !isServerRendering()) {
              element.forbidden = true;
              warn(`Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <${tag}>, as they will not be parsed.`, { start: element.start });
            }
            for (let i = 0; i < preTransforms.length; i++) {
              element = preTransforms[i](element, options) || element;
            }
            if (!inVPre) {
              processPre(element);
              if (element.pre) {
                inVPre = true;
              }
            }
            if (platformIsPreTag(element.tag)) {
              inPre = true;
            }
            if (inVPre) {
              processRawAttrs(element);
            } else if (!element.processed) {
              processFor(element);
              processIf(element);
              processOnce(element);
            }
            if (!root2) {
              root2 = element;
              {
                checkRootConstraints(root2);
              }
            }
            if (!unary) {
              currentParent = element;
              stack.push(element);
            } else {
              closeElement(element);
            }
          },
          end(tag, start, end) {
            const element = stack[stack.length - 1];
            stack.length -= 1;
            currentParent = stack[stack.length - 1];
            if (options.outputSourceRange) {
              element.end = end;
            }
            closeElement(element);
          },
          chars(text2, start, end) {
            if (!currentParent) {
              {
                if (text2 === template) {
                  warnOnce("Component template requires a root element, rather than just text.", { start });
                } else if (text2 = text2.trim()) {
                  warnOnce(`text "${text2}" outside root element will be ignored.`, {
                    start
                  });
                }
              }
              return;
            }
            if (isIE && currentParent.tag === "textarea" && currentParent.attrsMap.placeholder === text2) {
              return;
            }
            const children = currentParent.children;
            if (inPre || text2.trim()) {
              text2 = isTextTag(currentParent) ? text2 : decodeHTMLCached(text2);
            } else if (!children.length) {
              text2 = "";
            } else if (whitespaceOption) {
              if (whitespaceOption === "condense") {
                text2 = lineBreakRE.test(text2) ? "" : " ";
              } else {
                text2 = " ";
              }
            } else {
              text2 = preserveWhitespace ? " " : "";
            }
            if (text2) {
              if (!inPre && whitespaceOption === "condense") {
                text2 = text2.replace(whitespaceRE, " ");
              }
              let res;
              let child;
              if (!inVPre && text2 !== " " && (res = parseText(text2, delimiters))) {
                child = {
                  type: 2,
                  expression: res.expression,
                  tokens: res.tokens,
                  text: text2
                };
              } else if (text2 !== " " || !children.length || children[children.length - 1].text !== " ") {
                child = {
                  type: 3,
                  text: text2
                };
              }
              if (child) {
                if (options.outputSourceRange) {
                  child.start = start;
                  child.end = end;
                }
                children.push(child);
              }
            }
          },
          comment(text2, start, end) {
            if (currentParent) {
              const child = {
                type: 3,
                text: text2,
                isComment: true
              };
              if (options.outputSourceRange) {
                child.start = start;
                child.end = end;
              }
              currentParent.children.push(child);
            }
          }
        });
        return root2;
      }
      function processPre(el) {
        if (getAndRemoveAttr(el, "v-pre") != null) {
          el.pre = true;
        }
      }
      function processRawAttrs(el) {
        const list = el.attrsList;
        const len2 = list.length;
        if (len2) {
          const attrs2 = el.attrs = new Array(len2);
          for (let i = 0; i < len2; i++) {
            attrs2[i] = {
              name: list[i].name,
              value: JSON.stringify(list[i].value)
            };
            if (list[i].start != null) {
              attrs2[i].start = list[i].start;
              attrs2[i].end = list[i].end;
            }
          }
        } else if (!el.pre) {
          el.plain = true;
        }
      }
      function processElement(element, options) {
        processKey(element);
        element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
        processRef(element);
        processSlotContent(element);
        processSlotOutlet(element);
        processComponent(element);
        for (let i = 0; i < transforms.length; i++) {
          element = transforms[i](element, options) || element;
        }
        processAttrs(element);
        return element;
      }
      function processKey(el) {
        const exp = getBindingAttr(el, "key");
        if (exp) {
          {
            if (el.tag === "template") {
              warn(`<template> cannot be keyed. Place the key on real elements instead.`, getRawBindingAttr(el, "key"));
            }
            if (el.for) {
              const iterator = el.iterator2 || el.iterator1;
              const parent = el.parent;
              if (iterator && iterator === exp && parent && parent.tag === "transition-group") {
                warn(`Do not use v-for index as key on <transition-group> children, this is the same as not using keys.`, getRawBindingAttr(el, "key"), true);
              }
            }
          }
          el.key = exp;
        }
      }
      function processRef(el) {
        const ref2 = getBindingAttr(el, "ref");
        if (ref2) {
          el.ref = ref2;
          el.refInFor = checkInFor(el);
        }
      }
      function processFor(el) {
        let exp;
        if (exp = getAndRemoveAttr(el, "v-for")) {
          const res = parseFor(exp);
          if (res) {
            extend(el, res);
          } else {
            warn(`Invalid v-for expression: ${exp}`, el.rawAttrsMap["v-for"]);
          }
        }
      }
      function parseFor(exp) {
        const inMatch = exp.match(forAliasRE);
        if (!inMatch)
          return;
        const res = {};
        res.for = inMatch[2].trim();
        const alias = inMatch[1].trim().replace(stripParensRE, "");
        const iteratorMatch = alias.match(forIteratorRE);
        if (iteratorMatch) {
          res.alias = alias.replace(forIteratorRE, "").trim();
          res.iterator1 = iteratorMatch[1].trim();
          if (iteratorMatch[2]) {
            res.iterator2 = iteratorMatch[2].trim();
          }
        } else {
          res.alias = alias;
        }
        return res;
      }
      function processIf(el) {
        const exp = getAndRemoveAttr(el, "v-if");
        if (exp) {
          el.if = exp;
          addIfCondition(el, {
            exp,
            block: el
          });
        } else {
          if (getAndRemoveAttr(el, "v-else") != null) {
            el.else = true;
          }
          const elseif = getAndRemoveAttr(el, "v-else-if");
          if (elseif) {
            el.elseif = elseif;
          }
        }
      }
      function processIfConditions(el, parent) {
        const prev = findPrevElement(parent.children);
        if (prev && prev.if) {
          addIfCondition(prev, {
            exp: el.elseif,
            block: el
          });
        } else {
          warn(`v-${el.elseif ? 'else-if="' + el.elseif + '"' : "else"} used on element <${el.tag}> without corresponding v-if.`, el.rawAttrsMap[el.elseif ? "v-else-if" : "v-else"]);
        }
      }
      function findPrevElement(children) {
        let i = children.length;
        while (i--) {
          if (children[i].type === 1) {
            return children[i];
          } else {
            if (children[i].text !== " ") {
              warn(`text "${children[i].text.trim()}" between v-if and v-else(-if) will be ignored.`, children[i]);
            }
            children.pop();
          }
        }
      }
      function addIfCondition(el, condition) {
        if (!el.ifConditions) {
          el.ifConditions = [];
        }
        el.ifConditions.push(condition);
      }
      function processOnce(el) {
        const once2 = getAndRemoveAttr(el, "v-once");
        if (once2 != null) {
          el.once = true;
        }
      }
      function processSlotContent(el) {
        let slotScope;
        if (el.tag === "template") {
          slotScope = getAndRemoveAttr(el, "scope");
          if (slotScope) {
            warn(`the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.`, el.rawAttrsMap["scope"], true);
          }
          el.slotScope = slotScope || getAndRemoveAttr(el, "slot-scope");
        } else if (slotScope = getAndRemoveAttr(el, "slot-scope")) {
          if (el.attrsMap["v-for"]) {
            warn(`Ambiguous combined usage of slot-scope and v-for on <${el.tag}> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.`, el.rawAttrsMap["slot-scope"], true);
          }
          el.slotScope = slotScope;
        }
        const slotTarget = getBindingAttr(el, "slot");
        if (slotTarget) {
          el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
          el.slotTargetDynamic = !!(el.attrsMap[":slot"] || el.attrsMap["v-bind:slot"]);
          if (el.tag !== "template" && !el.slotScope) {
            addAttr(el, "slot", slotTarget, getRawBindingAttr(el, "slot"));
          }
        }
        {
          if (el.tag === "template") {
            const slotBinding = getAndRemoveAttrByRegex(el, slotRE);
            if (slotBinding) {
              {
                if (el.slotTarget || el.slotScope) {
                  warn(`Unexpected mixed usage of different slot syntaxes.`, el);
                }
                if (el.parent && !maybeComponent(el.parent)) {
                  warn(`<template v-slot> can only appear at the root level inside the receiving component`, el);
                }
              }
              const { name, dynamic } = getSlotName(slotBinding);
              el.slotTarget = name;
              el.slotTargetDynamic = dynamic;
              el.slotScope = slotBinding.value || emptySlotScopeToken;
            }
          } else {
            const slotBinding = getAndRemoveAttrByRegex(el, slotRE);
            if (slotBinding) {
              {
                if (!maybeComponent(el)) {
                  warn(`v-slot can only be used on components or <template>.`, slotBinding);
                }
                if (el.slotScope || el.slotTarget) {
                  warn(`Unexpected mixed usage of different slot syntaxes.`, el);
                }
                if (el.scopedSlots) {
                  warn(`To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.`, slotBinding);
                }
              }
              const slots = el.scopedSlots || (el.scopedSlots = {});
              const { name, dynamic } = getSlotName(slotBinding);
              const slotContainer = slots[name] = createASTElement("template", [], el);
              slotContainer.slotTarget = name;
              slotContainer.slotTargetDynamic = dynamic;
              slotContainer.children = el.children.filter((c) => {
                if (!c.slotScope) {
                  c.parent = slotContainer;
                  return true;
                }
              });
              slotContainer.slotScope = slotBinding.value || emptySlotScopeToken;
              el.children = [];
              el.plain = false;
            }
          }
        }
      }
      function getSlotName(binding) {
        let name = binding.name.replace(slotRE, "");
        if (!name) {
          if (binding.name[0] !== "#") {
            name = "default";
          } else {
            warn(`v-slot shorthand syntax requires a slot name.`, binding);
          }
        }
        return dynamicArgRE.test(name) ? { name: name.slice(1, -1), dynamic: true } : { name: `"${name}"`, dynamic: false };
      }
      function processSlotOutlet(el) {
        if (el.tag === "slot") {
          el.slotName = getBindingAttr(el, "name");
          if (el.key) {
            warn(`\`key\` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.`, getRawBindingAttr(el, "key"));
          }
        }
      }
      function processComponent(el) {
        let binding;
        if (binding = getBindingAttr(el, "is")) {
          el.component = binding;
        }
        if (getAndRemoveAttr(el, "inline-template") != null) {
          el.inlineTemplate = true;
        }
      }
      function processAttrs(el) {
        const list = el.attrsList;
        let i, l, name, rawName, value, modifiers, syncGen, isDynamic;
        for (i = 0, l = list.length; i < l; i++) {
          name = rawName = list[i].name;
          value = list[i].value;
          if (dirRE.test(name)) {
            el.hasBindings = true;
            modifiers = parseModifiers(name.replace(dirRE, ""));
            if (modifiers) {
              name = name.replace(modifierRE, "");
            }
            if (bindRE.test(name)) {
              name = name.replace(bindRE, "");
              value = parseFilters(value);
              isDynamic = dynamicArgRE.test(name);
              if (isDynamic) {
                name = name.slice(1, -1);
              }
              if (value.trim().length === 0) {
                warn(`The value for a v-bind expression cannot be empty. Found in "v-bind:${name}"`);
              }
              if (modifiers) {
                if (modifiers.prop && !isDynamic) {
                  name = camelize(name);
                  if (name === "innerHtml")
                    name = "innerHTML";
                }
                if (modifiers.camel && !isDynamic) {
                  name = camelize(name);
                }
                if (modifiers.sync) {
                  syncGen = genAssignmentCode(value, `$event`);
                  if (!isDynamic) {
                    addHandler(el, `update:${camelize(name)}`, syncGen, null, false, warn, list[i]);
                    if (hyphenate(name) !== camelize(name)) {
                      addHandler(el, `update:${hyphenate(name)}`, syncGen, null, false, warn, list[i]);
                    }
                  } else {
                    addHandler(
                      el,
                      `"update:"+(${name})`,
                      syncGen,
                      null,
                      false,
                      warn,
                      list[i],
                      true
                    );
                  }
                }
              }
              if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
                addProp(el, name, value, list[i], isDynamic);
              } else {
                addAttr(el, name, value, list[i], isDynamic);
              }
            } else if (onRE.test(name)) {
              name = name.replace(onRE, "");
              isDynamic = dynamicArgRE.test(name);
              if (isDynamic) {
                name = name.slice(1, -1);
              }
              addHandler(el, name, value, modifiers, false, warn, list[i], isDynamic);
            } else {
              name = name.replace(dirRE, "");
              const argMatch = name.match(argRE);
              let arg = argMatch && argMatch[1];
              isDynamic = false;
              if (arg) {
                name = name.slice(0, -(arg.length + 1));
                if (dynamicArgRE.test(arg)) {
                  arg = arg.slice(1, -1);
                  isDynamic = true;
                }
              }
              addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
              if (name === "model") {
                checkForAliasModel(el, value);
              }
            }
          } else {
            {
              const res = parseText(value, delimiters);
              if (res) {
                warn(`${name}="${value}": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.`, list[i]);
              }
            }
            addAttr(el, name, JSON.stringify(value), list[i]);
            if (!el.component && name === "muted" && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
              addProp(el, name, "true", list[i]);
            }
          }
        }
      }
      function checkInFor(el) {
        let parent = el;
        while (parent) {
          if (parent.for !== void 0) {
            return true;
          }
          parent = parent.parent;
        }
        return false;
      }
      function parseModifiers(name) {
        const match = name.match(modifierRE);
        if (match) {
          const ret = {};
          match.forEach((m) => {
            ret[m.slice(1)] = true;
          });
          return ret;
        }
      }
      function makeAttrsMap(attrs2) {
        const map = {};
        for (let i = 0, l = attrs2.length; i < l; i++) {
          if (map[attrs2[i].name] && !isIE && !isEdge) {
            warn("duplicate attribute: " + attrs2[i].name, attrs2[i]);
          }
          map[attrs2[i].name] = attrs2[i].value;
        }
        return map;
      }
      function isTextTag(el) {
        return el.tag === "script" || el.tag === "style";
      }
      function isForbiddenTag(el) {
        return el.tag === "style" || el.tag === "script" && (!el.attrsMap.type || el.attrsMap.type === "text/javascript");
      }
      var ieNSBug = /^xmlns:NS\d+/;
      var ieNSPrefix = /^NS\d+:/;
      function guardIESVGBug(attrs2) {
        const res = [];
        for (let i = 0; i < attrs2.length; i++) {
          const attr = attrs2[i];
          if (!ieNSBug.test(attr.name)) {
            attr.name = attr.name.replace(ieNSPrefix, "");
            res.push(attr);
          }
        }
        return res;
      }
      function checkForAliasModel(el, value) {
        let _el = el;
        while (_el) {
          if (_el.for && _el.alias === value) {
            warn(`<${el.tag} v-model="${value}">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.`, el.rawAttrsMap["v-model"]);
          }
          _el = _el.parent;
        }
      }
      function preTransformNode(el, options) {
        if (el.tag === "input") {
          const map = el.attrsMap;
          if (!map["v-model"]) {
            return;
          }
          let typeBinding;
          if (map[":type"] || map["v-bind:type"]) {
            typeBinding = getBindingAttr(el, "type");
          }
          if (!map.type && !typeBinding && map["v-bind"]) {
            typeBinding = `(${map["v-bind"]}).type`;
          }
          if (typeBinding) {
            const ifCondition = getAndRemoveAttr(el, "v-if", true);
            const ifConditionExtra = ifCondition ? `&&(${ifCondition})` : ``;
            const hasElse = getAndRemoveAttr(el, "v-else", true) != null;
            const elseIfCondition = getAndRemoveAttr(el, "v-else-if", true);
            const branch0 = cloneASTElement(el);
            processFor(branch0);
            addRawAttr(branch0, "type", "checkbox");
            processElement(branch0, options);
            branch0.processed = true;
            branch0.if = `(${typeBinding})==='checkbox'` + ifConditionExtra;
            addIfCondition(branch0, {
              exp: branch0.if,
              block: branch0
            });
            const branch1 = cloneASTElement(el);
            getAndRemoveAttr(branch1, "v-for", true);
            addRawAttr(branch1, "type", "radio");
            processElement(branch1, options);
            addIfCondition(branch0, {
              exp: `(${typeBinding})==='radio'` + ifConditionExtra,
              block: branch1
            });
            const branch2 = cloneASTElement(el);
            getAndRemoveAttr(branch2, "v-for", true);
            addRawAttr(branch2, ":type", typeBinding);
            processElement(branch2, options);
            addIfCondition(branch0, {
              exp: ifCondition,
              block: branch2
            });
            if (hasElse) {
              branch0.else = true;
            } else if (elseIfCondition) {
              branch0.elseif = elseIfCondition;
            }
            return branch0;
          }
        }
      }
      function cloneASTElement(el) {
        return createASTElement(el.tag, el.attrsList.slice(), el.parent);
      }
      var model = {
        preTransformNode
      };
      var modules2 = [klass, style, model];
      function text(el, dir) {
        if (dir.value) {
          addProp(el, "textContent", `_s(${dir.value})`, dir);
        }
      }
      function html(el, dir) {
        if (dir.value) {
          addProp(el, "innerHTML", `_s(${dir.value})`, dir);
        }
      }
      var directives = {
        model: model$1,
        text,
        html
      };
      var baseOptions = {
        expectHTML: true,
        modules: modules2,
        directives,
        isPreTag,
        isUnaryTag,
        mustUseProp,
        canBeLeftOpenTag,
        isReservedTag,
        getTagNamespace,
        staticKeys: genStaticKeys$1(modules2)
      };
      var isStaticKey;
      var isPlatformReservedTag;
      var genStaticKeysCached = cached(genStaticKeys);
      function optimize(root2, options) {
        if (!root2)
          return;
        isStaticKey = genStaticKeysCached(options.staticKeys || "");
        isPlatformReservedTag = options.isReservedTag || no;
        markStatic(root2);
        markStaticRoots(root2, false);
      }
      function genStaticKeys(keys) {
        return makeMap("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap" + (keys ? "," + keys : ""));
      }
      function markStatic(node) {
        node.static = isStatic(node);
        if (node.type === 1) {
          if (!isPlatformReservedTag(node.tag) && node.tag !== "slot" && node.attrsMap["inline-template"] == null) {
            return;
          }
          for (let i = 0, l = node.children.length; i < l; i++) {
            const child = node.children[i];
            markStatic(child);
            if (!child.static) {
              node.static = false;
            }
          }
          if (node.ifConditions) {
            for (let i = 1, l = node.ifConditions.length; i < l; i++) {
              const block = node.ifConditions[i].block;
              markStatic(block);
              if (!block.static) {
                node.static = false;
              }
            }
          }
        }
      }
      function markStaticRoots(node, isInFor) {
        if (node.type === 1) {
          if (node.static || node.once) {
            node.staticInFor = isInFor;
          }
          if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
            node.staticRoot = true;
            return;
          } else {
            node.staticRoot = false;
          }
          if (node.children) {
            for (let i = 0, l = node.children.length; i < l; i++) {
              markStaticRoots(node.children[i], isInFor || !!node.for);
            }
          }
          if (node.ifConditions) {
            for (let i = 1, l = node.ifConditions.length; i < l; i++) {
              markStaticRoots(node.ifConditions[i].block, isInFor);
            }
          }
        }
      }
      function isStatic(node) {
        if (node.type === 2) {
          return false;
        }
        if (node.type === 3) {
          return true;
        }
        return !!(node.pre || !node.hasBindings && !node.if && !node.for && !isBuiltInTag(node.tag) && isPlatformReservedTag(node.tag) && !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
      }
      function isDirectChildOfTemplateFor(node) {
        while (node.parent) {
          node = node.parent;
          if (node.tag !== "template") {
            return false;
          }
          if (node.for) {
            return true;
          }
        }
        return false;
      }
      var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
      var fnInvokeRE = /\([^)]*?\);*$/;
      var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;
      var keyCodes = {
        esc: 27,
        tab: 9,
        enter: 13,
        space: 32,
        up: 38,
        left: 37,
        right: 39,
        down: 40,
        delete: [8, 46]
      };
      var keyNames = {
        esc: ["Esc", "Escape"],
        tab: "Tab",
        enter: "Enter",
        space: [" ", "Spacebar"],
        up: ["Up", "ArrowUp"],
        left: ["Left", "ArrowLeft"],
        right: ["Right", "ArrowRight"],
        down: ["Down", "ArrowDown"],
        delete: ["Backspace", "Delete", "Del"]
      };
      var genGuard = (condition) => `if(${condition})return null;`;
      var modifierCode = {
        stop: "$event.stopPropagation();",
        prevent: "$event.preventDefault();",
        self: genGuard(`$event.target !== $event.currentTarget`),
        ctrl: genGuard(`!$event.ctrlKey`),
        shift: genGuard(`!$event.shiftKey`),
        alt: genGuard(`!$event.altKey`),
        meta: genGuard(`!$event.metaKey`),
        left: genGuard(`'button' in $event && $event.button !== 0`),
        middle: genGuard(`'button' in $event && $event.button !== 1`),
        right: genGuard(`'button' in $event && $event.button !== 2`)
      };
      function genHandlers(events2, isNative2) {
        const prefix = isNative2 ? "nativeOn:" : "on:";
        let staticHandlers = ``;
        let dynamicHandlers = ``;
        for (const name in events2) {
          const handlerCode = genHandler(events2[name]);
          if (events2[name] && events2[name].dynamic) {
            dynamicHandlers += `${name},${handlerCode},`;
          } else {
            staticHandlers += `"${name}":${handlerCode},`;
          }
        }
        staticHandlers = `{${staticHandlers.slice(0, -1)}}`;
        if (dynamicHandlers) {
          return prefix + `_d(${staticHandlers},[${dynamicHandlers.slice(0, -1)}])`;
        } else {
          return prefix + staticHandlers;
        }
      }
      function genHandler(handler) {
        if (!handler) {
          return "function(){}";
        }
        if (Array.isArray(handler)) {
          return `[${handler.map((handler2) => genHandler(handler2)).join(",")}]`;
        }
        const isMethodPath = simplePathRE.test(handler.value);
        const isFunctionExpression = fnExpRE.test(handler.value);
        const isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ""));
        if (!handler.modifiers) {
          if (isMethodPath || isFunctionExpression) {
            return handler.value;
          }
          return `function($event){${isFunctionInvocation ? `return ${handler.value}` : handler.value}}`;
        } else {
          let code = "";
          let genModifierCode = "";
          const keys = [];
          for (const key in handler.modifiers) {
            if (modifierCode[key]) {
              genModifierCode += modifierCode[key];
              if (keyCodes[key]) {
                keys.push(key);
              }
            } else if (key === "exact") {
              const modifiers = handler.modifiers;
              genModifierCode += genGuard(["ctrl", "shift", "alt", "meta"].filter((keyModifier) => !modifiers[keyModifier]).map((keyModifier) => `$event.${keyModifier}Key`).join("||"));
            } else {
              keys.push(key);
            }
          }
          if (keys.length) {
            code += genKeyFilter(keys);
          }
          if (genModifierCode) {
            code += genModifierCode;
          }
          const handlerCode = isMethodPath ? `return ${handler.value}.apply(null, arguments)` : isFunctionExpression ? `return (${handler.value}).apply(null, arguments)` : isFunctionInvocation ? `return ${handler.value}` : handler.value;
          return `function($event){${code}${handlerCode}}`;
        }
      }
      function genKeyFilter(keys) {
        return `if(!$event.type.indexOf('key')&&${keys.map(genFilterCode).join("&&")})return null;`;
      }
      function genFilterCode(key) {
        const keyVal = parseInt(key, 10);
        if (keyVal) {
          return `$event.keyCode!==${keyVal}`;
        }
        const keyCode = keyCodes[key];
        const keyName = keyNames[key];
        return `_k($event.keyCode,${JSON.stringify(key)},${JSON.stringify(keyCode)},$event.key,${JSON.stringify(keyName)})`;
      }
      function on(el, dir) {
        if (dir.modifiers) {
          warn$2(`v-on without argument does not support modifiers.`);
        }
        el.wrapListeners = (code) => `_g(${code},${dir.value})`;
      }
      function bind2(el, dir) {
        el.wrapData = (code) => {
          return `_b(${code},'${el.tag}',${dir.value},${dir.modifiers && dir.modifiers.prop ? "true" : "false"}${dir.modifiers && dir.modifiers.sync ? ",true" : ""})`;
        };
      }
      var baseDirectives = {
        on,
        bind: bind2,
        cloak: noop
      };
      var CodegenState = class {
        constructor(options) {
          this.options = options;
          this.warn = options.warn || baseWarn;
          this.transforms = pluckModuleFunction(options.modules, "transformCode");
          this.dataGenFns = pluckModuleFunction(options.modules, "genData");
          this.directives = extend(extend({}, baseDirectives), options.directives);
          const isReservedTag2 = options.isReservedTag || no;
          this.maybeComponent = (el) => !!el.component || !isReservedTag2(el.tag);
          this.onceId = 0;
          this.staticRenderFns = [];
          this.pre = false;
        }
      };
      function generate(ast, options) {
        const state = new CodegenState(options);
        const code = ast ? ast.tag === "script" ? "null" : genElement(ast, state) : '_c("div")';
        return {
          render: `with(this){return ${code}}`,
          staticRenderFns: state.staticRenderFns
        };
      }
      function genElement(el, state) {
        if (el.parent) {
          el.pre = el.pre || el.parent.pre;
        }
        if (el.staticRoot && !el.staticProcessed) {
          return genStatic(el, state);
        } else if (el.once && !el.onceProcessed) {
          return genOnce(el, state);
        } else if (el.for && !el.forProcessed) {
          return genFor(el, state);
        } else if (el.if && !el.ifProcessed) {
          return genIf(el, state);
        } else if (el.tag === "template" && !el.slotTarget && !state.pre) {
          return genChildren(el, state) || "void 0";
        } else if (el.tag === "slot") {
          return genSlot(el, state);
        } else {
          let code;
          if (el.component) {
            code = genComponent(el.component, el, state);
          } else {
            let data;
            const maybeComponent2 = state.maybeComponent(el);
            if (!el.plain || el.pre && maybeComponent2) {
              data = genData(el, state);
            }
            let tag;
            const bindings = state.options.bindings;
            if (maybeComponent2 && bindings && bindings.__isScriptSetup !== false) {
              tag = checkBindingType(bindings, el.tag);
            }
            if (!tag)
              tag = `'${el.tag}'`;
            const children = el.inlineTemplate ? null : genChildren(el, state, true);
            code = `_c(${tag}${data ? `,${data}` : ""}${children ? `,${children}` : ""})`;
          }
          for (let i = 0; i < state.transforms.length; i++) {
            code = state.transforms[i](el, code);
          }
          return code;
        }
      }
      function checkBindingType(bindings, key) {
        const camelName = camelize(key);
        const PascalName = capitalize(camelName);
        const checkType = (type) => {
          if (bindings[key] === type) {
            return key;
          }
          if (bindings[camelName] === type) {
            return camelName;
          }
          if (bindings[PascalName] === type) {
            return PascalName;
          }
        };
        const fromConst = checkType("setup-const") || checkType("setup-reactive-const");
        if (fromConst) {
          return fromConst;
        }
        const fromMaybeRef = checkType("setup-let") || checkType("setup-ref") || checkType("setup-maybe-ref");
        if (fromMaybeRef) {
          return fromMaybeRef;
        }
      }
      function genStatic(el, state) {
        el.staticProcessed = true;
        const originalPreState = state.pre;
        if (el.pre) {
          state.pre = el.pre;
        }
        state.staticRenderFns.push(`with(this){return ${genElement(el, state)}}`);
        state.pre = originalPreState;
        return `_m(${state.staticRenderFns.length - 1}${el.staticInFor ? ",true" : ""})`;
      }
      function genOnce(el, state) {
        el.onceProcessed = true;
        if (el.if && !el.ifProcessed) {
          return genIf(el, state);
        } else if (el.staticInFor) {
          let key = "";
          let parent = el.parent;
          while (parent) {
            if (parent.for) {
              key = parent.key;
              break;
            }
            parent = parent.parent;
          }
          if (!key) {
            state.warn(`v-once can only be used inside v-for that is keyed. `, el.rawAttrsMap["v-once"]);
            return genElement(el, state);
          }
          return `_o(${genElement(el, state)},${state.onceId++},${key})`;
        } else {
          return genStatic(el, state);
        }
      }
      function genIf(el, state, altGen, altEmpty) {
        el.ifProcessed = true;
        return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
      }
      function genIfConditions(conditions, state, altGen, altEmpty) {
        if (!conditions.length) {
          return altEmpty || "_e()";
        }
        const condition = conditions.shift();
        if (condition.exp) {
          return `(${condition.exp})?${genTernaryExp(condition.block)}:${genIfConditions(conditions, state, altGen, altEmpty)}`;
        } else {
          return `${genTernaryExp(condition.block)}`;
        }
        function genTernaryExp(el) {
          return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
        }
      }
      function genFor(el, state, altGen, altHelper) {
        const exp = el.for;
        const alias = el.alias;
        const iterator1 = el.iterator1 ? `,${el.iterator1}` : "";
        const iterator2 = el.iterator2 ? `,${el.iterator2}` : "";
        if (state.maybeComponent(el) && el.tag !== "slot" && el.tag !== "template" && !el.key) {
          state.warn(`<${el.tag} v-for="${alias} in ${exp}">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.`, el.rawAttrsMap["v-for"], true);
        }
        el.forProcessed = true;
        return `${altHelper || "_l"}((${exp}),function(${alias}${iterator1}${iterator2}){return ${(altGen || genElement)(el, state)}})`;
      }
      function genData(el, state) {
        let data = "{";
        const dirs = genDirectives(el, state);
        if (dirs)
          data += dirs + ",";
        if (el.key) {
          data += `key:${el.key},`;
        }
        if (el.ref) {
          data += `ref:${el.ref},`;
        }
        if (el.refInFor) {
          data += `refInFor:true,`;
        }
        if (el.pre) {
          data += `pre:true,`;
        }
        if (el.component) {
          data += `tag:"${el.tag}",`;
        }
        for (let i = 0; i < state.dataGenFns.length; i++) {
          data += state.dataGenFns[i](el);
        }
        if (el.attrs) {
          data += `attrs:${genProps(el.attrs)},`;
        }
        if (el.props) {
          data += `domProps:${genProps(el.props)},`;
        }
        if (el.events) {
          data += `${genHandlers(el.events, false)},`;
        }
        if (el.nativeEvents) {
          data += `${genHandlers(el.nativeEvents, true)},`;
        }
        if (el.slotTarget && !el.slotScope) {
          data += `slot:${el.slotTarget},`;
        }
        if (el.scopedSlots) {
          data += `${genScopedSlots(el, el.scopedSlots, state)},`;
        }
        if (el.model) {
          data += `model:{value:${el.model.value},callback:${el.model.callback},expression:${el.model.expression}},`;
        }
        if (el.inlineTemplate) {
          const inlineTemplate = genInlineTemplate(el, state);
          if (inlineTemplate) {
            data += `${inlineTemplate},`;
          }
        }
        data = data.replace(/,$/, "") + "}";
        if (el.dynamicAttrs) {
          data = `_b(${data},"${el.tag}",${genProps(el.dynamicAttrs)})`;
        }
        if (el.wrapData) {
          data = el.wrapData(data);
        }
        if (el.wrapListeners) {
          data = el.wrapListeners(data);
        }
        return data;
      }
      function genDirectives(el, state) {
        const dirs = el.directives;
        if (!dirs)
          return;
        let res = "directives:[";
        let hasRuntime = false;
        let i, l, dir, needRuntime;
        for (i = 0, l = dirs.length; i < l; i++) {
          dir = dirs[i];
          needRuntime = true;
          const gen = state.directives[dir.name];
          if (gen) {
            needRuntime = !!gen(el, dir, state.warn);
          }
          if (needRuntime) {
            hasRuntime = true;
            res += `{name:"${dir.name}",rawName:"${dir.rawName}"${dir.value ? `,value:(${dir.value}),expression:${JSON.stringify(dir.value)}` : ""}${dir.arg ? `,arg:${dir.isDynamicArg ? dir.arg : `"${dir.arg}"`}` : ""}${dir.modifiers ? `,modifiers:${JSON.stringify(dir.modifiers)}` : ""}},`;
          }
        }
        if (hasRuntime) {
          return res.slice(0, -1) + "]";
        }
      }
      function genInlineTemplate(el, state) {
        const ast = el.children[0];
        if (el.children.length !== 1 || ast.type !== 1) {
          state.warn("Inline-template components must have exactly one child element.", { start: el.start });
        }
        if (ast && ast.type === 1) {
          const inlineRenderFns = generate(ast, state.options);
          return `inlineTemplate:{render:function(){${inlineRenderFns.render}},staticRenderFns:[${inlineRenderFns.staticRenderFns.map((code) => `function(){${code}}`).join(",")}]}`;
        }
      }
      function genScopedSlots(el, slots, state) {
        let needsForceUpdate = el.for || Object.keys(slots).some((key) => {
          const slot = slots[key];
          return slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot);
        });
        let needsKey = !!el.if;
        if (!needsForceUpdate) {
          let parent = el.parent;
          while (parent) {
            if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent.for) {
              needsForceUpdate = true;
              break;
            }
            if (parent.if) {
              needsKey = true;
            }
            parent = parent.parent;
          }
        }
        const generatedSlots = Object.keys(slots).map((key) => genScopedSlot(slots[key], state)).join(",");
        return `scopedSlots:_u([${generatedSlots}]${needsForceUpdate ? `,null,true` : ``}${!needsForceUpdate && needsKey ? `,null,false,${hash(generatedSlots)}` : ``})`;
      }
      function hash(str2) {
        let hash2 = 5381;
        let i = str2.length;
        while (i) {
          hash2 = hash2 * 33 ^ str2.charCodeAt(--i);
        }
        return hash2 >>> 0;
      }
      function containsSlotChild(el) {
        if (el.type === 1) {
          if (el.tag === "slot") {
            return true;
          }
          return el.children.some(containsSlotChild);
        }
        return false;
      }
      function genScopedSlot(el, state) {
        const isLegacySyntax = el.attrsMap["slot-scope"];
        if (el.if && !el.ifProcessed && !isLegacySyntax) {
          return genIf(el, state, genScopedSlot, `null`);
        }
        if (el.for && !el.forProcessed) {
          return genFor(el, state, genScopedSlot);
        }
        const slotScope = el.slotScope === emptySlotScopeToken ? `` : String(el.slotScope);
        const fn = `function(${slotScope}){return ${el.tag === "template" ? el.if && isLegacySyntax ? `(${el.if})?${genChildren(el, state) || "undefined"}:undefined` : genChildren(el, state) || "undefined" : genElement(el, state)}}`;
        const reverseProxy = slotScope ? `` : `,proxy:true`;
        return `{key:${el.slotTarget || `"default"`},fn:${fn}${reverseProxy}}`;
      }
      function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
        const children = el.children;
        if (children.length) {
          const el2 = children[0];
          if (children.length === 1 && el2.for && el2.tag !== "template" && el2.tag !== "slot") {
            const normalizationType2 = checkSkip ? state.maybeComponent(el2) ? `,1` : `,0` : ``;
            return `${(altGenElement || genElement)(el2, state)}${normalizationType2}`;
          }
          const normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
          const gen = altGenNode || genNode;
          return `[${children.map((c) => gen(c, state)).join(",")}]${normalizationType ? `,${normalizationType}` : ""}`;
        }
      }
      function getNormalizationType(children, maybeComponent2) {
        let res = 0;
        for (let i = 0; i < children.length; i++) {
          const el = children[i];
          if (el.type !== 1) {
            continue;
          }
          if (needsNormalization(el) || el.ifConditions && el.ifConditions.some((c) => needsNormalization(c.block))) {
            res = 2;
            break;
          }
          if (maybeComponent2(el) || el.ifConditions && el.ifConditions.some((c) => maybeComponent2(c.block))) {
            res = 1;
          }
        }
        return res;
      }
      function needsNormalization(el) {
        return el.for !== void 0 || el.tag === "template" || el.tag === "slot";
      }
      function genNode(node, state) {
        if (node.type === 1) {
          return genElement(node, state);
        } else if (node.type === 3 && node.isComment) {
          return genComment(node);
        } else {
          return genText(node);
        }
      }
      function genText(text2) {
        return `_v(${text2.type === 2 ? text2.expression : transformSpecialNewlines(JSON.stringify(text2.text))})`;
      }
      function genComment(comment2) {
        return `_e(${JSON.stringify(comment2.text)})`;
      }
      function genSlot(el, state) {
        const slotName = el.slotName || '"default"';
        const children = genChildren(el, state);
        let res = `_t(${slotName}${children ? `,function(){return ${children}}` : ""}`;
        const attrs2 = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map((attr) => ({
          name: camelize(attr.name),
          value: attr.value,
          dynamic: attr.dynamic
        }))) : null;
        const bind3 = el.attrsMap["v-bind"];
        if ((attrs2 || bind3) && !children) {
          res += `,null`;
        }
        if (attrs2) {
          res += `,${attrs2}`;
        }
        if (bind3) {
          res += `${attrs2 ? "" : ",null"},${bind3}`;
        }
        return res + ")";
      }
      function genComponent(componentName, el, state) {
        const children = el.inlineTemplate ? null : genChildren(el, state, true);
        return `_c(${componentName},${genData(el, state)}${children ? `,${children}` : ""})`;
      }
      function genProps(props2) {
        let staticProps = ``;
        let dynamicProps = ``;
        for (let i = 0; i < props2.length; i++) {
          const prop = props2[i];
          const value = transformSpecialNewlines(prop.value);
          if (prop.dynamic) {
            dynamicProps += `${prop.name},${value},`;
          } else {
            staticProps += `"${prop.name}":${value},`;
          }
        }
        staticProps = `{${staticProps.slice(0, -1)}}`;
        if (dynamicProps) {
          return `_d(${staticProps},[${dynamicProps.slice(0, -1)}])`;
        } else {
          return staticProps;
        }
      }
      function transformSpecialNewlines(text2) {
        return text2.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      var prohibitedKeywordRE = new RegExp("\\b" + "do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b") + "\\b");
      var unaryOperatorsRE = new RegExp("\\b" + "delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b") + "\\s*\\([^\\)]*\\)");
      var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
      function detectErrors(ast, warn2) {
        if (ast) {
          checkNode(ast, warn2);
        }
      }
      function checkNode(node, warn2) {
        if (node.type === 1) {
          for (const name in node.attrsMap) {
            if (dirRE.test(name)) {
              const value = node.attrsMap[name];
              if (value) {
                const range2 = node.rawAttrsMap[name];
                if (name === "v-for") {
                  checkFor(node, `v-for="${value}"`, warn2, range2);
                } else if (name === "v-slot" || name[0] === "#") {
                  checkFunctionParameterExpression(value, `${name}="${value}"`, warn2, range2);
                } else if (onRE.test(name)) {
                  checkEvent(value, `${name}="${value}"`, warn2, range2);
                } else {
                  checkExpression(value, `${name}="${value}"`, warn2, range2);
                }
              }
            }
          }
          if (node.children) {
            for (let i = 0; i < node.children.length; i++) {
              checkNode(node.children[i], warn2);
            }
          }
        } else if (node.type === 2) {
          checkExpression(node.expression, node.text, warn2, node);
        }
      }
      function checkEvent(exp, text2, warn2, range2) {
        const stripped = exp.replace(stripStringRE, "");
        const keywordMatch = stripped.match(unaryOperatorsRE);
        if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== "$") {
          warn2(`avoid using JavaScript unary operator as property name: "${keywordMatch[0]}" in expression ${text2.trim()}`, range2);
        }
        checkExpression(exp, text2, warn2, range2);
      }
      function checkFor(node, text2, warn2, range2) {
        checkExpression(node.for || "", text2, warn2, range2);
        checkIdentifier(node.alias, "v-for alias", text2, warn2, range2);
        checkIdentifier(node.iterator1, "v-for iterator", text2, warn2, range2);
        checkIdentifier(node.iterator2, "v-for iterator", text2, warn2, range2);
      }
      function checkIdentifier(ident, type, text2, warn2, range2) {
        if (typeof ident === "string") {
          try {
            new Function(`var ${ident}=_`);
          } catch (e) {
            warn2(`invalid ${type} "${ident}" in expression: ${text2.trim()}`, range2);
          }
        }
      }
      function checkExpression(exp, text2, warn2, range2) {
        try {
          new Function(`return ${exp}`);
        } catch (e) {
          const keywordMatch = exp.replace(stripStringRE, "").match(prohibitedKeywordRE);
          if (keywordMatch) {
            warn2(`avoid using JavaScript keyword as property name: "${keywordMatch[0]}"
  Raw expression: ${text2.trim()}`, range2);
          } else {
            warn2(`invalid expression: ${e.message} in

    ${exp}

  Raw expression: ${text2.trim()}
`, range2);
          }
        }
      }
      function checkFunctionParameterExpression(exp, text2, warn2, range2) {
        try {
          new Function(exp, "");
        } catch (e) {
          warn2(`invalid function parameter expression: ${e.message} in

    ${exp}

  Raw expression: ${text2.trim()}
`, range2);
        }
      }
      var range = 2;
      function generateCodeFrame(source, start = 0, end = source.length) {
        const lines = source.split(/\r?\n/);
        let count = 0;
        const res = [];
        for (let i = 0; i < lines.length; i++) {
          count += lines[i].length + 1;
          if (count >= start) {
            for (let j = i - range; j <= i + range || end > count; j++) {
              if (j < 0 || j >= lines.length)
                continue;
              res.push(`${j + 1}${repeat(` `, 3 - String(j + 1).length)}|  ${lines[j]}`);
              const lineLength = lines[j].length;
              if (j === i) {
                const pad = start - (count - lineLength) + 1;
                const length = end > count ? lineLength - pad : end - start;
                res.push(`   |  ` + repeat(` `, pad) + repeat(`^`, length));
              } else if (j > i) {
                if (end > count) {
                  const length = Math.min(end - count, lineLength);
                  res.push(`   |  ` + repeat(`^`, length));
                }
                count += lineLength + 1;
              }
            }
            break;
          }
        }
        return res.join("\n");
      }
      function repeat(str2, n) {
        let result2 = "";
        if (n > 0) {
          while (true) {
            if (n & 1)
              result2 += str2;
            n >>>= 1;
            if (n <= 0)
              break;
            str2 += str2;
          }
        }
        return result2;
      }
      function createFunction(code, errors) {
        try {
          return new Function(code);
        } catch (err) {
          errors.push({ err, code });
          return noop;
        }
      }
      function createCompileToFunctionFn(compile2) {
        const cache = /* @__PURE__ */ Object.create(null);
        return function compileToFunctions2(template, options, vm) {
          options = extend({}, options);
          const warn2 = options.warn || warn$2;
          delete options.warn;
          {
            try {
              new Function("return 1");
            } catch (e) {
              if (e.toString().match(/unsafe-eval|CSP/)) {
                warn2("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.");
              }
            }
          }
          const key = options.delimiters ? String(options.delimiters) + template : template;
          if (cache[key]) {
            return cache[key];
          }
          const compiled = compile2(template, options);
          {
            if (compiled.errors && compiled.errors.length) {
              if (options.outputSourceRange) {
                compiled.errors.forEach((e) => {
                  warn2(`Error compiling template:

${e.msg}

` + generateCodeFrame(template, e.start, e.end), vm);
                });
              } else {
                warn2(`Error compiling template:

${template}

` + compiled.errors.map((e) => `- ${e}`).join("\n") + "\n", vm);
              }
            }
            if (compiled.tips && compiled.tips.length) {
              if (options.outputSourceRange) {
                compiled.tips.forEach((e) => tip(e.msg, vm));
              } else {
                compiled.tips.forEach((msg) => tip(msg, vm));
              }
            }
          }
          const res = {};
          const fnGenErrors = [];
          res.render = createFunction(compiled.render, fnGenErrors);
          res.staticRenderFns = compiled.staticRenderFns.map((code) => {
            return createFunction(code, fnGenErrors);
          });
          {
            if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
              warn2(`Failed to generate render function:

` + fnGenErrors.map(({ err, code }) => `${err.toString()} in

${code}
`).join("\n"), vm);
            }
          }
          return cache[key] = res;
        };
      }
      function createCompilerCreator(baseCompile) {
        return function createCompiler2(baseOptions2) {
          function compile2(template, options) {
            const finalOptions = Object.create(baseOptions2);
            const errors = [];
            const tips = [];
            let warn2 = (msg, range2, tip2) => {
              (tip2 ? tips : errors).push(msg);
            };
            if (options) {
              if (options.outputSourceRange) {
                const leadingSpaceLength = template.match(/^\s*/)[0].length;
                warn2 = (msg, range2, tip2) => {
                  const data = typeof msg === "string" ? { msg } : msg;
                  if (range2) {
                    if (range2.start != null) {
                      data.start = range2.start + leadingSpaceLength;
                    }
                    if (range2.end != null) {
                      data.end = range2.end + leadingSpaceLength;
                    }
                  }
                  (tip2 ? tips : errors).push(data);
                };
              }
              if (options.modules) {
                finalOptions.modules = (baseOptions2.modules || []).concat(options.modules);
              }
              if (options.directives) {
                finalOptions.directives = extend(Object.create(baseOptions2.directives || null), options.directives);
              }
              for (const key in options) {
                if (key !== "modules" && key !== "directives") {
                  finalOptions[key] = options[key];
                }
              }
            }
            finalOptions.warn = warn2;
            const compiled = baseCompile(template.trim(), finalOptions);
            {
              detectErrors(compiled.ast, warn2);
            }
            compiled.errors = errors;
            compiled.tips = tips;
            return compiled;
          }
          return {
            compile: compile2,
            compileToFunctions: createCompileToFunctionFn(compile2)
          };
        };
      }
      var createCompiler = createCompilerCreator(function baseCompile(template, options) {
        const ast = parse2(template.trim(), options);
        if (options.optimize !== false) {
          optimize(ast, options);
        }
        const code = generate(ast, options);
        return {
          ast,
          render: code.render,
          staticRenderFns: code.staticRenderFns
        };
      });
      var { compile, compileToFunctions } = createCompiler(baseOptions);
      var div;
      function getShouldDecode(href) {
        div = div || document.createElement("div");
        div.innerHTML = href ? `<a href="
"/>` : `<div a="
"/>`;
        return div.innerHTML.indexOf("&#10;") > 0;
      }
      var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
      var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;
      var idToTemplate = cached((id) => {
        const el = query(id);
        return el && el.innerHTML;
      });
      var mount = Vue5.prototype.$mount;
      Vue5.prototype.$mount = function(el, hydrating) {
        el = el && query(el);
        if (el === document.body || el === document.documentElement) {
          warn$2(`Do not mount Vue to <html> or <body> - mount to normal elements instead.`);
          return this;
        }
        const options = this.$options;
        if (!options.render) {
          let template = options.template;
          if (template) {
            if (typeof template === "string") {
              if (template.charAt(0) === "#") {
                template = idToTemplate(template);
                if (!template) {
                  warn$2(`Template element not found or is empty: ${options.template}`, this);
                }
              }
            } else if (template.nodeType) {
              template = template.innerHTML;
            } else {
              {
                warn$2("invalid template option:" + template, this);
              }
              return this;
            }
          } else if (el) {
            template = getOuterHTML(el);
          }
          if (template) {
            if (config.performance && mark) {
              mark("compile");
            }
            const { render, staticRenderFns } = compileToFunctions(template, {
              outputSourceRange: true,
              shouldDecodeNewlines,
              shouldDecodeNewlinesForHref,
              delimiters: options.delimiters,
              comments: options.comments
            }, this);
            options.render = render;
            options.staticRenderFns = staticRenderFns;
            if (config.performance && mark) {
              mark("compile end");
              measure(`vue ${this._name} compile`, "compile", "compile end");
            }
          }
        }
        return mount.call(this, el, hydrating);
      };
      function getOuterHTML(el) {
        if (el.outerHTML) {
          return el.outerHTML;
        } else {
          const container = document.createElement("div");
          container.appendChild(el.cloneNode(true));
          return container.innerHTML;
        }
      }
      Vue5.compile = compileToFunctions;
      function effect(fn, scheduler) {
        const watcher = new Watcher(currentInstance, fn, noop, {
          sync: true
        });
        if (scheduler) {
          watcher.update = () => {
            scheduler(() => watcher.run());
          };
        }
      }
      extend(Vue5, vca);
      Vue5.effect = effect;
      module2.exports = Vue5;
    }
  });

  // node_modules/vue/dist/vue.common.js
  var require_vue_common = __commonJS({
    "node_modules/vue/dist/vue.common.js"(exports2, module2) {
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_vue_common_dev();
      }
    }
  });

  // node_modules/lux-design-system/dist/system/system.js
  var require_system = __commonJS({
    "node_modules/lux-design-system/dist/system/system.js"(exports2, module2) {
      !function(t, e) {
        "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports2 ? exports2.system = e() : t.system = e();
      }(window, function() {
        return function(t) {
          var e = {};
          function n(r) {
            if (e[r])
              return e[r].exports;
            var i = e[r] = { i: r, l: false, exports: {} };
            return t[r].call(i.exports, i, i.exports, n), i.l = true, i.exports;
          }
          return n.m = t, n.c = e, n.d = function(t2, e2, r) {
            n.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: r });
          }, n.r = function(t2) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
          }, n.t = function(t2, e2) {
            if (1 & e2 && (t2 = n(t2)), 8 & e2)
              return t2;
            if (4 & e2 && "object" == typeof t2 && t2 && t2.__esModule)
              return t2;
            var r = /* @__PURE__ */ Object.create(null);
            if (n.r(r), Object.defineProperty(r, "default", { enumerable: true, value: t2 }), 2 & e2 && "string" != typeof t2)
              for (var i in t2)
                n.d(r, i, function(e3) {
                  return t2[e3];
                }.bind(null, i));
            return r;
          }, n.n = function(t2) {
            var e2 = t2 && t2.__esModule ? function() {
              return t2.default;
            } : function() {
              return t2;
            };
            return n.d(e2, "a", e2), e2;
          }, n.o = function(t2, e2) {
            return Object.prototype.hasOwnProperty.call(t2, e2);
          }, n.p = "/", n(n.s = 0);
        }({ "+97c": function(t, e) {
        }, "+Dcj": function(t, e, n) {
          "use strict";
          var r = n("oCYn");
          r = "default" in r ? r.default : r;
          /^2\./.test(r.version) || r.util.warn("VueFocus 2.1.0 only supports Vue 2.x, and does not support Vue " + r.version);
          var i = { inserted: function(t2, e2) {
            e2.value ? t2.focus() : t2.blur();
          }, componentUpdated: function(t2, e2) {
            e2.modifiers.lazy && Boolean(e2.value) === Boolean(e2.oldValue) || (e2.value ? t2.focus() : t2.blur());
          } }, a = { directives: { focus: i } };
          e.version = "2.1.0", e.focus = i, e.mixin = a;
        }, "+e+L": function(t, e) {
        }, "/OE0": function(t, e, n) {
        }, "/kEJ": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconClock", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("+e+L"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M12,24C5.4,24,0,18.6,0,12C0,5.4,5.4,0,12,0c6.6,0,12,5.4,12,12C24,18.6,18.6,24,12,24z M12,1C5.9,1,1,5.9,1,12\n      s4.9,11,11,11s11-4.9,11-11S18.1,1,12,1z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M17.5,18c-0.1,0-0.2,0-0.3-0.1l-6-5.5C11.1,12.3,11,12.1,11,12V6.5C11,6.2,11.2,6,11.5,6S12,6.2,12,6.5v5.3l5.8,5.4\n      c0.2,0.2,0.2,0.5,0,0.7C17.8,17.9,17.6,18,17.5,18z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "/thn": function(t, e) {
          t.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M497.9 150.5c9 9 14.1 21.2 14.1 33.9v143.1c0 12.7-5.1 24.9-14.1 33.9L361.5 497.9c-9 9-21.2 14.1-33.9 14.1H184.5c-12.7 0-24.9-5.1-33.9-14.1L14.1 361.5c-9-9-14.1-21.2-14.1-33.9V184.5c0-12.7 5.1-24.9 14.1-33.9L150.5 14.1c9-9 21.2-14.1 33.9-14.1h143.1c12.7 0 24.9 5.1 33.9 14.1l136.5 136.4zM377.6 338c4.7-4.7 4.7-12.3 0-17l-65-65 65.1-65.1c4.7-4.7 4.7-12.3 0-17L338 134.4c-4.7-4.7-12.3-4.7-17 0l-65 65-65.1-65.1c-4.7-4.7-12.3-4.7-17 0L134.4 174c-4.7 4.7-4.7 12.3 0 17l65.1 65.1-65.1 65.1c-4.7 4.7-4.7 12.3 0 17l39.6 39.6c4.7 4.7 12.3 4.7 17 0l65.1-65.1 65.1 65.1c4.7 4.7 12.3 4.7 17 0l39.4-39.8z"/></svg>';
        }, "/w86": function(t, e, n) {
          "use strict";
          var r = n("OFxA");
          n.n(r).a;
        }, 0: function(t, e, n) {
          t.exports = n("5m5j");
        }, "03rr": function(t, e) {
        }, "0Rnf": function(t, e, n) {
        }, "0tf1": function(t, e, n) {
        }, "10Lx": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconPerson", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("P3nq"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M21.5,23h-19C2.2,23,2,22.8,2,22.5v-1.9c0-1.5,0.9-2.8,2.3-3.3L9,15.6v-2.5h1V16c0,0.2-0.1,0.4-0.3,0.5l-5,1.8\n			c-1,0.4-1.7,1.3-1.7,2.4V22h18v-1.4c0-1.1-0.7-2-1.7-2.4l-5-1.8C14.1,16.4,14,16.2,14,16v-2.8h1v2.5l4.7,1.7\n			c1.4,0.5,2.3,1.8,2.3,3.3v1.9C22,22.8,21.8,23,21.5,23z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12,14.5c-1.5,0-2.9-0.7-3.9-1.9C6,10,6,6,8.1,3.4c1-1.2,2.4-1.9,3.9-1.9l0,0c1.5,0,2.9,0.7,3.9,1.9v0\n			C18,6,18,10,15.9,12.6C14.9,13.8,13.5,14.5,12,14.5z M12,2.5c-1.2,0-2.3,0.6-3.2,1.6C7,6.2,7,9.8,8.8,11.9c0.8,1,2,1.6,3.2,1.6\n			s2.3-0.6,3.2-1.6c1.8-2.2,1.8-5.7,0-7.8v0C14.3,3.1,13.2,2.5,12,2.5L12,2.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M15.7,8.1c-1.2,0-2.1-0.5-2.9-1.6C11.9,7.3,10.4,8,9,8C8.2,8,7.5,7.8,6.8,7.5l0.5-0.9C7.8,6.9,8.4,7,9,7\n			c1.3,0,2.9-0.8,3.3-1.7c0.1-0.2,0.3-0.3,0.4-0.3c0.2,0,0.4,0.1,0.4,0.3c0.9,1.5,1.8,2,3.2,1.7c0.1,0,0.2,0,0.3,0l0.2,0l0.1,1\n			c-0.1,0-0.1,0-0.2,0c-0.1,0-0.1,0-0.2,0C16.3,8.1,16,8.1,15.7,8.1z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "1UX2": function(t, e, n) {
          "use strict";
          var r = n("kda8");
          n.n(r).a;
        }, "1dIj": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconBase", status: "ready", release: "1.0.0", type: "Element", props: { iconName: { required: false, type: String, default: "" }, width: { type: [Number, String], default: 24 }, height: { type: [Number, String], default: 24 }, iconColor: { type: String, default: "currentColor" }, iconHide: { type: Boolean, default: false } } }, i = (n("JAIS"), n("KHd+")), a = n("y2MN"), o = n.n(a), s = Object(i.a)(r, function(t2, e2) {
            var n2 = e2._c;
            return n2("div", { staticClass: "lux-icon" }, [n2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: e2.props.width, height: e2.props.height, viewBox: "0 0 24 24", "aria-labelledby": e2.props.iconName, "aria-hidden": e2.props.iconHide, role: "img" } }, [e2.props.iconName ? n2("title", { attrs: { id: e2.props.iconName, lang: "en" } }, [e2._v(e2._s(e2.props.iconName))]) : e2._e(), e2._v(" "), n2("g", { attrs: { fill: e2.props.iconColor } }, [e2._t("default")], 2)])]);
          }, [], true, null, "1b70402b", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "26cH": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = n("2iik"), i = (n("RBhM"), { name: "DatePicker", status: "prototype", release: "1.0.0", type: "Element", components: { "v-date-picker": r.DatePicker }, data: function() {
            return { date: this.defaultDate, range: this.defaultDates, attributes: [{ bar: { color: "red", class: "lux-holiday-highlight" }, dates: this.holidays, popover: { label: "Official PUL Holiday" } }] };
          }, props: { mode: { type: String, default: "single", validator: function(t2) {
            return t2.match(/(single|range)/);
          } }, label: { type: String, default: "" }, id: { type: String, default: "", required: true }, name: { type: String, default: "", required: true }, width: { type: String, default: "auto", validator: function(t2) {
            return t2.match(/(auto|expand)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } }, required: { type: Boolean, default: false }, placeholder: { type: String, default: "" }, defaultDate: { type: Date, default: null, required: false }, defaultDates: { type: Object, default: null, required: false }, disabledDates: { type: Array, default: null, required: false }, holidays: { type: Array, default: null, required: false } }, methods: { calendarClosedSingle: function(t2) {
            if (this.date && this.isValidFormat(this.date.toLocaleDateString("en-US"))) {
              var e2 = this.date.toLocaleDateString("en-US");
              this.$emit("updateInput", e2);
            }
          }, calendarClosedRange: function(t2) {
            if (this.range && this.isValidFormat(this.range.start.toLocaleDateString("en-US")) && this.isValidFormat(this.range.end.toLocaleDateString("en-US"))) {
              var e2 = this.formatStart() + " - " + this.formatEnd();
              this.$emit("updateInput", e2);
            }
          }, formatEnd: function() {
            if (this.range.hasOwnProperty("end"))
              return this.range.end.toLocaleDateString("en-US");
          }, formatStart: function() {
            if (this.range.hasOwnProperty("start"))
              return this.range.start.toLocaleDateString("en-US");
          }, parseDate: function(t2) {
            if (t2.includes("/")) {
              var e2 = t2.split("/");
              return new Date(e2[2] + "-" + e2[0] + "-" + e2[1]);
            }
          }, updateInput: function(t2) {
            this.isValidFormat(t2) && (this.date = this.parseDate(t2), this.$emit("updateInput", t2));
          }, updateRangeInput: function(t2) {
            if (t2.includes(" - ")) {
              var e2 = t2.split(" - ");
              this.isValidFormat(e2[0]) && this.isValidFormat(e2[1]) && (this.range || (this.range = {}), this.range.start = this.parseDate(e2[0]), this.range.end = this.parseDate(e2[1]), this.$emit("updateInput", t2));
            }
          }, isValidFormat: function(t2) {
            return /^\d{1,2}\/\d{1,2}\/\d{4}$/.test(t2);
          }, inputblur: function(t2) {
            this.$emit("inputblur", t2);
          } }, beforeMount: function() {
            Object(r.setupCalendar)({ popoverVisibility: "focus", updateOnInput: true });
          } }), a = (n("p+lg"), n("KHd+")), o = n("cX6P"), s = n.n(o), c = Object(a.a)(i, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("div", { class: ["lux-date-picker", t2.size] }, ["single" === t2.mode ? n2("v-date-picker", { attrs: { mode: "single", "disabled-dates": t2.disabledDates, "update-on-input": true, attributes: t2.attributes }, on: { "popover-did-disappear": function(e3) {
              return t2.calendarClosedSingle(e3);
            } }, model: { value: t2.date, callback: function(e3) {
              t2.date = e3;
            }, expression: "date" } }, [n2("input-text", { attrs: { id: t2.id, label: t2.label, name: t2.name, required: t2.required, width: t2.width, size: t2.size, value: t2.date ? t2.date.toLocaleDateString("en-US") : "", placeholder: t2.placeholder }, on: { input: function(e3) {
              return t2.updateInput(e3);
            } } })], 1) : t2._e(), t2._v(" "), "range" === t2.mode ? n2("v-date-picker", { attrs: { mode: "range", "disabled-dates": t2.disabledDates, "update-on-input": true, attributes: t2.attributes }, on: { "popover-did-disappear": function(e3) {
              return t2.calendarClosedRange(e3);
            } }, model: { value: t2.range, callback: function(e3) {
              t2.range = e3;
            }, expression: "range" } }, [n2("input-text", { attrs: { id: t2.id, label: t2.label, name: t2.name, width: t2.width, size: t2.size, required: t2.required, value: t2.range ? this.formatStart() + " - " + this.formatEnd() : "", placeholder: t2.placeholder }, on: { input: function(e3) {
              return t2.updateRangeInput(e3);
            } } })], 1) : t2._e()], 1);
          }, [], false, null, null, null);
          "function" == typeof s.a && s()(c);
          e.default = c.exports;
        }, "2F0E": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "FormInputs", status: "prototype", release: "1.0.0", type: "Template", metaInfo: { title: "Form | LUX Design System", htmlAttrs: { lang: "en" } }, props: { type: { type: String, default: "div" } } }, i = n("KHd+"), a = n("BIGG"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.type, { tag: "component", staticClass: "lux-form-inputs" }, [n2("wrapper", [n2("grid-container", [n2("grid-item", [n2("search-box", [n2("input-text", { attrs: { id: "foo", name: "value", label: "Search", "hide-label": true, placeholder: "Find all the things", size: "small" } }), t2._v(" "), n2("input-button", { attrs: { type: "button", variation: "icon", icon: "search", size: "small" } })], 1), t2._v(" "), n2("search-box", [n2("input-text", { attrs: { id: "foo", name: "value", label: "Search", "hide-label": true, placeholder: "Find all the things" } }), t2._v(" "), n2("input-button", { attrs: { type: "button", variation: "icon", icon: "search" } })], 1), t2._v(" "), n2("search-box", [n2("input-text", { attrs: { id: "foo", name: "value", label: "Search", "hide-label": true, placeholder: "Find all the things", size: "large" } }), t2._v(" "), n2("input-button", { attrs: { type: "button", variation: "icon", icon: "search", size: "large" } })], 1)], 1)], 1), t2._v(" "), n2("grid-container", [n2("grid-item", [n2("input-text", { attrs: { id: "foo", name: "value", label: "Input", "hide-label": true, placeholder: "Write your text", helper: "This is helper text to help the user fill out this field", required: "", size: "small" } }), t2._v(" "), n2("input-text", { attrs: { id: "foo", name: "value", label: "Input", "hide-label": true, placeholder: "Write your text", helper: "This is helper text to help the user fill out this field", required: "" } }), t2._v(" "), n2("input-text", { attrs: { id: "foo", name: "value", label: "Input", "hide-label": true, placeholder: "Write your text", helper: "This is helper text to help the user fill out this field", required: "", size: "large" } })], 1), t2._v(" "), n2("grid-item", [n2("input-text", { attrs: { id: "foo", name: "value", "hide-label": true, label: "Icon", placeholder: "Write your text", icon: "alert" } })], 1), t2._v(" "), n2("grid-item", [n2("input-select", { attrs: { label: "Select...", id: "myChoice", name: "myChoice", "hide-label": true, value: "bar", options: [{ label: "opt 1", value: "foo" }, { label: "opt 2", value: "bar" }], size: "small" } }), t2._v(" "), n2("input-select", { attrs: { label: "Select...", id: "myChoice", name: "myChoice", "hide-label": true, value: "bar", options: [{ label: "opt 1", value: "foo" }, { label: "opt 2", value: "bar" }] } }), t2._v(" "), n2("input-select", { attrs: { label: "Select...", id: "myChoice", name: "myChoice", "hide-label": true, value: "bar", size: "large", options: [{ label: "opt 1", value: "foo" }, { label: "opt 2", value: "bar" }] } })], 1), t2._v(" "), n2("grid-item", [n2("dropdown-menu", { attrs: { type: "links", "button-label": "Options", "menu-items": [{ name: "Vegetable", component: "Vegetable", disabled: true }, { name: "Fruit", component: "Fruit" }, { name: "Apple", component: "Apple", parent: "Fruit" }, { name: "Lettuce", component: "Lettuce", parent: "Vegetable" }, { name: "Carrot", component: "Carrot", parent: "Vegetable" }, { name: "Pear", component: "Pear", parent: "Fruit" }], size: "small" } }), t2._v(" "), n2("dropdown-menu", { attrs: { type: "links", "button-label": "Options", "menu-items": [{ name: "Vegetable", component: "Vegetable", disabled: true }, { name: "Fruit", component: "Fruit" }, { name: "Apple", component: "Apple", parent: "Fruit" }, { name: "Lettuce", component: "Lettuce", parent: "Vegetable" }, { name: "Carrot", component: "Carrot", parent: "Vegetable" }, { name: "Pear", component: "Pear", parent: "Fruit" }] } }), t2._v(" "), n2("dropdown-menu", { attrs: { type: "links", "button-label": "Options", size: "large", "menu-items": [{ name: "Vegetable", component: "Vegetable", disabled: true }, { name: "Fruit", component: "Fruit" }, { name: "Apple", component: "Apple", parent: "Fruit" }, { name: "Lettuce", component: "Lettuce", parent: "Vegetable" }, { name: "Carrot", component: "Carrot", parent: "Vegetable" }, { name: "Pear", component: "Pear", parent: "Fruit" }] } })], 1), t2._v(" "), n2("grid-item", [n2("input-text", { attrs: { id: "foe", name: "value", label: "Textarea", type: "textarea" } })], 1)], 1), t2._v(" "), n2("date-picker", { attrs: { id: "dateRange", name: "daterange", label: "Date Range", mode: "range", size: "small" } }), t2._v(" "), n2("date-picker", { attrs: { id: "dateRange", name: "daterange", label: "Date Range", mode: "range" } }), t2._v(" "), n2("date-picker", { attrs: { id: "dateRange", name: "daterange", label: "Date Range", mode: "range", size: "large" } }), t2._v(" "), n2("input-radio", { attrs: { id: "foo", vertical: "", groupLabel: "Where is my mind?", options: [{ name: "radio-group-name", value: "In the clouds", id: "radio-opt1", required: true }, { name: "radio-group-name", value: "I don't know", id: "radio-opt2", disabled: true }] } }), t2._v(" "), n2("input-checkbox", { attrs: { groupLabel: "Where is my mind?", options: [{ name: "opt 1", value: "In the clouds", id: "checkbox-opt1", required: true }, { name: "opt 2", value: "I don't know", id: "checkbox-opt2", disabled: true }] } }), t2._v(" "), n2("input-button", { attrs: { type: "button", variation: "icon", size: "small", icon: "search", hideLabel: "" } }), t2._v(" "), n2("input-button", { attrs: { type: "button", variation: "icon", icon: "search", hideLabel: "" } }), t2._v(" "), n2("input-button", { attrs: { type: "button", variation: "icon", size: "large", icon: "search", hideLabel: "" } }), t2._v(" "), n2("input-button", { attrs: { variation: "solid", size: "small" } }, [t2._v("Apply Changes")]), t2._v(" "), n2("input-button", { attrs: { variation: "solid" } }, [t2._v("Apply Changes")]), t2._v(" "), n2("input-button", { attrs: { variation: "solid", size: "large" } }, [t2._v("Apply Changes")]), t2._v(" "), n2("tag", { attrs: { type: "tag", "tag-items": [{ name: "Cats", href: "/tags/cats", color: "red", icon: "denied" }, { name: "Cats", href: "/tags/cats", color: "yellow", icon: "alert" }, { name: "Cats", href: "/tags/cats", color: "green", icon: "approved" }, { name: "Cats", href: "/tags/cats", color: "blue" }, { name: "Cats", color: "blue" }] } }), t2._v(" "), n2("tag", { attrs: { type: "filter", size: "small", "tag-items": [{ name: "Cats", href: "/tags/cats" }, { name: "Dogs", href: "/tags/dogs" }] } }), t2._v(" "), n2("tag", { attrs: { type: "filter", "tag-items": [{ name: "Cats", href: "/tags/cats" }, { name: "Dogs", href: "/tags/dogs" }] } }), t2._v(" "), n2("tag", { attrs: { type: "filter", size: "large", "tag-items": [{ name: "Cats", href: "/tags/cats" }, { name: "Dogs", href: "/tags/dogs" }] } }), t2._v(" "), n2("hyperlink", { attrs: { href: "#", variation: "button solid", size: "small" } }, [t2._v("Bar")]), t2._v(" "), n2("hyperlink", { attrs: { href: "#", variation: "button solid" } }, [t2._v("Bar")]), t2._v(" "), n2("hyperlink", { attrs: { href: "#", variation: "button solid", size: "large" } }, [t2._v("Bar")])], 1)], 1);
          }, [], false, null, "a2a22aea", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "2FPS": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "CardHeader", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" } } }, i = (n("fHnW"), n("KHd+")), a = n("9xho"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", staticClass: "lux-card-header" }, [this._t("default")], 2);
          }, [], false, null, "6298918c", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "2dwG": function(t, e) {
          t.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M400 480H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zM238.1 177.9L102.4 313.6l-6.3 57.1c-.8 7.6 5.6 14.1 13.3 13.3l57.1-6.3L302.2 242c2.3-2.3 2.3-6.1 0-8.5L246.7 178c-2.5-2.4-6.3-2.4-8.6-.1zM345 165.1L314.9 135c-9.4-9.4-24.6-9.4-33.9 0l-23.1 23.1c-2.3 2.3-2.3 6.1 0 8.5l55.5 55.5c2.3 2.3 6.1 2.3 8.5 0L345 199c9.3-9.3 9.3-24.5 0-33.9z"/></svg>';
        }, "2iik": function(t, e, n) {
          "undefined" != typeof self && self, t.exports = function(t2) {
            var e2 = {};
            function n2(r) {
              if (e2[r])
                return e2[r].exports;
              var i = e2[r] = { i: r, l: false, exports: {} };
              return t2[r].call(i.exports, i, i.exports, n2), i.l = true, i.exports;
            }
            return n2.m = t2, n2.c = e2, n2.d = function(t3, e3, r) {
              n2.o(t3, e3) || Object.defineProperty(t3, e3, { configurable: false, enumerable: true, get: r });
            }, n2.n = function(t3) {
              var e3 = t3 && t3.__esModule ? function() {
                return t3.default;
              } : function() {
                return t3;
              };
              return n2.d(e3, "a", e3), e3;
            }, n2.o = function(t3, e3) {
              return Object.prototype.hasOwnProperty.call(t3, e3);
            }, n2.p = "/", n2(n2.s = 59);
          }([function(t2, e2, n2) {
            "use strict";
            e2.__esModule = true;
            var r, i = (r = n2(31)) && r.__esModule ? r : { default: r };
            e2.default = i.default || function(t3) {
              for (var e3 = 1; e3 < arguments.length; e3++) {
                var n3 = arguments[e3];
                for (var r2 in n3)
                  Object.prototype.hasOwnProperty.call(n3, r2) && (t3[r2] = n3[r2]);
              }
              return t3;
            };
          }, function(t2, e2) {
            t2.exports = function(t3, e3, n2, r, i, a) {
              var o, s = t3 = t3 || {}, c = typeof t3.default;
              "object" !== c && "function" !== c || (o = t3, s = t3.default);
              var u, l = "function" == typeof s ? s.options : s;
              if (e3 && (l.render = e3.render, l.staticRenderFns = e3.staticRenderFns, l._compiled = true), n2 && (l.functional = true), i && (l._scopeId = i), a ? (u = function(t4) {
                (t4 = t4 || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (t4 = __VUE_SSR_CONTEXT__), r && r.call(this, t4), t4 && t4._registeredComponents && t4._registeredComponents.add(a);
              }, l._ssrRegister = u) : r && (u = r), u) {
                var f = l.functional, d = f ? l.render : l.beforeCreate;
                f ? (l._injectStyles = u, l.render = function(t4, e4) {
                  return u.call(e4), d(t4, e4);
                }) : l.beforeCreate = d ? [].concat(d, u) : [u];
              }
              return { esModule: o, exports: s, options: l };
            };
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "x", function() {
              return f;
            }), n2.d(e2, "n", function() {
              return d;
            }), n2.d(e2, "c", function() {
              return p;
            }), n2.d(e2, "j", function() {
              return h;
            }), n2.d(e2, "q", function() {
              return v;
            }), n2.d(e2, "i", function() {
              return m;
            }), n2.d(e2, "d", function() {
              return g;
            }), n2.d(e2, "o", function() {
              return y;
            }), n2.d(e2, "k", function() {
              return b;
            }), n2.d(e2, "w", function() {
              return x;
            }), n2.d(e2, "u", function() {
              return w;
            }), n2.d(e2, "t", function() {
              return C;
            }), n2.d(e2, "v", function() {
              return S;
            }), n2.d(e2, "h", function() {
              return O;
            }), n2.d(e2, "p", function() {
              return k;
            }), n2.d(e2, "l", function() {
              return M;
            }), n2.d(e2, "m", function() {
              return D;
            }), n2.d(e2, "f", function() {
              return j;
            }), n2.d(e2, "e", function() {
              return L2;
            }), n2.d(e2, "g", function() {
              return E;
            }), n2.d(e2, "a", function() {
              return A;
            }), n2.d(e2, "b", function() {
              return T;
            }), n2.d(e2, "s", function() {
              return $2;
            }), n2.d(e2, "r", function() {
              return I;
            });
            var r = n2(0), i = n2.n(r), a = n2(3), o = n2(4), s = n2(8), c = {}, u = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], l = new Date(), f = { year: l.getFullYear(), month: l.getMonth() + 1, day: l.getDate() }, d = function(t3) {
              var e3, n3 = (e3 = t3, Object(o.b)(e3) ? new Date(e3.getTime()) : Object(o.d)(e3) ? new Date(e3) : Object(o.f)(e3) ? Object(s.b)(e3, ["L", "YYYY-MM-DD", "YYYY/MM/DD"]) : Object(o.e)(e3) ? new Date(e3.year || l.getFullYear(), e3.month || l.getMonth(), e3.day || l.getDate()) : new Date(e3));
              return n3 && { month: n3.getMonth() + 1, year: n3.getFullYear() };
            }, p = function(t3, e3) {
              return Object(o.c)(t3) ? t3(e3) : t3;
            }, h = function() {
              for (var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2e3, e3 = [], n3 = 0; n3 < 12; n3++)
                e3.push(new Date(t3, n3, 15));
              return e3;
            }, v = function(t3) {
              for (var e3 = t3.firstDayOfWeek, n3 = void 0 === e3 ? 1 : e3, r2 = t3.year, i2 = void 0 === r2 ? 2e3 : r2, a2 = t3.utc, o2 = void 0 !== a2 && a2, s2 = [], c2 = 1, u2 = 0; u2 < 7; c2++) {
                var l2 = o2 ? new Date(Date.UTC(i2, 0, c2)) : new Date(i2, 0, c2);
                ((o2 ? l2.getUTCDay() : l2.getDay()) === n3 - 1 || u2 > 0) && (s2.push(l2), u2++);
              }
              return s2;
            }, m = function(t3, e3) {
              var n3 = t3 + "." + e3, r2 = c[n3];
              if (!r2) {
                var i2 = a.a.firstDayOfWeek, o2 = e3 % 4 == 0 && e3 % 100 != 0 || e3 % 400 == 0, s2 = new Date(e3, t3 - 1, 1).getDay() + 1, l2 = 2 === t3 && o2 ? 29 : u[t3 - 1];
                r2 = { firstDayOfWeek: i2, inLeapYear: o2, firstWeekday: s2, days: l2, weeks: Math.ceil((l2 + Math.abs(s2 - i2)) / 7), month: t3, year: e3 }, c[n3] = r2;
              }
              return r2;
            }, g = function(t3) {
              if (t3 && t3.getTime)
                return m(t3.getMonth() + 1, t3.getFullYear());
            }, y = function(t3, e3) {
              return 1 === t3 ? m(12, e3 - 1) : m(t3 - 1, e3);
            }, b = function(t3, e3) {
              return 12 === t3 ? m(1, e3 + 1) : m(t3 + 1, e3);
            };
            function _2(t3, e3) {
              return t3 && e3 ? t3.year === e3.year ? t3.month === e3.month ? 0 : t3.month < e3.month ? -1 : 1 : t3.year < e3.year ? -1 : 1 : 0;
            }
            var x = function(t3, e3) {
              return 0 === _2(t3, e3);
            }, w = function(t3, e3) {
              return -1 === _2(t3, e3);
            }, C = function(t3, e3) {
              return 1 === _2(t3, e3);
            }, S = function(t3, e3, n3) {
              return !!t3 && !w(t3, e3) && !C(t3, n3);
            }, O = function() {
              for (var t3 = arguments.length, e3 = Array(t3), n3 = 0; n3 < t3; n3++)
                e3[n3] = arguments[n3];
              return e3.reduce(function(t4, e4) {
                return t4 ? e4 ? 1 === _2(t4, e4) ? t4 : e4 : t4 : e4;
              });
            }, k = function(t3) {
              if (t3) {
                var e3 = y(t3.month, t3.year);
                return { month: e3.month, year: e3.year };
              }
            }, M = function(t3) {
              if (t3) {
                var e3 = b(t3.month, t3.year);
                return { month: e3.month, year: e3.year };
              }
            }, D = function(t3, e3, n3) {
              if (t3 && !(e3 && -1 === _2(t3, e3) || n3 && 1 === _2(t3, n3)))
                return t3;
            }, j = function() {
              for (var t3 = arguments.length, e3 = Array(t3), n3 = 0; n3 < t3; n3++)
                e3[n3] = arguments[n3];
              return e3.find(function(t4) {
                return !!t4;
              });
            }, L2 = function(t3, e3) {
              return t3 && t3.length ? t3[0] : e3;
            }, E = function(t3, e3) {
              return t3 && t3.length ? t3[t3.length - 1] : e3;
            }, A = function(t3) {
              return Object(o.a)(t3) && t3.length;
            }, T = function(t3, e3) {
              return !!function t4(e4, n3) {
                return e4 ? n3(e4) ? e4 : t4(e4.parentElement, n3) : null;
              }(t3, function(t4) {
                return t4 === e3;
              });
            }, $2 = function(t3) {
              var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "key";
              return t3 && t3.length ? t3.reduce(function(t4, n3) {
                return t4[n3[e3]] = n3, t4;
              }, {}) : {};
            }, I = function(t3, e3, n3) {
              var r2 = [];
              return n3.forEach(function(n4) {
                var a2 = n4.name || n4.toString(), s2 = n4.mixin, c2 = n4.validate;
                if (Object.prototype.hasOwnProperty.call(t3, a2)) {
                  var u2 = c2 ? c2(t3[a2]) : t3[a2];
                  e3[a2] = s2 && Object(o.e)(u2) ? i()({}, s2, u2) : u2, r2.push(a2);
                }
              }), { target: e3, assigned: r2.length ? r2 : null };
            };
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "c", function() {
              return l;
            }), n2.d(e2, "b", function() {
              return f;
            });
            var r = n2(31), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(47), c = n2(4), u = { componentPrefix: "v", firstDayOfWeek: 1, navVisibility: "focus", titlePosition: "center", titleTransition: "slide-h", weeksTransition: "slide-h", paneWidth: 256, showLinkedButtons: false, formats: { title: "MMMM YYYY", weekdays: "W", navMonths: "MMM", input: ["L", "YYYY-MM-DD", "YYYY/MM/DD"], dayPopover: "WWW, MMM D, YYYY", data: ["L", "YYYY-MM-DD", "YYYY/MM/DD"] }, datePickerInputProps: function(t3) {
              var e3 = t3.dragValue, n3 = t3.mode, r2 = t3.format;
              return o()({}, "single" === n3 && { style: { minWidth: "100px" }, placeholder: r2 }, "multiple" === n3 && { style: { minWidth: "200px" }, placeholder: r2 + ", ..." }, "range" === n3 && { style: o()({ minWidth: "150px" }, e3 && { color: "rgba(0, 0, 0, 0.3)" }), placeholder: r2 + " - " + r2 });
            }, datePickerUpdateOnInput: false, datePickerTintColor: "#66B3CC", datePickerShowCaps: false, datePickerShowDayPopover: true, datePickerDisabledAttribute: { contentStyle: function(t3) {
              var e3 = t3.isHovered;
              return o()({ color: "#d98c8c", fontWeight: 600, opacity: 0.6, borderRadius: "0" }, e3 && { cursor: "not-allowed", backgroundColor: "transparent" });
            } }, popoverExpanded: false, popoverDirection: "bottom", popoverAlign: "left", popoverVisibility: s.a.HOVER, popoverContentOffset: 10, popoverKeepVisibleOnInput: false, maxSwipeTime: 300, minHorizontalSwipeDistance: 60, maxVerticalSwipeDistance: 80, maxTapTolerance: 0, maxTapDuration: 200, highlight: { animated: true, height: "1.8rem", borderWidth: "0", borderStyle: "solid", opacity: 1 }, highlightCaps: { animated: true, height: "1.8rem", borderWidth: "0", borderStyle: "solid", opacity: 1 }, dot: { diameter: "5px", backgroundColor: "#66b3cc", borderWidth: "0", borderStyle: "solid", borderRadius: "50%", opacity: 1 }, bar: { height: "3px", backgroundColor: "#66b3cc", borderWidth: "0", borderStyle: "solid", opacity: 1 }, themeStyles: { wrapper: { backgroundColor: "#fafafa", border: "1px solid #dadada" }, verticalDivider: { borderLeft: "1px solid #dadada" }, horizontalDivider: { borderTop: "1px solid #dadada" }, pane: null, header: null, headerTitle: null, headerArrows: null, headerHorizontalDivider: null, weekdays: null, weekdaysHorizontalDivider: null, weeks: null, dayCell: null, dayCellNotInMonth: { opacity: 0.4 }, dayContent: null, dayContentHover: null, dots: null, bars: null, dayPopoverContent: { color: "#333333", fontSize: ".8rem", whiteSpace: "nowrap" }, navHeader: null, navHeaderTitle: null, navHeaderArrows: null, navMonthCell: null, navYearCell: null } };
            e2.a = u;
            var l = function(t3, e3) {
              return Object(c.e)(t3) && t3 || Object(c.c)(t3) && t3(e3) || t3;
            }, f = function() {
              for (var t3 = arguments.length, e3 = Array(t3), n3 = 0; n3 < t3; n3++)
                e3[n3] = arguments[n3];
              return i.a.apply(Object, [u].concat(e3));
            };
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "d", function() {
              return i;
            }), n2.d(e2, "b", function() {
              return a;
            }), n2.d(e2, "f", function() {
              return o;
            }), n2.d(e2, "a", function() {
              return s;
            }), n2.d(e2, "e", function() {
              return c;
            }), n2.d(e2, "c", function() {
              return u;
            });
            var r = function(t3) {
              return Object.prototype.toString.call(t3).slice(8, -1);
            }, i = function(t3) {
              return "Number" === r(t3);
            }, a = function(t3) {
              return "Date" === r(t3);
            }, o = function(t3) {
              return "String" === r(t3);
            }, s = function(t3) {
              return "Array" === r(t3);
            }, c = function(t3) {
              return "Object" === r(t3);
            }, u = function(t3) {
              return "Function" === r(t3);
            };
          }, function(t2, e2) {
            var n2 = t2.exports = { version: "2.5.3" };
            "number" == typeof __e && (__e = n2);
          }, function(t2, e2, n2) {
            var r = n2(37)("wks"), i = n2(38), a = n2(9).Symbol, o = "function" == typeof a;
            (t2.exports = function(t3) {
              return r[t3] || (r[t3] = o && a[t3] || (o ? a : i)("Symbol." + t3));
            }).store = r;
          }, function(t2, e2, n2) {
            var r = n2(9), i = n2(5), a = n2(40), o = n2(18), s = "prototype", c = function(t3, e3, n3) {
              var u, l, f, d = t3 & c.F, p = t3 & c.G, h = t3 & c.S, v = t3 & c.P, m = t3 & c.B, g = t3 & c.W, y = p ? i : i[e3] || (i[e3] = {}), b = y[s], _2 = p ? r : h ? r[e3] : (r[e3] || {})[s];
              for (u in p && (n3 = e3), n3)
                (l = !d && _2 && void 0 !== _2[u]) && u in y || (f = l ? _2[u] : n3[u], y[u] = p && "function" != typeof _2[u] ? n3[u] : m && l ? a(f, r) : g && _2[u] == f ? function(t4) {
                  var e4 = function(e5, n4, r2) {
                    if (this instanceof t4) {
                      switch (arguments.length) {
                        case 0:
                          return new t4();
                        case 1:
                          return new t4(e5);
                        case 2:
                          return new t4(e5, n4);
                      }
                      return new t4(e5, n4, r2);
                    }
                    return t4.apply(this, arguments);
                  };
                  return e4[s] = t4[s], e4;
                }(f) : v && "function" == typeof f ? a(Function.call, f) : f, v && ((y.virtual || (y.virtual = {}))[u] = f, t3 & c.R && b && !b[u] && o(b, u, f)));
            };
            c.F = 1, c.G = 2, c.S = 4, c.P = 8, c.B = 16, c.W = 32, c.U = 64, c.R = 128, t2.exports = c;
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "a", function() {
              return h;
            }), n2.d(e2, "b", function() {
              return v;
            });
            var r = n2(3), i = n2(4), a = /d{1,2}|W{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g, o = /\d\d?/, s = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF/]+(\s*?[\u0600-\u06FF]+){1,2}/i, c = /\[([^]*?)\]/gm, u = function() {
            };
            function l(t3) {
              return function(e3, n3, r2) {
                var i2 = r2[t3].indexOf(n3.charAt(0).toUpperCase() + n3.substr(1).toLowerCase());
                ~i2 && (e3.month = i2);
              };
            }
            function f(t3, e3) {
              for (t3 = String(t3), e3 = e3 || 2; t3.length < e3; )
                t3 = "0" + t3;
              return t3;
            }
            var d = { D: function(t3) {
              return t3.getDate();
            }, DD: function(t3) {
              return f(t3.getDate());
            }, Do: function(t3, e3) {
              return e3.DoFn(t3.getDate());
            }, d: function(t3) {
              return t3.getDay();
            }, dd: function(t3) {
              return f(t3.getDay());
            }, W: function(t3, e3) {
              return e3.dayNamesNarrow[t3.getDay()];
            }, WW: function(t3, e3) {
              return e3.dayNamesShorter[t3.getDay()];
            }, WWW: function(t3, e3) {
              return e3.dayNamesShort[t3.getDay()];
            }, WWWW: function(t3, e3) {
              return e3.dayNames[t3.getDay()];
            }, M: function(t3) {
              return t3.getMonth() + 1;
            }, MM: function(t3) {
              return f(t3.getMonth() + 1);
            }, MMM: function(t3, e3) {
              return e3.monthNamesShort[t3.getMonth()];
            }, MMMM: function(t3, e3) {
              return e3.monthNames[t3.getMonth()];
            }, YY: function(t3) {
              return String(t3.getFullYear()).substr(2);
            }, YYYY: function(t3) {
              return f(t3.getFullYear(), 4);
            }, h: function(t3) {
              return t3.getHours() % 12 || 12;
            }, hh: function(t3) {
              return f(t3.getHours() % 12 || 12);
            }, H: function(t3) {
              return t3.getHours();
            }, HH: function(t3) {
              return f(t3.getHours());
            }, m: function(t3) {
              return t3.getMinutes();
            }, mm: function(t3) {
              return f(t3.getMinutes());
            }, s: function(t3) {
              return t3.getSeconds();
            }, ss: function(t3) {
              return f(t3.getSeconds());
            }, S: function(t3) {
              return Math.round(t3.getMilliseconds() / 100);
            }, SS: function(t3) {
              return f(Math.round(t3.getMilliseconds() / 10), 2);
            }, SSS: function(t3) {
              return f(t3.getMilliseconds(), 3);
            }, a: function(t3, e3) {
              return t3.getHours() < 12 ? e3.amPm[0] : e3.amPm[1];
            }, A: function(t3, e3) {
              return t3.getHours() < 12 ? e3.amPm[0].toUpperCase() : e3.amPm[1].toUpperCase();
            }, ZZ: function(t3) {
              var e3 = t3.getTimezoneOffset();
              return (e3 > 0 ? "-" : "+") + f(100 * Math.floor(Math.abs(e3) / 60) + Math.abs(e3) % 60, 4);
            } }, p = { D: [o, function(t3, e3) {
              t3.day = e3;
            }], Do: [new RegExp(o.source + s.source), function(t3, e3) {
              t3.day = parseInt(e3, 10);
            }], d: [o, u], W: [s, u], M: [o, function(t3, e3) {
              t3.month = e3 - 1;
            }], MMM: [s, l("monthNamesShort")], MMMM: [s, l("monthNames")], YY: [o, function(t3, e3) {
              var n3 = +new Date().getFullYear().toString().substr(0, 2);
              t3.year = "" + (e3 > 68 ? n3 - 1 : n3) + e3;
            }], YYYY: [/\d{4}/, function(t3, e3) {
              t3.year = e3;
            }], S: [/\d/, function(t3, e3) {
              t3.millisecond = 100 * e3;
            }], SS: [/\d{2}/, function(t3, e3) {
              t3.millisecond = 10 * e3;
            }], SSS: [/\d{3}/, function(t3, e3) {
              t3.millisecond = e3;
            }], h: [o, function(t3, e3) {
              t3.hour = e3;
            }], m: [o, function(t3, e3) {
              t3.minute = e3;
            }], s: [o, function(t3, e3) {
              t3.second = e3;
            }], a: [s, function(t3, e3, n3) {
              var r2 = e3.toLowerCase();
              r2 === n3.amPm[0] ? t3.isPm = false : r2 === n3.amPm[1] && (t3.isPm = true);
            }], ZZ: [/([\+\-]\d\d:?\d\d|Z)/, function(t3, e3) {
              "Z" === e3 && (e3 = "+00:00");
              var n3 = ("" + e3).match(/([+-]|\d\d)/gi);
              if (n3) {
                var r2 = 60 * n3[1] + parseInt(n3[2], 10);
                t3.timezoneOffset = "+" === n3[0] ? r2 : -r2;
              }
            }] };
            p.DD = p.D, p.dd = p.d, p.WWWW = p.WWW = p.WW = p.W, p.MM = p.M, p.mm = p.m, p.hh = p.H = p.HH = p.h, p.ss = p.s, p.A = p.a;
            var h = function(t3, e3) {
              if ("number" == typeof t3 && (t3 = new Date(t3)), "[object Date]" !== Object.prototype.toString.call(t3) || isNaN(t3.getTime()))
                throw new Error("Invalid Date in fecha.format");
              var n3 = [];
              return (e3 = (e3 = (e3 = r.a.masks[e3] || e3).replace(c, function(t4, e4) {
                return n3.push(e4), "??";
              })).replace(a, function(e4) {
                return e4 in d ? d[e4](t3, r.a) : e4.slice(1, e4.length - 1);
              })).replace(/\?\?/g, function() {
                return n3.shift();
              });
            }, v = function(t3, e3) {
              return (Object(i.a)(e3) && e3 || [Object(i.f)(e3) && e3 || "YYYY-MM-DD"]).map(function(e4) {
                return function(t4, e5) {
                  if ("string" != typeof e5)
                    throw new Error("Invalid mask in fecha.parse");
                  if (e5 = r.a.masks[e5] || e5, t4.length > 1e3)
                    return false;
                  var n3 = true, i2 = {};
                  if (e5.replace(a, function(e6) {
                    if (p[e6]) {
                      var a2 = p[e6], o3 = t4.search(a2[0]);
                      ~o3 ? t4.replace(a2[0], function(e7) {
                        return a2[1](i2, e7, r.a), t4 = t4.substr(o3 + e7.length), e7;
                      }) : n3 = false;
                    }
                    return p[e6] ? "" : e6.slice(1, e6.length - 1);
                  }), !n3)
                    return false;
                  var o2 = new Date();
                  true === i2.isPm && null != i2.hour && 12 != +i2.hour ? i2.hour = +i2.hour + 12 : false === i2.isPm && 12 == +i2.hour && (i2.hour = 0);
                  var s2 = void 0;
                  return null != i2.timezoneOffset ? (i2.minute = +(i2.minute || 0) - +i2.timezoneOffset, s2 = new Date(Date.UTC(i2.year || o2.getFullYear(), i2.month || 0, i2.day || 1, i2.hour || 0, i2.minute || 0, i2.second || 0, i2.millisecond || 0))) : s2 = new Date(i2.year || o2.getFullYear(), i2.month || 0, i2.day || 1, i2.hour || 0, i2.minute || 0, i2.second || 0, i2.millisecond || 0), s2;
                }(t3, e4);
              }).find(function(t4) {
                return t4;
              }) || new Date(t3);
            };
          }, function(t2, e2) {
            var n2 = t2.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
            "number" == typeof __g && (__g = n2);
          }, function(t2, e2, n2) {
            var r = n2(19), i = n2(67), a = n2(68), o = Object.defineProperty;
            e2.f = n2(11) ? Object.defineProperty : function(t3, e3, n3) {
              if (r(t3), e3 = a(e3, true), r(n3), i)
                try {
                  return o(t3, e3, n3);
                } catch (t4) {
                }
              if ("get" in n3 || "set" in n3)
                throw TypeError("Accessors not supported!");
              return "value" in n3 && (t3[e3] = n3.value), t3;
            };
          }, function(t2, e2, n2) {
            t2.exports = !n2(20)(function() {
              return 7 != Object.defineProperty({}, "a", { get: function() {
                return 7;
              } }).a;
            });
          }, function(t2, e2, n2) {
            "use strict";
            e2.__esModule = true;
            var r, i = (r = n2(74)) && r.__esModule ? r : { default: r };
            e2.default = function(t3) {
              if (Array.isArray(t3)) {
                for (var e3 = 0, n3 = Array(t3.length); e3 < t3.length; e3++)
                  n3[e3] = t3[e3];
                return n3;
              }
              return (0, i.default)(t3);
            };
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "a", function() {
              return s;
            });
            var r = n2(0), i = n2.n(r), a = n2(14), o = n2.n(a), s = { methods: { mergeListeners: function(t3) {
              var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.$listeners;
              return o()(t3).reduce(function(e4, n3) {
                return e4[n3] = e4[n3] ? [e4[n3], t3[n3]] : t3[n3], e4;
              }, i()({}, e3));
            } } };
          }, function(t2, e2, n2) {
            t2.exports = { default: n2(60), __esModule: true };
          }, function(t2, e2, n2) {
            var r = n2(25);
            t2.exports = function(t3) {
              return Object(r(t3));
            };
          }, function(t2, e2, n2) {
            var r = n2(62), i = n2(39);
            t2.exports = Object.keys || function(t3) {
              return r(t3, i);
            };
          }, function(t2, e2) {
            var n2 = {}.hasOwnProperty;
            t2.exports = function(t3, e3) {
              return n2.call(t3, e3);
            };
          }, function(t2, e2, n2) {
            var r = n2(10), i = n2(30);
            t2.exports = n2(11) ? function(t3, e3, n3) {
              return r.f(t3, e3, i(1, n3));
            } : function(t3, e3, n3) {
              return t3[e3] = n3, t3;
            };
          }, function(t2, e2, n2) {
            var r = n2(29);
            t2.exports = function(t3) {
              if (!r(t3))
                throw TypeError(t3 + " is not an object!");
              return t3;
            };
          }, function(t2, e2) {
            t2.exports = function(t3) {
              try {
                return !!t3();
              } catch (t4) {
                return true;
              }
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(43), i = n2(1)(r.a, null, false, function(t3) {
              n2(73);
            }, "data-v-bc55024c", null);
            e2.a = i.exports;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(46), i = n2(101), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(95);
            }, "data-v-1ad2436f", null);
            e2.a = a.exports;
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = h;
            var r = n2(0), i = n2.n(r), a = n2(14), o = n2.n(a), s = n2(4), c = n2(3), u = n2(2), l = n2(8);
            function f(t3, e3) {
              var n3 = t3.toRange(), r2 = e3.toRange(), i2 = null, a2 = null;
              return n3.start ? i2 = r2.start ? n3.start < r2.start ? n3.start : r2.start : n3.start : r2.start && (i2 = r2.start), n3.end && (!i2 || n3.end >= i2) && (a2 = n3.end), r2.end && (!i2 || r2.end >= i2) && (!a2 || r2.end < a2) && (a2 = r2.end), { start: i2, end: a2 };
            }
            function d(t3, e3) {
              return t3.isDate ? e3.isDate ? t3.dateTime === e3.dateTime : !(!e3.startTime || !e3.endTime) && t3.dateTime === e3.startTime && t3.dateTime === e3.endTime : e3.isDate ? !(t3.start && e3.date < t3.start || t3.end && e3.date > t3.end) : !(t3.start && (!e3.start || e3.start < t3.start) || t3.end && (!e3.end || e3.end > t3.end));
            }
            function p(t3) {
              if (!t3)
                return null;
              var e3 = t3.getMonth() + 1, n3 = t3.getUTCFullYear(), r2 = Object(u.i)(e3, n3), i2 = t3.getDate(), a2 = r2.days - i2 + 1, o2 = t3.getDay() + 1, s2 = Math.floor((i2 - 1) / 7 + 1), c2 = Math.floor((r2.days - i2) / 7 + 1), l2 = Math.ceil((i2 + Math.abs(r2.firstWeekday - r2.firstDayOfWeek)) / 7);
              return { day: i2, dayFromEnd: a2, weekday: o2, weekdayOrdinal: s2, weekdayOrdinalFromEnd: c2, week: l2, weekFromEnd: r2.weeks - l2 + 1, month: e3, year: n3, date: t3, dateTime: t3.getTime() };
            }
            function h(t3, e3) {
              var n3 = new Date(t3);
              return n3.setDate(n3.getDate() + e3), n3;
            }
            function v(t3, e3) {
              var n3 = t3.start, r2 = t3.end;
              if (!n3 || !r2 || !Object(s.c)(e3))
                return null;
              for (var i2 = { i: 0, date: n3, day: p(n3), finished: false }, a2 = null; !i2.finished && i2.date <= r2; i2.i++)
                a2 = e3(i2), i2.date = h(i2.date, 1), i2.day = p(i2.date);
              return a2;
            }
            function m(t3) {
              var e3 = t3.getDay() + 1, n3 = c.a.firstDayOfWeek;
              return h(t3, e3 >= n3 ? n3 - e3 : -(7 - (n3 - e3)));
            }
            function g(t3, e3) {
              return Math.round((e3 - t3) / 864e5);
            }
            function y(t3, e3) {
              return g(m(t3), m(e3));
            }
            function b(t3, e3) {
              return e3.getUTCFullYear() - t3.getUTCFullYear();
            }
            function _2(t3, e3) {
              return 12 * b(t3, e3) + (e3.getMonth() - t3.getMonth());
            }
            var x = { dailyInterval: { test: function(t3, e3, n3) {
              return g(n3.start || new Date(), t3.date) % e3 == 0;
            } }, weeklyInterval: { test: function(t3, e3, n3) {
              return y(n3.start || new Date(), t3.date) % e3 == 0;
            } }, monthlyInterval: { test: function(t3, e3, n3) {
              return _2(n3.start || new Date(), t3.date) % e3 == 0;
            } }, yearlyInterval: { test: function() {
              return function(t3, e3, n3) {
                return b(n3.start || new Date(), t3.date) % e3 == 0;
              };
            } }, days: { validate: function(t3) {
              return Object(s.a)(t3) ? t3 : [parseInt(t3, 10)];
            }, test: function(t3, e3) {
              return e3.includes(t3.day) || e3.includes(-t3.dayFromEnd);
            } }, weekdays: { validate: function(t3) {
              return Object(s.a)(t3) ? t3 : [parseInt(t3, 10)];
            }, test: function(t3, e3) {
              return e3.includes(t3.weekday);
            } }, ordinalWeekdays: { validate: function(t3) {
              return o()(t3).reduce(function(e3, n3) {
                var r2 = t3[n3];
                return r2 ? (e3[n3] = Object(s.a)(r2) ? r2 : [parseInt(r2, 10)], e3) : e3;
              }, {});
            }, test: function(t3, e3) {
              return o()(e3).map(function(t4) {
                return parseInt(t4, 10);
              }).find(function(n3) {
                return e3[n3].includes(t3.weekday) && (n3 === t3.weekdayOrdinal || n3 === -t3.weekdayOrdinalFromEnd);
              });
            } }, weekends: { validate: function(t3) {
              return t3;
            }, test: function(t3) {
              return 1 === t3.weekday || 7 === t3.weekday;
            } }, workweek: { validate: function(t3) {
              return t3;
            }, test: function(t3) {
              return t3.weekday >= 2 && t3.weekday <= 6;
            } }, weeks: { validate: function(t3) {
              return Object(s.a)(t3) ? t3 : [parseInt(t3, 10)];
            }, test: function(t3, e3) {
              return e3.includes(t3.week) || e3.includes(-t3.weekFromEnd);
            } }, months: { validate: function(t3) {
              return Object(s.a)(t3) ? t3 : [parseInt(t3, 10)];
            }, test: function(t3, e3) {
              return e3.includes(t3.month);
            } }, years: { validate: function(t3) {
              return Object(s.a)(t3) ? t3 : [parseInt(t3, 10)];
            }, test: function(t3, e3) {
              return e3.includes(t3.year);
            } } }, w = o()(x).map(function(t3) {
              return { name: t3, validate: x[t3].validate };
            }), C = function(t3, e3, n3) {
              return Object(s.c)(t3) ? t3(e3) : Object(s.e)(t3) ? o()(t3).every(function(r2) {
                return x[r2].test(e3, t3[r2], n3);
              }) : null;
            };
            e2.b = function t3(e3, n3) {
              if (!e3)
                return null;
              var r2 = { isDateInfo: true, isDate: Object(s.b)(e3) || Object(s.f)(e3) || Object(s.d)(e3), isRange: Object(s.e)(e3) || Object(s.c)(e3), order: n3 || 0 };
              if (r2.isDate) {
                r2.type = "date";
                var a2 = !Object(s.f)(e3) && new Date(e3) || Object(l.b)(e3, c.a.formats.data || ["L", "YYYY-MM-DD", "YYYY/MM/DD"]);
                if (isNaN(a2))
                  return null;
                a2.setHours(0, 0, 0, 0), r2.date = a2, r2.dateTime = a2.getTime();
              }
              if (r2.isRange) {
                if (r2.type = "range", Object(s.c)(e3))
                  r2.on = { and: e3 };
                else {
                  var o2 = e3.start && new Date(e3.start), p2 = e3.end && new Date(e3.end);
                  if (o2 && p2 && o2 > p2) {
                    var m2 = o2;
                    o2 = p2, p2 = m2;
                  } else
                    o2 && e3.span >= 1 && (p2 = h(o2, e3.span - 1));
                  o2 && (isNaN(o2.getTime()) ? o2 = null : o2.setHours(0, 0, 0, 0)), p2 && (isNaN(p2.getTime()) ? p2 = null : p2.setHours(0, 0, 0, 0)), r2.start = o2, r2.end = p2, r2.startTime = o2 && o2.getTime(), r2.endTime = p2 && p2.getTime(), o2 && p2 && (r2.daySpan = g(o2, p2), r2.weekSpan = y(o2, p2), r2.monthSpan = _2(o2, p2), r2.yearSpan = b(o2, p2));
                  var x2 = Object(u.r)(e3, {}, w);
                  if (x2.assigned && (r2.on = { and: x2.target }), e3.on) {
                    var S = (Object(s.a)(e3.on) ? e3.on : [e3.on]).map(function(t4) {
                      if (Object(s.c)(t4))
                        return t4;
                      var e4 = Object(u.r)(t4, {}, w);
                      return e4.assigned ? e4.target : null;
                    }).filter(function(t4) {
                      return t4;
                    });
                    S.length && (r2.on = i()({}, r2.on, { or: S }));
                  }
                }
                r2.isComplex = !!r2.on;
              }
              return r2.shallowIntersectsDate = function(e4) {
                return n4 = r2, i2 = e4.isDate ? e4 : t3(e4), n4.isDate ? i2.isDate ? n4.dateTime === i2.dateTime : d(i2, n4) : i2.isDate ? d(n4, i2) : !(n4.start && i2.end && n4.start > i2.end || n4.end && i2.start && n4.end < i2.start);
                var n4, i2;
              }, r2.intersectsDate = function(e4) {
                var n4 = e4.isDateInfo ? e4 : t3(e4);
                if (!r2.shallowIntersectsDate(n4))
                  return null;
                if (!r2.on)
                  return r2;
                var i2 = false;
                return v(f(r2, n4), function(t4) {
                  r2.matchesDay(t4.day) && (i2 = i2 || n4.matchesDay(t4.day), t4.finished = i2);
                }), i2;
              }, r2.shallowIncludesDate = function(e4) {
                return d(r2, e4.isDate ? e4 : t3(e4));
              }, r2.includesDate = function(e4) {
                var n4 = e4.isDateInfo ? e4 : t3(e4);
                if (!r2.shallowIncludesDate(n4))
                  return false;
                if (!r2.on)
                  return true;
                var i2 = true;
                return v(f(r2, n4), function(t4) {
                  r2.matchesDay(t4.day) && (i2 = i2 && n4.matchesDay(t4.day), t4.finished = !i2);
                }), i2;
              }, r2.includesDay = function(e4) {
                var n4 = t3(e4.date);
                return r2.shallowIncludesDate(n4) && r2.matchesDay(e4) ? r2 : null;
              }, r2.matchesDay = function(t4) {
                return !(r2.on && (r2.on.and && !C(r2.on.and, t4, r2) || r2.on.or && !r2.on.or.find(function(e4) {
                  return C(e4, t4, r2);
                })));
              }, r2.toRange = function() {
                return r2.isDate ? t3({ start: r2.date, end: r2.date }) : t3({ start: r2.start, end: r2.end });
              }, r2.compare = function(t4) {
                if (r2.order !== t4.order)
                  return r2.order - t4.order;
                if (r2.type !== t4.type)
                  return r2.isDate ? 1 : -1;
                if (r2.isDate)
                  return 0;
                var e4 = r2.start - t4.start;
                return 0 !== e4 ? e4 : r2.end - t4.end;
              }, r2;
            };
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "e", function() {
              return o;
            }), n2.d(e2, "f", function() {
              return l;
            }), n2.d(e2, "b", function() {
              return d;
            }), n2.d(e2, "c", function() {
              return p;
            }), n2.d(e2, "d", function() {
              return y;
            });
            var r = n2(4), i = n2(2), a = n2(23), o = function(t3) {
              return Object(r.b)(t3) && !isNaN(t3.getTime());
            }, s = function(t3, e3) {
              return o(t3) ? e3(t3) : "";
            }, c = function(t3, e3) {
              var n3 = e3(t3.trim());
              return o(n3) ? n3 : null;
            }, u = function(t3) {
              var e3 = t3.value, n3 = t3.isRequired, r2 = t3.disabled, i2 = t3.fallbackValue;
              return !o(e3) && n3 ? i2 : o(e3) && r2 && r2.intersectsDate(e3) ? null : e3;
            }, l = function(t3, e3) {
              return !o(t3) && !o(e3) || !(!o(t3) || !o(e3)) && t3.getTime() === e3.getTime();
            }, f = function(t3) {
              if (!o(t3))
                return null;
              var e3 = Object(i.d)(t3);
              return { from: e3, to: e3 };
            }, d = function(t3) {
              return Object(i.a)(t3);
            }, p = function(t3) {
              if (!t3 || !t3.length)
                return null;
              var e3 = {};
              return t3.filter(function(t4) {
                var n3 = t4.getTime();
                return !Object.prototype.hasOwnProperty.call(e3, n3) && (e3[n3] = true);
              }).sort(function(t4, e4) {
                return t4.getTime() - e4.getTime();
              });
            }, h = function(t3) {
              var e3 = t3.value, n3 = t3.isRequired, r2 = t3.disabled, i2 = t3.fallbackValue, a2 = e3 && e3.filter(function(t4) {
                return !r2 || !r2.intersectsDate(t4);
              });
              return !d(a2) && n3 ? i2 : a2;
            }, v = function(t3, e3) {
              var n3 = Object(i.a)(t3), r2 = Object(i.a)(e3);
              return !n3 && !r2 || !(!n3 || !r2 || n3 !== r2) && t3.every(function(t4) {
                return e3.includes(t4);
              });
            }, m = function(t3) {
              if (!d(t3))
                return null;
              var e3 = Object(i.d)(t3[0]);
              return { from: e3, to: Object(i.h)(Object(i.d)(Object(i.g)(t3)), Object(i.l)(e3)) };
            }, g = function(t3) {
              return t3 && t3.start && t3.end;
            }, y = function(t3) {
              if (!t3 || !t3.start || !t3.end)
                return null;
              var e3 = new a.b({ start: new Date(t3.start), end: new Date(t3.end) });
              return { start: e3.start, end: e3.end };
            }, b = function(t3) {
              var e3 = t3.value, n3 = t3.isRequired, r2 = t3.disabled, i2 = t3.fallbackValue;
              return !g(e3) && n3 ? i2 : g(e3) && r2 && r2.intersectsDate(e3) ? null : e3;
            }, _2 = function(t3, e3) {
              return !g(t3) && !g(e3) || !(!g(t3) || !g(e3)) && l(t3.start, e3.start) && l(t3.end, e3.end);
            }, x = function(t3) {
              if (!g(t3))
                return null;
              var e3 = Object(i.d)(t3.start);
              return { from: e3, to: Object(i.h)(Object(i.d)(t3.end), Object(i.l)(e3)) };
            };
            e2.a = function(t3, e3, n3) {
              switch (t3) {
                case "single":
                  return function(t4, e4) {
                    return { componentName: "single-date-picker", hasValue: o, formatValue: function(e5) {
                      return s(e5, t4);
                    }, parseValue: function(t5) {
                      return c(t5, e4);
                    }, normalizeValue: function(t5) {
                      return (e5 = t5) && new Date(e5);
                      var e5;
                    }, filterDisabled: u, valuesAreEqual: l, getPageRange: f };
                  }(e3, n3);
                case "multiple":
                  return function(t4, e4) {
                    return { componentName: "multiple-date-picker", hasValue: d, formatValue: function(e5) {
                      return r2 = t4, d(n4 = e5) ? n4.map(function(t5) {
                        return r2(t5);
                      }).join(", ") : "";
                      var n4, r2;
                    }, parseValue: function(t5) {
                      return function(t6, e5) {
                        var n4 = t6 && t6.split(",").map(function(t7) {
                          return c(t7, e5);
                        }).filter(function(t7) {
                          return o(t7);
                        });
                        return n4 && n4.length ? n4 : null;
                      }(t5, e4);
                    }, normalizeValue: function(t5) {
                      return p(t5);
                    }, filterDisabled: h, valuesAreEqual: v, getPageRange: m };
                  }(e3, n3);
                case "range":
                  return function(t4, e4) {
                    return { componentName: "date-range-picker", hasValue: g, formatValue: function(e5, n4) {
                      return function(t5, e6, n5) {
                        var r2 = void 0, i2 = void 0;
                        return e6 ? (r2 = s(e6.start, n5), i2 = s(e6.end, n5)) : t5 && (r2 = s(t5.start, n5), i2 = s(t5.end, n5)), r2 || i2 ? i2 ? r2 + " - " + i2 : r2 : "";
                      }(e5, n4, t4);
                    }, normalizeValue: function(t5) {
                      return y(t5);
                    }, parseValue: function(t5) {
                      return function(t6, e5) {
                        var n4 = t6.split("-").map(function(t7) {
                          return t7.trim();
                        });
                        if (n4.length >= 2) {
                          var r2 = Object(a.b)({ start: c(n4[0], e5), end: c(n4[1], e5) }), i2 = r2.start, o2 = r2.end;
                          return i2 && o2 && { start: i2, end: o2 };
                        }
                        return null;
                      }(t5, e4);
                    }, filterDisabled: b, valuesAreEqual: _2, getPageRange: x };
                  }(e3, n3);
                default:
                  return null;
              }
            };
          }, function(t2, e2) {
            t2.exports = function(t3) {
              if (null == t3)
                throw TypeError("Can't call method on  " + t3);
              return t3;
            };
          }, function(t2, e2, n2) {
            var r = n2(34), i = n2(25);
            t2.exports = function(t3) {
              return r(i(t3));
            };
          }, function(t2, e2) {
            var n2 = Math.ceil, r = Math.floor;
            t2.exports = function(t3) {
              return isNaN(t3 = +t3) ? 0 : (t3 > 0 ? r : n2)(t3);
            };
          }, function(t2, e2, n2) {
            var r = n2(37)("keys"), i = n2(38);
            t2.exports = function(t3) {
              return r[t3] || (r[t3] = i(t3));
            };
          }, function(t2, e2) {
            t2.exports = function(t3) {
              return "object" == typeof t3 ? null !== t3 : "function" == typeof t3;
            };
          }, function(t2, e2) {
            t2.exports = function(t3, e3) {
              return { enumerable: !(1 & t3), configurable: !(2 & t3), writable: !(4 & t3), value: e3 };
            };
          }, function(t2, e2, n2) {
            t2.exports = { default: n2(69), __esModule: true };
          }, function(t2, e2) {
            t2.exports = {};
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(52), i = n2(118), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(117);
            }, "data-v-12e91ab4", null);
            e2.a = a.exports;
          }, function(t2, e2, n2) {
            var r = n2(35);
            t2.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t3) {
              return "String" == r(t3) ? t3.split("") : Object(t3);
            };
          }, function(t2, e2) {
            var n2 = {}.toString;
            t2.exports = function(t3) {
              return n2.call(t3).slice(8, -1);
            };
          }, function(t2, e2, n2) {
            var r = n2(27), i = Math.min;
            t2.exports = function(t3) {
              return t3 > 0 ? i(r(t3), 9007199254740991) : 0;
            };
          }, function(t2, e2, n2) {
            var r = n2(9), i = "__core-js_shared__", a = r[i] || (r[i] = {});
            t2.exports = function(t3) {
              return a[t3] || (a[t3] = {});
            };
          }, function(t2, e2) {
            var n2 = 0, r = Math.random();
            t2.exports = function(t3) {
              return "Symbol(".concat(void 0 === t3 ? "" : t3, ")_", (++n2 + r).toString(36));
            };
          }, function(t2, e2) {
            t2.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
          }, function(t2, e2, n2) {
            var r = n2(66);
            t2.exports = function(t3, e3, n3) {
              if (r(t3), void 0 === e3)
                return t3;
              switch (n3) {
                case 1:
                  return function(n4) {
                    return t3.call(e3, n4);
                  };
                case 2:
                  return function(n4, r2) {
                    return t3.call(e3, n4, r2);
                  };
                case 3:
                  return function(n4, r2, i) {
                    return t3.call(e3, n4, r2, i);
                  };
              }
              return function() {
                return t3.apply(e3, arguments);
              };
            };
          }, function(t2, e2, n2) {
            var r = n2(29), i = n2(9).document, a = r(i) && r(i.createElement);
            t2.exports = function(t3) {
              return a ? i.createElement(t3) : {};
            };
          }, function(t2, e2) {
            e2.f = {}.propertyIsEnumerable;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(12), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(93), c = n2(121), u = n2(3), l = n2(13), f = n2(2);
            e2.a = { mixins: [l.a], render: function(t3) {
              var e3 = this, n3 = function(n4) {
                return t3(s.a, { attrs: o()({}, e3.$attrs, { position: n4, page: n4 < 2 ? e3.fromPage_ : e3.toPage_, minPage: n4 < 2 ? e3.minPage_ : e3.minToPage, maxPage: n4 < 2 ? e3.maxFromPage : e3.maxPage_, hideRightButton: !e3.showLinkedButtons && 1 === n4 && e3.isLinked && !e3.isVertical, hideLeftButton: !e3.showLinkedButtons && 2 === n4 && e3.isLinked && !e3.isVertical, paneWidth: e3.paneWidth, styles: e3.themeStyles_, attributes: e3.attributes_, formats: e3.formats_ }), on: e3.mergeListeners({ "update:page": function(t4) {
                  n4 < 2 ? e3.fromPage_ = t4 : e3.toPage_ = t4;
                } }), slots: e3.$slots, scopedSlots: e3.$scopedSlots });
              };
              return t3("div", { class: { "c-pane-container": true, "is-vertical": this.isVertical, "is-expanded": this.isExpanded }, style: this.wrapperStyle, ref: "root" }, [n3(this.isDoublePaned_ ? 1 : 0)].concat(i()(this.isDoublePaned_ && [t3("div", { class: "c-pane-div", style: this.dividerStyle }), n3(2)])));
            }, name: "VCalendar", components: { CalendarPane: s.a }, props: { minDate: Date, maxDate: Date, minPage: Object, maxPage: Object, fromPage: Object, toPage: Object, showLinkedButtons: { type: Boolean, default: function() {
              return u.a.showLinkedButtons;
            } }, isDoublePaned: Boolean, isLinked: Boolean, isVertical: Boolean, isExpanded: Boolean, paneWidth: { type: Number, default: function() {
              return u.a.paneWidth;
            } }, themeStyles: Object, attributes: Array, formats: Object }, data: function() {
              return { isConstrained: true, fromPage_: null, toPage_: null };
            }, computed: { isDoublePaned_: function() {
              return this.isDoublePaned && (this.isVertical || !this.isConstrained);
            }, minPage_: function() {
              return this.minPage || this.minDate && Object(f.n)(this.minDate) || null;
            }, rightButtonHidden: function() {
              return 1 === this.position && this.isLinked && !this.isVertical;
            }, leftButtonHidden: function() {
              return 2 === this.position && this.isLinked && !this.isVertical;
            }, maxPage_: function() {
              return this.maxPage || this.maxDate && Object(f.n)(this.maxDate) || null;
            }, maxFromPage: function() {
              return this.isDoublePaned_ ? Object(f.p)(this.maxPage_) : this.maxPage_;
            }, minToPage: function() {
              return this.isDoublePaned_ ? Object(f.l)(this.minPage_) : null;
            }, themeStyles_: function() {
              return o()({}, u.a.themeStyles, this.themeStyles);
            }, wrapperStyle: function() {
              return this.themeStyles_.wrapper;
            }, dividerStyle: function() {
              return this.isVertical ? this.themeStyles_.horizontalDivider : this.themeStyles_.verticalDivider;
            }, attributes_: function() {
              return Object(c.a)(this.attributes);
            }, formats_: function() {
              return o()({}, u.a.formats, this.formats);
            } }, watch: { fromPage: function() {
              this.refreshFromPage();
            }, toPage: function() {
              this.refreshToPage();
            }, fromPage_: function(t3, e3) {
              Object(f.w)(t3, e3) || (this.$emit("update:frompage", t3), this.$emit("update:fromPage", t3), this.isDoublePaned && (!this.isLinked && Object(f.u)(t3, this.toPage_) || (this.toPage_ = Object(f.l)(t3))));
            }, toPage_: function(t3, e3) {
              Object(f.w)(t3, e3) || (this.$emit("update:topage", t3), this.$emit("update:toPage", t3), this.isDoublePaned && (!this.isLinked && Object(f.t)(t3, this.fromPage_) || (this.fromPage_ = Object(f.p)(t3))));
            }, isDoublePaned_: function() {
              this.refreshIsConstrained(), this.refreshToPage();
            }, isLinked: function(t3) {
              t3 && (this.toPage_ = Object(f.l)(this.fromPage_));
            }, isExpanded: function() {
              this.refreshIsConstrained();
            } }, created: function() {
              this.refreshFromPage(), this.refreshToPage();
            }, mounted: function() {
              var t3 = this;
              this.$nextTick(function() {
                t3.refreshIsConstrained(), window.addEventListener("resize", t3.refreshIsConstrained);
              });
            }, beforeDestroy: function() {
              window.removeEventListener("resize", this.refreshIsConstrained);
            }, methods: { refreshFromPage: function() {
              var t3 = this;
              this.fromPage_ = f.f.apply(void 0, i()([this.fromPage, { month: f.x.month, year: f.x.year }].map(function(e3) {
                return Object(f.m)(e3, t3.minPage_, t3.maxPage_);
              })).concat([this.minPage_, Object(f.p)(this.maxPage_)]));
            }, refreshToPage: function() {
              var t3 = this;
              this.toPage_ = f.f.apply(void 0, i()([this.toPage, Object(f.l)(this.fromPage_)].map(function(e3) {
                return Object(f.m)(e3, t3.minPage_, t3.maxPage_);
              })).concat([this.maxPage_, Object(f.l)(this.minPage_)]));
            }, refreshIsConstrained: function() {
              var t3 = this.$refs.root;
              window && t3 && this.isDoublePaned && !this.isVertical ? window && window.innerWidth < 2 * this.paneWidth + 30 ? this.isConstrained = true : this.isExpanded ? this.isConstrained = t3.parentElement.offsetWidth < 2 * this.paneWidth + 2 : this.isConstrained = false : this.isConstrained = false;
            } } };
          }, function(t2, e2, n2) {
            var r = n2(10).f, i = n2(17), a = n2(6)("toStringTag");
            t2.exports = function(t3, e3, n3) {
              t3 && !i(t3 = n3 ? t3 : t3.prototype, a) && r(t3, a, { configurable: true, value: e3 });
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(0), i = n2.n(r), a = n2(22), o = n2(102), s = n2(111), c = n2(33), u = n2(3), l = n2(2), f = n2(8), d = n2(2);
            e2.a = { components: { CalendarWeeks: o.a, CalendarNav: s.a, Popover: a.a, SvgIcon: c.a }, props: { position: { type: Number, default: 1 }, page: { type: Object, default: function() {
              return d.x;
            } }, navVisibility: { type: String, default: function() {
              return u.a.navVisibility;
            } }, minPage: Object, maxPage: Object, styles: Object, formats: Object, titlePosition: { type: String, default: function() {
              return u.a.titlePosition;
            } }, titleTransition: { type: String, default: function() {
              return u.a.titleTransition;
            } }, weeksTransition: { type: String, default: function() {
              return u.a.weeksTransition;
            } }, paneWidth: Number, hideLeftButton: Boolean, hideRightButton: Boolean }, data: function() {
              return { todayComps: d.x, pages: [], page_: null, transitionDirection: "", touchState: {}, navForceHidden: false, weeksTransitioning: false, moveTimeout: null };
            }, computed: { navSlots: function() {
              var t3 = this;
              return ["nav-left-button", "nav-right-button"].filter(function(e3) {
                return t3.$scopedSlots[e3];
              });
            }, weekdayLabels: function() {
              var t3 = this;
              return Object(l.q)({ firstDayOfWeek: u.a.firstDayOfWeek }).map(function(e3) {
                return Object(f.a)(e3, t3.formats.weekdays);
              });
            }, titleClass: function() {
              return this.titlePosition ? "align-" + this.titlePosition : "";
            }, titleTransition_: function() {
              return this.getTransitionName("title", this.titleTransition, this.transitionDirection);
            }, weeksTransition_: function() {
              return this.getTransitionName("weeks", this.weeksTransition, this.transitionDirection);
            }, paneStyle: function() {
              return { minWidth: this.paneWidth + "px" };
            }, headerStyle: function() {
              return Object(l.c)(this.styles.header, this.page_);
            }, titleStyle: function() {
              return Object(l.c)(this.styles.headerTitle, this.page_);
            }, arrowStyle: function() {
              return Object(l.c)(this.styles.headerArrows, this.page_);
            }, headerHorizontalDividerStyle_: function() {
              return Object(l.c)(this.styles.headerHorizontalDivider, this.page_);
            }, weekdaysStyle_: function() {
              return Object(l.c)(this.styles.weekdays, this.page_);
            }, weekdaysHorizontalDividerStyle_: function() {
              return Object(l.c)(this.styles.weekdaysHorizontalDivider, this.page_);
            }, weeksStyle_: function() {
              return i()({}, Object(l.c)(this.styles.weeks, this.page_), this.weeksTransitioning ? { overflow: "hidden" } : null);
            }, navWrapperStyle: function() {
              return i()({ padding: "1px" }, Object(l.c)(this.styles.navWrapper, this.page_));
            }, canMovePrevMonth: function() {
              return this.canMove(this.page_.prevMonthComps);
            }, canMoveNextMonth: function() {
              return this.canMove(this.page_.nextMonthComps);
            } }, watch: { page: function(t3) {
              this.move(t3);
            }, page_: function(t3, e3) {
              this.transitionDirection = this.getTransitionDirection(e3, t3);
            } }, created: function() {
              this.page ? this.page_ = this.loadPage(this.page) : (this.page_ = this.loadPage(d.x), this.$emit("update:page", this.page_)), this.preloadPages();
            }, methods: { navPageSelected: function(t3) {
              this.navForceHidden = true, this.move(t3);
            }, monthIsDisabled: function(t3) {
              return this.minPage && this.yearNumber === this.minPage.year ? t3 < this.minPage.month : !(!this.maxPage || this.yearNumber !== this.maxPage.year) && t3 > this.maxPage.month;
            }, yearIsDisabled: function(t3) {
              return !!(this.minPage && t3 < this.minPage.year) || !!(this.maxPage && t3 > this.maxPage.year);
            }, touchStart: function(t3) {
              var e3 = t3.changedTouches[0];
              this.touchState = { active: true, startX: e3.screenX, startY: e3.screenY, startTime: new Date().getTime(), isSwiping: false, isMonitoringSwipe: true };
            }, touchMove: function(t3) {
              if (this.touchState.isMonitoringSwipe)
                if (new Date().getTime() - this.touchState.startTime <= 5)
                  t3.preventDefault();
                else {
                  var e3 = t3.changedTouches[0], n3 = e3.screenX - this.touchState.startX, r2 = e3.screenY - this.touchState.startY;
                  Math.abs(n3) >= Math.abs(r2) && (this.touchState.isSwiping = true, t3.preventDefault()), this.touchState.isMonitoringSwipe = false;
                }
              else
                this.touchState.isSwiping && t3.preventDefault();
            }, touchEnd: function(t3) {
              var e3 = t3.changedTouches[0], n3 = e3.screenX - this.touchState.startX, r2 = e3.screenY - this.touchState.startY;
              new Date().getTime() - this.touchState.startTime < u.a.maxSwipeTime && Math.abs(n3) >= u.a.minHorizontalSwipeDistance && Math.abs(r2) <= u.a.maxVerticalSwipeDistance && (n3 < 0 ? this.moveNextMonth() : this.movePrevMonth());
            }, canMove: function(t3) {
              return !(this.minPage && Object(d.u)(t3, this.minPage) || this.maxPage && Object(d.t)(t3, this.maxPage));
            }, movePrevYear: function() {
              this.move({ month: this.page_.month, year: this.page_.year - 1 });
            }, movePrevMonth: function() {
              this.move(this.page_.prevMonthComps);
            }, moveThisMonth: function() {
              this.move(d.x);
            }, moveNextMonth: function() {
              this.move(this.page_.nextMonthComps);
            }, moveNextYear: function() {
              this.move({ month: this.page_.month, year: this.page_.year + 1 });
            }, move: function(t3) {
              this.canMove(t3) ? this.forceMove(t3) : Object(d.u)(d.x, this.minPage) ? this.forceMove(this.minPage) : Object(d.t)(t3, this.maxPage) && this.forceMove(this.maxPage);
            }, forceMove: function(t3) {
              var e3 = new Date();
              this.moveTimeout && e3 < this.moveTimeout || (this.moveTimeout = new Date(e3.getTime() + 250), !t3 || t3.month === this.page_.month && t3.year === this.page_.year || (this.page_ = this.loadPage(t3), this.$emit("update:page", this.page_), this.preloadPages()));
            }, loadPage: function(t3) {
              var e3 = this, n3 = t3.month, r2 = t3.year, i2 = r2.toString() + "." + n3.toString(), a2 = this.pages.find(function(t4) {
                return t4.key === i2;
              });
              if (!a2) {
                var o2 = new Date(r2, n3 - 1, 15), s2 = Object(d.i)(n3, r2), c2 = Object(d.o)(n3, r2), u2 = Object(d.k)(n3, r2);
                a2 = { key: i2, month: n3, year: r2, title: Object(f.a)(o2, this.formats.title), shortMonthLabel: Object(f.a)(o2, "MMM"), monthLabel: Object(f.a)(o2, "MMMM"), shortYearLabel: r2.toString().substring(2), yearLabel: r2.toString(), monthComps: s2, prevMonthComps: c2, nextMonthComps: u2, canMove: function(t4) {
                  return e3.canMove(t4);
                }, move: function(t4) {
                  return e3.move(t4);
                }, moveThisMonth: function() {
                  return e3.moveThisMonth();
                }, movePrevMonth: function() {
                  return e3.move(c2);
                }, moveNextMonth: function() {
                  return e3.move(u2);
                } }, this.pages.push(a2);
              }
              return a2.position = this.position, a2.loaded = true, a2;
            }, preloadPages: function() {
              var t3 = this;
              this.$nextTick(function() {
                t3.loadPage(t3.page_.prevMonthComps), t3.loadPage(t3.page_.nextMonthComps), t3.pages = t3.pages.filter(function(t4) {
                  return t4.loaded;
                }), t3.pages.forEach(function(t4) {
                  t4.loaded = false;
                });
              });
            }, getTransitionDirection: function(t3, e3) {
              return t3 && e3 ? t3.year !== e3.year ? t3.year < e3.year ? "next" : "prev" : t3.month !== e3.month ? t3.month < e3.month ? "next" : "prev" : "" : "";
            }, getTransitionName: function(t3, e3, n3) {
              return "slide-h" === e3 ? t3 + "-" + ("next" === n3 ? "slide-left" : "slide-right") : "slide-v" === e3 ? t3 + "-" + ("next" === n3 ? "slide-up" : "slide-down") : t3 + "-" + e3;
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(96), i = n2.n(r), a = n2(3), o = n2(100), s = n2(2), c = n2(47);
            e2.a = { props: { isExpanded: { type: Boolean, default: function() {
              return a.a.popoverExpanded;
            } }, direction: { type: String, default: function() {
              return a.a.popoverDirection;
            } }, align: { type: String, default: function() {
              return a.a.popoverAlign;
            } }, visibility: { type: String, default: function() {
              return a.a.popoverVisibility;
            } }, isInteractive: Boolean, forceHidden: Boolean, toggleVisibleOnClick: Boolean, contentStyle: Object, contentOffset: { type: Number, default: function() {
              return a.a.popoverContentOffset;
            } }, transition: { type: String, default: "slide-fade" }, showClearMargin: Boolean }, data: function() {
              return { hoverVisible: false, focusVisible: false, clearMargin: 0, contentTransitioning: false, contentTransitioningCancelled: false, disableNextClick: false, windowTapClickRegistration: null };
            }, computed: { containerStyle: function() {
              return this.visible && i()({}, "margin-" + this.direction, this.clearMargin + "px");
            }, contentWrapperStyle: function() {
              var t3 = {};
              return t3["padding" + this.contentOffsetDirection] = this.contentOffset + "px", t3;
            }, contentOffsetDirection: function() {
              switch (this.direction) {
                case "bottom":
                  return "Top";
                case "top":
                  return "Bottom";
                case "left":
                  return "Right";
                case "right":
                  return "Left";
                default:
                  return "";
              }
            }, visibilityIsManaged: function() {
              return c.a.isManaged(this.visibility);
            }, visible: function() {
              return this.visibility === c.a.HOVER ? this.hoverVisible : this.visibility === c.a.FOCUS ? this.focusVisible : this.visibility === c.a.VISIBLE;
            } }, watch: { forceHidden: function() {
              this.hoverVisible || this.focusVisible ? (this.hoverVisible = false, this.focusVisible = false) : (this.$emit("update:forcehidden", false), this.$emit("update:forceHidden", false));
            } }, created: function() {
              this.windowTapClickRegistration = Object(o.a)(window, this.windowTapOrClick);
            }, mounted: function() {
              this.refreshClearMargin();
            }, beforeDestroy: function() {
              this.windowTapClickRegistration.cleanup();
            }, methods: { focusin: function(t3) {
              this.contentTransitioning || (this.focusVisible || this.$emit("got-focus", t3), this.focusVisible = true, this.disableNextClick = true);
            }, focusout: function(t3) {
              Object(s.b)(t3.relatedTarget, this.$refs.popover) || (this.$emit("lost-focus", t3), this.focusVisible = false);
            }, click: function(t3) {
              !this.toggleVisibleOnClick || this.contentTransitioning || !Object(s.b)(t3.target, this.$refs.popover) || Object(s.b)(t3.target, this.$refs.popoverOrigin) || this.disableNextClick || (this.focusVisible = !this.focusVisible), this.disableNextClick = false;
            }, mousemove: function() {
              this.forceHidden || this.contentTransitioning || (this.hoverVisible = true);
            }, mouseleave: function(t3) {
              this.forceHidden || Object(s.b)(t3.relatedTarget, this.$refs.popover) || (this.hoverVisible = false);
            }, windowTapOrClick: function(t3) {
              Object(s.b)(t3.target, this.$refs.popover) || (this.hoverVisible = false, this.focusVisible = false);
            }, refreshClearMargin: function() {
              if (this.showClearMargin && this.visible && this.$refs.popoverContent) {
                var t3 = this.$refs.popoverContent.getBoundingClientRect(), e3 = t3.width, n3 = t3.height, r2 = ("left" === this.direction || "right" === this.direction) && e3 || n3;
                this.clearMargin = r2 + this.contentOffset;
              } else
                this.clearMargin = 0;
            }, beforeContentEnter: function() {
              this.contentTransitioning = true, this.$emit("will-appear");
            }, contentEnter: function() {
              this.refreshClearMargin();
            }, afterContentEnter: function() {
              this.contentTransitioning = false, this.$emit("did-appear");
            }, contentLeave: function() {
              this.refreshClearMargin();
            }, beforeContentLeave: function() {
              this.contentTransitioningCancelled = this.contentTransitioning, this.contentTransitioning = true, this.$emit("will-disappear", this.contentTransitioningCancelled);
            }, afterContentLeave: function() {
              this.contentTransitioning = false, this.$emit("did-disappear", this.contentTransitioningCancelled), this.contentTransitioningCancelled = false, this.forceHidden && (this.$emit("update:forcehidden", false), this.$emit("update:forceHidden", false));
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "a", function() {
              return r;
            });
            var r = { HOVER: "hover", FOCUS: "focus", HIDDEN: "hidden", VISIBLE: "visible", isManual: function(t3) {
              return "hidden" === t3 || "visible" === t3;
            }, isManaged: function(t3) {
              return "hover" === t3 || "focus" === t3;
            } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(104), i = n2(2);
            e2.a = { components: { CalendarDay: r.a }, props: { monthComps: Object, prevMonthComps: Object, nextMonthComps: Object, trimMaxWeek: Boolean }, computed: { weeks: function() {
              for (var t3 = [], e3 = this.monthComps, n3 = e3.firstDayOfWeek, r2 = e3.firstWeekday, a = r2 + (r2 < n3 ? 7 : 0) - n3, o = true, s = false, c = false, u = this.prevMonthComps.days - a + 1, l = this.prevMonthComps.days - u + 1, f = Math.floor((u - 1) / 7 + 1), d = 1, p = this.prevMonthComps.weeks, h = 1, v = this.prevMonthComps.month, m = this.prevMonthComps.year, g = 1; g <= 6 && (!c || !this.trimMaxWeek); g++) {
                for (var y = [], b = 1, _2 = n3; b <= 7; b++, _2 += 7 === _2 ? -6 : 1) {
                  o && _2 === r2 && (u = 1, l = this.monthComps.days, f = Math.floor((u - 1) / 7 + 1), d = Math.floor((this.monthComps.days - u) / 7 + 1), p = 1, h = this.monthComps.weeks, v = this.monthComps.month, m = this.monthComps.year, o = false, s = true);
                  var x = new Date(m, v - 1, u), w = u === i.x.day && v === i.x.month && m === i.x.year, C = s && 1 === u, S = s && u === this.monthComps.days;
                  y.push({ id: v + "." + u, label: u.toString(), day: u, dayFromEnd: l, weekday: _2, weekdayOrdinal: f, weekdayOrdinalFromEnd: d, week: p, weekFromEnd: h, month: v, year: m, date: x, dateTime: x.getTime(), isToday: w, isFirstDay: C, isLastDay: S, inMonth: s, inPrevMonth: o, inNextMonth: c }), s && S ? (s = false, c = true, u = 1, l = this.nextMonthComps.days, f = 1, d = Math.floor((this.nextMonthComps.days - u) / 7 + 1), p = 1, h = this.nextMonthComps.weeks, v = this.nextMonthComps.month, m = this.nextMonthComps.year) : (u++, l--, f = Math.floor((u - 1) / 7 + 1), d = Math.floor((this.monthComps.days - u) / 7 + 1));
                }
                t3.push(y), p++, h--;
              }
              return t3;
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(31), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(22), c = n2(106), u = n2(2), l = n2(4), f = n2(3);
            e2.a = { components: { Popover: s.a, CalendarDayPopoverRow: c.a }, props: { day: { type: Object, required: true }, attributes: Object, popoverContentOffset: { type: Number, default: 7 }, styles: Object, formats: Object }, data: function() {
              return { isHovered: false, isFocused: false, glyphs: {} };
            }, computed: { label: function() {
              return this.day.label;
            }, dateTime: function() {
              return this.day.dateTime;
            }, inMonth: function() {
              return this.day.inMonth;
            }, dayCellStyle: function() {
              return o()({}, this.styles.dayCell, !this.inMonth && this.styles.dayCellNotInMonth);
            }, attributesLength: function() {
              return this.attributes.length;
            }, attributesList: function() {
              return this.attributes.find(this.day);
            }, attributesMap: function() {
              return Object(u.s)(this.attributesList);
            }, shouldCheckDirty: function() {
              return this.attributesLength && !!this.attributesList.find(function(t3) {
                return Object(l.c)(t3.highlight) || Object(l.c)(t3.highlightCaps) || Object(l.c)(t3.dot) || Object(l.c)(t3.bar) || Object(l.c)(t3.popover) || Object(l.c)(t3.contentStyle);
              });
            }, isHoveredDirty: function() {
              return this.shouldCheckDirty && this.isHovered;
            }, isFocusedDirty: function() {
              return this.shouldCheckDirty && this.isFocused;
            }, backgrounds: function() {
              return this.glyphs.backgrounds;
            }, hasBackgrounds: function() {
              return !!Object(u.a)(this.backgrounds);
            }, dots: function() {
              return this.glyphs.dots;
            }, hasDots: function() {
              return !!Object(u.a)(this.dots);
            }, dotsStyle: function() {
              return this.styles.dots;
            }, bars: function() {
              return this.glyphs.bars;
            }, hasBars: function() {
              return !!Object(u.a)(this.bars);
            }, barsStyle: function() {
              return this.styles.bars;
            }, popovers: function() {
              return this.glyphs.popovers;
            }, hasPopovers: function() {
              return !!Object(u.a)(this.popovers);
            }, popoverContentStyle: function() {
              return this.styles.dayPopoverContent;
            }, popoverState: function() {
              var t3 = "", e3 = false, n3 = void 0;
              return this.popovers.forEach(function(r2) {
                !t3 && r2.visibility && (t3 = r2.visibility), e3 = e3 || r2.isInteractive, n3 = n3 || r2.label || r2.component || r2.slot;
              }), { visibility: t3 || n3 && "hover" || "hidden", isInteractive: e3 };
            }, popoverVisibility: function() {
              return this.popoverState.visibility;
            }, popoverIsInteractive: function() {
              return this.popoverState.isInteractive;
            }, contentStyle: function() {
              var t3 = this.styles.dayContent, e3 = this.dayCellStyle && (0 === parseFloat(this.dayCellStyle.opacity) || "none" === this.dayCellStyle.pointerEvents);
              return o()({}, Object(l.c)(t3) && t3({ day: this.day, isHovered: this.isHovered, isFocused: this.isFocused }) || t3, this.glyphs.contentStyle, e3 && { pointerEvents: "none" });
            } }, watch: { isHoveredDirty: function() {
              this.refreshGlyphs();
            }, isFocusedDirty: function() {
              this.refreshGlyphs();
            }, attributesList: function(t3, e3) {
              t3.forEach(function(t4) {
                t4.isNew = !e3.find(function(e4) {
                  return e4.key === t4.key;
                });
              }), this.refreshGlyphs();
            } }, created: function() {
              this.refreshGlyphs();
            }, methods: { getDayEvent: function(t3) {
              return o()({}, this.day, { attributes: this.attributesList, attributesMap: this.attributesMap, event: t3 });
            }, click: function(t3) {
              this.$emit("dayclick", this.getDayEvent(t3));
            }, mouseenter: function(t3) {
              this.$emit("daymouseenter", this.getDayEvent(t3));
            }, mouseover: function(t3) {
              this.isHovered = true, this.$emit("daymouseover", this.getDayEvent(t3));
            }, mouseleave: function(t3) {
              this.isHovered = false, this.$emit("daymouseleave", this.getDayEvent(t3));
            }, refreshGlyphs: function() {
              var t3 = this;
              this.glyphs = (this.attributesList || []).map(function(e3) {
                return t3.evalAttribute(e3, t3.isHoveredDirty, t3.isFocusedDirty);
              }).reduce(function(e3, n3) {
                var r2 = n3.highlight, a2 = n3.highlightCaps, o2 = n3.onStart, s2 = n3.onEnd, c2 = n3.dot, u2 = n3.bar, l2 = n3.popover, f2 = e3.backgrounds, d = e3.dots, p = e3.bars, h = e3.popovers, v = e3.contentStyle;
                return !r2 || o2 && s2 && a2 || f2.push(t3.getBackground(n3)), a2 && (o2 || s2) && f2.push(t3.getBackgroundCap(n3)), c2 && d.push(t3.getDot(n3)), u2 && p.push(t3.getBar(n3)), l2 && h.unshift(t3.getPopover(n3)), i()(v, n3.contentStyle), e3;
              }, { backgrounds: [], dots: [], bars: [], popovers: [], contentStyle: {} });
            }, evalAttribute: function(t3, e3, n3) {
              var r2 = this, i2 = t3.targetDate, a2 = i2.startTime === this.dateTime, s2 = i2.endTime === this.dateTime, c2 = !a2 && !s2, d = function(t4) {
                return Object(l.c)(t4) && t4({ day: r2.day, targetDate: i2, onStart: a2, onEnd: s2, inBetween: c2, isHovered: e3, isFocused: n3 }) || Object(l.e)(t4) && t4;
              };
              return Object(u.r)(t3, o()({}, t3, { onStart: a2, onEnd: s2, inBetween: c2 }), [{ name: "highlight", mixin: f.a.highlight, validate: d }, { name: "highlightCaps", mixin: f.a.highlightCaps, validate: d }, { name: "dot", mixin: f.a.dot, validate: d }, { name: "bar", mixin: f.a.bar, validate: d }, { name: "contentStyle", validate: d }, { name: "popover", validate: d }, { name: "customData" }]).target;
            }, getBackground: function(t3) {
              var e3 = t3.key, n3 = t3.highlight, r2 = t3.highlightCaps, i2 = t3.targetDate, a2 = n3.animated, o2 = n3.width, s2 = n3.height, c2 = n3.backgroundColor, u2 = n3.borderColor, l2 = n3.borderWidth, f2 = n3.borderStyle, d = n3.opacity, p = n3.borderRadius || (i2.isDate || i2.isComplex ? "50%" : "290486px"), h = { key: e3, style: { width: o2 || s2, height: s2, backgroundColor: c2, borderColor: u2, borderWidth: l2, borderStyle: f2, borderRadius: p, opacity: d } };
              if (i2.isDate || i2.isComplex)
                h.wrapperClass = "c-day-layer c-day-box-center-center " + (a2 ? "c-day-scale-enter c-day-scale-leave" : "");
              else {
                var v = i2.startTime === this.dateTime, m = i2.endTime === this.dateTime;
                if (v && m) {
                  var g = a2 ? "c-day-scale-enter c-day-scale-leave" : "";
                  h.wrapperClass = "c-day-layer c-day-box-center-center " + g, h.style.width = "95%", h.style.borderWidth = l2, h.style.borderRadius = p + " " + p + " " + p + " " + p;
                } else if (v) {
                  var y = a2 && !r2 ? "c-day-slide-left-scale-enter" : "";
                  h.wrapperClass = "c-day-layer c-day-box-right-center shift-right " + y, r2 ? (h.style.width = "50%", h.style.borderWidth = l2 + " 0 " + l2 + " 0", h.style.borderRadius = 0) : (h.style.width = "95%", h.style.borderWidth = l2 + " 0 " + l2 + " " + l2, h.style.borderRadius = p + " 0 0 " + p);
                } else if (m) {
                  var b = a2 && !r2 ? "c-day-slide-right-scale-enter" : "";
                  h.wrapperClass = "c-day-layer c-day-box-left-center shift-left " + b, r2 ? (h.style.width = "50%", h.style.borderWidth = l2 + " 0 " + l2 + " 0", h.style.borderRadius = 0) : (h.style.width = "95%", h.style.borderWidth = l2 + " " + l2 + " " + l2 + " 0", h.style.borderRadius = "0 " + p + " " + p + " 0");
                } else
                  h.wrapperClass = "c-day-layer c-day-box-center-center shift-left-right", h.style.width = "100%", h.style.borderWidth = l2 + " 0", h.style.borderRadius = "0";
              }
              return h;
            }, getBackgroundCap: function(t3) {
              var e3 = t3.key, n3 = t3.highlightCaps, r2 = t3.targetDate, i2 = t3.isNew, a2 = r2.startTime, o2 = r2.endTime, s2 = n3.animated, c2 = n3.width, u2 = n3.height, l2 = n3.backgroundColor, f2 = n3.borderColor, d = n3.borderWidth, p = n3.borderStyle, h = n3.opacity, v = n3.borderRadius || "50%", m = "";
              return s2 && (a2 === o2 ? m = "c-day-scale-enter c-day-scale-leave" : a2 === this.dateTime ? m = i2 ? "c-day-slide-left-translate-enter" : "c-day-slide-right-translate-enter" : o2 === this.dateTime && (m = i2 ? "c-day-slide-right-translate-enter" : "c-day-slide-left-translate-enter")), { key: e3 + "-cap", wrapperClass: "c-day-layer c-day-box-center-center " + (s2 ? m : ""), style: { width: c2 || u2, height: u2, backgroundColor: l2, borderColor: f2, borderWidth: d, borderStyle: p, borderRadius: v, opacity: h } };
            }, getDot: function(t3) {
              var e3 = t3.key, n3 = t3.dot;
              return { key: e3, style: { width: n3.diameter, height: n3.diameter, backgroundColor: n3.backgroundColor, borderColor: n3.borderColor, borderWidth: n3.borderWidth, borderStyle: n3.borderStyle, borderRadius: n3.borderRadius, opacity: n3.opacity } };
            }, getBar: function(t3) {
              var e3 = t3.key, n3 = t3.bar;
              return { key: e3, style: { height: n3.height, backgroundColor: n3.backgroundColor, borderColor: n3.borderColor, borderWidth: n3.borderWidth, borderStyle: n3.borderStyle, opacity: n3.opacity } };
            }, getPopover: function(t3) {
              var e3 = t3.popover, n3 = e3.label, r2 = e3.labelStyle, i2 = e3.component, a2 = e3.slot, o2 = e3.hideIndicator, s2 = e3.visibility, c2 = e3.isInteractive;
              return { key: t3.key, customData: t3.customData, attribute: t3, label: Object(l.c)(n3) ? n3(t3, this.day) : n3, labelStyle: Object(l.c)(r2) ? r2(t3, this.day) : r2, component: i2, slot: a2, hideIndicator: o2, visibility: s2, isInteractive: void 0 !== c2 ? c2 : !!a2 };
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = { props: { attribute: Object, hideIndicator: Boolean }, computed: { isSelectable: function() {
              return this.$listeners.select;
            }, indicatorStyle: function() {
              var t3 = this.attribute;
              return t3.highlight ? { backgroundColor: t3.highlight.backgroundColor, width: "10px", height: "5px", borderRadius: "3px", opacity: t3.highlight.opacity } : t3.dot ? { backgroundColor: t3.dot.backgroundColor, width: "5px", height: "5px", borderRadius: "50%", opacity: t3.dot.opacity } : t3.bar ? { backgroundColor: t3.bar.backgroundColor, width: "10px", height: "3px", opacity: t3.bar.opacity } : t3.contentStyle ? { backgroundColor: t3.contentStyle.color, width: "5px", height: "5px" } : null;
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(0), i = n2.n(r), a = n2(14), o = n2.n(a), s = n2(113), c = n2.n(s), u = n2(33), l = n2(23), f = n2(8), d = n2(2);
            e2.a = { components: { SvgIcon: u.a }, props: { mode: { type: String, default: "month" }, value: { type: Object, default: function() {
              return { month: 0, year: 0 };
            } }, validator: { type: Function, default: function() {
              return function() {
                return true;
              };
            } }, formats: Object, attributes: Array, styles: Object }, data: function() {
              return { mode_: "", yearIndex: 0, yearGroupIndex: 0, attributesMap: {} };
            }, computed: { month: function() {
              return this.value && this.value.month || 0;
            }, year: function() {
              return this.value && this.value.year || 0;
            }, headerStyle: function() {
              return this.styles.navHeader;
            }, headerTitleStyle: function() {
              return this.styles.navHeaderTitle;
            }, headerArrowsStyle: function() {
              return this.styles.navHeaderArrows;
            }, monthItems: function() {
              var t3 = this;
              return Object(d.j)().map(function(e3) {
                return Object(f.a)(e3, t3.formats.navMonths);
              }).map(function(e3, n3) {
                var r2 = n3 + 1;
                return { month: r2, label: e3, attributes: t3.getMonthAttributes(r2), isActive: r2 === t3.month && t3.yearIndex === t3.year, isDisabled: !t3.validator({ month: r2, year: t3.yearIndex }) };
              });
            }, yearItems: function() {
              for (var t3 = 12 * this.yearGroupIndex, e3 = t3 + 12, n3 = [], r2 = t3; r2 < e3; r2 += 1)
                n3.push({ month: 0, year: r2, isActive: r2 === this.year, isDisabled: !this.validator({ month: this.month, year: r2 }) });
              return n3;
            }, monthRows: function() {
              return this.createRows(this.monthItems, 3);
            }, yearRows: function() {
              return this.createRows(this.yearItems, 3);
            }, firstYear: function() {
              return Object(d.e)(this.yearItems.map(function(t3) {
                return t3.year;
              }), 0);
            }, lastYear: function() {
              return Object(d.g)(this.yearItems.map(function(t3) {
                return t3.year;
              }), 0);
            } }, watch: { mode: function(t3) {
              this.mode_ = t3;
            }, year: function() {
              this.yearIndex = this.year;
            }, yearIndex: function(t3) {
              this.yearGroupIndex = this.getYearGroupIndex(t3);
            }, attributes: function() {
              this.mapAttributes(true);
            }, yearGroupIndex: function() {
              this.mapAttributes();
            } }, created: function() {
              this.mode_ = this.mode, this.yearIndex = this.year;
            }, methods: { getMonthCellStyle: function(t3) {
              return Object(d.c)(this.styles.navMonthCell, t3);
            }, getYearCellStyle: function(t3) {
              return Object(d.c)(this.styles.navYearCell, t3);
            }, getMonthAttributes: function(t3) {
              if (this.attributesMap[this.yearIndex] && this.attributesMap[this.yearIndex][t3])
                return c()(this.attributesMap[this.yearIndex][t3]);
            }, mapAttributes: function(t3) {
              var e3 = this;
              if (this.attributes && this.attributes.length) {
                for (var n3 = t3 ? {} : this.attributesMap, r2 = this.firstYear; r2 <= this.lastYear; r2++)
                  if (!n3[r2]) {
                    for (var a2 = {}, s2 = function(t4) {
                      var n4 = {}, i2 = Object(d.i)(t4, r2), s3 = new l.b({ start: new Date(i2.year, i2.month - 1, 1), end: new Date(i2.year, i2.month - 1, i2.days) });
                      e3.attributes.forEach(function(t5) {
                        t5.dates.find(function(t6) {
                          return t6.intersects(s3);
                        }) && (n4[t5.key] = e3.getAttributeInfo(t5));
                      }), o()(n4).length && (a2[t4] = n4);
                    }, c2 = 1; c2 <= 12; c2++)
                      s2(c2);
                    o()(a2).length && (n3[r2] = a2);
                  }
                this.attributesMap = i()({}, n3);
              } else
                this.attributesMap = {};
            }, getAttributeInfo: function(t3) {
              var e3 = void 0;
              return t3.highlight ? e3 = t3.highlight.backgroundColor : t3.dot ? e3 = t3.dot.backgroundColor : t3.bar ? e3 = t3.bar.backgroundColor : t3.contentStyle && (e3 = t3.contentStyle.backgroundColor || t3.contentStyle.color), { key: t3.key, style: { backgroundColor: e3 } };
            }, getYearGroupIndex: function(t3) {
              return Math.floor(t3 / 12);
            }, monthClick: function(t3) {
              this.$emit("input", { month: t3, year: this.yearIndex });
            }, yearClick: function(t3) {
              this.yearIndex = t3, this.selectMode("month");
            }, selectMode: function(t3) {
              this.mode_ = t3, this.$emit("update:mode", t3);
            }, movePrevYear: function() {
              this.yearIndex--;
            }, moveNextYear: function() {
              this.yearIndex++;
            }, movePrevYearGroup: function() {
              this.yearGroupIndex--;
            }, moveNextYearGroup: function() {
              this.yearGroupIndex++;
            }, createRows: function(t3, e3) {
              var n3 = [], r2 = [];
              return t3.forEach(function(t4) {
                r2.push(t4), r2.length >= e3 && (n3.push(r2), r2 = []);
              }), n3;
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = { leftArrow: { viewBox: "3 2 12 32", path: "M11.196 10c0 0.143-0.071 0.304-0.179 0.411l-7.018 7.018 7.018 7.018c0.107 0.107 0.179 0.268 0.179 0.411s-0.071 0.304-0.179 0.411l-0.893 0.893c-0.107 0.107-0.268 0.179-0.411 0.179s-0.304-0.071-0.411-0.179l-8.321-8.321c-0.107-0.107-0.179-0.268-0.179-0.411s0.071-0.304 0.179-0.411l8.321-8.321c0.107-0.107 0.268-0.179 0.411-0.179s0.304 0.071 0.411 0.179l0.893 0.893c0.107 0.107 0.179 0.25 0.179 0.411z" }, rightArrow: { viewBox: "-2 1 11 32", path: "M10.625 17.429c0 0.143-0.071 0.304-0.179 0.411l-8.321 8.321c-0.107 0.107-0.268 0.179-0.411 0.179s-0.304-0.071-0.411-0.179l-0.893-0.893c-0.107-0.107-0.179-0.25-0.179-0.411 0-0.143 0.071-0.304 0.179-0.411l7.018-7.018-7.018-7.018c-0.107-0.107-0.179-0.268-0.179-0.411s0.071-0.304 0.179-0.411l0.893-0.893c0.107-0.107 0.268-0.179 0.411-0.179s0.304 0.071 0.411 0.179l8.321 8.321c0.107 0.107 0.179 0.268 0.179 0.411z" }, moon: { viewBox: "0 0 26 32", path: "M22.536 23.554c-0.643 0.107-1.304 0.161-1.964 0.161-6.625 0-12-5.375-12-12 0-2.268 0.661-4.482 1.857-6.375-4.75 1.411-8.143 5.768-8.143 10.946 0 6.304 5.125 11.429 11.429 11.429 3.446 0 6.679-1.571 8.821-4.161zM26.161 22.036c-2.232 4.839-7.125 7.964-12.446 7.964-7.554 0-13.714-6.161-13.714-13.714 0-7.411 5.804-13.429 13.196-13.696 0.5-0.018 0.911 0.268 1.089 0.696 0.196 0.446 0.071 0.964-0.268 1.286-2.036 1.857-3.161 4.393-3.161 7.143 0 5.357 4.357 9.714 9.714 9.714 1.411 0 2.768-0.304 4.071-0.911 0.446-0.196 0.946-0.107 1.286 0.232s0.429 0.857 0.232 1.286z" }, sun: { viewBox: "0 0 32 32", path: "M26.286 16.286c0-5.679-4.607-10.286-10.286-10.286s-10.286 4.607-10.286 10.286 4.607 10.286 10.286 10.286 10.286-4.607 10.286-10.286zM31.214 21.232c-0.054 0.179-0.196 0.304-0.357 0.357l-5.214 1.714v5.464c0 0.179-0.089 0.357-0.232 0.464-0.161 0.107-0.339 0.143-0.518 0.071l-5.214-1.679-3.214 4.429c-0.107 0.143-0.286 0.232-0.464 0.232s-0.357-0.089-0.464-0.232l-3.214-4.429-5.214 1.679c-0.179 0.071-0.357 0.036-0.518-0.071-0.143-0.107-0.232-0.286-0.232-0.464v-5.464l-5.214-1.714c-0.161-0.054-0.304-0.179-0.357-0.357s-0.036-0.375 0.071-0.518l3.214-4.429-3.214-4.429c-0.107-0.161-0.125-0.339-0.071-0.518s0.196-0.304 0.357-0.357l5.214-1.714v-5.464c0-0.179 0.089-0.357 0.232-0.464 0.161-0.107 0.339-0.143 0.518-0.071l5.214 1.679 3.214-4.429c0.214-0.286 0.714-0.286 0.929 0l3.214 4.429 5.214-1.679c0.179-0.071 0.357-0.036 0.518 0.071 0.143 0.107 0.232 0.286 0.232 0.464v5.464l5.214 1.714c0.161 0.054 0.304 0.179 0.357 0.357s0.036 0.357-0.071 0.518l-3.214 4.429 3.214 4.429c0.107 0.143 0.125 0.339 0.071 0.518z" } };
            e2.a = { props: ["name"], data: function() {
              return { width: "26px", height: "26px", viewBox: "0 0 32 32", path: "", isBaseline: false };
            }, mounted: function() {
              this.updateIcon();
            }, watch: { name: function() {
              this.updateIcon();
            } }, methods: { updateIcon: function() {
              var t3 = r[this.name];
              t3 && (this.width = t3.width || "26px", this.height = t3.height || "26px", this.viewBox = t3.viewBox || "0 0 32 32", this.path = t3.path);
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(0), i = n2.n(r), a = n2(23), o = n2(2), s = n2(4);
            e2.a = function(t3) {
              if (!t3)
                return null;
              if (t3.isAttribute)
                return t3;
              t3.dates && !Object(s.a)(t3.dates) && (t3.dates = [t3.dates]), t3.excludeDates && !Object(s.a)(t3.excludeDates) && (t3.excludeDates = [t3.excludeDates]);
              var e3 = Object(o.a)(t3.dates), n3 = Object(o.a)(t3.excludeDates), r2 = t3.excludeMode || "intersects", c = (e3 && t3.dates || n3 && [{}] || []).map(function(e4) {
                return e4 && (e4.isDateInfo ? e4 : Object(a.b)(e4, t3.order));
              }).filter(function(t4) {
                return t4;
              }), u = (n3 && t3.excludeDates || []).map(function(e4) {
                return e4 && (e4.isDateInfo ? e4 : Object(a.b)(e4, t3.order));
              }).filter(function(t4) {
                return t4;
              }), l = c.some(function(t4) {
                return t4.isComplex;
              }), f = i()({}, t3, { isAttribute: true, key: t3.key || "guid", order: t3.order || 0, dates: c, excludeDates: u, isComplex: l, intersectsDate: function(t4) {
                return !f.excludesDate(t4) && (c.find(function(e4) {
                  return e4.intersectsDate(t4);
                }) || false);
              }, includesDate: function(t4) {
                return !f.excludesDate(t4) && (c.find(function(e4) {
                  return e4.includesDate(t4);
                }) || false);
              }, excludesDate: function(t4) {
                return n3 && u.find(function(e4) {
                  return "intersects" === r2 && e4.intersectsDate(t4) || "includes" === r2 && e4.includesDate(t4);
                });
              }, includesDay: function(t4) {
                return !f.excludesDay(t4) && (c.find(function(e4) {
                  return e4.includesDay(t4);
                }) || false);
              }, excludesDay: function(t4) {
                return n3 && u.find(function(e4) {
                  return e4.includesDay(t4);
                });
              } });
              return f;
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(12), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(22), c = n2(123), u = n2(124), l = n2(125), f = n2(126), d = n2(24), p = n2(53), h = n2(3), v = n2(23), m = n2(2), g = n2(4), y = n2(8), b = n2(13);
            e2.a = { mixins: [b.a], render: function(t3) {
              var e3 = this, n3 = function(n4) {
                return t3(e3.componentName, o()({ attrs: o()({}, e3.$attrs, { value: e3.value, isRequired: e3.isRequired, formats: e3.formats_, selectAttribute: e3.selectAttribute_, dragAttribute: e3.dragAttribute_, disabledAttribute: e3.disabledAttribute_, minDate: e3.minDate, maxDate: e3.maxDate, fromPage: e3.fromPage_, toPage: e3.toPage_, themeStyles: e3.themeStyles_ }), on: e3.mergeListeners({ "update:fromPage": function(t4) {
                  return e3.fromPage_ = t4;
                }, "update:toPage": function(t4) {
                  return e3.toPage_ = t4;
                }, drag: function(t4) {
                  return e3.dragValue = t4;
                } }, e3.filteredListeners()), slots: e3.$slots, scopedSlots: e3.$scopedSlots }, n4 && { slot: n4 }));
              };
              return this.isInline ? n3() : t3("popover", { attrs: { isExpanded: this.popoverExpanded, direction: this.popoverDirection, align: this.popoverAlign, visibility: this.popoverVisibility, contentStyle: this.popoverContentStyle, contentOffset: this.popoverContentOffset, forceHidden: this.popoverForceHidden, showClearMargin: this.popoverShowClearMargin, isInteractive: true }, on: { "will-appear": function(t4) {
                return e3.$emit("popover-will-appear", t4);
              }, "did-appear": function(t4) {
                return e3.$emit("popover-did-appear", t4);
              }, "will-disappear": function(t4) {
                return e3.$emit("popover-will-disappear", t4);
              }, "did-disappear": function(t4) {
                return e3.$emit("popover-did-disappear", t4);
              }, "update:forceHidden": function(t4) {
                return e3.popoverForceHidden = t4;
              } } }, [Object(g.c)(this.$scopedSlots.default) && this.$scopedSlots.default({ inputValue: this.inputValue, updateValue: this.updateValue }) || [t3("input", { class: this.inputProps_.class, style: this.inputProps_.style, domProps: { value: this.inputValue }, attrs: o()({ type: "text" }, this.inputAttrs), on: { input: this.inputInput, change: this.inputChange, keyup: this.inputKeyup } })], n3("popover-content")]);
            }, components: { Popover: s.a, SingleDatePicker: c.a, MultipleDatePicker: u.a, DateRangePicker: l.a }, props: { mode: { type: String, default: "single" }, value: { type: null, required: true }, isRequired: Boolean, isInline: Boolean, minDate: Date, maxDate: Date, disabledDates: null, availableDates: null, formats: Object, inputProps: { type: Object, default: function() {
              return {};
            } }, updateOnInput: { type: Boolean, default: function() {
              return h.a.datePickerUpdateOnInput;
            } }, tintColor: { type: String, default: function() {
              return h.a.datePickerTintColor;
            } }, dragAttribute: Object, selectAttribute: Object, disabledAttribute: Object, showCaps: { type: Boolean, default: function() {
              return h.a.datePickerShowCaps;
            } }, showDayPopover: { type: Boolean, default: function() {
              return h.a.datePickerShowDayPopover;
            } }, popoverExpanded: { type: Boolean, default: function() {
              return h.a.popoverExpanded;
            } }, popoverDirection: { type: String, default: function() {
              return h.a.popoverDirection;
            } }, popoverAlign: { type: String, default: function() {
              return h.a.popoverAlign;
            } }, popoverVisibility: { type: String, default: function() {
              return h.a.popoverVisibility;
            } }, popoverContentOffset: { type: Number, default: function() {
              return h.a.popoverContentOffset;
            } }, popoverShowClearMargin: Boolean, popoverKeepVisibleOnInput: { type: Boolean, default: function() {
              return h.a.popoverKeepVisibleOnInput;
            } }, fromPage: Object, toPage: Object, themeStyles: { type: Object, default: function() {
              return {};
            } } }, data: function() {
              return { fromPage_: null, toPage_: null, dragValue: null, inputValue: "", popoverForceHidden: false, disableFormatInput: false, disablePopoverForceHidden: false };
            }, computed: { formats_: function() {
              return o()({}, h.a.formats, this.formats);
            }, inputFormats: function() {
              var t3 = this.formats_.input;
              return Object(g.a)(t3) && t3 || [t3];
            }, profile: function() {
              var t3 = this;
              return Object(d.a)(this.mode, function(e3) {
                return Object(y.a)(e3, t3.inputFormats[0]);
              }, function(e3) {
                return Object(y.b)(e3, t3.inputFormats);
              });
            }, componentName: function() {
              return this.profile.componentName;
            }, selectAttribute_: function() {
              return this.buildSelectDragAttribute(this.selectAttribute);
            }, dragAttribute_: function() {
              return this.buildSelectDragAttribute(this.dragAttribute, true);
            }, disabledDates_: function() {
              var t3 = [];
              return this.disabledDates && (Object(g.a)(this.disabledDates) ? t3.push.apply(t3, i()(this.disabledDates)) : t3.push(this.disabledDates)), this.minDate && t3.push({ start: null, end: Object(v.a)(this.minDate, -1) }), this.maxDate && t3.push({ start: Object(v.a)(this.maxDate, 1), end: null }), t3;
            }, disabledAttribute_: function() {
              return this.disabledDates_ || this.availableDates ? Object(p.a)(o()({ key: "disabled", order: 100 }, this.disabledAttribute || Object(h.c)(h.a.datePickerDisabledAttribute, { mode: this.mode, color: this.tintColor, showDayPopover: this.showDayPopover }), { dates: this.disabledDates_, excludeDates: this.availableDates, excludeMode: "includes" })) : null;
            }, inputProps_: function() {
              var t3 = h.a.datePickerInputProps;
              return Object(g.c)(t3) ? o()({}, t3({ mode: this.mode, value: this.value, dragValue: this.dragValue, format: h.a.masks[this.inputFormats[0]] || this.inputFormats[0] }), this.inputProps) : Object(g.e)(t3) ? o()({}, t3, this.inputProps) : this.inputProps;
            }, inputAttrs: function() {
              var t3 = o()({}, this.inputProps_);
              return t3 && (delete t3.style, delete t3.class), t3;
            }, themeStyles_: function() {
              var t3 = this.themeStyles.dayContent || h.a.themeStyles.dayContent;
              return o()({}, this.themeStyles, { dayContent: function(e3) {
                return o()({}, e3.isHovered && { backgroundColor: "#dadada", border: "0", cursor: "pointer" }, Object(g.c)(t3) && t3(e3) || t3);
              } }, !this.isInline && { wrapper: null });
            }, popoverContentStyle: function() {
              return o()({}, this.themeStyles.wrapper, { padding: "0", margin: "0" });
            } }, watch: { fromPage: function(t3) {
              this.fromPage_ = t3;
            }, toPage: function(t3) {
              this.toPage_ = t3;
            }, fromPage_: function(t3) {
              this.$emit("update:frompage", t3), this.$emit("update:fromPage", t3);
            }, toPage_: function(t3) {
              this.$emit("update:topage", t3), this.$emit("update:toPage", t3);
            }, mode: function() {
              this.$emit("input", null);
            }, value: function() {
              this.assignPageRange(), this.disableFormatInput || this.formatInput(), "multiple" === this.mode || this.disablePopoverForceHidden || this.hidePopover(), this.disableFormatInput = false, this.disablePopoverForceHidden = false;
            }, dragValue: function() {
              this.formatInput();
            }, disabledAttribute_: function() {
              this.dragValue || this.updateValue(this.value);
            } }, created: function() {
              this.fromPage_ = this.fromPage, this.toPage_ = this.toPage, this.assignPageRange(), this.formatInput();
            }, methods: { buildSelectDragAttribute: function(t3, e3) {
              var n3 = this, r2 = o()({ key: "drag-select" }, t3), i2 = r2, a2 = i2.highlight, s2 = i2.highlightCaps, c2 = i2.contentStyle, u2 = i2.dot, l2 = i2.bar;
              return u2 || l2 || (r2 = o()({}, r2, { highlight: function(t4) {
                return o()({ backgroundColor: n3.tintColor }, e3 && { height: "1.64rem", opacity: 0.5 }, Object(g.c)(a2) && a2(t4) || a2);
              }, highlightCaps: s2 || this.showCaps && function(t4) {
                return !t4.inBetween && { backgroundColor: "#fafafa", borderColor: n3.tintColor, borderWidth: "2px" };
              }, contentStyle: function(t4) {
                return o()({}, !e3 && { color: "#fafafa" }, t4.isHovered && { backgroundColor: "transparent", border: "0" }, n3.showCaps && !t4.inBetween && { color: "#333333" }, Object(g.c)(c2) && c2(t4) || c2);
              } })), (r2.popover || this.showDayPopover) && (r2.popover = o()({ component: f.a, hideIndicator: true }, r2.popover)), r2;
            }, filteredListeners: function() {
              var t3 = o()({}, this.$listeners);
              return delete t3["update:frompage"], delete t3["update:fromPage"], delete t3["update:topage"], delete t3["update:toPage"], t3;
            }, assignPageRange: function() {
              var t3 = this.profile.getPageRange(this.value);
              if (t3) {
                var e3 = Object(m.v)(this.fromPage_, t3.from, t3.to), n3 = Object(m.v)(this.toPage_, t3.from, t3.to);
                "single" === this.mode ? e3 || Object.prototype.hasOwnProperty.call(this.$attrs, "is-double-paned") ? n3 || (this.fromPage_ = t3.to) : this.fromPage_ = t3.from : (e3 || (this.fromPage_ = t3.from), n3 || (this.toPage_ = t3.to));
              }
            }, inputInput: function(t3) {
              this.inputValue = t3.target.value, this.updateOnInput && this.updateValue(this.inputValue, { formatInput: false, hidePopover: false });
            }, inputChange: function() {
              this.updateValue(this.inputValue, { formatInput: true, hidePopover: false });
            }, inputKeyup: function(t3) {
              27 === t3.keyCode && this.updateValue(this.value, { formatInput: true, hidePopover: true });
            }, updateValue: function() {
              var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.inputValue, e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n3 = e3.formatInput, r2 = void 0 !== n3 && n3, i2 = e3.hidePopover, a2 = void 0 === i2 ? !this.popoverKeepVisibleOnInput : i2;
              this.inputValue = Object(g.f)(t3) ? t3 : this.inputValue;
              var o2 = Object(g.f)(t3) ? this.profile.parseValue(t3) : t3, s2 = this.profile.filterDisabled({ value: this.profile.normalizeValue(o2), isRequired: this.isRequired, disabled: this.disabledAttribute_, fallbackValue: this.value });
              this.profile.valuesAreEqual(o2, s2) && (this.profile.valuesAreEqual(this.value, s2) ? (r2 && this.formatInput(), a2 && this.hidePopover()) : (this.disableFormatInput = !r2, this.disablePopoverForceHidden = !a2, this.$emit("input", s2)));
            }, formatInput: function() {
              var t3 = this;
              this.$nextTick(function() {
                t3.inputValue = t3.profile.formatValue(t3.value, t3.dragValue);
              });
            }, hidePopover: function() {
              var t3 = this;
              setTimeout(function() {
                t3.popoverForceHidden = true;
              }, 200);
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(12), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(21), c = n2(24), u = n2(13);
            e2.a = { mixins: [u.a], render: function(t3) {
              return t3(s.a, { attrs: o()({}, this.$attrs, { attributes: this.attributes_ }), on: this.mergeListeners({ dayclick: this.clickDay }), slots: this.$slots, scopedSlots: this.$scopedSlots });
            }, components: { Calendar: s.a }, props: { value: { type: Date, default: null }, isRequired: Boolean, selectAttribute: Object, disabledAttribute: Object, attributes: Array }, computed: { selectAttribute_: function() {
              return Object(c.e)(this.value) ? o()({}, this.selectAttribute, { dates: [this.value] }) : null;
            }, attributes_: function() {
              var t3 = [].concat(i()(this.attributes || []));
              return this.selectAttribute_ && t3.push(this.selectAttribute_), this.disabledAttribute && t3.push(this.disabledAttribute), t3;
            } }, methods: { clickDay: function(t3) {
              this.disabledAttribute && this.disabledAttribute.includesDay(t3) ? this.$emit("invalid-input", { reason: "disabled", value: t3.date }) : Object(c.f)(t3.date, this.value) ? this.isRequired || this.$emit("input", null) : this.$emit("input", t3.date);
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(12), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(21), c = n2(24), u = n2(13);
            e2.a = { mixins: [u.a], render: function(t3) {
              return t3(s.a, { attrs: o()({}, this.$attrs, { attributes: this.attributes_ }), on: this.mergeListeners({ dayclick: this.clickDay }), slots: this.$slots, scopedSlots: this.$scopedSlots });
            }, components: { Calendar: s.a }, props: { value: { type: Array, default: function() {
              return [];
            } }, isRequired: Boolean, selectAttribute: Object, disabledAttribute: Object, attributes: Array }, computed: { selectAttribute_: function() {
              return Object(c.b)(this.value) ? o()({}, this.selectAttribute, { dates: this.value }) : null;
            }, attributes_: function() {
              var t3 = [].concat(i()(this.attributes || []));
              return this.selectAttribute_ && t3.push(this.selectAttribute_), this.disabledAttribute && t3.push(this.disabledAttribute), t3;
            } }, methods: { clickDay: function(t3) {
              if (!this.disabledAttribute || !this.disabledAttribute.includesDay(t3))
                if (Object(c.b)(this.value))
                  if (this.value.find(function(e4) {
                    return e4.getTime() === t3.dateTime;
                  })) {
                    var e3 = this.value.filter(function(e4) {
                      return !Object(c.f)(e4, t3.date);
                    });
                    e3.length ? this.$emit("input", e3) : this.isRequired || this.$emit("input", null);
                  } else
                    this.$emit("input", Object(c.c)([].concat(i()(this.value), [t3.date])));
                else
                  this.$emit("input", [t3.date]);
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(12), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(21), c = n2(13), u = n2(24);
            e2.a = { mixins: [c.a], render: function(t3) {
              return t3(s.a, { attrs: o()({}, this.$attrs, { attributes: this.attributes_, themeStyles: this.themeStyles_ }), on: this.mergeListeners({ dayclick: this.clickDay, daymouseenter: this.enterDay }), slots: this.$slots, scopedSlots: this.$scopedSlots });
            }, components: { Calendar: s.a }, props: { value: { type: Object, default: function() {
            } }, isRequired: Boolean, dragAttribute: Object, selectAttribute: Object, disabledAttribute: Object, themeStyles: Object, attributes: Array }, data: function() {
              return { dragValue: null, showDisabledContent: false };
            }, computed: { dragAttribute_: function() {
              return this.dragValue && o()({}, this.dragAttribute, { dates: [this.dragValue] });
            }, selectAttribute_: function() {
              return this.value && o()({}, this.selectAttribute, { dates: [this.value] });
            }, attributes_: function() {
              var t3 = [].concat(i()(this.attributes || []));
              return this.dragAttribute_ ? t3.push(this.dragAttribute_) : this.selectAttribute_ && t3.push(this.selectAttribute_), this.disabledAttribute && t3.push(this.disabledAttribute), t3;
            }, themeStyles_: function() {
              return o()({}, this.themeStyles, this.showDisabledContent && this.disabledAttribute && { dayContentHover: this.disabledAttribute.contentHoverStyle });
            } }, watch: { dragValue: function(t3) {
              this.$emit("drag", Object(u.d)(t3));
            } }, created: function() {
              var t3 = this;
              document.addEventListener("keydown", function(e3) {
                t3.dragValue && 27 === e3.keyCode && (t3.dragValue = null);
              });
            }, methods: { clickDay: function(t3) {
              var e3 = t3.dateTime;
              if (this.dragValue) {
                var n3 = Object(u.d)({ start: new Date(this.dragValue.start.getTime()), end: new Date(e3) });
                this.dateIsValid(n3) && (this.dragValue = null, this.$emit("input", n3));
              } else {
                var r2 = { start: new Date(e3), end: new Date(e3) };
                this.dateIsValid(r2) && (this.dragValue = r2);
              }
            }, enterDay: function(t3) {
              var e3 = t3.dateTime;
              if (this.dragValue) {
                var n3 = { start: new Date(this.dragValue.start.getTime()), end: new Date(e3) };
                this.dateIsValid(n3) ? (this.dragValue = n3, this.showDisabledContent = false) : this.showDisabledContent = true;
              }
            }, dateIsValid: function(t3) {
              return !this.disabledAttribute || !this.disabledAttribute.intersectsDate(t3);
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(33), i = n2(8);
            e2.a = { components: { SvgIcon: r.a }, props: { attribute: Object, format: String }, computed: { date: function() {
              return this.attribute.targetDate;
            }, isDate: function() {
              return this.date.isDate;
            }, isRange: function() {
              return this.date.isRange;
            }, days: function() {
              return this.date.daySpan + 1;
            }, nights: function() {
              return this.date.daySpan;
            }, dateLabel: function() {
              return this.date && this.date.date ? this.getDateString(this.date.date) : "";
            }, startDateLabel: function() {
              return this.date && this.date.start ? this.getDateString(this.date.start) : "";
            }, endDateLabel: function() {
              return this.date && this.date.end ? this.getDateString(this.date.end) : "";
            } }, methods: { getDateString: function(t3) {
              return Object(i.a)(t3, this.format);
            } } };
          }, function(t2, e2, n2) {
            "use strict";
            Object.defineProperty(e2, "__esModule", { value: true }), n2.d(e2, "setupCalendar", function() {
              return p;
            });
            var r = n2(14), i = n2.n(r), a = n2(0), o = n2.n(a), s = n2(21), c = n2(122), u = n2(22), l = n2(129), f = n2(3);
            n2.d(e2, "Calendar", function() {
              return s.a;
            }), n2.d(e2, "DatePicker", function() {
              return c.a;
            }), n2.d(e2, "Popover", function() {
              return u.a;
            });
            var d = { Calendar: s.a, DatePicker: c.a, Popover: u.a }, p = function(t3) {
              var e3 = t3 ? t3.locale : new Intl.DateTimeFormat().resolvedOptions().locale;
              return Object(f.b)(f.a, Object(l.a)(e3), t3);
            }, h = o()({}, d, { install: function(t3, e3) {
              var n3 = p(e3);
              i()(d).forEach(function(e4) {
                return t3.component("" + n3.componentPrefix + e4, d[e4]);
              });
            } });
            e2.default = h, "undefined" != typeof window && window.Vue && window.Vue.use(h);
          }, function(t2, e2, n2) {
            n2(61), t2.exports = n2(5).Object.keys;
          }, function(t2, e2, n2) {
            var r = n2(15), i = n2(16);
            n2(65)("keys", function() {
              return function(t3) {
                return i(r(t3));
              };
            });
          }, function(t2, e2, n2) {
            var r = n2(17), i = n2(26), a = n2(63)(false), o = n2(28)("IE_PROTO");
            t2.exports = function(t3, e3) {
              var n3, s = i(t3), c = 0, u = [];
              for (n3 in s)
                n3 != o && r(s, n3) && u.push(n3);
              for (; e3.length > c; )
                r(s, n3 = e3[c++]) && (~a(u, n3) || u.push(n3));
              return u;
            };
          }, function(t2, e2, n2) {
            var r = n2(26), i = n2(36), a = n2(64);
            t2.exports = function(t3) {
              return function(e3, n3, o) {
                var s, c = r(e3), u = i(c.length), l = a(o, u);
                if (t3 && n3 != n3) {
                  for (; u > l; )
                    if ((s = c[l++]) != s)
                      return true;
                } else
                  for (; u > l; l++)
                    if ((t3 || l in c) && c[l] === n3)
                      return t3 || l || 0;
                return !t3 && -1;
              };
            };
          }, function(t2, e2, n2) {
            var r = n2(27), i = Math.max, a = Math.min;
            t2.exports = function(t3, e3) {
              return (t3 = r(t3)) < 0 ? i(t3 + e3, 0) : a(t3, e3);
            };
          }, function(t2, e2, n2) {
            var r = n2(7), i = n2(5), a = n2(20);
            t2.exports = function(t3, e3) {
              var n3 = (i.Object || {})[t3] || Object[t3], o = {};
              o[t3] = e3(n3), r(r.S + r.F * a(function() {
                n3(1);
              }), "Object", o);
            };
          }, function(t2, e2) {
            t2.exports = function(t3) {
              if ("function" != typeof t3)
                throw TypeError(t3 + " is not a function!");
              return t3;
            };
          }, function(t2, e2, n2) {
            t2.exports = !n2(11) && !n2(20)(function() {
              return 7 != Object.defineProperty(n2(41)("div"), "a", { get: function() {
                return 7;
              } }).a;
            });
          }, function(t2, e2, n2) {
            var r = n2(29);
            t2.exports = function(t3, e3) {
              if (!r(t3))
                return t3;
              var n3, i;
              if (e3 && "function" == typeof (n3 = t3.toString) && !r(i = n3.call(t3)))
                return i;
              if ("function" == typeof (n3 = t3.valueOf) && !r(i = n3.call(t3)))
                return i;
              if (!e3 && "function" == typeof (n3 = t3.toString) && !r(i = n3.call(t3)))
                return i;
              throw TypeError("Can't convert object to primitive value");
            };
          }, function(t2, e2, n2) {
            n2(70), t2.exports = n2(5).Object.assign;
          }, function(t2, e2, n2) {
            var r = n2(7);
            r(r.S + r.F, "Object", { assign: n2(71) });
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(16), i = n2(72), a = n2(42), o = n2(15), s = n2(34), c = Object.assign;
            t2.exports = !c || n2(20)(function() {
              var t3 = {}, e3 = {}, n3 = Symbol(), r2 = "abcdefghijklmnopqrst";
              return t3[n3] = 7, r2.split("").forEach(function(t4) {
                e3[t4] = t4;
              }), 7 != c({}, t3)[n3] || Object.keys(c({}, e3)).join("") != r2;
            }) ? function(t3, e3) {
              for (var n3 = o(t3), c2 = arguments.length, u = 1, l = i.f, f = a.f; c2 > u; )
                for (var d, p = s(arguments[u++]), h = l ? r(p).concat(l(p)) : r(p), v = h.length, m = 0; v > m; )
                  f.call(p, d = h[m++]) && (n3[d] = p[d]);
              return n3;
            } : c;
          }, function(t2, e2) {
            e2.f = Object.getOwnPropertySymbols;
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            t2.exports = { default: n2(75), __esModule: true };
          }, function(t2, e2, n2) {
            n2(76), n2(86), t2.exports = n2(5).Array.from;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(77)(true);
            n2(78)(String, "String", function(t3) {
              this._t = String(t3), this._i = 0;
            }, function() {
              var t3, e3 = this._t, n3 = this._i;
              return n3 >= e3.length ? { value: void 0, done: true } : (t3 = r(e3, n3), this._i += t3.length, { value: t3, done: false });
            });
          }, function(t2, e2, n2) {
            var r = n2(27), i = n2(25);
            t2.exports = function(t3) {
              return function(e3, n3) {
                var a, o, s = String(i(e3)), c = r(n3), u = s.length;
                return c < 0 || c >= u ? t3 ? "" : void 0 : (a = s.charCodeAt(c)) < 55296 || a > 56319 || c + 1 === u || (o = s.charCodeAt(c + 1)) < 56320 || o > 57343 ? t3 ? s.charAt(c) : a : t3 ? s.slice(c, c + 2) : o - 56320 + (a - 55296 << 10) + 65536;
              };
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(79), i = n2(7), a = n2(80), o = n2(18), s = n2(17), c = n2(32), u = n2(81), l = n2(44), f = n2(85), d = n2(6)("iterator"), p = !([].keys && "next" in [].keys()), h = function() {
              return this;
            };
            t2.exports = function(t3, e3, n3, v, m, g, y) {
              u(n3, e3, v);
              var b, _2, x, w = function(t4) {
                if (!p && t4 in k)
                  return k[t4];
                switch (t4) {
                  case "keys":
                  case "values":
                    return function() {
                      return new n3(this, t4);
                    };
                }
                return function() {
                  return new n3(this, t4);
                };
              }, C = e3 + " Iterator", S = "values" == m, O = false, k = t3.prototype, M = k[d] || k["@@iterator"] || m && k[m], D = !p && M || w(m), j = m ? S ? w("entries") : D : void 0, L2 = "Array" == e3 && k.entries || M;
              if (L2 && (x = f(L2.call(new t3()))) !== Object.prototype && x.next && (l(x, C, true), r || s(x, d) || o(x, d, h)), S && M && "values" !== M.name && (O = true, D = function() {
                return M.call(this);
              }), r && !y || !p && !O && k[d] || o(k, d, D), c[e3] = D, c[C] = h, m)
                if (b = { values: S ? D : w("values"), keys: g ? D : w("keys"), entries: j }, y)
                  for (_2 in b)
                    _2 in k || a(k, _2, b[_2]);
                else
                  i(i.P + i.F * (p || O), e3, b);
              return b;
            };
          }, function(t2, e2) {
            t2.exports = true;
          }, function(t2, e2, n2) {
            t2.exports = n2(18);
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(82), i = n2(30), a = n2(44), o = {};
            n2(18)(o, n2(6)("iterator"), function() {
              return this;
            }), t2.exports = function(t3, e3, n3) {
              t3.prototype = r(o, { next: i(1, n3) }), a(t3, e3 + " Iterator");
            };
          }, function(t2, e2, n2) {
            var r = n2(19), i = n2(83), a = n2(39), o = n2(28)("IE_PROTO"), s = function() {
            }, c = function() {
              var t3, e3 = n2(41)("iframe"), r2 = a.length;
              for (e3.style.display = "none", n2(84).appendChild(e3), e3.src = "javascript:", (t3 = e3.contentWindow.document).open(), t3.write("<script>document.F=Object<\/script>"), t3.close(), c = t3.F; r2--; )
                delete c.prototype[a[r2]];
              return c();
            };
            t2.exports = Object.create || function(t3, e3) {
              var n3;
              return null !== t3 ? (s.prototype = r(t3), n3 = new s(), s.prototype = null, n3[o] = t3) : n3 = c(), void 0 === e3 ? n3 : i(n3, e3);
            };
          }, function(t2, e2, n2) {
            var r = n2(10), i = n2(19), a = n2(16);
            t2.exports = n2(11) ? Object.defineProperties : function(t3, e3) {
              i(t3);
              for (var n3, o = a(e3), s = o.length, c = 0; s > c; )
                r.f(t3, n3 = o[c++], e3[n3]);
              return t3;
            };
          }, function(t2, e2, n2) {
            var r = n2(9).document;
            t2.exports = r && r.documentElement;
          }, function(t2, e2, n2) {
            var r = n2(17), i = n2(15), a = n2(28)("IE_PROTO"), o = Object.prototype;
            t2.exports = Object.getPrototypeOf || function(t3) {
              return t3 = i(t3), r(t3, a) ? t3[a] : "function" == typeof t3.constructor && t3 instanceof t3.constructor ? t3.constructor.prototype : t3 instanceof Object ? o : null;
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(40), i = n2(7), a = n2(15), o = n2(87), s = n2(88), c = n2(36), u = n2(89), l = n2(90);
            i(i.S + i.F * !n2(92)(function(t3) {
              Array.from(t3);
            }), "Array", { from: function(t3) {
              var e3, n3, i2, f, d = a(t3), p = "function" == typeof this ? this : Array, h = arguments.length, v = h > 1 ? arguments[1] : void 0, m = void 0 !== v, g = 0, y = l(d);
              if (m && (v = r(v, h > 2 ? arguments[2] : void 0, 2)), null == y || p == Array && s(y))
                for (n3 = new p(e3 = c(d.length)); e3 > g; g++)
                  u(n3, g, m ? v(d[g], g) : d[g]);
              else
                for (f = y.call(d), n3 = new p(); !(i2 = f.next()).done; g++)
                  u(n3, g, m ? o(f, v, [i2.value, g], true) : i2.value);
              return n3.length = g, n3;
            } });
          }, function(t2, e2, n2) {
            var r = n2(19);
            t2.exports = function(t3, e3, n3, i) {
              try {
                return i ? e3(r(n3)[0], n3[1]) : e3(n3);
              } catch (e4) {
                var a = t3.return;
                throw void 0 !== a && r(a.call(t3)), e4;
              }
            };
          }, function(t2, e2, n2) {
            var r = n2(32), i = n2(6)("iterator"), a = Array.prototype;
            t2.exports = function(t3) {
              return void 0 !== t3 && (r.Array === t3 || a[i] === t3);
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(10), i = n2(30);
            t2.exports = function(t3, e3, n3) {
              e3 in t3 ? r.f(t3, e3, i(0, n3)) : t3[e3] = n3;
            };
          }, function(t2, e2, n2) {
            var r = n2(91), i = n2(6)("iterator"), a = n2(32);
            t2.exports = n2(5).getIteratorMethod = function(t3) {
              if (null != t3)
                return t3[i] || t3["@@iterator"] || a[r(t3)];
            };
          }, function(t2, e2, n2) {
            var r = n2(35), i = n2(6)("toStringTag"), a = "Arguments" == r(function() {
              return arguments;
            }());
            t2.exports = function(t3) {
              var e3, n3, o;
              return void 0 === t3 ? "Undefined" : null === t3 ? "Null" : "string" == typeof (n3 = function(t4, e4) {
                try {
                  return t4[e4];
                } catch (t5) {
                }
              }(e3 = Object(t3), i)) ? n3 : a ? r(e3) : "Object" == (o = r(e3)) && "function" == typeof e3.callee ? "Arguments" : o;
            };
          }, function(t2, e2, n2) {
            var r = n2(6)("iterator"), i = false;
            try {
              var a = [7][r]();
              a.return = function() {
                i = true;
              }, Array.from(a, function() {
                throw 2;
              });
            } catch (t3) {
            }
            t2.exports = function(t3, e3) {
              if (!e3 && !i)
                return false;
              var n3 = false;
              try {
                var a2 = [7], o = a2[r]();
                o.next = function() {
                  return { done: n3 = true };
                }, a2[r] = function() {
                  return o;
                }, t3(a2);
              } catch (t4) {
              }
              return n3;
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(45), i = n2(120), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(94);
            }, "data-v-2083cb72", null);
            e2.a = a.exports;
          }, function(t2, e2) {
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            "use strict";
            e2.__esModule = true;
            var r, i = (r = n2(97)) && r.__esModule ? r : { default: r };
            e2.default = function(t3, e3, n3) {
              return e3 in t3 ? (0, i.default)(t3, e3, { value: n3, enumerable: true, configurable: true, writable: true }) : t3[e3] = n3, t3;
            };
          }, function(t2, e2, n2) {
            t2.exports = { default: n2(98), __esModule: true };
          }, function(t2, e2, n2) {
            n2(99);
            var r = n2(5).Object;
            t2.exports = function(t3, e3, n3) {
              return r.defineProperty(t3, e3, n3);
            };
          }, function(t2, e2, n2) {
            var r = n2(7);
            r(r.S + r.F * !n2(11), "Object", { defineProperty: n2(10).f });
          }, function(t2, e2, n2) {
            "use strict";
            n2.d(e2, "a", function() {
              return a;
            });
            var r = n2(3), i = n2(4), a = function(t3, e3) {
              if (!t3 || !t3.addEventListener || !Object(i.c)(e3))
                return null;
              var n3 = { touchState: null }, a2 = function(t4) {
                var e4 = t4.targetTouches[0];
                n3.touchState = { started: true, startedOn: new Date(), startX: e4.screenX, startY: e4.screenY, x: e4.screenX, y: e4.screenY };
              }, o = function(t4) {
                var i2 = n3.touchState;
                if (i2 && i2.started) {
                  var a3 = t4.changedTouches[0];
                  i2.x = a3.screenX, i2.y = a3.screenY, i2.tapDetected = new Date() - i2.startedOn <= r.a.maxTapDuration && Math.abs(i2.x - i2.startX) <= r.a.maxTapTolerance && Math.abs(i2.y - i2.startY) <= r.a.maxTapTolerance, i2.tapDetected && e3(t4), i2.started = false;
                }
              }, s = function(t4) {
                var r2 = n3.touchState;
                r2 && r2.tapDetected || e3(t4);
              };
              return t3.addEventListener("touchstart", a2), t3.addEventListener("touchend", o), t3.addEventListener("click", s), n3.cleanup = function() {
                t3.removeEventListener("touchstart", a2), t3.removeEventListener("touchend", o), t3.removeEventListener("click", s);
              }, n3;
            };
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = { render: function() {
              var t3 = this, e3 = t3.$createElement, n3 = t3._self._c || e3;
              return n3("div", { ref: "popover", class: ["popover-container", { expanded: t3.isExpanded }], style: t3.containerStyle, attrs: { tabindex: "focus" === t3.visibility ? -1 : void 0 }, on: { focusin: t3.focusin, focusout: t3.focusout, mouseleave: t3.mouseleave, mousemove: t3.mousemove, click: function(e4) {
                e4.stopPropagation(), t3.click(e4);
              } } }, [n3("transition", { attrs: { tag: "div", name: t3.transition }, on: { enter: t3.contentEnter, "before-enter": t3.beforeContentEnter, "after-enter": t3.afterContentEnter, leave: t3.contentLeave, "before-leave": t3.beforeContentLeave, "after-leave": t3.afterContentLeave } }, [t3.visible ? n3("div", { ref: "popoverOrigin", class: ["popover-origin", "direction-" + t3.direction, "align-" + t3.align] }, [n3("div", { ref: "popoverContentWrapper", class: ["popover-content-wrapper", "direction-" + t3.direction, "align-" + t3.align, { interactive: t3.isInteractive }], style: t3.contentWrapperStyle }, [n3("div", { ref: "popoverContent", class: ["popover-content", "direction-" + t3.direction, "align-" + t3.align], style: t3.contentStyle }, [t3._t("popover-content", [n3("div", [t3._v("Popover content goes here")])])], 2)])]) : t3._e()]), t3._v(" "), t3._t("default", [n3("span", [t3._v("Popover trigger goes here")])])], 2);
            }, staticRenderFns: [] };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(48), i = n2(110), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(103);
            }, "data-v-28896542", null);
            e2.a = a.exports;
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(49), i = n2(109), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(105);
            }, "data-v-3db80f80", null);
            e2.a = a.exports;
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(50), i = n2(108), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(107);
            }, "data-v-54b1f93b", null);
            e2.a = a.exports;
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = { render: function() {
              var t3 = this, e3 = t3.$createElement, n3 = t3._self._c || e3;
              return n3("div", { class: ["c-day-popover-row", { selectable: t3.isSelectable }], on: { click: function(e4) {
                t3.$emit("select");
              } } }, [!t3.hideIndicator && t3.indicatorStyle ? n3("div", { staticClass: "c-day-popover-indicator" }, [n3("span", { style: t3.indicatorStyle })]) : t3._e(), t3._v(" "), n3("div", { staticClass: "c-day-popover-content" }, [t3._t("default", [t3._v("\n      This is the default content slot.\n    ")])], 2)]);
            }, staticRenderFns: [] };
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = { render: function() {
              var t3 = this, e3 = t3.$createElement, n3 = t3._self._c || e3;
              return n3("popover", { staticClass: "c-day-popover", attrs: { align: "center", transition: "fade", "content-offset": t3.popoverContentOffset, visibility: t3.popoverVisibility, "content-style": t3.popoverContentStyle, "is-interactive": t3.popoverIsInteractive, "toggle-visible-on-click": "" }, on: { "got-focus": function(e4) {
                t3.isFocused = true;
              }, "lost-focus": function(e4) {
                t3.isFocused = false;
              } } }, [n3("div", { staticClass: "c-day", style: t3.dayCellStyle }, [n3("transition-group", { staticClass: "c-day-backgrounds c-day-layer", attrs: { name: "background", tag: "div" } }, t3._l(t3.backgrounds, function(t4) {
                return n3("div", { key: t4.key, class: t4.wrapperClass }, [n3("div", { staticClass: "c-day-background", style: t4.style })]);
              })), t3._v(" "), n3("div", { staticClass: "c-day-content-wrapper", on: { click: t3.click, mouseenter: t3.mouseenter, mouseover: t3.mouseover, mouseleave: t3.mouseleave } }, [t3._t("day-content", [n3("div", { staticClass: "c-day-content", style: t3.contentStyle }, [n3("div", [t3._v("\n            " + t3._s(t3.day.label) + "\n          ")])])], { day: t3.day, contentStyle: t3.contentStyle, attributes: t3.attributesList })], 2), t3._v(" "), t3.hasDots ? n3("div", { staticClass: "c-day-layer c-day-box-center-bottom" }, [n3("div", { staticClass: "c-day-dots", style: t3.dotsStyle }, t3._l(t3.dots, function(t4) {
                return n3("span", { key: t4.key, staticClass: "c-day-dot", style: t4.style });
              }))]) : t3._e(), t3._v(" "), t3.hasBars ? n3("div", { staticClass: "c-day-layer c-day-box-center-bottom" }, [n3("div", { staticClass: "c-day-bars", style: t3.barsStyle }, t3._l(t3.bars, function(t4) {
                return n3("span", { key: t4.key, staticClass: "c-day-bar", style: t4.style });
              }))]) : t3._e()], 1), t3._v(" "), n3("div", { staticClass: "c-day-popover-content", attrs: { slot: "popover-content" }, slot: "popover-content" }, [t3._t("day-popover-header", null, { day: t3.day, attributes: t3.attributesList }), t3._v(" "), t3._l(t3.popovers, function(e4) {
                return n3("calendar-day-popover-row", { key: e4.key, attrs: { attribute: e4.attribute, "hide-indicator": e4.hideIndicator } }, [t3._t(e4.slot, [e4.label ? n3("span", { key: e4.key, staticClass: "popover-label", style: e4.labelStyle }, [t3._v("\n          " + t3._s(e4.label) + "\n        ")]) : t3._e(), t3._v(" "), e4.component ? n3(e4.component, { tag: "component", attrs: { attribute: e4.attribute, format: t3.formats.dayPopover, day: t3.day } }) : t3._e()], { attribute: e4.attribute, customData: e4.attribute.customData, day: t3.day })], 2);
              }), t3._v(" "), t3._t("day-popover-footer", null, { day: t3.day, attributes: t3.attributesList })], 2)]);
            }, staticRenderFns: [] };
          }, function(t2, e2, n2) {
            "use strict";
            var r = { render: function() {
              var t3 = this, e3 = t3.$createElement, n3 = t3._self._c || e3;
              return n3("div", t3._l(t3.weeks, function(e4, r2) {
                return n3("div", { key: r2 + 1, staticClass: "c-week", on: { "&touchstart": function(e5) {
                  t3.$emit("touchstart", e5);
                }, "&touchmove": function(e5) {
                  t3.$emit("touchmove", e5);
                }, "&touchend": function(e5) {
                  t3.$emit("touchend", e5);
                } } }, t3._l(e4, function(e5) {
                  return n3("calendar-day", t3._g(t3._b({ key: e5.id, attrs: { day: e5 }, scopedSlots: t3._u([t3._l(Object.keys(t3.$scopedSlots), function(e6) {
                    return { key: e6, fn: function(n4) {
                      return [t3._t(e6, null, null, n4)];
                    } };
                  })]) }, "calendar-day", t3.$attrs, false), t3.$listeners));
                }));
              }));
            }, staticRenderFns: [] };
            e2.a = r;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(51), i = n2(119), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(112);
            }, "data-v-81948efe", null);
            e2.a = a.exports;
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            t2.exports = { default: n2(114), __esModule: true };
          }, function(t2, e2, n2) {
            n2(115), t2.exports = n2(5).Object.values;
          }, function(t2, e2, n2) {
            var r = n2(7), i = n2(116)(false);
            r(r.S, "Object", { values: function(t3) {
              return i(t3);
            } });
          }, function(t2, e2, n2) {
            var r = n2(16), i = n2(26), a = n2(42).f;
            t2.exports = function(t3) {
              return function(e3) {
                for (var n3, o = i(e3), s = r(o), c = s.length, u = 0, l = []; c > u; )
                  a.call(o, n3 = s[u++]) && l.push(t3 ? [n3, o[n3]] : o[n3]);
                return l;
              };
            };
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = { render: function() {
              var t3 = this, e3 = t3.$createElement, n3 = t3._self._c || e3;
              return n3("svg", { staticClass: "svg-icon", attrs: { width: t3.width, height: t3.height, viewBox: t3.viewBox }, on: { click: function(e4) {
                t3.$emit("click", e4);
              } } }, [n3("path", { attrs: { d: t3.path } })]);
            }, staticRenderFns: [] };
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = { render: function() {
              var t3 = this, e3 = t3.$createElement, n3 = t3._self._c || e3;
              return n3("div", { staticClass: "c-nav" }, ["month" === t3.mode_ ? n3("div", [n3("div", { staticClass: "c-header", style: t3.headerStyle }, [n3("div", { staticClass: "c-arrow-layout" }, [t3._t("nav-left-button", [n3("svg-icon", { staticClass: "c-arrow", style: t3.headerArrowsStyle, attrs: { name: "leftArrow" }, on: { click: t3.movePrevYear } })], { monthItems: [].concat(t3.monthItems), move: t3.movePrevYear })], 2), t3._v(" "), n3("span", { staticClass: "c-title", style: t3.headerTitleStyle, on: { click: function(e4) {
                t3.selectMode("year");
              } } }, [t3._v("\n        " + t3._s(t3.yearIndex) + "\n      ")]), t3._v(" "), n3("div", { staticClass: "c-arrow-layout" }, [t3._t("nav-right-button", [n3("svg-icon", { staticClass: "c-arrow", style: t3.headerArrowsStyle, attrs: { name: "rightArrow" }, on: { click: t3.moveNextYear } })], { monthItems: [].concat(t3.monthItems), move: t3.moveNextYear })], 2)]), t3._v(" "), n3("table", { staticClass: "c-table" }, t3._l(t3.monthRows, function(e4, r) {
                return n3("tr", { key: r }, t3._l(e4, function(e5) {
                  return n3("td", { key: e5.month }, [n3("div", { staticClass: "c-table-cell", class: { "c-active": e5.isActive, "c-disabled": e5.isDisabled }, style: t3.getMonthCellStyle(e5), on: { click: function(n4) {
                    t3.monthClick(e5.month);
                  } } }, [t3._v("\n            " + t3._s(e5.label) + "\n            "), t3._v(" "), n3("transition", { attrs: { name: "indicators" } }, [e5.attributes ? n3("div", { staticClass: "c-indicators" }, t3._l(e5.attributes, function(t4) {
                    return n3("span", { key: t4.key, staticClass: "c-indicator", style: t4.style });
                  })) : t3._e()])], 1)]);
                }));
              }))]) : t3._e(), t3._v(" "), "year" === t3.mode_ ? n3("div", [n3("div", { staticClass: "c-header", style: t3.headerStyle }, [n3("div", { staticClass: "c-arrow-layout" }, [t3._t("nav-left-button", [n3("svg-icon", { staticClass: "c-arrow", style: t3.headerArrowsStyle, attrs: { name: "leftArrow" }, on: { click: t3.movePrevYearGroup } })], { firstYear: t3.firstYear, lastYear: t3.lastYear, yearItems: [].concat(t3.yearItems), move: t3.movePrevYearGroup })], 2), t3._v(" "), n3("span", { staticClass: "c-title", style: t3.headerTitleStyle, on: { click: function(e4) {
                t3.selectMode("month");
              } } }, [t3._v("\n        " + t3._s(t3.firstYear) + " - " + t3._s(t3.lastYear) + "\n      ")]), t3._v(" "), n3("div", { staticClass: "c-arrow-layout" }, [t3._t("nav-right-button", [n3("svg-icon", { staticClass: "c-arrow", style: t3.headerArrowsStyle, attrs: { name: "rightArrow" }, on: { click: t3.moveNextYearGroup } })], { firstYear: t3.firstYear, lastYear: t3.lastYear, yearItems: [].concat(t3.yearItems), move: t3.moveNextYearGroup })], 2)]), t3._v(" "), n3("table", { staticClass: "c-table" }, t3._l(t3.yearRows, function(e4, r) {
                return n3("tr", { key: r }, t3._l(e4, function(e5) {
                  return n3("td", { key: e5.year }, [n3("div", { staticClass: "c-table-cell", class: { "c-active": e5.isActive, "c-disabled": e5.isDisabled }, style: t3.getYearCellStyle(e5), on: { click: function(n4) {
                    t3.yearClick(e5.year);
                  } } }, [t3._v("\n            " + t3._s(e5.year) + "\n          ")])]);
                }));
              }))]) : t3._e()]);
            }, staticRenderFns: [] };
          }, function(t2, e2, n2) {
            "use strict";
            var r = { render: function() {
              var t3 = this, e3 = t3.$createElement, n3 = t3._self._c || e3;
              return n3("div", { ref: "pane", staticClass: "c-pane", style: t3.paneStyle }, [t3._t("header", [n3("div", { staticClass: "c-header", style: t3.headerStyle }, [n3("div", { staticClass: "c-arrow-layout" }, [t3.hideLeftButton ? t3._e() : t3._t("header-left-button", [n3("svg-icon", { class: ["c-arrow", { "c-disabled": !t3.canMovePrevMonth }], style: t3.arrowStyle, attrs: { name: "leftArrow" }, on: { click: t3.movePrevMonth } })], null, t3.page_)], 2), t3._v(" "), n3("div", { class: ["c-title-layout", t3.titleClass] }, [n3("popover", { staticClass: "c-title-popover", attrs: { direction: "bottom", align: t3.titlePosition, visibility: t3.navVisibility, "content-style": t3.navWrapperStyle, "force-hidden": t3.navForceHidden, "toggle-visible-on-click": "", "is-interactive": "" }, on: { "update:forceHidden": function(e4) {
                t3.navForceHidden = e4;
              } } }, [n3("transition-group", { staticClass: "c-title-anchor", attrs: { tag: "div", name: t3.titleTransition_ } }, t3._l(t3.pages, function(e4) {
                return e4 === t3.page_ ? n3("div", { key: e4.key, staticClass: "c-title", style: t3.titleStyle }, [t3._t("header-title", [t3._v("\n                " + t3._s(e4.title) + "\n              ")], null, e4)], 2) : t3._e();
              })), t3._v(" "), n3("calendar-nav", { attrs: { slot: "popover-content", value: t3.page_, validator: t3.canMove, styles: t3.styles, formats: t3.formats }, on: { input: function(e4) {
                t3.navPageSelected(e4);
              } }, slot: "popover-content", scopedSlots: t3._u([t3._l(t3.navSlots, function(e4) {
                return { key: e4, fn: function(n4) {
                  return [t3._t(e4, null, null, n4)];
                } };
              })]) })], 1)], 1), t3._v(" "), n3("div", { staticClass: "c-arrow-layout" }, [t3.hideRightButton ? t3._e() : t3._t("header-right-button", [n3("svg-icon", { class: ["c-arrow", { "c-disabled": !t3.canMoveNextMonth }], style: t3.arrowStyle, attrs: { name: "rightArrow" }, on: { click: t3.moveNextMonth } })], null, t3.page_)], 2)])], null, t3.page_), t3._v(" "), t3.headerHorizontalDividerStyle_ ? n3("div", { staticClass: "c-horizontal-divider", style: t3.headerHorizontalDividerStyle_ }) : t3._e(), t3._v(" "), n3("div", { staticClass: "c-weekdays", style: t3.weekdaysStyle_ }, t3._l(t3.weekdayLabels, function(e4, r2) {
                return n3("div", { key: r2 + 1, staticClass: "c-weekday" }, [t3._v("\n      " + t3._s(e4) + "\n    ")]);
              })), t3._v(" "), t3.weekdaysHorizontalDividerStyle_ ? n3("div", { staticClass: "c-horizontal-divider", style: t3.weekdaysHorizontalDividerStyle_ }) : t3._e(), t3._v(" "), n3("div", { staticClass: "c-weeks", style: t3.weeksStyle_ }, [n3("transition-group", { staticClass: "c-weeks-rows-wrapper", attrs: { tag: "div", name: t3.weeksTransition_ }, on: { "before-enter": function(e4) {
                t3.weeksTransitioning = true;
              }, "after-enter": function(e4) {
                t3.weeksTransitioning = false;
              } } }, t3._l(t3.pages, function(e4) {
                return e4 === t3.page_ ? n3("calendar-weeks", t3._g(t3._b({ key: e4.key, staticClass: "c-weeks-rows", attrs: { "month-comps": e4.monthComps, "prev-month-comps": e4.prevMonthComps, "next-month-comps": e4.nextMonthComps, styles: t3.styles, formats: t3.formats }, on: { "&touchstart": function(e5) {
                  t3.touchStart(e5);
                }, "&touchmove": function(e5) {
                  t3.touchMove(e5);
                }, "&touchend": function(e5) {
                  t3.touchEnd(e5);
                } }, scopedSlots: t3._u([t3._l(Object.keys(t3.$scopedSlots), function(e5) {
                  return { key: e5, fn: function(n4) {
                    return [t3._t(e5, null, null, n4)];
                  } };
                })]) }, "calendar-weeks", t3.$attrs, false), t3.$listeners)) : t3._e();
              }))], 1)], 2);
            }, staticRenderFns: [] };
            e2.a = r;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(0), i = n2.n(r), a = n2(53), o = n2(2);
            e2.a = function(t3) {
              var e3 = Object(o.a)(t3) && t3.filter(function(t4) {
                return t4 && t4.dates;
              }).map(function(t4, e4) {
                return Object(a.a)(i()({ key: t4.key || e4.toString(), order: t4.order || 0 }, t4));
              }) || [];
              return { length: e3.length, find: function(t4) {
                return e3.map(function(e4) {
                  return i()({}, e4, { targetDate: e4.includesDay(t4) });
                }).filter(function(t5) {
                  return t5.targetDate;
                }).sort(function(t5, e4) {
                  return t5.targetDate.compare(e4.targetDate);
                });
              } };
            };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(54), i = n2(1)(r.a, null, false, null, null, null);
            e2.a = i.exports;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(55), i = n2(1)(r.a, null, false, null, null, null);
            e2.a = i.exports;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(56), i = n2(1)(r.a, null, false, null, null, null);
            e2.a = i.exports;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(57), i = n2(1)(r.a, null, false, null, null, null);
            e2.a = i.exports;
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(58), i = n2(128), a = n2(1)(r.a, i.a, false, function(t3) {
              n2(127);
            }, "data-v-6c331e62", null);
            e2.a = a.exports;
          }, function(t2, e2) {
          }, function(t2, e2, n2) {
            "use strict";
            e2.a = { render: function() {
              var t3 = this.$createElement, e3 = this._self._c || t3;
              return e3("div", [e3("div", { staticClass: "date-label" }, [this.dateLabel ? e3("div", [this._v("\n      " + this._s(this.dateLabel) + "\n    ")]) : this._e(), this._v(" "), this.startDateLabel ? e3("div", [this._v("\n      " + this._s(this.startDateLabel) + "\n    ")]) : this._e(), this._v(" "), this.endDateLabel ? e3("div", [this._v("\n      " + this._s(this.endDateLabel) + "\n    ")]) : this._e()]), this._v(" "), this.isRange ? e3("div", { staticClass: "days-nights" }, [e3("span", { staticClass: "days" }, [e3("svg-icon", { staticClass: "vc-sun-o", attrs: { name: "sun" } }), this._v("\n      " + this._s(this.days) + "\n    ")], 1), this._v(" "), e3("span", { staticClass: "nights" }, [e3("svg-icon", { staticClass: "vc-moon-o", attrs: { name: "moon" } }), this._v("\n      " + this._s(this.nights) + "\n    ")], 1)]) : this._e()]);
            }, staticRenderFns: [] };
          }, function(t2, e2, n2) {
            "use strict";
            var r = n2(0), i = n2.n(r), a = n2(2), o = { ar: { dow: 7, L: "D/\u200FM/\u200FYYYY" }, bg: { dow: 2, L: "D.MM.YYYY" }, ca: { dow: 2, L: "DD/MM/YYYY" }, "zh-CN": { dow: 2, L: "YYYY/MM/DD" }, "zh-TW": { L: "YYYY/MM/DD" }, hr: { dow: 2, L: "DD.MM.YYYY" }, cs: { dow: 2, L: "DD.MM.YYYY" }, da: { dow: 2, L: "DD.MM.YYYY" }, nl: { dow: 2, L: "DD.MM.YYYY" }, "en-US": { L: "MM/DD/YYYY" }, "en-AU": { dow: 2, L: "DD/MM/YYYY" }, "en-CA": { L: "YYYY-MM-DD" }, "en-GB": { dow: 2, L: "DD/MM/YYYY" }, "en-IE": { dow: 2, L: "DD-MM-YYYY" }, "en-NZ": { dow: 2, L: "DD/MM/YYYY" }, eo: { dow: 2, L: "YYYY-MM-DD" }, fi: { dow: 2, L: "Do MMMM[ta] YYYY" }, fr: { dow: 2, L: "DD/MM/YYYY" }, "fr-CA": { L: "YYYY-MM-DD" }, "fr-CH": { dow: 2, L: "DD.MM.YYYY" }, de: { dow: 2, L: "DD.MM.YYYY" }, id: { dow: 2, L: "DD/MM/YYYY" }, it: { dow: 2, L: "DD/MM/YYYY" }, ja: { L: "YYYY\u5E74M\u6708D\u65E5" }, ko: { L: "YYYY.MM.DD" }, mk: { dow: 2, L: "D.MM.YYYY" }, pl: { dow: 2, L: "DD.MM.YYYY" }, pt: { dow: 2, L: "DD/MM/YYYY" }, ro: { dow: 2, L: "DD.MM.YYYY" }, ru: { dow: 2, L: "DD.MM.YYYY" }, sk: { dow: 2, L: "DD.MM.YYYY" }, es: { dow: 1, L: "DD/MM/YYYY" }, sv: { dow: 2, L: "YYYY-MM-DD" }, th: { L: "DD/MM/YYYY" }, tr: { dow: 2, L: "DD.MM.YYYY" }, uk: { dow: 2, L: "DD.MM.YYYY" } };
            o.en = o["en-US"], o.zh = o["zh-CN"];
            var s = function(t3, e3) {
              var n3 = new Intl.DateTimeFormat(t3, { month: e3, timezome: "UTC" });
              return Object(a.j)().map(function(t4) {
                return n3.format(t4);
              });
            }, c = function(t3, e3) {
              var n3 = new Intl.DateTimeFormat(t3, { weekday: e3, timeZone: "UTC" });
              return Object(a.q)({ utc: true }).map(function(t4) {
                return n3.format(t4);
              });
            }, u = function(t3) {
              return "" + t3 + ([null, "st", "nd", "rd"][t3 % 100 >> 3 ^ 1 && t3 % 10] || "th");
            };
            e2.a = function(t3) {
              var e3 = new Intl.DateTimeFormat().resolvedOptions().locale, n3 = [t3, t3 && t3.substring(0, 2), e3].find(function(t4) {
                return o[t4];
              }) || t3 || e3, r2 = i()({ dow: 1, L: "DD/MM/YYYY" }, o[n3]), a2 = c(n3, "long"), l = c(n3, "short"), f = l.map(function(t4) {
                return t4.substring(0, 2);
              }), d = c(n3, "narrow"), p = s(n3, "long"), h = s(n3, "short");
              return { locale: n3, firstDayOfWeek: r2.dow, masks: { L: r2.L }, dayNames: a2, dayNamesShort: l, dayNamesShorter: f, dayNamesNarrow: d, monthNames: p, monthNamesShort: h, DoFn: u };
            };
          }]);
        }, "30R6": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconScales", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("daU6"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("g", [n2("g", [n2("path", { attrs: { d: "M11.5,22c-0.3,0-0.5-0.2-0.5-0.5V6.4c0-0.3,0.2-0.5,0.5-0.5S12,6.2,12,6.4v15.1C12,21.8,11.8,22,11.5,22z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M14.4,22H8.6c-0.3,0-0.5-0.2-0.5-0.5S8.3,21,8.6,21h5.8c0.3,0,0.5,0.2,0.5,0.5S14.7,22,14.4,22z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M11.5,6.9c-1.1,0-2-0.9-2-2s0.9-2,2-2s2,0.9,2,2S12.6,6.9,11.5,6.9z M11.5,4c-0.5,0-1,0.4-1,1s0.4,1,1,1s1-0.4,1-1\n      S12,4,11.5,4z" } })]), t2._v(" "), n2("g", [n2("g", [n2("path", { attrs: { d: "M7.5,13c-0.2,0-0.4-0.1-0.5-0.3L4,5.7l-3,6.9C0.8,13,0.6,13.1,0.3,13C0,12.8-0.1,12.6,0,12.3l3.5-8C3.6,4.1,3.8,4,4,4\n        c0,0,0,0,0,0c0.2,0,0.4,0.1,0.5,0.3l3.5,8c0.1,0.3,0,0.5-0.3,0.7C7.6,13,7.6,13,7.5,13z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M10.1,5H2.5C2.2,5,2,4.8,2,4.5S2.2,4,2.5,4h7.6c0.3,0,0.5,0.2,0.5,0.5S10.4,5,10.1,5z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M4,16.5c-2.2,0-4-1.8-4-4C0,12.2,0.2,12,0.5,12h7C7.8,12,8,12.2,8,12.5C8,14.7,6.2,16.5,4,16.5z M1,13\n        c0.2,1.4,1.5,2.5,3,2.5s2.7-1.1,3-2.5H1z" } })])]), t2._v(" "), n2("g", [n2("g", [n2("path", { attrs: { d: "M15.5,13c-0.1,0-0.1,0-0.2,0c-0.3-0.1-0.4-0.4-0.3-0.7l3.5-8C18.6,4.1,18.8,4,19,4l0,0c0.2,0,0.4,0.1,0.5,0.3l3.5,8\n        c0.1,0.3,0,0.5-0.3,0.7c-0.3,0.1-0.5,0-0.7-0.3l-3-6.9l-3,6.9C15.9,12.9,15.7,13,15.5,13z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M20.5,5h-7.6c-0.3,0-0.5-0.2-0.5-0.5S12.6,4,12.9,4h7.6C20.8,4,21,4.2,21,4.5S20.8,5,20.5,5z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M19,16.5c-2.2,0-4-1.8-4-4c0-0.3,0.2-0.5,0.5-0.5h7c0.3,0,0.5,0.2,0.5,0.5C23,14.7,21.2,16.5,19,16.5z M16,13\n        c0.2,1.4,1.5,2.5,3,2.5s2.7-1.1,3-2.5H16z" } })])])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "30j6": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconAlert", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("Nhqd"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M11.3,24C5.1,24,0.1,19.1,0,12.7c-0.1-3.1,1.1-6,3.3-8.2C5.5,2.3,8.4,1.1,11.5,1c3.1,0,5.9,1.1,8.1,3.2\n      c2.1,2.1,3.4,5,3.4,8.1l0,0c0.1,6.3-5,11.6-11.5,11.7C11.4,24,11.4,24,11.3,24z M11.7,2c-0.1,0-0.1,0-0.2,0\n      C8.7,2.1,6,3.2,4,5.2c-2,2-3.1,4.7-3,7.5C1.1,18.6,5.7,23.1,11.5,23c5.9-0.1,10.6-4.9,10.5-10.7l0,0c0-2.8-1.2-5.4-3.1-7.4\n      C17,3,14.4,2,11.7,2z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M11.5,14.5c-0.3,0-0.5-0.2-0.5-0.5V7c0-0.3,0.2-0.5,0.5-0.5S12,6.7,12,7v7C12,14.3,11.8,14.5,11.5,14.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M11.5,18.5c-0.6,0-1-0.4-1-1s0.4-1,1-1s1,0.4,1,1S12.1,18.5,11.5,18.5z M11.5,17.5C11.5,17.5,11.5,17.5,11.5,17.5\n      l0.5,0L11.5,17.5z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "3S38": function(t, e) {
        }, "3qQk": function(t, e, n) {
        }, "4K1/": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "NotFound", status: "prototype", release: "1.0.0", type: "Template", metaInfo: { title: "Page Not Found | LUX Design System", htmlAttrs: { lang: "en" } }, props: { type: { type: String, default: "div" } } }, i = (n("1UX2"), n("KHd+")), a = n("gkHm"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2(this.type, { tag: "component", staticClass: "lux-not-found" }, [e2("menu-bar", { attrs: { active: "NotFound", menuItems: [{ name: "Template", component: "Index", href: "/#/" }, { name: "Living Docs", href: "http://localhost:6060/" }] } }), this._v(" "), e2("wrapper", [e2("heading", { attrs: { level: "h1" } }, [this._v("404 Error")]), this._v(" "), e2("text-style", [this._v("Couldn\u2019t find a component or page that matches the URL you entered. Double check\n      configuration in router/index.js.")])], 1)], 1);
          }, [], false, null, "1a37250f", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "4U07": function(t, e, n) {
          "use strict";
          var r = n("f8oI");
          n.n(r).a;
        }, "4rX5": function(t, e, n) {
          "use strict";
          var r = n("QzVM");
          n.n(r).a;
        }, "4tLo": function(t, e, n) {
        }, "4z53": function(t, e, n) {
        }, "55Ur": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Hamburger", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" } } }, i = (n("fJkO"), n("KHd+")), a = n("qKJg"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            this._self._c;
            return this._m(0);
          }, [function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("span", { staticClass: "hamburger-box" }, [e2("span", { staticClass: "hamburger-inner" })]);
          }], false, null, "7209fdef", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "5C7p": function(t, e, n) {
          "use strict";
          var r = n("4tLo");
          n.n(r).a;
        }, "5Dup": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Hyperlink", status: "ready", release: "1.0.0", type: "Element", props: { href: { type: String, default: "", required: true }, variation: { type: String, default: "link", validator: function(t2) {
            return t2.match(/(link|button)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } } } }, i = (n("9WUz"), n("KHd+")), a = n("zckO"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)("a", { class: ["lux-link", this.variation, this.size], attrs: { href: this.href } }, [this._t("default")], 2);
          }, [], false, null, "2bf5a64e", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "5Sb1": function(t, e, n) {
          "use strict";
          var r = n("P69X");
          n.n(r).a;
        }, "5hD9": function(t, e) {
        }, "5m5j": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = new (n("oCYn")).default(), i = n("HOM/"), a = n("J9Y1");
          n.n(a).a.load({ google: { families: ["Fira+Sans:300,400,400i,600,700"] } }), n.d(e, "modules", function() {
            return o;
          }), n.d(e, "instance", function() {
            return r;
          });
          var o = i.b, s = [n("Xl01"), n("JtIp"), n("i9NM"), n("PSLC"), n("c1KM")], c = [];
          s.forEach(function(t2) {
            t2.keys().forEach(function(e2) {
              return c.push(t2(e2).default);
            });
          });
          var u = { install: function(t2) {
            c.forEach(function(e2) {
              return t2.component(e2.name, e2);
            });
          } };
          "undefined" != typeof window && window.Vue && window.Vue.use(u);
          e.default = u;
        }, "5mbo": function(t, e) {
        }, "64/Z": function(t, e) {
        }, "6ER8": function(t, e) {
        }, "6z2N": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconUnsorted", status: "ready", release: "1.0.0", type: "Element" }, i = (n("IuAk"), n("KHd+")), a = n("mxAO"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("circle", { staticClass: "st0", attrs: { cx: "12", cy: "12", r: "2" } }), this._v(" "), e2("polygon", { staticClass: "st1", attrs: { points: "17.5,6.5 12,0.5 6.5,6.5 	" } }), this._v(" "), e2("polygon", { staticClass: "st1", attrs: { points: "6.5,17.5 12,23.5 17.5,17.5 	" } })]);
          }, [], false, null, "089f8612", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "7BlC": function(t, e, n) {
          "use strict";
          var r = n("IB4K");
          n.n(r).a;
        }, "7H6U": function(t, e, n) {
          "use strict";
          var r = n("J4F3");
          n.n(r).a;
        }, "7LhX": function(t, e) {
        }, "7hub": function(t, e, n) {
          "use strict";
          var r = n("u1Al");
          n.n(r).a;
        }, "7kMZ": function(t, e) {
        }, "8IW8": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = n("o0o1"), i = n.n(r), a = n("yXPU"), o = n.n(a), s = n("BaqO"), c = /* @__PURE__ */ new Map(), u = { name: "SvgIcon", status: "deprecated", release: "1.0.0", type: "Element", data: function() {
            return { currPath: s("./" + this.name + ".svg"), isIE: false };
          }, props: { src: { required: false, default: "ready" }, name: { required: true, default: "ready" }, ariaLabel: { type: String, default: "" }, type: { type: String, default: "span" }, fill: { type: String, default: "rgb(0, 17, 35)" }, width: { required: true, type: String, default: "16px" }, height: { required: true, type: String, default: "16px" } }, methods: { detectIE: function() {
            var t2 = window.navigator.userAgent, e2 = t2.indexOf("MSIE ");
            if (e2 > 0)
              return parseInt(t2.substring(e2 + 5, t2.indexOf(".", e2)), 10);
            if (t2.indexOf("Trident/") > 0) {
              var n2 = t2.indexOf("rv:");
              return parseInt(t2.substring(n2 + 3, t2.indexOf(".", n2)), 10);
            }
            var r2 = t2.indexOf("Edge/");
            return r2 > 0 && parseInt(t2.substring(r2 + 5, t2.indexOf(".", r2)), 10);
          } }, mounted: function() {
            var t2 = this;
            return o()(i.a.mark(function e2() {
              var n2, r2;
              return i.a.wrap(function(e3) {
                for (; ; )
                  switch (e3.prev = e3.next) {
                    case 0:
                      if (!(false === (n2 = t2.detectIE()) || n2 >= 12)) {
                        e3.next = 14;
                        break;
                      }
                      if (t2.isIE = false, r2 = s("./" + t2.name + ".svg"), !c.has(r2))
                        try {
                          c.set(r2, fetch(r2).then(function(t3) {
                            return t3.text();
                          }));
                        } catch (t3) {
                          c.delete(r2);
                        }
                      if (!c.has(r2)) {
                        e3.next = 12;
                        break;
                      }
                      return e3.next = 8, c.get(r2);
                    case 8:
                      t2.$el.innerHTML = e3.sent, t2.$el.children[0].style.fill = t2.fill, t2.$el.children[0].style.width = t2.width, t2.$el.children[0].style.height = t2.height;
                    case 12:
                      e3.next = 15;
                      break;
                    case 14:
                      t2.isIE = true;
                    case 15:
                    case "end":
                      return e3.stop();
                  }
              }, e2);
            }))();
          } }, l = (n("5Sb1"), n("KHd+")), f = n("SThQ"), d = n.n(f), p = Object(l.a)(u, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return t2.isIE ? n2("img", { staticClass: "lux-logo-svg", style: { fill: t2.fill }, attrs: { src: t2.currPath, "aria-label": t2.ariaLabel, width: t2.width, height: t2.height } }) : n2(t2.type, { tag: "component", staticClass: "lux-svg-icon", attrs: { "aria-label": t2.ariaLabel } });
          }, [], false, null, "17b061a4", null);
          "function" == typeof d.a && d()(p);
          e.default = p.exports;
        }, "8dhO": function(t, e) {
        }, "8fTi": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconDenied", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("I8lK"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M11.5,23C5.2,23,0,17.8,0,11.5C0,5.2,5.2,0,11.5,0C17.8,0,23,5.2,23,11.5C23,17.8,17.8,23,11.5,23z M11.5,1\n      C5.7,1,1,5.7,1,11.5C1,17.3,5.7,22,11.5,22C17.3,22,22,17.3,22,11.5C22,5.7,17.3,1,11.5,1z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M7.3,16.2c-0.1,0-0.3,0-0.4-0.1c-0.2-0.2-0.2-0.5,0-0.7l8.5-8.5c0.2-0.2,0.5-0.2,0.7,0s0.2,0.5,0,0.7l-8.5,8.5\n      C7.5,16.2,7.4,16.2,7.3,16.2z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M15.7,16.2c-0.1,0-0.3,0-0.4-0.1L6.9,7.6c-0.2-0.2-0.2-0.5,0-0.7s0.5-0.2,0.7,0l8.5,8.5c0.2,0.2,0.2,0.5,0,0.7\n      C16,16.2,15.9,16.2,15.7,16.2z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "9I8L": function(t, e) {
        }, "9RVY": function(t, e, n) {
        }, "9WUz": function(t, e, n) {
          "use strict";
          var r = n("l6ne");
          n.n(r).a;
        }, "9b0z": function(t, e) {
        }, "9t9y": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Wrapper", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" }, maxWidth: { type: Number, default: 1170 }, fullWidth: { type: Boolean, default: false }, horizontal: { type: String, default: "" } } }, i = (n("PrlM"), n("KHd+")), a = n("HpXA"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", class: ["lux-wrapper", { "lux-full-width": this.fullWidth }, this.horizontal], style: { "max-width": this.maxWidth + "px" } }, [this._t("default")], 2);
          }, [], false, null, "2f0190c8", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "9wbe": function(t, e, n) {
          "use strict";
          var r = n("QkTS");
          n.n(r).a;
        }, "9xho": function(t, e) {
        }, A32m: function(t, e, n) {
        }, A4bl: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "InputRadio", status: "ready", release: "1.0.0", type: "Element", data: function() {
            return { wrapper: this.groupLabel.length ? "fieldset" : "div" };
          }, props: { vertical: { type: Boolean, default: false }, options: { required: true, type: Array }, groupLabel: { type: String, default: "" }, errormessage: { type: String, default: "" }, id: { type: String, default: "", required: true }, disabled: { type: Boolean, default: false }, required: { type: Boolean, default: false }, hover: { type: Boolean, default: false }, focus: { type: Boolean, default: false } }, methods: { change: function(t2) {
            this.$emit("change", t2);
          }, inputblur: function(t2) {
            this.$emit("inputblur", t2);
          } } }, i = (n("E0w3"), n("KHd+")), a = n("mN2E"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.wrapper, { tag: "component", staticClass: "lux-input" }, [t2.groupLabel ? n2("legend", [t2._v(t2._s(t2.groupLabel))]) : t2._e(), t2._v(" "), t2._l(t2.options, function(e3, r2) {
              return n2("div", { staticClass: "lux-radio", class: { "lux-inline": !t2.vertical } }, [n2("input", { attrs: { type: "radio", id: e3.id, name: e3.name, disabled: e3.disabled, required: e3.required }, domProps: { value: e3.value, checked: e3.checked }, on: { change: function(e4) {
                return t2.change(e4.target.value);
              }, blur: function(e4) {
                return t2.inputblur(e4.target);
              } } }), t2._v(" "), e3.label ? n2("label", { attrs: { for: e3.id } }, [t2._v(t2._s(e3.label))]) : n2("label", { attrs: { for: e3.id } }, [t2._v(t2._s(e3.value))])]);
            }), t2._v(" "), t2.errormessage ? n2("div", { staticClass: "lux-error", attrs: { role: "alert" } }, [t2._v(t2._s(t2.errormessage))]) : t2._e()], 2);
          }, [], false, null, "57890a04", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, AAsE: function(t, e) {
          t.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z" class="st1"/></svg>';
        }, ADNt: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "InputButton", status: "ready", release: "1.0.0", type: "Element", mixins: [n("+Dcj").mixin], data: function() {
            return { label: "Submit" };
          }, props: { variation: { type: String, default: "button", validator: function(t2) {
            return t2.match(/(solid|outline|text|dropdown|icon)/);
          } }, type: { type: String, default: "", validator: function(t2) {
            return t2.match(/(|button|submit)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } }, block: { type: Boolean, default: false }, disabled: { type: Boolean, default: false }, focused: { type: Boolean, default: false }, customAlertEvent: { type: Object, default: null }, hideLabel: { type: Boolean, default: false }, icon: { type: String, default: "" } }, methods: { buttonClicked: function(t2) {
            this.customAlertEvent && this.$emit("system-alert", { event: t2, alertStatus: this.customAlertEvent.alertStatus, alertMessage: this.customAlertEvent.alertMessage }), this.$emit("button-clicked", t2);
          } } }, i = (n("Bpn4"), n("KHd+")), a = n("jEXX"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("button", { directives: [{ name: "focus", rawName: "v-focus", value: t2.focused, expression: "focused" }], class: ["lux-button", t2.variation, t2.size, { "lux-expanded": 1 == t2.block }], attrs: { type: !!t2.type && t2.type, disabled: t2.disabled }, on: { click: function(e3) {
              return t2.buttonClicked(e3);
            }, focus: function(e3) {
              t2.focused = true;
            }, blur: function(e3) {
              t2.focused = false;
            } } }, ["icon-prepend" === t2.variation ? n2("div", { staticClass: "prepend-icon" }, ["search" === t2.icon ? n2("lux-icon-base", { attrs: { width: "18", height: "18", "icon-name": "search" } }, [n2("lux-icon-search")], 1) : t2._e()], 1) : t2._e(), t2._v(" "), t2._t("default"), t2._v(" "), "icon" === t2.variation ? n2("div", { staticClass: "append-icon" }, ["search" === t2.icon ? n2("lux-icon-base", { attrs: { width: "18", height: "18", "icon-name": "search" } }, [n2("lux-icon-search")], 1) : t2._e()], 1) : t2._e()], 2);
          }, [], false, null, "4819e799", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, ASNS: function(t, e, n) {
        }, Akpa: function(t, e, n) {
          "use strict";
          var r = n("WXGF");
          n.n(r).a;
        }, AzCp: function(t, e, n) {
        }, "B+5f": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconReported", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("ijgq"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("g", [e2("path", { attrs: { d: "M17.5,24c-3.6,0-6.5-2.9-6.5-6.5s2.9-6.5,6.5-6.5s6.5,2.9,6.5,6.5S21.1,24,17.5,24z M17.5,12c-3,0-5.5,2.5-5.5,5.5\n        s2.5,5.5,5.5,5.5s5.5-2.5,5.5-5.5S20.5,12,17.5,12z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M16.5,20c-0.1,0-0.3,0-0.4-0.1l-2-2c-0.2-0.2-0.2-0.5,0-0.7s0.5-0.2,0.7,0l1.6,1.6l3.6-3.6c0.2-0.2,0.5-0.2,0.7,0\n        s0.2,0.5,0,0.7l-4,4C16.8,20,16.6,20,16.5,20z" } })])]), this._v(" "), e2("g", [e2("g", [e2("path", { attrs: { d: "M8,7H3.5C3.2,7,3,6.8,3,6.5S3.2,6,3.5,6H8c0.3,0,0.5,0.2,0.5,0.5S8.3,7,8,7z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M11.5,10h-8C3.2,10,3,9.8,3,9.5S3.2,9,3.5,9h8C11.8,9,12,9.2,12,9.5S11.8,10,11.5,10z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M9.5,13h-6C3.2,13,3,12.8,3,12.5S3.2,12,3.5,12h6c0.3,0,0.5,0.2,0.5,0.5S9.8,13,9.5,13z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M8.5,16h-5C3.2,16,3,15.8,3,15.5S3.2,15,3.5,15h5C8.8,15,9,15.2,9,15.5S8.8,16,8.5,16z" } })]), this._v(" "), e2("g", [e2("g", [e2("path", { attrs: { d: "M10.5,22h-10C0.2,22,0,21.8,0,21.5v-21C0,0.2,0.2,0,0.5,0h11c0.1,0,0.3,0.1,0.4,0.1l5,5C16.9,5.2,17,5.4,17,5.5v4\n          c0,0.3-0.2,0.5-0.5,0.5S16,9.8,16,9.5V5.7L11.3,1H1v20h9.5c0.3,0,0.5,0.2,0.5,0.5S10.8,22,10.5,22z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M16.5,6h-5C11.2,6,11,5.8,11,5.5v-5C11,0.2,11.2,0,11.5,0S12,0.2,12,0.5V5h4.5C16.8,5,17,5.2,17,5.5S16.8,6,16.5,6z" } })])])])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, B7n5: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconApproved", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("hc6h"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M9.5,16c-0.1,0-0.3,0-0.4-0.1l-2.5-2.5c-0.2-0.2-0.2-0.5,0-0.7s0.5-0.2,0.7,0l2.2,2.2l7.1-6.7c0.2-0.2,0.5-0.2,0.7,0\n      s0.2,0.5,0,0.7l-7.5,7C9.7,16,9.6,16,9.5,16z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12,24C5.4,24,0,18.6,0,12C0,5.4,5.4,0,12,0c6.6,0,12,5.4,12,12C24,18.6,18.6,24,12,24z M12,1C5.9,1,1,5.9,1,12\n      s4.9,11,11,11s11-4.9,11-11S18.1,1,12,1z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, BA3N: function(t, e) {
        }, BIGG: function(t, e) {
        }, BND2: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "UniversityCopyright", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "span" } } }, i = (n("MeTV"), n("KHd+")), a = n("Kj3A"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", staticClass: "lux-copyright" }, [this._v("\n  \xA9 " + this._s(new Date().getFullYear()) + " The Trustees of Princeton University\n")]);
          }, [], false, null, "a1059b86", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, BaqO: function(t, e, n) {
          t.exports = n("bzL3");
        }, Bnag: function(t, e) {
          t.exports = function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance");
          };
        }, Bpn4: function(t, e, n) {
          "use strict";
          var r = n("JLG1");
          n.n(r).a;
        }, C0Ao: function(t, e) {
        }, CByH: function(t, e) {
        }, CNq7: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "GridContainer", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" }, horizontal: { type: String, default: "" } } }, i = (n("jQdm"), n("KHd+")), a = n("Vw4T"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", class: ["lux-flex-container", this.horizontal] }, [this._t("default")], 2);
          }, [], false, null, "592ff8c7", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, CPix: function(t, e, n) {
          "use strict";
          var r = n("3qQk");
          n.n(r).a;
        }, CtM7: function(t, e) {
        }, DTy0: function(t, e) {
        }, DVR0: function(t, e) {
        }, DhQ2: function(t, e, n) {
        }, E0w3: function(t, e, n) {
          "use strict";
          var r = n("X2fP");
          n.n(r).a;
        }, E6P4: function(t, e, n) {
        }, EWKo: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = n("Kyfw"), i = n.n(r), a = { name: "Banner", status: "prototype", release: "2.16.3", type: "Element", metaInfo: { title: "Global alert message to user.", htmlAttrs: { lang: "en" } }, data: function() {
            return { bannerMessage: "This is the announcement description.", show: true };
          }, computed: { isFullScreen: function() {
            return "true" === this.fullscreen;
          } }, props: { fullscreen: { type: Boolean, default: false }, dismissible: { type: Boolean, default: false } }, methods: { hideBanner: function() {
            this.show = false, i.a.set("showBanner", false);
          } }, created: function() {
            i.a.isKey("showBanner") && (this.show = "true" === i.a.get("showBanner"));
          } }, o = (n("SL3b"), n("KHd+")), s = n("5hD9"), c = n.n(s), u = Object(o.a)(a, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return t2.show ? n2("div", { class: ["lux-banner", { "lux-banner-fullscreen": t2.isFullScreen }] }, [n2("div", { staticClass: "lux-announcement open", attrs: { role: "alert" } }, [n2("wrapper", { attrs: { maxWidth: "1125" } }, [t2.dismissible ? n2("button", { staticClass: "lux-announcement__close", attrs: { type: "button", "data-dismiss": "alert", "aria-label": "Close" }, on: { click: function(e3) {
              return t2.hideBanner();
            } } }, [n2("span", { attrs: { "aria-hidden": "true" } }, [t2._v("\xD7")])]) : t2._e(), t2._v(" "), t2._t("default", function() {
              return [t2._v(t2._s(t2.bannerMessage))];
            })], 2)], 1)]) : t2._e();
          }, [], false, null, null, null);
          "function" == typeof c.a && c()(u);
          e.default = u.exports;
        }, EbDI: function(t, e) {
          t.exports = function(t2) {
            if (Symbol.iterator in Object(t2) || "[object Arguments]" === Object.prototype.toString.call(t2))
              return Array.from(t2);
          };
        }, Eg5U: function(t, e, n) {
          "use strict";
          var r = n("OlWi");
          n.n(r).a;
        }, G91T: function(t, e) {
        }, GqHY: function(t, e, n) {
          "use strict";
          var r = n("DhQ2");
          n.n(r).a;
        }, GxD9: function(t, e, n) {
          "use strict";
          var r = n("A32m");
          n.n(r).a;
        }, "HOM/": function(t, e, n) {
          "use strict";
          var r = n("RIqP"), i = n.n(r), a = { CUT: function(t2, e2) {
            t2.cut = i()(e2);
          }, PASTE: function(t2, e2) {
            t2.items = i()(e2);
          }, SELECT: function(t2, e2) {
            t2.selected = i()(e2);
          }, SET_GALLERY: function(t2, e2) {
            t2.items = e2, t2.ogItems = e2;
          }, SORT_ITEMS: function(t2, e2) {
            t2.items = i()(e2);
          }, UPDATE_CHANGES: function(t2, e2) {
            t2.changeList = i()(e2);
          }, UPDATE_ITEMS: function(t2, e2) {
            t2.items = i()(e2);
          } };
          n.d(e, "a", function() {
            return o;
          }), n.d(e, "c", function() {
            return s;
          });
          var o = { state: { count: 10 }, mutations: { increment: function(t2) {
            t2.count++;
          } }, getters: { count: function(t2) {
            return t2.count;
          } } }, s = { state: { items: [], selected: [], cut: [], changeList: [], ogItems: [] }, mutations: a };
          e.b = { counterModule: o, galleryModule: s };
        }, HXRA: function(t, e) {
        }, HpXA: function(t, e) {
        }, I7an: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LogoLibrary", status: "ready", release: "1.0.0", type: "Element", props: { width: { type: [Number, String], default: 440 }, height: { type: [Number, String], default: 97 }, color: { type: String, default: "#fff" } } }, i = (n("RH/b"), n("KHd+")), a = n("Mdgb"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: t2.width, height: t2.height, viewBox: "0 0 440.06 97", preserveAspectRatio: "xMinYMid", "aria-labelledby": "logo-library", role: "img" } }, [n2("title", { attrs: { id: "logo-library" } }, [t2._v("Princeton University Library Logo")]), t2._v(" "), n2("g", [n2("clipPath", { attrs: { id: "clip-path" } }, [n2("path", { attrs: { d: "M3 .91h90v90H3z", fill: "none" } })]), t2._v(" "), n2("rect", { attrs: { width: "96", height: "97", rx: "12.24", ry: "12.24", fill: "#ef7622" } }), t2._v(" "), n2("g", { staticClass: "pul-logo-c" }, [n2("g", { staticClass: "pul-logo-c" }, [n2("path", { staticClass: "pul-logo-d", attrs: { d: "M10.77 83.5V20.15a20.61 20.61 0 0 0 6.59-3.05v59.8h.41a16.4 16.4 0 0 0 3.53-.38 38 38 0 0 0 7.62-2.49c1.24-.54 2.45-1.13 3.67-1.71a17.37 17.37 0 0 1 5.72-1.71 11.78 11.78 0 0 1 6.16.85A7 7 0 0 1 46.74 73a4.24 4.24 0 0 1 1.11 2c0 .06 0 .11.06.2s.05-.07.05-.09A4.16 4.16 0 0 1 49.12 73a7.6 7.6 0 0 1 3.17-1.9 12 12 0 0 1 4.42-.55 16.49 16.49 0 0 1 6.44 1.73c2 1 4 1.89 6 2.66a33.85 33.85 0 0 0 6.22 1.74 14.33 14.33 0 0 0 2.69.23h.33V17.33a.51.51 0 0 1 0-.07v-.07A21.31 21.31 0 0 0 85 20v63.5z" } }), t2._v(" "), n2("path", { staticClass: "pul-logo-d", attrs: { d: "M24.83 32.7A70.14 70.14 0 0 1 25 17l.41.2a17.26 17.26 0 0 0 4.85 1.69 13.45 13.45 0 0 0 8.91-1.44 19.27 19.27 0 0 0 5-3.93 25.37 25.37 0 0 0 3.55-4.83l.12-.19.21.35a24.49 24.49 0 0 0 5.68 6.73 15.38 15.38 0 0 0 6.35 3.2 13.73 13.73 0 0 0 7.33-.4 19 19 0 0 0 2.91-1.22l.25-.13h.12a70.13 70.13 0 0 1 .16 15.56H24.84M35.7 60.37a50.22 50.22 0 0 1-5.26-8.68l17.42-17.43 17.37 17.4A46.75 46.75 0 0 1 60 60.35l-6.05-6-6.07-6.07L35.7 60.37" } })])]), t2._v(" "), n2("path", { style: { fill: t2.color }, attrs: { d: "M118.7 28.26h-3V3.93h8.63q4 0 6 2.2a7.41 7.41 0 0 1 1.92 5 7 7 0 0 1-2.09 5.19 7.5 7.5 0 0 1-5.48 2h-5.9zm0-12.4h5.6a4.75 4.75 0 0 0 3.48-1.29 4.56 4.56 0 0 0 1.32-3.41 5 5 0 0 0-1.18-3.24 4.16 4.16 0 0 0-3.4-1.43h-5.82zm21.15 12.4h-2.8v-18h2.46v4.21a9 9 0 0 1 2.61-3.86 4.75 4.75 0 0 1 2.68-.88 11.06 11.06 0 0 1 1.1.07v2.67h-.57a4.93 4.93 0 0 0-3.85 1.73 7 7 0 0 0-1.64 4.54zm13.36-24.33V7h-3V3.93zm-.09 6.33v18h-2.8v-18zm21.01 18h-2.62V16.69a4.67 4.67 0 0 0-1.09-3.51 3.72 3.72 0 0 0-2.64-1 4.53 4.53 0 0 0-3.59 1.71 6.73 6.73 0 0 0-1.45 4.51v9.87h-2.8v-18h2.6v3.32q2.19-3.81 5.69-3.81a5.63 5.63 0 0 1 3.43 1 5.54 5.54 0 0 1 1.94 2.34 14.25 14.25 0 0 1 .53 4.71zm17.47-6.31l2.53.45a8.06 8.06 0 0 1-2.37 4.67A7.16 7.16 0 0 1 181.51 26a11.29 11.29 0 0 1-2-6.71 11 11 0 0 1 2.06-6.82 6.66 6.66 0 0 1 5.61-2.72 6.41 6.41 0 0 1 4.71 1.76 7.86 7.86 0 0 1 2.2 4.54l-2.53.48q-.71-4.46-4.3-4.46a4 4 0 0 0-3.56 2 9.42 9.42 0 0 0-1.25 5.11 9.87 9.87 0 0 0 1.24 5.37 3.91 3.91 0 0 0 3.48 1.92q3.51-.03 4.43-4.52zm19.49.94l2.6.53a7.32 7.32 0 0 1-2.78 3.82 8 8 0 0 1-4.91 1.52 7.57 7.57 0 0 1-6-2.6 9.93 9.93 0 0 1-2.28-6.81 10 10 0 0 1 2.37-6.95 7.65 7.65 0 0 1 6-2.65 7.19 7.19 0 0 1 5.68 2.44q2.15 2.44 2.2 7.31h-13.05q0 4.08 1.71 5.51a5.57 5.57 0 0 0 3.62 1.43q3.44 0 4.84-3.55zm-.16-5.47a7.83 7.83 0 0 0-.5-2.69 4.6 4.6 0 0 0-1.57-2 4.3 4.3 0 0 0-2.66-.83 4.74 4.74 0 0 0-3.54 1.5 6.19 6.19 0 0 0-1.63 4zm16.5 8.93v2.21a19.86 19.86 0 0 1-2.57.2q-5.22 0-5.22-5.46V12.45h-3.19v-2.19h3.19l.13-4.53 2.6-.25v4.78h4v2.19h-4v11.31q0 2.78 2.89 2.78a13.69 13.69 0 0 0 2.17-.19zm10.2 2.41a6.84 6.84 0 0 1-5.78-2.76 11 11 0 0 1-2.08-6.81 9.82 9.82 0 0 1 2.33-6.87 7.53 7.53 0 0 1 5.81-2.57 7.1 7.1 0 0 1 5.87 2.7 10.51 10.51 0 0 1 2.15 6.75 10.11 10.11 0 0 1-2.32 6.88 7.56 7.56 0 0 1-5.98 2.68zm.21-2.32a4.45 4.45 0 0 0 3.58-1.76q1.44-1.77 1.44-5.49t-1.52-5.43a4.63 4.63 0 0 0-3.55-1.68 4.46 4.46 0 0 0-3.53 1.7q-1.44 1.7-1.45 5.39 0 3.9 1.45 5.59a4.51 4.51 0 0 0 3.59 1.68zm27.73 1.82H263V16.69a4.67 4.67 0 0 0-1.09-3.51 3.72 3.72 0 0 0-2.64-1 4.52 4.52 0 0 0-3.59 1.71 6.73 6.73 0 0 0-1.45 4.51v9.87h-2.8v-18H254v3.32q2.19-3.81 5.69-3.81a5.63 5.63 0 0 1 3.43 1 5.54 5.54 0 0 1 1.88 2.37 14.28 14.28 0 0 1 .53 4.71zm31.32-24.33h2.53v15.89q0 4.78-2.34 6.86a8.91 8.91 0 0 1-6.14 2.08q-4.22 0-6.26-2.14t-2-6.8V3.93h3v15.89a8.65 8.65 0 0 0 .66 4 3.93 3.93 0 0 0 2 1.71 7.24 7.24 0 0 0 2.8.55 5.75 5.75 0 0 0 4.28-1.48q1.46-1.48 1.46-4.78zm23.25 24.33h-2.62V16.69a4.67 4.67 0 0 0-1.09-3.51 3.72 3.72 0 0 0-2.64-1 4.52 4.52 0 0 0-3.59 1.71 6.73 6.73 0 0 0-1.45 4.51v9.87H306v-18h2.6v3.32q2.19-3.81 5.69-3.81a5.63 5.63 0 0 1 3.43 1 5.54 5.54 0 0 1 1.94 2.34 14.27 14.27 0 0 1 .53 4.71zm9.73-24.33V7h-3V3.93zm-.09 6.33v18H327v-18zm20.01 0l-6.22 18h-2.88l-6.45-18h3.11l5 14.63 5-14.63zm15.82 12.63l2.6.53a7.32 7.32 0 0 1-2.78 3.82 8 8 0 0 1-4.87 1.51 7.57 7.57 0 0 1-6-2.6 9.93 9.93 0 0 1-2.28-6.81 10 10 0 0 1 2.37-6.95 7.65 7.65 0 0 1 6-2.65 7.19 7.19 0 0 1 5.68 2.44q2.15 2.44 2.2 7.31h-13.1q0 4.08 1.71 5.51a5.57 5.57 0 0 0 3.62 1.43q3.44.01 4.85-3.54zm-.16-5.47a7.81 7.81 0 0 0-.5-2.69 4.61 4.61 0 0 0-1.57-2 4.31 4.31 0 0 0-2.66-.83 4.74 4.74 0 0 0-3.54 1.5 6.19 6.19 0 0 0-1.63 4zm11.31 10.84H374v-18h2.46v4.21a9 9 0 0 1 2.54-3.86 4.75 4.75 0 0 1 2.68-.88c.29 0 .65 0 1.11.07v2.67h-.57a4.93 4.93 0 0 0-3.85 1.73 7 7 0 0 0-1.64 4.54zm8.24-4.67l2.7-.59q.89 3.4 5.63 3.4a5.34 5.34 0 0 0 3-.78 2.49 2.49 0 0 0 1.21-2.21q0-2.12-3.08-2.69l-3.84-.72a6.93 6.93 0 0 1-3.55-1.68 4.33 4.33 0 0 1-1.32-3.3 4.76 4.76 0 0 1 1.8-3.79 7.25 7.25 0 0 1 4.85-1.52q5.86 0 7.23 4.58l-2.57.55q-1.1-2.82-4.54-2.82a5.11 5.11 0 0 0-2.81.7 2.21 2.21 0 0 0-1.1 2q0 2 2.8 2.51l3.51.63q5.51 1 5.51 5.34a4.77 4.77 0 0 1-2 4 8.92 8.92 0 0 1-5.46 1.53q-6.43.03-7.97-5.14zm23.5-19.66V7h-3V3.93zm-.09 6.33v18h-2.8v-18zm14.99 16.09v2.21a19.87 19.87 0 0 1-2.57.2q-5.22 0-5.22-5.46V12.45h-3.19v-2.19h3.19l.13-4.53 2.6-.25v4.78h4v2.19h-4v11.31q0 2.78 2.89 2.78a13.7 13.7 0 0 0 2.17-.19zm16.66-16.09l-7.22 20.11q-1.57 4.35-5 4.35a8.87 8.87 0 0 1-2.41-.37v-2.21a8.57 8.57 0 0 0 1.87.25 3.33 3.33 0 0 0 2.24-.77q.9-.77 1.79-3.74l-6.23-17.62h2.84l4.83 13.53 4.92-13.53zM116 43.11h7.42V84.2h22v6.51H116zm45.61 0H169v47.6h-7.35zm26.25 0h17.29c8.89 0 13.44 5.39 13.44 12a9 9 0 0 1-6.44 9.17c6.37 1.47 9.73 6 9.73 12.11 0 8.19-5.46 14.35-15.47 14.35h-18.55zm16.94 18.55c4.41 0 6.51-2.45 6.51-6s-2-6-6.65-6h-9.38v12zM206 84.2c5.74 0 8.47-3.36 8.47-8.12S211.53 68 205.65 68h-10.37v16.2zm64.68 6.51h-8.54l-8.54-12.53a38.3 38.3 0 0 1-4 .28h-4.48v12.25h-7.42v-47.6h11.9c13.16 0 20.51 6.86 20.51 17.78 0 7.35-3.29 12.39-9.52 15.12zm-21.36-18.62c9.45 0 13.23-4.13 13.23-11.2s-3.92-11.27-13.23-11.27h-4.2v22.47zm54.25-29.47h.84l20.86 48.09h-7.7L314.85 84h-21.78l-2.73 6.72h-7.14zm8.61 35.14l-6-14.84a71.79 71.79 0 0 1-2.38-7.07 64.14 64.14 0 0 1-2.31 7.07l-6 14.84zm61.04 12.95h-8.54l-8.54-12.53a38.3 38.3 0 0 1-4 .28h-4.48v12.25h-7.42v-47.6h11.9c13.16 0 20.51 6.86 20.51 17.78 0 7.35-3.29 12.39-9.52 15.12zm-21.35-18.62c9.45 0 13.23-4.13 13.23-11.2s-3.92-11.27-13.23-11.27h-4.2v22.47zm50.54 3.57l-18.06-32.55h8.19l10.78 19.6a50.68 50.68 0 0 1 2.87 6.86 63.32 63.32 0 0 1 2.87-6.86l10.43-19.6h7.63l-17.29 32.13v15.47h-7.42z" } })])]);
          }, [], false, null, "1747c88a", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, I8lK: function(t, e) {
        }, IB4K: function(t, e, n) {
        }, ILXW: function(t, e, n) {
        }, Ijbi: function(t, e) {
          t.exports = function(t2) {
            if (Array.isArray(t2)) {
              for (var e2 = 0, n = new Array(t2.length); e2 < t2.length; e2++)
                n[e2] = t2[e2];
              return n;
            }
          };
        }, IuAk: function(t, e, n) {
          "use strict";
          var r = n("soGp");
          n.n(r).a;
        }, J4F3: function(t, e, n) {
        }, J4zp: function(t, e, n) {
          var r = n("wTVA"), i = n("m0LI"), a = n("wkBT");
          t.exports = function(t2, e2) {
            return r(t2) || i(t2, e2) || a();
          };
        }, J9Y1: function(t, e, n) {
          var r;
          !function() {
            function i(t2, e2, n2) {
              return t2.call.apply(t2.bind, arguments);
            }
            function a(t2, e2, n2) {
              if (!t2)
                throw Error();
              if (2 < arguments.length) {
                var r2 = Array.prototype.slice.call(arguments, 2);
                return function() {
                  var n3 = Array.prototype.slice.call(arguments);
                  return Array.prototype.unshift.apply(n3, r2), t2.apply(e2, n3);
                };
              }
              return function() {
                return t2.apply(e2, arguments);
              };
            }
            function o(t2, e2, n2) {
              return (o = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? i : a).apply(null, arguments);
            }
            var s = Date.now || function() {
              return +new Date();
            };
            function c(t2, e2) {
              this.a = t2, this.o = e2 || t2, this.c = this.o.document;
            }
            var u = !!window.FontFace;
            function l(t2, e2, n2, r2) {
              if (e2 = t2.c.createElement(e2), n2)
                for (var i2 in n2)
                  n2.hasOwnProperty(i2) && ("style" == i2 ? e2.style.cssText = n2[i2] : e2.setAttribute(i2, n2[i2]));
              return r2 && e2.appendChild(t2.c.createTextNode(r2)), e2;
            }
            function f(t2, e2, n2) {
              (t2 = t2.c.getElementsByTagName(e2)[0]) || (t2 = document.documentElement), t2.insertBefore(n2, t2.lastChild);
            }
            function d(t2) {
              t2.parentNode && t2.parentNode.removeChild(t2);
            }
            function p(t2, e2, n2) {
              e2 = e2 || [], n2 = n2 || [];
              for (var r2 = t2.className.split(/\s+/), i2 = 0; i2 < e2.length; i2 += 1) {
                for (var a2 = false, o2 = 0; o2 < r2.length; o2 += 1)
                  if (e2[i2] === r2[o2]) {
                    a2 = true;
                    break;
                  }
                a2 || r2.push(e2[i2]);
              }
              for (e2 = [], i2 = 0; i2 < r2.length; i2 += 1) {
                for (a2 = false, o2 = 0; o2 < n2.length; o2 += 1)
                  if (r2[i2] === n2[o2]) {
                    a2 = true;
                    break;
                  }
                a2 || e2.push(r2[i2]);
              }
              t2.className = e2.join(" ").replace(/\s+/g, " ").replace(/^\s+|\s+$/, "");
            }
            function h(t2, e2) {
              for (var n2 = t2.className.split(/\s+/), r2 = 0, i2 = n2.length; r2 < i2; r2++)
                if (n2[r2] == e2)
                  return true;
              return false;
            }
            function v(t2, e2, n2) {
              function r2() {
                s2 && i2 && a2 && (s2(o2), s2 = null);
              }
              e2 = l(t2, "link", { rel: "stylesheet", href: e2, media: "all" });
              var i2 = false, a2 = true, o2 = null, s2 = n2 || null;
              u ? (e2.onload = function() {
                i2 = true, r2();
              }, e2.onerror = function() {
                i2 = true, o2 = Error("Stylesheet failed to load"), r2();
              }) : setTimeout(function() {
                i2 = true, r2();
              }, 0), f(t2, "head", e2);
            }
            function m(t2, e2, n2, r2) {
              var i2 = t2.c.getElementsByTagName("head")[0];
              if (i2) {
                var a2 = l(t2, "script", { src: e2 }), o2 = false;
                return a2.onload = a2.onreadystatechange = function() {
                  o2 || this.readyState && "loaded" != this.readyState && "complete" != this.readyState || (o2 = true, n2 && n2(null), a2.onload = a2.onreadystatechange = null, "HEAD" == a2.parentNode.tagName && i2.removeChild(a2));
                }, i2.appendChild(a2), setTimeout(function() {
                  o2 || (o2 = true, n2 && n2(Error("Script load timeout")));
                }, r2 || 5e3), a2;
              }
              return null;
            }
            function g() {
              this.a = 0, this.c = null;
            }
            function y(t2) {
              return t2.a++, function() {
                t2.a--, _2(t2);
              };
            }
            function b(t2, e2) {
              t2.c = e2, _2(t2);
            }
            function _2(t2) {
              0 == t2.a && t2.c && (t2.c(), t2.c = null);
            }
            function x(t2) {
              this.a = t2 || "-";
            }
            function w(t2, e2) {
              this.c = t2, this.f = 4, this.a = "n";
              var n2 = (e2 || "n4").match(/^([nio])([1-9])$/i);
              n2 && (this.a = n2[1], this.f = parseInt(n2[2], 10));
            }
            function C(t2) {
              var e2 = [];
              t2 = t2.split(/,\s*/);
              for (var n2 = 0; n2 < t2.length; n2++) {
                var r2 = t2[n2].replace(/['"]/g, "");
                -1 != r2.indexOf(" ") || /^\d/.test(r2) ? e2.push("'" + r2 + "'") : e2.push(r2);
              }
              return e2.join(",");
            }
            function S(t2) {
              return t2.a + t2.f;
            }
            function O(t2) {
              var e2 = "normal";
              return "o" === t2.a ? e2 = "oblique" : "i" === t2.a && (e2 = "italic"), e2;
            }
            function k(t2) {
              var e2 = 4, n2 = "n", r2 = null;
              return t2 && ((r2 = t2.match(/(normal|oblique|italic)/i)) && r2[1] && (n2 = r2[1].substr(0, 1).toLowerCase()), (r2 = t2.match(/([1-9]00|normal|bold)/i)) && r2[1] && (/bold/i.test(r2[1]) ? e2 = 7 : /[1-9]00/.test(r2[1]) && (e2 = parseInt(r2[1].substr(0, 1), 10)))), n2 + e2;
            }
            function M(t2, e2) {
              this.c = t2, this.f = t2.o.document.documentElement, this.h = e2, this.a = new x("-"), this.j = false !== e2.events, this.g = false !== e2.classes;
            }
            function D(t2) {
              if (t2.g) {
                var e2 = h(t2.f, t2.a.c("wf", "active")), n2 = [], r2 = [t2.a.c("wf", "loading")];
                e2 || n2.push(t2.a.c("wf", "inactive")), p(t2.f, n2, r2);
              }
              j(t2, "inactive");
            }
            function j(t2, e2, n2) {
              t2.j && t2.h[e2] && (n2 ? t2.h[e2](n2.c, S(n2)) : t2.h[e2]());
            }
            function L2() {
              this.c = {};
            }
            function E(t2, e2) {
              this.c = t2, this.f = e2, this.a = l(this.c, "span", { "aria-hidden": "true" }, this.f);
            }
            function A(t2) {
              f(t2.c, "body", t2.a);
            }
            function T(t2) {
              return "display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:" + C(t2.c) + ";font-style:" + O(t2) + ";font-weight:" + t2.f + "00;";
            }
            function $2(t2, e2, n2, r2, i2, a2) {
              this.g = t2, this.j = e2, this.a = r2, this.c = n2, this.f = i2 || 3e3, this.h = a2 || void 0;
            }
            function I(t2, e2, n2, r2, i2, a2, o2) {
              this.v = t2, this.B = e2, this.c = n2, this.a = r2, this.s = o2 || "BESbswy", this.f = {}, this.w = i2 || 3e3, this.u = a2 || null, this.m = this.j = this.h = this.g = null, this.g = new E(this.c, this.s), this.h = new E(this.c, this.s), this.j = new E(this.c, this.s), this.m = new E(this.c, this.s), t2 = T(t2 = new w(this.a.c + ",serif", S(this.a))), this.g.a.style.cssText = t2, t2 = T(t2 = new w(this.a.c + ",sans-serif", S(this.a))), this.h.a.style.cssText = t2, t2 = T(t2 = new w("serif", S(this.a))), this.j.a.style.cssText = t2, t2 = T(t2 = new w("sans-serif", S(this.a))), this.m.a.style.cssText = t2, A(this.g), A(this.h), A(this.j), A(this.m);
            }
            x.prototype.c = function(t2) {
              for (var e2 = [], n2 = 0; n2 < arguments.length; n2++)
                e2.push(arguments[n2].replace(/[\W_]+/g, "").toLowerCase());
              return e2.join(this.a);
            }, $2.prototype.start = function() {
              var t2 = this.c.o.document, e2 = this, n2 = s(), r2 = new Promise(function(r3, i3) {
                !function a3() {
                  s() - n2 >= e2.f ? i3() : t2.fonts.load(function(t3) {
                    return O(t3) + " " + t3.f + "00 300px " + C(t3.c);
                  }(e2.a), e2.h).then(function(t3) {
                    1 <= t3.length ? r3() : setTimeout(a3, 25);
                  }, function() {
                    i3();
                  });
                }();
              }), i2 = null, a2 = new Promise(function(t3, n3) {
                i2 = setTimeout(n3, e2.f);
              });
              Promise.race([a2, r2]).then(function() {
                i2 && (clearTimeout(i2), i2 = null), e2.g(e2.a);
              }, function() {
                e2.j(e2.a);
              });
            };
            var P = { D: "serif", C: "sans-serif" }, z = null;
            function N() {
              if (null === z) {
                var t2 = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);
                z = !!t2 && (536 > parseInt(t2[1], 10) || 536 === parseInt(t2[1], 10) && 11 >= parseInt(t2[2], 10));
              }
              return z;
            }
            function H(t2, e2, n2) {
              for (var r2 in P)
                if (P.hasOwnProperty(r2) && e2 === t2.f[P[r2]] && n2 === t2.f[P[r2]])
                  return true;
              return false;
            }
            function V(t2) {
              var e2, n2 = t2.g.a.offsetWidth, r2 = t2.h.a.offsetWidth;
              (e2 = n2 === t2.f.serif && r2 === t2.f["sans-serif"]) || (e2 = N() && H(t2, n2, r2)), e2 ? s() - t2.A >= t2.w ? N() && H(t2, n2, r2) && (null === t2.u || t2.u.hasOwnProperty(t2.a.c)) ? Y(t2, t2.v) : Y(t2, t2.B) : function(t3) {
                setTimeout(o(function() {
                  V(this);
                }, t3), 50);
              }(t2) : Y(t2, t2.v);
            }
            function Y(t2, e2) {
              setTimeout(o(function() {
                d(this.g.a), d(this.h.a), d(this.j.a), d(this.m.a), e2(this.a);
              }, t2), 0);
            }
            function F(t2, e2, n2) {
              this.c = t2, this.a = e2, this.f = 0, this.m = this.j = false, this.s = n2;
            }
            I.prototype.start = function() {
              this.f.serif = this.j.a.offsetWidth, this.f["sans-serif"] = this.m.a.offsetWidth, this.A = s(), V(this);
            };
            var R = null;
            function B(t2) {
              0 == --t2.f && t2.j && (t2.m ? ((t2 = t2.a).g && p(t2.f, [t2.a.c("wf", "active")], [t2.a.c("wf", "loading"), t2.a.c("wf", "inactive")]), j(t2, "active")) : D(t2.a));
            }
            function W(t2) {
              this.j = t2, this.a = new L2(), this.h = 0, this.f = this.g = true;
            }
            function U(t2, e2, n2, r2, i2) {
              var a2 = 0 == --t2.h;
              (t2.f || t2.g) && setTimeout(function() {
                var t3 = i2 || null, s2 = r2 || {};
                if (0 === n2.length && a2)
                  D(e2.a);
                else {
                  e2.f += n2.length, a2 && (e2.j = a2);
                  var c2, u2 = [];
                  for (c2 = 0; c2 < n2.length; c2++) {
                    var l2 = n2[c2], f2 = s2[l2.c], d2 = e2.a, h2 = l2;
                    if (d2.g && p(d2.f, [d2.a.c("wf", h2.c, S(h2).toString(), "loading")]), j(d2, "fontloading", h2), d2 = null, null === R)
                      if (window.FontFace) {
                        h2 = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
                        var v2 = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
                        R = h2 ? 42 < parseInt(h2[1], 10) : !v2;
                      } else
                        R = false;
                    d2 = R ? new $2(o(e2.g, e2), o(e2.h, e2), e2.c, l2, e2.s, f2) : new I(o(e2.g, e2), o(e2.h, e2), e2.c, l2, e2.s, t3, f2), u2.push(d2);
                  }
                  for (c2 = 0; c2 < u2.length; c2++)
                    u2[c2].start();
                }
              }, 0);
            }
            function q(t2, e2) {
              this.c = t2, this.a = e2;
            }
            function K(t2, e2) {
              this.c = t2, this.a = e2;
            }
            function X(t2, e2) {
              this.c = t2 || G, this.a = [], this.f = [], this.g = e2 || "";
            }
            F.prototype.g = function(t2) {
              var e2 = this.a;
              e2.g && p(e2.f, [e2.a.c("wf", t2.c, S(t2).toString(), "active")], [e2.a.c("wf", t2.c, S(t2).toString(), "loading"), e2.a.c("wf", t2.c, S(t2).toString(), "inactive")]), j(e2, "fontactive", t2), this.m = true, B(this);
            }, F.prototype.h = function(t2) {
              var e2 = this.a;
              if (e2.g) {
                var n2 = h(e2.f, e2.a.c("wf", t2.c, S(t2).toString(), "active")), r2 = [], i2 = [e2.a.c("wf", t2.c, S(t2).toString(), "loading")];
                n2 || r2.push(e2.a.c("wf", t2.c, S(t2).toString(), "inactive")), p(e2.f, r2, i2);
              }
              j(e2, "fontinactive", t2), B(this);
            }, W.prototype.load = function(t2) {
              this.c = new c(this.j, t2.context || this.j), this.g = false !== t2.events, this.f = false !== t2.classes, function(t3, e2, n2) {
                var r2 = [], i2 = n2.timeout;
                !function(t4) {
                  t4.g && p(t4.f, [t4.a.c("wf", "loading")]), j(t4, "loading");
                }(e2);
                r2 = function(t4, e3, n3) {
                  var r3, i3 = [];
                  for (r3 in e3)
                    if (e3.hasOwnProperty(r3)) {
                      var a3 = t4.c[r3];
                      a3 && i3.push(a3(e3[r3], n3));
                    }
                  return i3;
                }(t3.a, n2, t3.c);
                var a2 = new F(t3.c, e2, i2);
                for (t3.h = r2.length, e2 = 0, n2 = r2.length; e2 < n2; e2++)
                  r2[e2].load(function(e3, n3, r3) {
                    U(t3, a2, e3, n3, r3);
                  });
              }(this, new M(this.c, t2), t2);
            }, q.prototype.load = function(t2) {
              var e2 = this, n2 = e2.a.projectId, r2 = e2.a.version;
              if (n2) {
                var i2 = e2.c.o;
                m(this.c, (e2.a.api || "https://fast.fonts.net/jsapi") + "/" + n2 + ".js" + (r2 ? "?v=" + r2 : ""), function(r3) {
                  r3 ? t2([]) : (i2["__MonotypeConfiguration__" + n2] = function() {
                    return e2.a;
                  }, function e3() {
                    if (i2["__mti_fntLst" + n2]) {
                      var r4, a2 = i2["__mti_fntLst" + n2](), o2 = [];
                      if (a2)
                        for (var s2 = 0; s2 < a2.length; s2++) {
                          var c2 = a2[s2].fontfamily;
                          null != a2[s2].fontStyle && null != a2[s2].fontWeight ? (r4 = a2[s2].fontStyle + a2[s2].fontWeight, o2.push(new w(c2, r4))) : o2.push(new w(c2));
                        }
                      t2(o2);
                    } else
                      setTimeout(function() {
                        e3();
                      }, 50);
                  }());
                }).id = "__MonotypeAPIScript__" + n2;
              } else
                t2([]);
            }, K.prototype.load = function(t2) {
              var e2, n2, r2 = this.a.urls || [], i2 = this.a.families || [], a2 = this.a.testStrings || {}, o2 = new g();
              for (e2 = 0, n2 = r2.length; e2 < n2; e2++)
                v(this.c, r2[e2], y(o2));
              var s2 = [];
              for (e2 = 0, n2 = i2.length; e2 < n2; e2++)
                if ((r2 = i2[e2].split(":"))[1])
                  for (var c2 = r2[1].split(","), u2 = 0; u2 < c2.length; u2 += 1)
                    s2.push(new w(r2[0], c2[u2]));
                else
                  s2.push(new w(r2[0]));
              b(o2, function() {
                t2(s2, a2);
              });
            };
            var G = "https://fonts.googleapis.com/css";
            function J(t2) {
              this.f = t2, this.a = [], this.c = {};
            }
            var Q = { latin: "BESbswy", "latin-ext": "\xE7\xF6\xFC\u011F\u015F", cyrillic: "\u0439\u044F\u0416", greek: "\u03B1\u03B2\u03A3", khmer: "\u1780\u1781\u1782", Hanuman: "\u1780\u1781\u1782" }, Z = { thin: "1", extralight: "2", "extra-light": "2", ultralight: "2", "ultra-light": "2", light: "3", regular: "4", book: "4", medium: "5", "semi-bold": "6", semibold: "6", "demi-bold": "6", demibold: "6", bold: "7", "extra-bold": "8", extrabold: "8", "ultra-bold": "8", ultrabold: "8", black: "9", heavy: "9", l: "3", r: "4", b: "7" }, tt = { i: "i", italic: "i", n: "n", normal: "n" }, et = /^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
            function nt(t2, e2) {
              this.c = t2, this.a = e2;
            }
            var rt = { Arimo: true, Cousine: true, Tinos: true };
            function it(t2, e2) {
              this.c = t2, this.a = e2;
            }
            function at(t2, e2) {
              this.c = t2, this.f = e2, this.a = [];
            }
            nt.prototype.load = function(t2) {
              var e2 = new g(), n2 = this.c, r2 = new X(this.a.api, this.a.text), i2 = this.a.families;
              !function(t3, e3) {
                for (var n3 = e3.length, r3 = 0; r3 < n3; r3++) {
                  var i3 = e3[r3].split(":");
                  3 == i3.length && t3.f.push(i3.pop());
                  var a3 = "";
                  2 == i3.length && "" != i3[1] && (a3 = ":"), t3.a.push(i3.join(a3));
                }
              }(r2, i2);
              var a2 = new J(i2);
              !function(t3) {
                for (var e3 = t3.f.length, n3 = 0; n3 < e3; n3++) {
                  var r3 = t3.f[n3].split(":"), i3 = r3[0].replace(/\+/g, " "), a3 = ["n4"];
                  if (2 <= r3.length) {
                    var o2;
                    if (o2 = [], s2 = r3[1])
                      for (var s2, c2 = (s2 = s2.split(",")).length, u2 = 0; u2 < c2; u2++) {
                        var l2;
                        if ((l2 = s2[u2]).match(/^[\w-]+$/))
                          if (null == (d2 = et.exec(l2.toLowerCase())))
                            l2 = "";
                          else {
                            if (l2 = null == (l2 = d2[2]) || "" == l2 ? "n" : tt[l2], null == (d2 = d2[1]) || "" == d2)
                              d2 = "4";
                            else
                              var f2 = Z[d2], d2 = f2 || (isNaN(d2) ? "4" : d2.substr(0, 1));
                            l2 = [l2, d2].join("");
                          }
                        else
                          l2 = "";
                        l2 && o2.push(l2);
                      }
                    0 < o2.length && (a3 = o2), 3 == r3.length && (o2 = [], 0 < (r3 = (r3 = r3[2]) ? r3.split(",") : o2).length && (r3 = Q[r3[0]]) && (t3.c[i3] = r3));
                  }
                  for (t3.c[i3] || (r3 = Q[i3]) && (t3.c[i3] = r3), r3 = 0; r3 < a3.length; r3 += 1)
                    t3.a.push(new w(i3, a3[r3]));
                }
              }(a2), v(n2, function(t3) {
                if (0 == t3.a.length)
                  throw Error("No fonts to load!");
                if (-1 != t3.c.indexOf("kit="))
                  return t3.c;
                for (var e3 = t3.a.length, n3 = [], r3 = 0; r3 < e3; r3++)
                  n3.push(t3.a[r3].replace(/ /g, "+"));
                return e3 = t3.c + "?family=" + n3.join("%7C"), 0 < t3.f.length && (e3 += "&subset=" + t3.f.join(",")), 0 < t3.g.length && (e3 += "&text=" + encodeURIComponent(t3.g)), e3;
              }(r2), y(e2)), b(e2, function() {
                t2(a2.a, a2.c, rt);
              });
            }, it.prototype.load = function(t2) {
              var e2 = this.a.id, n2 = this.c.o;
              e2 ? m(this.c, (this.a.api || "https://use.typekit.net") + "/" + e2 + ".js", function(e3) {
                if (e3)
                  t2([]);
                else if (n2.Typekit && n2.Typekit.config && n2.Typekit.config.fn) {
                  e3 = n2.Typekit.config.fn;
                  for (var r2 = [], i2 = 0; i2 < e3.length; i2 += 2)
                    for (var a2 = e3[i2], o2 = e3[i2 + 1], s2 = 0; s2 < o2.length; s2++)
                      r2.push(new w(a2, o2[s2]));
                  try {
                    n2.Typekit.load({ events: false, classes: false, async: true });
                  } catch (t3) {
                  }
                  t2(r2);
                }
              }, 2e3) : t2([]);
            }, at.prototype.load = function(t2) {
              var e2 = this.f.id, n2 = this.c.o, r2 = this;
              e2 ? (n2.__webfontfontdeckmodule__ || (n2.__webfontfontdeckmodule__ = {}), n2.__webfontfontdeckmodule__[e2] = function(e3, n3) {
                for (var i2 = 0, a2 = n3.fonts.length; i2 < a2; ++i2) {
                  var o2 = n3.fonts[i2];
                  r2.a.push(new w(o2.name, k("font-weight:" + o2.weight + ";font-style:" + o2.style)));
                }
                t2(r2.a);
              }, m(this.c, (this.f.api || "https://f.fontdeck.com/s/css/js/") + function(t3) {
                return t3.o.location.hostname || t3.a.location.hostname;
              }(this.c) + "/" + e2 + ".js", function(e3) {
                e3 && t2([]);
              })) : t2([]);
            };
            var ot = new W(window);
            ot.a.c.custom = function(t2, e2) {
              return new K(e2, t2);
            }, ot.a.c.fontdeck = function(t2, e2) {
              return new at(e2, t2);
            }, ot.a.c.monotype = function(t2, e2) {
              return new q(e2, t2);
            }, ot.a.c.typekit = function(t2, e2) {
              return new it(e2, t2);
            }, ot.a.c.google = function(t2, e2) {
              return new nt(e2, t2);
            };
            var st = { load: o(ot.load, ot) };
            void 0 === (r = function() {
              return st;
            }.call(e, n, e, t)) || (t.exports = r);
          }();
        }, JAIS: function(t, e, n) {
          "use strict";
          var r = n("Y4Or");
          n.n(r).a;
        }, JLG1: function(t, e, n) {
        }, "JSv+": function(t, e) {
        }, JYeC: function(t, e) {
        }, Je0I: function(t, e, n) {
          "use strict";
          var r = n("E6P4");
          n.n(r).a;
        }, JnUq: function(t, e, n) {
        }, Jo1H: function(t, e) {
        }, JtIp: function(t, e, n) {
          var r = { "./DropdownMenu.vue": "NC/Q", "./Gallery.vue": "bKDN", "./LibraryFooter.vue": "VO2P", "./LibraryHeader.vue": "Ps93", "./LoginForm.vue": "mseA", "./MenuBar.vue": "TRU7", "./SearchBox.vue": "zXRM", "./SpecialCollectionsFooter.vue": "r6Js" };
          function i(t2) {
            var e2 = a(t2);
            return n(e2);
          }
          function a(t2) {
            if (!n.o(r, t2)) {
              var e2 = new Error("Cannot find module '" + t2 + "'");
              throw e2.code = "MODULE_NOT_FOUND", e2;
            }
            return r[t2];
          }
          i.keys = function() {
            return Object.keys(r);
          }, i.resolve = a, t.exports = i, i.id = "JtIp";
        }, "KHd+": function(t, e, n) {
          "use strict";
          function r(t2, e2, n2, r2, i, a, o, s) {
            var c, u = "function" == typeof t2 ? t2.options : t2;
            if (e2 && (u.render = e2, u.staticRenderFns = n2, u._compiled = true), r2 && (u.functional = true), a && (u._scopeId = "data-v-" + a), o ? (c = function(t3) {
              (t3 = t3 || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (t3 = __VUE_SSR_CONTEXT__), i && i.call(this, t3), t3 && t3._registeredComponents && t3._registeredComponents.add(o);
            }, u._ssrRegister = c) : i && (c = s ? function() {
              i.call(this, this.$root.$options.shadowRoot);
            } : i), c)
              if (u.functional) {
                u._injectStyles = c;
                var l = u.render;
                u.render = function(t3, e3) {
                  return c.call(e3), l(t3, e3);
                };
              } else {
                var f = u.beforeCreate;
                u.beforeCreate = f ? [].concat(f, c) : [c];
              }
            return { exports: t2, options: u };
          }
          n.d(e, "a", function() {
            return r;
          });
        }, KIrT: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconReportRemove", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("XnhV"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("g", [n2("g", [n2("g", [n2("path", { attrs: { d: "M17.5,24c-3.6,0-6.5-2.9-6.5-6.5s2.9-6.5,6.5-6.5s6.5,2.9,6.5,6.5S21.1,24,17.5,24z M17.5,12c-3,0-5.5,2.5-5.5,5.5\n        s2.5,5.5,5.5,5.5s5.5-2.5,5.5-5.5S20.5,12,17.5,12z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15,20.5c-0.1,0-0.3,0-0.4-0.1c-0.2-0.2-0.2-0.5,0-0.7l5-5c0.2-0.2,0.5-0.2,0.7,0s0.2,0.5,0,0.7l-5,5\n        C15.3,20.5,15.1,20.5,15,20.5z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M20,20.5c-0.1,0-0.3,0-0.4-0.1l-5-5c-0.2-0.2-0.2-0.5,0-0.7s0.5-0.2,0.7,0l5,5c0.2,0.2,0.2,0.5,0,0.7\n        C20.3,20.5,20.1,20.5,20,20.5z" } })])]), t2._v(" "), n2("g", [n2("g", [n2("path", { attrs: { d: "M8,7H3.5C3.2,7,3,6.8,3,6.5S3.2,6,3.5,6H8c0.3,0,0.5,0.2,0.5,0.5S8.3,7,8,7z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M11.5,10h-8C3.2,10,3,9.8,3,9.5S3.2,9,3.5,9h8C11.8,9,12,9.2,12,9.5S11.8,10,11.5,10z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M9.5,13h-6C3.2,13,3,12.8,3,12.5S3.2,12,3.5,12h6c0.3,0,0.5,0.2,0.5,0.5S9.8,13,9.5,13z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M8.5,16h-5C3.2,16,3,15.8,3,15.5S3.2,15,3.5,15h5C8.8,15,9,15.2,9,15.5S8.8,16,8.5,16z" } })]), t2._v(" "), n2("g", [n2("g", [n2("path", { attrs: { d: "M10.5,22h-10C0.2,22,0,21.8,0,21.5v-21C0,0.2,0.2,0,0.5,0h11c0.1,0,0.3,0.1,0.4,0.1l5,5C16.9,5.2,17,5.4,17,5.5v4\n          c0,0.3-0.2,0.5-0.5,0.5S16,9.8,16,9.5V5.7L11.3,1H1v20h9.5c0.3,0,0.5,0.2,0.5,0.5S10.8,22,10.5,22z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M16.5,6h-5C11.2,6,11,5.8,11,5.5v-5C11,0.2,11.2,0,11.5,0S12,0.2,12,0.5V5h4.5C16.8,5,17,5.2,17,5.5S16.8,6,16.5,6z" } })])])])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, KTe4: function(t, e) {
        }, KeWn: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconHospital", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("JYeC"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("g", [n2("g", [n2("path", { attrs: { d: "M17.5,24c-0.3,0-0.5-0.2-0.5-0.5v-13c0-0.3,0.2-0.5,0.5-0.5s0.5,0.2,0.5,0.5v13C18,23.8,17.8,24,17.5,24z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M6.5,24C6.2,24,6,23.8,6,23.5V10.4c0-0.3,0.2-0.5,0.5-0.5S7,10.2,7,10.4v13.1C7,23.8,6.8,24,6.5,24z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M23.5,24c-0.3,0-0.5-0.2-0.5-0.5V13h-5v10.5c0,0.3-0.2,0.5-0.5,0.5S17,23.8,17,23.5v-11c0-0.3,0.2-0.5,0.5-0.5h6\n					c0.3,0,0.5,0.2,0.5,0.5v11C24,23.8,23.8,24,23.5,24z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M6.5,24C6.2,24,6,23.8,6,23.5V13H1v10.5C1,23.8,0.8,24,0.5,24S0,23.8,0,23.5v-11C0,12.2,0.2,12,0.5,12h6\n					C6.8,12,7,12.2,7,12.5v11C7,23.8,6.8,24,6.5,24z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M23.5,24h-23C0.2,24,0,23.8,0,23.5S0.2,23,0.5,23h23c0.3,0,0.5,0.2,0.5,0.5S23.8,24,23.5,24z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M12,14c-3.9,0-7-3.1-7-7s3.1-7,7-7c3.9,0,7,3.1,7,7S15.9,14,12,14z M12,1C8.7,1,6,3.7,6,7s2.7,6,6,6s6-2.7,6-6\n					S15.3,1,12,1z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M13.5,11h-3c-0.3,0-0.5-0.2-0.5-0.5V9H8.5C8.2,9,8,8.8,8,8.5v-3C8,5.2,8.2,5,8.5,5H10l0-1.5C10,3.2,10.2,3,10.5,3h3\n					c0.1,0,0.3,0.1,0.4,0.1S14,3.4,14,3.5L14,5h1.5C15.8,5,16,5.2,16,5.5v3C16,8.8,15.8,9,15.5,9H14v1.5C14,10.8,13.8,11,13.5,11z\n					 M11,10h2V8.5C13,8.2,13.2,8,13.5,8H15V6h-1.5c-0.1,0-0.3-0.1-0.4-0.1S13,5.6,13,5.5L13,4h-2l0,1.5C11,5.8,10.8,6,10.5,6H9v2\n					h1.5C10.8,8,11,8.2,11,8.5V10z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M4.5,15h-2C2.2,15,2,14.8,2,14.5S2.2,14,2.5,14h2C4.8,14,5,14.2,5,14.5S4.8,15,4.5,15z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M4.5,17h-2C2.2,17,2,16.8,2,16.5S2.2,16,2.5,16h2C4.8,16,5,16.2,5,16.5S4.8,17,4.5,17z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M4.5,19h-2C2.2,19,2,18.8,2,18.5S2.2,18,2.5,18h2C4.8,18,5,18.2,5,18.5S4.8,19,4.5,19z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M4.5,21h-2C2.2,21,2,20.8,2,20.5S2.2,20,2.5,20h2C4.8,20,5,20.2,5,20.5S4.8,21,4.5,21z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M21.5,15h-2c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5S21.8,15,21.5,15z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M21.5,17h-2c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5S21.8,17,21.5,17z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M21.5,19h-2c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5S21.8,19,21.5,19z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M21.5,21h-2c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5S21.8,21,21.5,21z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M9.5,16h-1C8.2,16,8,15.8,8,15.5S8.2,15,8.5,15h1c0.3,0,0.5,0.2,0.5,0.5S9.8,16,9.5,16z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M9.5,18h-1C8.2,18,8,17.8,8,17.5S8.2,17,8.5,17h1c0.3,0,0.5,0.2,0.5,0.5S9.8,18,9.5,18z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M9.5,20h-1C8.2,20,8,19.8,8,19.5S8.2,19,8.5,19h1c0.3,0,0.5,0.2,0.5,0.5S9.8,20,9.5,20z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M12.5,16h-1c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1c0.3,0,0.5,0.2,0.5,0.5S12.8,16,12.5,16z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M12.5,18h-1c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1c0.3,0,0.5,0.2,0.5,0.5S12.8,18,12.5,18z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M12.5,20h-1c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1c0.3,0,0.5,0.2,0.5,0.5S12.8,20,12.5,20z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15.5,16h-1c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1c0.3,0,0.5,0.2,0.5,0.5S15.8,16,15.5,16z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15.5,18h-1c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1c0.3,0,0.5,0.2,0.5,0.5S15.8,18,15.5,18z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15.5,20h-1c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1c0.3,0,0.5,0.2,0.5,0.5S15.8,20,15.5,20z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M13.5,24h-3c-0.3,0-0.5-0.2-0.5-0.5v-2c0-0.3,0.2-0.5,0.5-0.5h3c0.3,0,0.5,0.2,0.5,0.5v2C14,23.8,13.8,24,13.5,24z\n					 M11,23h2v-1h-2V23z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, Kj3A: function(t, e) {
        }, Kyfw: function(t, e, n) {
          var r, i;
          r = { expires: "1d", path: "; path=/", domain: "", secure: "", sameSite: "; SameSite=Lax" }, i = { install: function(t2) {
            t2.prototype.$cookies = this, t2.$cookies = this;
          }, config: function(t2, e2, n2, i2, a) {
            r.expires = t2 || "1d", r.path = e2 ? "; path=" + e2 : "; path=/", r.domain = n2 ? "; domain=" + n2 : "", r.secure = i2 ? "; Secure" : "", r.sameSite = a ? "; SameSite=" + a : "; SameSite=Lax";
          }, get: function(t2) {
            var e2 = decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(t2).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
            if (e2 && "{" === e2.substring(0, 1) && "}" === e2.substring(e2.length - 1, e2.length))
              try {
                e2 = JSON.parse(e2);
              } catch (t3) {
                return e2;
              }
            return e2;
          }, set: function(t2, e2, n2, i2, a, o, s) {
            if (!t2)
              throw new Error("Cookie name is not find in first argument.");
            if (/^(?:expires|max\-age|path|domain|secure|SameSite)$/i.test(t2))
              throw new Error('Cookie key name illegality, Cannot be set to ["expires","max-age","path","domain","secure","SameSite"]	 current key name: ' + t2);
            e2 && e2.constructor === Object && (e2 = JSON.stringify(e2));
            var c = "";
            if ((n2 = null == n2 ? r.expires : n2) && 0 != n2)
              switch (n2.constructor) {
                case Number:
                  c = n2 === 1 / 0 || -1 === n2 ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + n2;
                  break;
                case String:
                  if (/^(?:\d+(y|m|d|h|min|s))$/i.test(n2)) {
                    var u = n2.replace(/^(\d+)(?:y|m|d|h|min|s)$/i, "$1");
                    switch (n2.replace(/^(?:\d+)(y|m|d|h|min|s)$/i, "$1").toLowerCase()) {
                      case "m":
                        c = "; max-age=" + 2592e3 * +u;
                        break;
                      case "d":
                        c = "; max-age=" + 86400 * +u;
                        break;
                      case "h":
                        c = "; max-age=" + 3600 * +u;
                        break;
                      case "min":
                        c = "; max-age=" + 60 * +u;
                        break;
                      case "s":
                        c = "; max-age=" + u;
                        break;
                      case "y":
                        c = "; max-age=" + 31104e3 * +u;
                        break;
                      default:
                        new Error('unknown exception of "set operation"');
                    }
                  } else
                    c = "; expires=" + n2;
                  break;
                case Date:
                  c = "; expires=" + n2.toUTCString();
              }
            return document.cookie = encodeURIComponent(t2) + "=" + encodeURIComponent(e2) + c + (a ? "; domain=" + a : r.domain) + (i2 ? "; path=" + i2 : r.path) + (null == o ? r.secure : o ? "; Secure" : "") + (null == s ? r.sameSite : s ? "; SameSite=" + s : ""), this;
          }, remove: function(t2, e2, n2) {
            return !(!t2 || !this.isKey(t2)) && (document.cookie = encodeURIComponent(t2) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (n2 ? "; domain=" + n2 : r.domain) + (e2 ? "; path=" + e2 : r.path) + "; SameSite=Lax", this);
          }, isKey: function(t2) {
            return new RegExp("(?:^|;\\s*)" + encodeURIComponent(t2).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie);
          }, keys: function() {
            if (!document.cookie)
              return [];
            for (var t2 = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/), e2 = 0; e2 < t2.length; e2++)
              t2[e2] = decodeURIComponent(t2[e2]);
            return t2;
          } }, t.exports = i, "undefined" != typeof window && (window.$cookies = i);
        }, KznF: function(t, e, n) {
          "use strict";
          var r = n("0Rnf");
          n.n(r).a;
        }, L2JU: function(t, e, n) {
          "use strict";
          (function(t2) {
            n.d(e, "b", function() {
              return y;
            });
            var r = ("undefined" != typeof window ? window : void 0 !== t2 ? t2 : {}).__VUE_DEVTOOLS_GLOBAL_HOOK__;
            function i(t3, e2) {
              Object.keys(t3).forEach(function(n2) {
                return e2(t3[n2], n2);
              });
            }
            var a = function(t3, e2) {
              this.runtime = e2, this._children = /* @__PURE__ */ Object.create(null), this._rawModule = t3;
              var n2 = t3.state;
              this.state = ("function" == typeof n2 ? n2() : n2) || {};
            }, o = { namespaced: { configurable: true } };
            o.namespaced.get = function() {
              return !!this._rawModule.namespaced;
            }, a.prototype.addChild = function(t3, e2) {
              this._children[t3] = e2;
            }, a.prototype.removeChild = function(t3) {
              delete this._children[t3];
            }, a.prototype.getChild = function(t3) {
              return this._children[t3];
            }, a.prototype.update = function(t3) {
              this._rawModule.namespaced = t3.namespaced, t3.actions && (this._rawModule.actions = t3.actions), t3.mutations && (this._rawModule.mutations = t3.mutations), t3.getters && (this._rawModule.getters = t3.getters);
            }, a.prototype.forEachChild = function(t3) {
              i(this._children, t3);
            }, a.prototype.forEachGetter = function(t3) {
              this._rawModule.getters && i(this._rawModule.getters, t3);
            }, a.prototype.forEachAction = function(t3) {
              this._rawModule.actions && i(this._rawModule.actions, t3);
            }, a.prototype.forEachMutation = function(t3) {
              this._rawModule.mutations && i(this._rawModule.mutations, t3);
            }, Object.defineProperties(a.prototype, o);
            var s = function(t3) {
              this.register([], t3, false);
            };
            s.prototype.get = function(t3) {
              return t3.reduce(function(t4, e2) {
                return t4.getChild(e2);
              }, this.root);
            }, s.prototype.getNamespace = function(t3) {
              var e2 = this.root;
              return t3.reduce(function(t4, n2) {
                return t4 + ((e2 = e2.getChild(n2)).namespaced ? n2 + "/" : "");
              }, "");
            }, s.prototype.update = function(t3) {
              !function t4(e2, n2, r2) {
                0;
                if (n2.update(r2), r2.modules)
                  for (var i2 in r2.modules) {
                    if (!n2.getChild(i2))
                      return void 0;
                    t4(e2.concat(i2), n2.getChild(i2), r2.modules[i2]);
                  }
              }([], this.root, t3);
            }, s.prototype.register = function(t3, e2, n2) {
              var r2 = this;
              void 0 === n2 && (n2 = true);
              var o2 = new a(e2, n2);
              0 === t3.length ? this.root = o2 : this.get(t3.slice(0, -1)).addChild(t3[t3.length - 1], o2);
              e2.modules && i(e2.modules, function(e3, i2) {
                r2.register(t3.concat(i2), e3, n2);
              });
            }, s.prototype.unregister = function(t3) {
              var e2 = this.get(t3.slice(0, -1)), n2 = t3[t3.length - 1];
              e2.getChild(n2).runtime && e2.removeChild(n2);
            };
            var c;
            var u = function(t3) {
              var e2 = this;
              void 0 === t3 && (t3 = {}), !c && "undefined" != typeof window && window.Vue && g(window.Vue);
              var n2 = t3.plugins;
              void 0 === n2 && (n2 = []);
              var i2 = t3.strict;
              void 0 === i2 && (i2 = false), this._committing = false, this._actions = /* @__PURE__ */ Object.create(null), this._actionSubscribers = [], this._mutations = /* @__PURE__ */ Object.create(null), this._wrappedGetters = /* @__PURE__ */ Object.create(null), this._modules = new s(t3), this._modulesNamespaceMap = /* @__PURE__ */ Object.create(null), this._subscribers = [], this._watcherVM = new c();
              var a2 = this, o2 = this.dispatch, u2 = this.commit;
              this.dispatch = function(t4, e3) {
                return o2.call(a2, t4, e3);
              }, this.commit = function(t4, e3, n3) {
                return u2.call(a2, t4, e3, n3);
              }, this.strict = i2;
              var l2 = this._modules.root.state;
              h(this, l2, [], this._modules.root), p(this, l2), n2.forEach(function(t4) {
                return t4(e2);
              }), (void 0 !== t3.devtools ? t3.devtools : c.config.devtools) && function(t4) {
                r && (t4._devtoolHook = r, r.emit("vuex:init", t4), r.on("vuex:travel-to-state", function(e3) {
                  t4.replaceState(e3);
                }), t4.subscribe(function(t5, e3) {
                  r.emit("vuex:mutation", t5, e3);
                }));
              }(this);
            }, l = { state: { configurable: true } };
            function f(t3, e2) {
              return e2.indexOf(t3) < 0 && e2.push(t3), function() {
                var n2 = e2.indexOf(t3);
                n2 > -1 && e2.splice(n2, 1);
              };
            }
            function d(t3, e2) {
              t3._actions = /* @__PURE__ */ Object.create(null), t3._mutations = /* @__PURE__ */ Object.create(null), t3._wrappedGetters = /* @__PURE__ */ Object.create(null), t3._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
              var n2 = t3.state;
              h(t3, n2, [], t3._modules.root, true), p(t3, n2, e2);
            }
            function p(t3, e2, n2) {
              var r2 = t3._vm;
              t3.getters = {};
              var a2 = t3._wrappedGetters, o2 = {};
              i(a2, function(e3, n3) {
                o2[n3] = function(t4, e4) {
                  return function() {
                    return t4(e4);
                  };
                }(e3, t3), Object.defineProperty(t3.getters, n3, { get: function() {
                  return t3._vm[n3];
                }, enumerable: true });
              });
              var s2 = c.config.silent;
              c.config.silent = true, t3._vm = new c({ data: { $$state: e2 }, computed: o2 }), c.config.silent = s2, t3.strict && function(t4) {
                t4._vm.$watch(function() {
                  return this._data.$$state;
                }, function() {
                  0;
                }, { deep: true, sync: true });
              }(t3), r2 && (n2 && t3._withCommit(function() {
                r2._data.$$state = null;
              }), c.nextTick(function() {
                return r2.$destroy();
              }));
            }
            function h(t3, e2, n2, r2, i2) {
              var a2 = !n2.length, o2 = t3._modules.getNamespace(n2);
              if (r2.namespaced && (t3._modulesNamespaceMap[o2] = r2), !a2 && !i2) {
                var s2 = v(e2, n2.slice(0, -1)), u2 = n2[n2.length - 1];
                t3._withCommit(function() {
                  c.set(s2, u2, r2.state);
                });
              }
              var l2 = r2.context = function(t4, e3, n3) {
                var r3 = "" === e3, i3 = { dispatch: r3 ? t4.dispatch : function(n4, r4, i4) {
                  var a3 = m(n4, r4, i4), o3 = a3.payload, s3 = a3.options, c2 = a3.type;
                  return s3 && s3.root || (c2 = e3 + c2), t4.dispatch(c2, o3);
                }, commit: r3 ? t4.commit : function(n4, r4, i4) {
                  var a3 = m(n4, r4, i4), o3 = a3.payload, s3 = a3.options, c2 = a3.type;
                  s3 && s3.root || (c2 = e3 + c2), t4.commit(c2, o3, s3);
                } };
                return Object.defineProperties(i3, { getters: { get: r3 ? function() {
                  return t4.getters;
                } : function() {
                  return function(t5, e4) {
                    var n4 = {}, r4 = e4.length;
                    return Object.keys(t5.getters).forEach(function(i4) {
                      if (i4.slice(0, r4) === e4) {
                        var a3 = i4.slice(r4);
                        Object.defineProperty(n4, a3, { get: function() {
                          return t5.getters[i4];
                        }, enumerable: true });
                      }
                    }), n4;
                  }(t4, e3);
                } }, state: { get: function() {
                  return v(t4.state, n3);
                } } }), i3;
              }(t3, o2, n2);
              r2.forEachMutation(function(e3, n3) {
                !function(t4, e4, n4, r3) {
                  (t4._mutations[e4] || (t4._mutations[e4] = [])).push(function(e5) {
                    n4.call(t4, r3.state, e5);
                  });
                }(t3, o2 + n3, e3, l2);
              }), r2.forEachAction(function(e3, n3) {
                var r3 = e3.root ? n3 : o2 + n3, i3 = e3.handler || e3;
                !function(t4, e4, n4, r4) {
                  (t4._actions[e4] || (t4._actions[e4] = [])).push(function(e5, i4) {
                    var a3, o3 = n4.call(t4, { dispatch: r4.dispatch, commit: r4.commit, getters: r4.getters, state: r4.state, rootGetters: t4.getters, rootState: t4.state }, e5, i4);
                    return (a3 = o3) && "function" == typeof a3.then || (o3 = Promise.resolve(o3)), t4._devtoolHook ? o3.catch(function(e6) {
                      throw t4._devtoolHook.emit("vuex:error", e6), e6;
                    }) : o3;
                  });
                }(t3, r3, i3, l2);
              }), r2.forEachGetter(function(e3, n3) {
                !function(t4, e4, n4, r3) {
                  if (t4._wrappedGetters[e4])
                    return void 0;
                  t4._wrappedGetters[e4] = function(t5) {
                    return n4(r3.state, r3.getters, t5.state, t5.getters);
                  };
                }(t3, o2 + n3, e3, l2);
              }), r2.forEachChild(function(r3, a3) {
                h(t3, e2, n2.concat(a3), r3, i2);
              });
            }
            function v(t3, e2) {
              return e2.length ? e2.reduce(function(t4, e3) {
                return t4[e3];
              }, t3) : t3;
            }
            function m(t3, e2, n2) {
              var r2;
              return null !== (r2 = t3) && "object" == typeof r2 && t3.type && (n2 = e2, e2 = t3, t3 = t3.type), { type: t3, payload: e2, options: n2 };
            }
            function g(t3) {
              c && t3 === c || function(t4) {
                if (Number(t4.version.split(".")[0]) >= 2)
                  t4.mixin({ beforeCreate: n2 });
                else {
                  var e2 = t4.prototype._init;
                  t4.prototype._init = function(t5) {
                    void 0 === t5 && (t5 = {}), t5.init = t5.init ? [n2].concat(t5.init) : n2, e2.call(this, t5);
                  };
                }
                function n2() {
                  var t5 = this.$options;
                  t5.store ? this.$store = "function" == typeof t5.store ? t5.store() : t5.store : t5.parent && t5.parent.$store && (this.$store = t5.parent.$store);
                }
              }(c = t3);
            }
            l.state.get = function() {
              return this._vm._data.$$state;
            }, l.state.set = function(t3) {
              0;
            }, u.prototype.commit = function(t3, e2, n2) {
              var r2 = this, i2 = m(t3, e2, n2), a2 = i2.type, o2 = i2.payload, s2 = (i2.options, { type: a2, payload: o2 }), c2 = this._mutations[a2];
              c2 && (this._withCommit(function() {
                c2.forEach(function(t4) {
                  t4(o2);
                });
              }), this._subscribers.forEach(function(t4) {
                return t4(s2, r2.state);
              }));
            }, u.prototype.dispatch = function(t3, e2) {
              var n2 = this, r2 = m(t3, e2), i2 = r2.type, a2 = r2.payload, o2 = { type: i2, payload: a2 }, s2 = this._actions[i2];
              if (s2) {
                try {
                  this._actionSubscribers.filter(function(t4) {
                    return t4.before;
                  }).forEach(function(t4) {
                    return t4.before(o2, n2.state);
                  });
                } catch (t4) {
                  0;
                }
                return (s2.length > 1 ? Promise.all(s2.map(function(t4) {
                  return t4(a2);
                })) : s2[0](a2)).then(function(t4) {
                  try {
                    n2._actionSubscribers.filter(function(t5) {
                      return t5.after;
                    }).forEach(function(t5) {
                      return t5.after(o2, n2.state);
                    });
                  } catch (t5) {
                    0;
                  }
                  return t4;
                });
              }
            }, u.prototype.subscribe = function(t3) {
              return f(t3, this._subscribers);
            }, u.prototype.subscribeAction = function(t3) {
              return f("function" == typeof t3 ? { before: t3 } : t3, this._actionSubscribers);
            }, u.prototype.watch = function(t3, e2, n2) {
              var r2 = this;
              return this._watcherVM.$watch(function() {
                return t3(r2.state, r2.getters);
              }, e2, n2);
            }, u.prototype.replaceState = function(t3) {
              var e2 = this;
              this._withCommit(function() {
                e2._vm._data.$$state = t3;
              });
            }, u.prototype.registerModule = function(t3, e2, n2) {
              void 0 === n2 && (n2 = {}), "string" == typeof t3 && (t3 = [t3]), this._modules.register(t3, e2), h(this, this.state, t3, this._modules.get(t3), n2.preserveState), p(this, this.state);
            }, u.prototype.unregisterModule = function(t3) {
              var e2 = this;
              "string" == typeof t3 && (t3 = [t3]), this._modules.unregister(t3), this._withCommit(function() {
                var n2 = v(e2.state, t3.slice(0, -1));
                c.delete(n2, t3[t3.length - 1]);
              }), d(this);
            }, u.prototype.hotUpdate = function(t3) {
              this._modules.update(t3), d(this, true);
            }, u.prototype._withCommit = function(t3) {
              var e2 = this._committing;
              this._committing = true, t3(), this._committing = e2;
            }, Object.defineProperties(u.prototype, l);
            var y = C(function(t3, e2) {
              var n2 = {};
              return w(e2).forEach(function(e3) {
                var r2 = e3.key, i2 = e3.val;
                n2[r2] = function() {
                  var e4 = this.$store.state, n3 = this.$store.getters;
                  if (t3) {
                    var r3 = S(this.$store, "mapState", t3);
                    if (!r3)
                      return;
                    e4 = r3.context.state, n3 = r3.context.getters;
                  }
                  return "function" == typeof i2 ? i2.call(this, e4, n3) : e4[i2];
                }, n2[r2].vuex = true;
              }), n2;
            }), b = C(function(t3, e2) {
              var n2 = {};
              return w(e2).forEach(function(e3) {
                var r2 = e3.key, i2 = e3.val;
                n2[r2] = function() {
                  for (var e4 = [], n3 = arguments.length; n3--; )
                    e4[n3] = arguments[n3];
                  var r3 = this.$store.commit;
                  if (t3) {
                    var a2 = S(this.$store, "mapMutations", t3);
                    if (!a2)
                      return;
                    r3 = a2.context.commit;
                  }
                  return "function" == typeof i2 ? i2.apply(this, [r3].concat(e4)) : r3.apply(this.$store, [i2].concat(e4));
                };
              }), n2;
            }), _2 = C(function(t3, e2) {
              var n2 = {};
              return w(e2).forEach(function(e3) {
                var r2 = e3.key, i2 = e3.val;
                i2 = t3 + i2, n2[r2] = function() {
                  if (!t3 || S(this.$store, "mapGetters", t3))
                    return this.$store.getters[i2];
                }, n2[r2].vuex = true;
              }), n2;
            }), x = C(function(t3, e2) {
              var n2 = {};
              return w(e2).forEach(function(e3) {
                var r2 = e3.key, i2 = e3.val;
                n2[r2] = function() {
                  for (var e4 = [], n3 = arguments.length; n3--; )
                    e4[n3] = arguments[n3];
                  var r3 = this.$store.dispatch;
                  if (t3) {
                    var a2 = S(this.$store, "mapActions", t3);
                    if (!a2)
                      return;
                    r3 = a2.context.dispatch;
                  }
                  return "function" == typeof i2 ? i2.apply(this, [r3].concat(e4)) : r3.apply(this.$store, [i2].concat(e4));
                };
              }), n2;
            });
            function w(t3) {
              return Array.isArray(t3) ? t3.map(function(t4) {
                return { key: t4, val: t4 };
              }) : Object.keys(t3).map(function(e2) {
                return { key: e2, val: t3[e2] };
              });
            }
            function C(t3) {
              return function(e2, n2) {
                return "string" != typeof e2 ? (n2 = e2, e2 = "") : "/" !== e2.charAt(e2.length - 1) && (e2 += "/"), t3(e2, n2);
              };
            }
            function S(t3, e2, n2) {
              return t3._modulesNamespaceMap[n2];
            }
            var O = { Store: u, install: g, version: "3.1.1", mapState: y, mapMutations: b, mapGetters: _2, mapActions: x, createNamespacedHelpers: function(t3) {
              return { mapState: y.bind(null, t3), mapGetters: _2.bind(null, t3), mapMutations: b.bind(null, t3), mapActions: x.bind(null, t3) };
            } };
            e.a = O;
          }).call(this, n("yLpj"));
        }, L7ye: function(t, e) {
        }, LPnE: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconFlower", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("6ER8"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M10,13.5c-3.9,0-7-2.7-7-6c0-1.7,0.8-3.2,2.2-4.4C5.4,3,5.7,3,5.9,3.2C6.1,3.4,6,3.7,5.8,3.9C4.6,4.9,4,6.1,4,7.5\n      c0,2.8,2.7,5,6,5s6-2.2,6-5c0-1.4-0.6-2.6-1.8-3.6c-0.2-0.2-0.2-0.5-0.1-0.7C14.3,3,14.6,3,14.8,3.1C16.2,4.3,17,5.8,17,7.5\n      C17,10.8,13.9,13.5,10,13.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M10,7.5C7.3,7.5,5.2,5.9,5.2,4c0-1,0.6-1.9,1.6-2.6C7,1.3,7.3,1.3,7.4,1.6c0.2,0.2,0.1,0.5-0.1,0.7\n      C6.6,2.7,6.2,3.3,6.2,4c0,1.4,1.8,2.5,3.8,2.5s3.8-1.1,3.8-2.5c0-0.7-0.4-1.3-1.1-1.7c-0.2-0.2-0.3-0.5-0.1-0.7\n      c0.2-0.2,0.5-0.3,0.7-0.1c1,0.7,1.6,1.6,1.6,2.6C14.8,5.9,12.7,7.5,10,7.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M13.5,12.5c-0.3,0-0.5-0.2-0.5-0.5v-2c0-2-2.5-2.5-2.6-2.5c-0.3,0-0.5-0.3-0.4-0.6c0-0.3,0.3-0.5,0.6-0.4\n      C11.7,6.7,14,7.7,14,10v2C14,12.3,13.8,12.5,13.5,12.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M8,7C7.9,7,7.9,7,7.8,7C7.6,6.9,7.4,6.6,7.5,6.3c0-0.1,0.4-1.2,1.4-2.2C9.1,4,9.4,4,9.6,4.1c0.2,0.2,0.2,0.5,0,0.7\n      C8.8,5.6,8.5,6.6,8.5,6.7C8.4,6.9,8.2,7,8,7z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M10,5C8,5,6.5,3.9,6.5,2.5S8,0,10,0s3.5,1.1,3.5,2.5S12,5,10,5z M10,1C8.6,1,7.5,1.7,7.5,2.5S8.6,4,10,4\n      s2.5-0.7,2.5-1.5S11.4,1,10,1z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M10,5C9.7,5,9.5,4.8,9.5,4.5S9.7,4,10,4c0.2,0,0.4-0.1,0.5-0.2c0.1-0.1,0.2-0.3,0.2-0.5c0-0.5-0.7-0.8-1.8-0.8\n      C8.7,2.5,8.5,2.3,8.5,2S8.7,1.5,9,1.5c0.9,0,1.5,0.2,2,0.5c0.5,0.3,0.7,0.8,0.7,1.3C11.8,4.2,11,5,10,5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M10.5,24c-0.3,0-0.5-0.2-0.5-0.5V13c0-0.3,0.2-0.5,0.5-0.5S11,12.7,11,13v10.5C11,23.8,10.8,24,10.5,24z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12.5,22c-0.8,0-1.6-0.3-2.1-1.1c-0.5-0.7-0.5-1.6,0-2.2c0.5-0.7,1.4-1,2.3-0.7c1,0.3,2.7-0.7,3.2-1.2\n      c0.2-0.1,0.4-0.2,0.6,0c0.2,0.1,0.3,0.3,0.2,0.5c-0.1,0.3-0.8,3.1-2.1,4C14,21.7,13.2,22,12.5,22z M12,18.9\n      c-0.3,0-0.6,0.2-0.8,0.4c-0.2,0.2-0.3,0.6,0,1c0.7,0.9,1.9,0.8,2.8,0.2c0.5-0.3,0.9-1.2,1.2-2.1c-0.8,0.5-2,0.9-2.9,0.5\n      C12.2,18.9,12.1,18.9,12,18.9z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, LX5d: function(t, e) {
        }, Lmn2: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = n("bzL3"), i = { name: "Icon", status: "review", release: "1.0.0", props: { name: { required: true, default: "settings" }, fill: { type: String, default: "currentColor" }, ariaLabel: { type: String, default: "icon" }, type: { type: String, default: "span" }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } } }, data: function() {
            return { svg: r("./" + this.name + ".svg").replace(/^<svg /, '<svg style="fill: '.concat(this.fill, '" ')) };
          } }, a = (n("NeWu"), n("KHd+")), o = n("MCBN"), s = n.n(o), c = Object(a.a)(i, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", class: ["vds-icon", this.size], attrs: { "aria-label": this.ariaLabel }, domProps: { innerHTML: this._s(this.svg) } });
          }, [], false, null, null, null);
          "function" == typeof s.a && s()(c);
          e.default = c.exports;
        }, M0Vt: function(t, e, n) {
          "use strict";
          var r = n("XtJ2");
          n.n(r).a;
        }, MCBN: function(t, e) {
        }, MEiy: function(t, e, n) {
        }, MQ60: function(t, e, n) {
          t.exports = function(t2) {
            var e2 = {};
            function n2(r) {
              if (e2[r])
                return e2[r].exports;
              var i = e2[r] = { i: r, l: false, exports: {} };
              return t2[r].call(i.exports, i, i.exports, n2), i.l = true, i.exports;
            }
            return n2.m = t2, n2.c = e2, n2.d = function(t3, e3, r) {
              n2.o(t3, e3) || Object.defineProperty(t3, e3, { enumerable: true, get: r });
            }, n2.r = function(t3) {
              "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t3, "__esModule", { value: true });
            }, n2.t = function(t3, e3) {
              if (1 & e3 && (t3 = n2(t3)), 8 & e3)
                return t3;
              if (4 & e3 && "object" == typeof t3 && t3 && t3.__esModule)
                return t3;
              var r = /* @__PURE__ */ Object.create(null);
              if (n2.r(r), Object.defineProperty(r, "default", { enumerable: true, value: t3 }), 2 & e3 && "string" != typeof t3)
                for (var i in t3)
                  n2.d(r, i, function(e4) {
                    return t3[e4];
                  }.bind(null, i));
              return r;
            }, n2.n = function(t3) {
              var e3 = t3 && t3.__esModule ? function() {
                return t3.default;
              } : function() {
                return t3;
              };
              return n2.d(e3, "a", e3), e3;
            }, n2.o = function(t3, e3) {
              return Object.prototype.hasOwnProperty.call(t3, e3);
            }, n2.p = "", n2(n2.s = "fb15");
          }({ "02f4": function(t2, e2, n2) {
            var r = n2("4588"), i = n2("be13");
            t2.exports = function(t3) {
              return function(e3, n3) {
                var a, o, s = String(i(e3)), c = r(n3), u = s.length;
                return c < 0 || c >= u ? t3 ? "" : void 0 : (a = s.charCodeAt(c)) < 55296 || a > 56319 || c + 1 === u || (o = s.charCodeAt(c + 1)) < 56320 || o > 57343 ? t3 ? s.charAt(c) : a : t3 ? s.slice(c, c + 2) : o - 56320 + (a - 55296 << 10) + 65536;
              };
            };
          }, "0390": function(t2, e2, n2) {
            "use strict";
            var r = n2("02f4")(true);
            t2.exports = function(t3, e3, n3) {
              return e3 + (n3 ? r(t3, e3).length : 1);
            };
          }, "07e3": function(t2, e2) {
            var n2 = {}.hasOwnProperty;
            t2.exports = function(t3, e3) {
              return n2.call(t3, e3);
            };
          }, "0bfb": function(t2, e2, n2) {
            "use strict";
            var r = n2("cb7c");
            t2.exports = function() {
              var t3 = r(this), e3 = "";
              return t3.global && (e3 += "g"), t3.ignoreCase && (e3 += "i"), t3.multiline && (e3 += "m"), t3.unicode && (e3 += "u"), t3.sticky && (e3 += "y"), e3;
            };
          }, "0fc9": function(t2, e2, n2) {
            var r = n2("3a38"), i = Math.max, a = Math.min;
            t2.exports = function(t3, e3) {
              return (t3 = r(t3)) < 0 ? i(t3 + e3, 0) : a(t3, e3);
            };
          }, 1654: function(t2, e2, n2) {
            "use strict";
            var r = n2("71c1")(true);
            n2("30f1")(String, "String", function(t3) {
              this._t = String(t3), this._i = 0;
            }, function() {
              var t3, e3 = this._t, n3 = this._i;
              return n3 >= e3.length ? { value: void 0, done: true } : (t3 = r(e3, n3), this._i += t3.length, { value: t3, done: false });
            });
          }, 1691: function(t2, e2) {
            t2.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
          }, "1af6": function(t2, e2, n2) {
            var r = n2("63b6");
            r(r.S, "Array", { isArray: n2("9003") });
          }, "1bc3": function(t2, e2, n2) {
            var r = n2("f772");
            t2.exports = function(t3, e3) {
              if (!r(t3))
                return t3;
              var n3, i;
              if (e3 && "function" == typeof (n3 = t3.toString) && !r(i = n3.call(t3)))
                return i;
              if ("function" == typeof (n3 = t3.valueOf) && !r(i = n3.call(t3)))
                return i;
              if (!e3 && "function" == typeof (n3 = t3.toString) && !r(i = n3.call(t3)))
                return i;
              throw TypeError("Can't convert object to primitive value");
            };
          }, "1ec9": function(t2, e2, n2) {
            var r = n2("f772"), i = n2("e53d").document, a = r(i) && r(i.createElement);
            t2.exports = function(t3) {
              return a ? i.createElement(t3) : {};
            };
          }, "20fd": function(t2, e2, n2) {
            "use strict";
            var r = n2("d9f6"), i = n2("aebd");
            t2.exports = function(t3, e3, n3) {
              e3 in t3 ? r.f(t3, e3, i(0, n3)) : t3[e3] = n3;
            };
          }, "214f": function(t2, e2, n2) {
            "use strict";
            n2("b0c5");
            var r = n2("2aba"), i = n2("32e9"), a = n2("79e5"), o = n2("be13"), s = n2("2b4c"), c = n2("520a"), u = s("species"), l = !a(function() {
              var t3 = /./;
              return t3.exec = function() {
                var t4 = [];
                return t4.groups = { a: "7" }, t4;
              }, "7" !== "".replace(t3, "$<a>");
            }), f = function() {
              var t3 = /(?:)/, e3 = t3.exec;
              t3.exec = function() {
                return e3.apply(this, arguments);
              };
              var n3 = "ab".split(t3);
              return 2 === n3.length && "a" === n3[0] && "b" === n3[1];
            }();
            t2.exports = function(t3, e3, n3) {
              var d = s(t3), p = !a(function() {
                var e4 = {};
                return e4[d] = function() {
                  return 7;
                }, 7 != ""[t3](e4);
              }), h = p ? !a(function() {
                var e4 = false, n4 = /a/;
                return n4.exec = function() {
                  return e4 = true, null;
                }, "split" === t3 && (n4.constructor = {}, n4.constructor[u] = function() {
                  return n4;
                }), n4[d](""), !e4;
              }) : void 0;
              if (!p || !h || "replace" === t3 && !l || "split" === t3 && !f) {
                var v = /./[d], m = n3(o, d, ""[t3], function(t4, e4, n4, r2, i2) {
                  return e4.exec === c ? p && !i2 ? { done: true, value: v.call(e4, n4, r2) } : { done: true, value: t4.call(n4, e4, r2) } : { done: false };
                }), g = m[0], y = m[1];
                r(String.prototype, t3, g), i(RegExp.prototype, d, 2 == e3 ? function(t4, e4) {
                  return y.call(t4, this, e4);
                } : function(t4) {
                  return y.call(t4, this);
                });
              }
            };
          }, "230e": function(t2, e2, n2) {
            var r = n2("d3f4"), i = n2("7726").document, a = r(i) && r(i.createElement);
            t2.exports = function(t3) {
              return a ? i.createElement(t3) : {};
            };
          }, "23c6": function(t2, e2, n2) {
            var r = n2("2d95"), i = n2("2b4c")("toStringTag"), a = "Arguments" == r(function() {
              return arguments;
            }());
            t2.exports = function(t3) {
              var e3, n3, o;
              return void 0 === t3 ? "Undefined" : null === t3 ? "Null" : "string" == typeof (n3 = function(t4, e4) {
                try {
                  return t4[e4];
                } catch (t5) {
                }
              }(e3 = Object(t3), i)) ? n3 : a ? r(e3) : "Object" == (o = r(e3)) && "function" == typeof e3.callee ? "Arguments" : o;
            };
          }, "241e": function(t2, e2, n2) {
            var r = n2("25eb");
            t2.exports = function(t3) {
              return Object(r(t3));
            };
          }, "25eb": function(t2, e2) {
            t2.exports = function(t3) {
              if (null == t3)
                throw TypeError("Can't call method on  " + t3);
              return t3;
            };
          }, "294c": function(t2, e2) {
            t2.exports = function(t3) {
              try {
                return !!t3();
              } catch (t4) {
                return true;
              }
            };
          }, "2aba": function(t2, e2, n2) {
            var r = n2("7726"), i = n2("32e9"), a = n2("69a8"), o = n2("ca5a")("src"), s = n2("fa5b"), c = ("" + s).split("toString");
            n2("8378").inspectSource = function(t3) {
              return s.call(t3);
            }, (t2.exports = function(t3, e3, n3, s2) {
              var u = "function" == typeof n3;
              u && (a(n3, "name") || i(n3, "name", e3)), t3[e3] !== n3 && (u && (a(n3, o) || i(n3, o, t3[e3] ? "" + t3[e3] : c.join(String(e3)))), t3 === r ? t3[e3] = n3 : s2 ? t3[e3] ? t3[e3] = n3 : i(t3, e3, n3) : (delete t3[e3], i(t3, e3, n3)));
            })(Function.prototype, "toString", function() {
              return "function" == typeof this && this[o] || s.call(this);
            });
          }, "2b4c": function(t2, e2, n2) {
            var r = n2("5537")("wks"), i = n2("ca5a"), a = n2("7726").Symbol, o = "function" == typeof a;
            (t2.exports = function(t3) {
              return r[t3] || (r[t3] = o && a[t3] || (o ? a : i)("Symbol." + t3));
            }).store = r;
          }, "2d00": function(t2, e2) {
            t2.exports = false;
          }, "2d95": function(t2, e2) {
            var n2 = {}.toString;
            t2.exports = function(t3) {
              return n2.call(t3).slice(8, -1);
            };
          }, "2fdb": function(t2, e2, n2) {
            "use strict";
            var r = n2("5ca1"), i = n2("d2c8");
            r(r.P + r.F * n2("5147")("includes"), "String", { includes: function(t3) {
              return !!~i(this, t3, "includes").indexOf(t3, arguments.length > 1 ? arguments[1] : void 0);
            } });
          }, "30f1": function(t2, e2, n2) {
            "use strict";
            var r = n2("b8e3"), i = n2("63b6"), a = n2("9138"), o = n2("35e8"), s = n2("481b"), c = n2("8f60"), u = n2("45f2"), l = n2("53e2"), f = n2("5168")("iterator"), d = !([].keys && "next" in [].keys()), p = function() {
              return this;
            };
            t2.exports = function(t3, e3, n3, h, v, m, g) {
              c(n3, e3, h);
              var y, b, _2, x = function(t4) {
                if (!d && t4 in O)
                  return O[t4];
                switch (t4) {
                  case "keys":
                  case "values":
                    return function() {
                      return new n3(this, t4);
                    };
                }
                return function() {
                  return new n3(this, t4);
                };
              }, w = e3 + " Iterator", C = "values" == v, S = false, O = t3.prototype, k = O[f] || O["@@iterator"] || v && O[v], M = k || x(v), D = v ? C ? x("entries") : M : void 0, j = "Array" == e3 && O.entries || k;
              if (j && (_2 = l(j.call(new t3()))) !== Object.prototype && _2.next && (u(_2, w, true), r || "function" == typeof _2[f] || o(_2, f, p)), C && k && "values" !== k.name && (S = true, M = function() {
                return k.call(this);
              }), r && !g || !d && !S && O[f] || o(O, f, M), s[e3] = M, s[w] = p, v)
                if (y = { values: C ? M : x("values"), keys: m ? M : x("keys"), entries: D }, g)
                  for (b in y)
                    b in O || a(O, b, y[b]);
                else
                  i(i.P + i.F * (d || S), e3, y);
              return y;
            };
          }, "32a6": function(t2, e2, n2) {
            var r = n2("241e"), i = n2("c3a1");
            n2("ce7e")("keys", function() {
              return function(t3) {
                return i(r(t3));
              };
            });
          }, "32e9": function(t2, e2, n2) {
            var r = n2("86cc"), i = n2("4630");
            t2.exports = n2("9e1e") ? function(t3, e3, n3) {
              return r.f(t3, e3, i(1, n3));
            } : function(t3, e3, n3) {
              return t3[e3] = n3, t3;
            };
          }, "32fc": function(t2, e2, n2) {
            var r = n2("e53d").document;
            t2.exports = r && r.documentElement;
          }, "335c": function(t2, e2, n2) {
            var r = n2("6b4c");
            t2.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t3) {
              return "String" == r(t3) ? t3.split("") : Object(t3);
            };
          }, "355d": function(t2, e2) {
            e2.f = {}.propertyIsEnumerable;
          }, "35e8": function(t2, e2, n2) {
            var r = n2("d9f6"), i = n2("aebd");
            t2.exports = n2("8e60") ? function(t3, e3, n3) {
              return r.f(t3, e3, i(1, n3));
            } : function(t3, e3, n3) {
              return t3[e3] = n3, t3;
            };
          }, "36c3": function(t2, e2, n2) {
            var r = n2("335c"), i = n2("25eb");
            t2.exports = function(t3) {
              return r(i(t3));
            };
          }, 3702: function(t2, e2, n2) {
            var r = n2("481b"), i = n2("5168")("iterator"), a = Array.prototype;
            t2.exports = function(t3) {
              return void 0 !== t3 && (r.Array === t3 || a[i] === t3);
            };
          }, "3a38": function(t2, e2) {
            var n2 = Math.ceil, r = Math.floor;
            t2.exports = function(t3) {
              return isNaN(t3 = +t3) ? 0 : (t3 > 0 ? r : n2)(t3);
            };
          }, "40c3": function(t2, e2, n2) {
            var r = n2("6b4c"), i = n2("5168")("toStringTag"), a = "Arguments" == r(function() {
              return arguments;
            }());
            t2.exports = function(t3) {
              var e3, n3, o;
              return void 0 === t3 ? "Undefined" : null === t3 ? "Null" : "string" == typeof (n3 = function(t4, e4) {
                try {
                  return t4[e4];
                } catch (t5) {
                }
              }(e3 = Object(t3), i)) ? n3 : a ? r(e3) : "Object" == (o = r(e3)) && "function" == typeof e3.callee ? "Arguments" : o;
            };
          }, 4588: function(t2, e2) {
            var n2 = Math.ceil, r = Math.floor;
            t2.exports = function(t3) {
              return isNaN(t3 = +t3) ? 0 : (t3 > 0 ? r : n2)(t3);
            };
          }, "45f2": function(t2, e2, n2) {
            var r = n2("d9f6").f, i = n2("07e3"), a = n2("5168")("toStringTag");
            t2.exports = function(t3, e3, n3) {
              t3 && !i(t3 = n3 ? t3 : t3.prototype, a) && r(t3, a, { configurable: true, value: e3 });
            };
          }, 4630: function(t2, e2) {
            t2.exports = function(t3, e3) {
              return { enumerable: !(1 & t3), configurable: !(2 & t3), writable: !(4 & t3), value: e3 };
            };
          }, "469f": function(t2, e2, n2) {
            n2("6c1c"), n2("1654"), t2.exports = n2("7d7b");
          }, "481b": function(t2, e2) {
            t2.exports = {};
          }, "4aa6": function(t2, e2, n2) {
            t2.exports = n2("dc62");
          }, "4bf8": function(t2, e2, n2) {
            var r = n2("be13");
            t2.exports = function(t3) {
              return Object(r(t3));
            };
          }, "4ee1": function(t2, e2, n2) {
            var r = n2("5168")("iterator"), i = false;
            try {
              var a = [7][r]();
              a.return = function() {
                i = true;
              }, Array.from(a, function() {
                throw 2;
              });
            } catch (t3) {
            }
            t2.exports = function(t3, e3) {
              if (!e3 && !i)
                return false;
              var n3 = false;
              try {
                var a2 = [7], o = a2[r]();
                o.next = function() {
                  return { done: n3 = true };
                }, a2[r] = function() {
                  return o;
                }, t3(a2);
              } catch (t4) {
              }
              return n3;
            };
          }, "50ed": function(t2, e2) {
            t2.exports = function(t3, e3) {
              return { value: e3, done: !!t3 };
            };
          }, 5147: function(t2, e2, n2) {
            var r = n2("2b4c")("match");
            t2.exports = function(t3) {
              var e3 = /./;
              try {
                "/./"[t3](e3);
              } catch (n3) {
                try {
                  return e3[r] = false, !"/./"[t3](e3);
                } catch (t4) {
                }
              }
              return true;
            };
          }, 5168: function(t2, e2, n2) {
            var r = n2("dbdb")("wks"), i = n2("62a0"), a = n2("e53d").Symbol, o = "function" == typeof a;
            (t2.exports = function(t3) {
              return r[t3] || (r[t3] = o && a[t3] || (o ? a : i)("Symbol." + t3));
            }).store = r;
          }, 5176: function(t2, e2, n2) {
            t2.exports = n2("51b6");
          }, "51b6": function(t2, e2, n2) {
            n2("a3c3"), t2.exports = n2("584a").Object.assign;
          }, "520a": function(t2, e2, n2) {
            "use strict";
            var r, i, a = n2("0bfb"), o = RegExp.prototype.exec, s = String.prototype.replace, c = o, u = (r = /a/, i = /b*/g, o.call(r, "a"), o.call(i, "a"), 0 !== r.lastIndex || 0 !== i.lastIndex), l = void 0 !== /()??/.exec("")[1];
            (u || l) && (c = function(t3) {
              var e3, n3, r2, i2, c2 = this;
              return l && (n3 = new RegExp("^" + c2.source + "$(?!\\s)", a.call(c2))), u && (e3 = c2.lastIndex), r2 = o.call(c2, t3), u && r2 && (c2.lastIndex = c2.global ? r2.index + r2[0].length : e3), l && r2 && r2.length > 1 && s.call(r2[0], n3, function() {
                for (i2 = 1; i2 < arguments.length - 2; i2++)
                  void 0 === arguments[i2] && (r2[i2] = void 0);
              }), r2;
            }), t2.exports = c;
          }, "53e2": function(t2, e2, n2) {
            var r = n2("07e3"), i = n2("241e"), a = n2("5559")("IE_PROTO"), o = Object.prototype;
            t2.exports = Object.getPrototypeOf || function(t3) {
              return t3 = i(t3), r(t3, a) ? t3[a] : "function" == typeof t3.constructor && t3 instanceof t3.constructor ? t3.constructor.prototype : t3 instanceof Object ? o : null;
            };
          }, "549b": function(t2, e2, n2) {
            "use strict";
            var r = n2("d864"), i = n2("63b6"), a = n2("241e"), o = n2("b0dc"), s = n2("3702"), c = n2("b447"), u = n2("20fd"), l = n2("7cd6");
            i(i.S + i.F * !n2("4ee1")(function(t3) {
              Array.from(t3);
            }), "Array", { from: function(t3) {
              var e3, n3, i2, f, d = a(t3), p = "function" == typeof this ? this : Array, h = arguments.length, v = h > 1 ? arguments[1] : void 0, m = void 0 !== v, g = 0, y = l(d);
              if (m && (v = r(v, h > 2 ? arguments[2] : void 0, 2)), null == y || p == Array && s(y))
                for (n3 = new p(e3 = c(d.length)); e3 > g; g++)
                  u(n3, g, m ? v(d[g], g) : d[g]);
              else
                for (f = y.call(d), n3 = new p(); !(i2 = f.next()).done; g++)
                  u(n3, g, m ? o(f, v, [i2.value, g], true) : i2.value);
              return n3.length = g, n3;
            } });
          }, "54a1": function(t2, e2, n2) {
            n2("6c1c"), n2("1654"), t2.exports = n2("95d5");
          }, 5537: function(t2, e2, n2) {
            var r = n2("8378"), i = n2("7726"), a = i["__core-js_shared__"] || (i["__core-js_shared__"] = {});
            (t2.exports = function(t3, e3) {
              return a[t3] || (a[t3] = void 0 !== e3 ? e3 : {});
            })("versions", []).push({ version: r.version, mode: n2("2d00") ? "pure" : "global", copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)" });
          }, 5559: function(t2, e2, n2) {
            var r = n2("dbdb")("keys"), i = n2("62a0");
            t2.exports = function(t3) {
              return r[t3] || (r[t3] = i(t3));
            };
          }, "584a": function(t2, e2) {
            var n2 = t2.exports = { version: "2.6.5" };
            "number" == typeof __e && (__e = n2);
          }, "5b4e": function(t2, e2, n2) {
            var r = n2("36c3"), i = n2("b447"), a = n2("0fc9");
            t2.exports = function(t3) {
              return function(e3, n3, o) {
                var s, c = r(e3), u = i(c.length), l = a(o, u);
                if (t3 && n3 != n3) {
                  for (; u > l; )
                    if ((s = c[l++]) != s)
                      return true;
                } else
                  for (; u > l; l++)
                    if ((t3 || l in c) && c[l] === n3)
                      return t3 || l || 0;
                return !t3 && -1;
              };
            };
          }, "5ca1": function(t2, e2, n2) {
            var r = n2("7726"), i = n2("8378"), a = n2("32e9"), o = n2("2aba"), s = n2("9b43"), c = function(t3, e3, n3) {
              var u, l, f, d, p = t3 & c.F, h = t3 & c.G, v = t3 & c.S, m = t3 & c.P, g = t3 & c.B, y = h ? r : v ? r[e3] || (r[e3] = {}) : (r[e3] || {}).prototype, b = h ? i : i[e3] || (i[e3] = {}), _2 = b.prototype || (b.prototype = {});
              for (u in h && (n3 = e3), n3)
                f = ((l = !p && y && void 0 !== y[u]) ? y : n3)[u], d = g && l ? s(f, r) : m && "function" == typeof f ? s(Function.call, f) : f, y && o(y, u, f, t3 & c.U), b[u] != f && a(b, u, d), m && _2[u] != f && (_2[u] = f);
            };
            r.core = i, c.F = 1, c.G = 2, c.S = 4, c.P = 8, c.B = 16, c.W = 32, c.U = 64, c.R = 128, t2.exports = c;
          }, "5d73": function(t2, e2, n2) {
            t2.exports = n2("469f");
          }, "5f1b": function(t2, e2, n2) {
            "use strict";
            var r = n2("23c6"), i = RegExp.prototype.exec;
            t2.exports = function(t3, e3) {
              var n3 = t3.exec;
              if ("function" == typeof n3) {
                var a = n3.call(t3, e3);
                if ("object" != typeof a)
                  throw new TypeError("RegExp exec method returned something other than an Object or null");
                return a;
              }
              if ("RegExp" !== r(t3))
                throw new TypeError("RegExp#exec called on incompatible receiver");
              return i.call(t3, e3);
            };
          }, "626a": function(t2, e2, n2) {
            var r = n2("2d95");
            t2.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t3) {
              return "String" == r(t3) ? t3.split("") : Object(t3);
            };
          }, "62a0": function(t2, e2) {
            var n2 = 0, r = Math.random();
            t2.exports = function(t3) {
              return "Symbol(".concat(void 0 === t3 ? "" : t3, ")_", (++n2 + r).toString(36));
            };
          }, "63b6": function(t2, e2, n2) {
            var r = n2("e53d"), i = n2("584a"), a = n2("d864"), o = n2("35e8"), s = n2("07e3"), c = function(t3, e3, n3) {
              var u, l, f, d = t3 & c.F, p = t3 & c.G, h = t3 & c.S, v = t3 & c.P, m = t3 & c.B, g = t3 & c.W, y = p ? i : i[e3] || (i[e3] = {}), b = y.prototype, _2 = p ? r : h ? r[e3] : (r[e3] || {}).prototype;
              for (u in p && (n3 = e3), n3)
                (l = !d && _2 && void 0 !== _2[u]) && s(y, u) || (f = l ? _2[u] : n3[u], y[u] = p && "function" != typeof _2[u] ? n3[u] : m && l ? a(f, r) : g && _2[u] == f ? function(t4) {
                  var e4 = function(e5, n4, r2) {
                    if (this instanceof t4) {
                      switch (arguments.length) {
                        case 0:
                          return new t4();
                        case 1:
                          return new t4(e5);
                        case 2:
                          return new t4(e5, n4);
                      }
                      return new t4(e5, n4, r2);
                    }
                    return t4.apply(this, arguments);
                  };
                  return e4.prototype = t4.prototype, e4;
                }(f) : v && "function" == typeof f ? a(Function.call, f) : f, v && ((y.virtual || (y.virtual = {}))[u] = f, t3 & c.R && b && !b[u] && o(b, u, f)));
            };
            c.F = 1, c.G = 2, c.S = 4, c.P = 8, c.B = 16, c.W = 32, c.U = 64, c.R = 128, t2.exports = c;
          }, 6762: function(t2, e2, n2) {
            "use strict";
            var r = n2("5ca1"), i = n2("c366")(true);
            r(r.P, "Array", { includes: function(t3) {
              return i(this, t3, arguments.length > 1 ? arguments[1] : void 0);
            } }), n2("9c6c")("includes");
          }, 6821: function(t2, e2, n2) {
            var r = n2("626a"), i = n2("be13");
            t2.exports = function(t3) {
              return r(i(t3));
            };
          }, "69a8": function(t2, e2) {
            var n2 = {}.hasOwnProperty;
            t2.exports = function(t3, e3) {
              return n2.call(t3, e3);
            };
          }, "6a99": function(t2, e2, n2) {
            var r = n2("d3f4");
            t2.exports = function(t3, e3) {
              if (!r(t3))
                return t3;
              var n3, i;
              if (e3 && "function" == typeof (n3 = t3.toString) && !r(i = n3.call(t3)))
                return i;
              if ("function" == typeof (n3 = t3.valueOf) && !r(i = n3.call(t3)))
                return i;
              if (!e3 && "function" == typeof (n3 = t3.toString) && !r(i = n3.call(t3)))
                return i;
              throw TypeError("Can't convert object to primitive value");
            };
          }, "6b4c": function(t2, e2) {
            var n2 = {}.toString;
            t2.exports = function(t3) {
              return n2.call(t3).slice(8, -1);
            };
          }, "6c1c": function(t2, e2, n2) {
            n2("c367");
            for (var r = n2("e53d"), i = n2("35e8"), a = n2("481b"), o = n2("5168")("toStringTag"), s = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), c = 0; c < s.length; c++) {
              var u = s[c], l = r[u], f = l && l.prototype;
              f && !f[o] && i(f, o, u), a[u] = a.Array;
            }
          }, "71c1": function(t2, e2, n2) {
            var r = n2("3a38"), i = n2("25eb");
            t2.exports = function(t3) {
              return function(e3, n3) {
                var a, o, s = String(i(e3)), c = r(n3), u = s.length;
                return c < 0 || c >= u ? t3 ? "" : void 0 : (a = s.charCodeAt(c)) < 55296 || a > 56319 || c + 1 === u || (o = s.charCodeAt(c + 1)) < 56320 || o > 57343 ? t3 ? s.charAt(c) : a : t3 ? s.slice(c, c + 2) : o - 56320 + (a - 55296 << 10) + 65536;
              };
            };
          }, 7726: function(t2, e2) {
            var n2 = t2.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
            "number" == typeof __g && (__g = n2);
          }, "774e": function(t2, e2, n2) {
            t2.exports = n2("d2d5");
          }, "77f1": function(t2, e2, n2) {
            var r = n2("4588"), i = Math.max, a = Math.min;
            t2.exports = function(t3, e3) {
              return (t3 = r(t3)) < 0 ? i(t3 + e3, 0) : a(t3, e3);
            };
          }, "794b": function(t2, e2, n2) {
            t2.exports = !n2("8e60") && !n2("294c")(function() {
              return 7 != Object.defineProperty(n2("1ec9")("div"), "a", { get: function() {
                return 7;
              } }).a;
            });
          }, "79aa": function(t2, e2) {
            t2.exports = function(t3) {
              if ("function" != typeof t3)
                throw TypeError(t3 + " is not a function!");
              return t3;
            };
          }, "79e5": function(t2, e2) {
            t2.exports = function(t3) {
              try {
                return !!t3();
              } catch (t4) {
                return true;
              }
            };
          }, "7cd6": function(t2, e2, n2) {
            var r = n2("40c3"), i = n2("5168")("iterator"), a = n2("481b");
            t2.exports = n2("584a").getIteratorMethod = function(t3) {
              if (null != t3)
                return t3[i] || t3["@@iterator"] || a[r(t3)];
            };
          }, "7d7b": function(t2, e2, n2) {
            var r = n2("e4ae"), i = n2("7cd6");
            t2.exports = n2("584a").getIterator = function(t3) {
              var e3 = i(t3);
              if ("function" != typeof e3)
                throw TypeError(t3 + " is not iterable!");
              return r(e3.call(t3));
            };
          }, "7e90": function(t2, e2, n2) {
            var r = n2("d9f6"), i = n2("e4ae"), a = n2("c3a1");
            t2.exports = n2("8e60") ? Object.defineProperties : function(t3, e3) {
              i(t3);
              for (var n3, o = a(e3), s = o.length, c = 0; s > c; )
                r.f(t3, n3 = o[c++], e3[n3]);
              return t3;
            };
          }, 8378: function(t2, e2) {
            var n2 = t2.exports = { version: "2.6.5" };
            "number" == typeof __e && (__e = n2);
          }, 8436: function(t2, e2) {
            t2.exports = function() {
            };
          }, "86cc": function(t2, e2, n2) {
            var r = n2("cb7c"), i = n2("c69a"), a = n2("6a99"), o = Object.defineProperty;
            e2.f = n2("9e1e") ? Object.defineProperty : function(t3, e3, n3) {
              if (r(t3), e3 = a(e3, true), r(n3), i)
                try {
                  return o(t3, e3, n3);
                } catch (t4) {
                }
              if ("get" in n3 || "set" in n3)
                throw TypeError("Accessors not supported!");
              return "value" in n3 && (t3[e3] = n3.value), t3;
            };
          }, "8aae": function(t2, e2, n2) {
            n2("32a6"), t2.exports = n2("584a").Object.keys;
          }, "8e60": function(t2, e2, n2) {
            t2.exports = !n2("294c")(function() {
              return 7 != Object.defineProperty({}, "a", { get: function() {
                return 7;
              } }).a;
            });
          }, "8f60": function(t2, e2, n2) {
            "use strict";
            var r = n2("a159"), i = n2("aebd"), a = n2("45f2"), o = {};
            n2("35e8")(o, n2("5168")("iterator"), function() {
              return this;
            }), t2.exports = function(t3, e3, n3) {
              t3.prototype = r(o, { next: i(1, n3) }), a(t3, e3 + " Iterator");
            };
          }, 9003: function(t2, e2, n2) {
            var r = n2("6b4c");
            t2.exports = Array.isArray || function(t3) {
              return "Array" == r(t3);
            };
          }, 9138: function(t2, e2, n2) {
            t2.exports = n2("35e8");
          }, 9306: function(t2, e2, n2) {
            "use strict";
            var r = n2("c3a1"), i = n2("9aa9"), a = n2("355d"), o = n2("241e"), s = n2("335c"), c = Object.assign;
            t2.exports = !c || n2("294c")(function() {
              var t3 = {}, e3 = {}, n3 = Symbol(), r2 = "abcdefghijklmnopqrst";
              return t3[n3] = 7, r2.split("").forEach(function(t4) {
                e3[t4] = t4;
              }), 7 != c({}, t3)[n3] || Object.keys(c({}, e3)).join("") != r2;
            }) ? function(t3, e3) {
              for (var n3 = o(t3), c2 = arguments.length, u = 1, l = i.f, f = a.f; c2 > u; )
                for (var d, p = s(arguments[u++]), h = l ? r(p).concat(l(p)) : r(p), v = h.length, m = 0; v > m; )
                  f.call(p, d = h[m++]) && (n3[d] = p[d]);
              return n3;
            } : c;
          }, 9427: function(t2, e2, n2) {
            var r = n2("63b6");
            r(r.S, "Object", { create: n2("a159") });
          }, "95d5": function(t2, e2, n2) {
            var r = n2("40c3"), i = n2("5168")("iterator"), a = n2("481b");
            t2.exports = n2("584a").isIterable = function(t3) {
              var e3 = Object(t3);
              return void 0 !== e3[i] || "@@iterator" in e3 || a.hasOwnProperty(r(e3));
            };
          }, "9aa9": function(t2, e2) {
            e2.f = Object.getOwnPropertySymbols;
          }, "9b43": function(t2, e2, n2) {
            var r = n2("d8e8");
            t2.exports = function(t3, e3, n3) {
              if (r(t3), void 0 === e3)
                return t3;
              switch (n3) {
                case 1:
                  return function(n4) {
                    return t3.call(e3, n4);
                  };
                case 2:
                  return function(n4, r2) {
                    return t3.call(e3, n4, r2);
                  };
                case 3:
                  return function(n4, r2, i) {
                    return t3.call(e3, n4, r2, i);
                  };
              }
              return function() {
                return t3.apply(e3, arguments);
              };
            };
          }, "9c6c": function(t2, e2, n2) {
            var r = n2("2b4c")("unscopables"), i = Array.prototype;
            null == i[r] && n2("32e9")(i, r, {}), t2.exports = function(t3) {
              i[r][t3] = true;
            };
          }, "9def": function(t2, e2, n2) {
            var r = n2("4588"), i = Math.min;
            t2.exports = function(t3) {
              return t3 > 0 ? i(r(t3), 9007199254740991) : 0;
            };
          }, "9e1e": function(t2, e2, n2) {
            t2.exports = !n2("79e5")(function() {
              return 7 != Object.defineProperty({}, "a", { get: function() {
                return 7;
              } }).a;
            });
          }, a159: function(t2, e2, n2) {
            var r = n2("e4ae"), i = n2("7e90"), a = n2("1691"), o = n2("5559")("IE_PROTO"), s = function() {
            }, c = function() {
              var t3, e3 = n2("1ec9")("iframe"), r2 = a.length;
              for (e3.style.display = "none", n2("32fc").appendChild(e3), e3.src = "javascript:", (t3 = e3.contentWindow.document).open(), t3.write("<script>document.F=Object<\/script>"), t3.close(), c = t3.F; r2--; )
                delete c.prototype[a[r2]];
              return c();
            };
            t2.exports = Object.create || function(t3, e3) {
              var n3;
              return null !== t3 ? (s.prototype = r(t3), n3 = new s(), s.prototype = null, n3[o] = t3) : n3 = c(), void 0 === e3 ? n3 : i(n3, e3);
            };
          }, a352: function(t2, e2) {
            t2.exports = n("U/5H");
          }, a3c3: function(t2, e2, n2) {
            var r = n2("63b6");
            r(r.S + r.F, "Object", { assign: n2("9306") });
          }, a481: function(t2, e2, n2) {
            "use strict";
            var r = n2("cb7c"), i = n2("4bf8"), a = n2("9def"), o = n2("4588"), s = n2("0390"), c = n2("5f1b"), u = Math.max, l = Math.min, f = Math.floor, d = /\$([$&`']|\d\d?|<[^>]*>)/g, p = /\$([$&`']|\d\d?)/g;
            n2("214f")("replace", 2, function(t3, e3, n3, h) {
              return [function(r2, i2) {
                var a2 = t3(this), o2 = null == r2 ? void 0 : r2[e3];
                return void 0 !== o2 ? o2.call(r2, a2, i2) : n3.call(String(a2), r2, i2);
              }, function(t4, e4) {
                var i2 = h(n3, t4, this, e4);
                if (i2.done)
                  return i2.value;
                var f2 = r(t4), d2 = String(this), p2 = "function" == typeof e4;
                p2 || (e4 = String(e4));
                var m = f2.global;
                if (m) {
                  var g = f2.unicode;
                  f2.lastIndex = 0;
                }
                for (var y = []; ; ) {
                  var b = c(f2, d2);
                  if (null === b)
                    break;
                  if (y.push(b), !m)
                    break;
                  "" === String(b[0]) && (f2.lastIndex = s(d2, a(f2.lastIndex), g));
                }
                for (var _2, x = "", w = 0, C = 0; C < y.length; C++) {
                  b = y[C];
                  for (var S = String(b[0]), O = u(l(o(b.index), d2.length), 0), k = [], M = 1; M < b.length; M++)
                    k.push(void 0 === (_2 = b[M]) ? _2 : String(_2));
                  var D = b.groups;
                  if (p2) {
                    var j = [S].concat(k, O, d2);
                    void 0 !== D && j.push(D);
                    var L2 = String(e4.apply(void 0, j));
                  } else
                    L2 = v(S, d2, O, k, D, e4);
                  O >= w && (x += d2.slice(w, O) + L2, w = O + S.length);
                }
                return x + d2.slice(w);
              }];
              function v(t4, e4, r2, a2, o2, s2) {
                var c2 = r2 + t4.length, u2 = a2.length, l2 = p;
                return void 0 !== o2 && (o2 = i(o2), l2 = d), n3.call(s2, l2, function(n4, i2) {
                  var s3;
                  switch (i2.charAt(0)) {
                    case "$":
                      return "$";
                    case "&":
                      return t4;
                    case "`":
                      return e4.slice(0, r2);
                    case "'":
                      return e4.slice(c2);
                    case "<":
                      s3 = o2[i2.slice(1, -1)];
                      break;
                    default:
                      var l3 = +i2;
                      if (0 === l3)
                        return n4;
                      if (l3 > u2) {
                        var d2 = f(l3 / 10);
                        return 0 === d2 ? n4 : d2 <= u2 ? void 0 === a2[d2 - 1] ? i2.charAt(1) : a2[d2 - 1] + i2.charAt(1) : n4;
                      }
                      s3 = a2[l3 - 1];
                  }
                  return void 0 === s3 ? "" : s3;
                });
              }
            });
          }, a4bb: function(t2, e2, n2) {
            t2.exports = n2("8aae");
          }, a745: function(t2, e2, n2) {
            t2.exports = n2("f410");
          }, aae3: function(t2, e2, n2) {
            var r = n2("d3f4"), i = n2("2d95"), a = n2("2b4c")("match");
            t2.exports = function(t3) {
              var e3;
              return r(t3) && (void 0 !== (e3 = t3[a]) ? !!e3 : "RegExp" == i(t3));
            };
          }, aebd: function(t2, e2) {
            t2.exports = function(t3, e3) {
              return { enumerable: !(1 & t3), configurable: !(2 & t3), writable: !(4 & t3), value: e3 };
            };
          }, b0c5: function(t2, e2, n2) {
            "use strict";
            var r = n2("520a");
            n2("5ca1")({ target: "RegExp", proto: true, forced: r !== /./.exec }, { exec: r });
          }, b0dc: function(t2, e2, n2) {
            var r = n2("e4ae");
            t2.exports = function(t3, e3, n3, i) {
              try {
                return i ? e3(r(n3)[0], n3[1]) : e3(n3);
              } catch (e4) {
                var a = t3.return;
                throw void 0 !== a && r(a.call(t3)), e4;
              }
            };
          }, b447: function(t2, e2, n2) {
            var r = n2("3a38"), i = Math.min;
            t2.exports = function(t3) {
              return t3 > 0 ? i(r(t3), 9007199254740991) : 0;
            };
          }, b8e3: function(t2, e2) {
            t2.exports = true;
          }, be13: function(t2, e2) {
            t2.exports = function(t3) {
              if (null == t3)
                throw TypeError("Can't call method on  " + t3);
              return t3;
            };
          }, c366: function(t2, e2, n2) {
            var r = n2("6821"), i = n2("9def"), a = n2("77f1");
            t2.exports = function(t3) {
              return function(e3, n3, o) {
                var s, c = r(e3), u = i(c.length), l = a(o, u);
                if (t3 && n3 != n3) {
                  for (; u > l; )
                    if ((s = c[l++]) != s)
                      return true;
                } else
                  for (; u > l; l++)
                    if ((t3 || l in c) && c[l] === n3)
                      return t3 || l || 0;
                return !t3 && -1;
              };
            };
          }, c367: function(t2, e2, n2) {
            "use strict";
            var r = n2("8436"), i = n2("50ed"), a = n2("481b"), o = n2("36c3");
            t2.exports = n2("30f1")(Array, "Array", function(t3, e3) {
              this._t = o(t3), this._i = 0, this._k = e3;
            }, function() {
              var t3 = this._t, e3 = this._k, n3 = this._i++;
              return !t3 || n3 >= t3.length ? (this._t = void 0, i(1)) : i(0, "keys" == e3 ? n3 : "values" == e3 ? t3[n3] : [n3, t3[n3]]);
            }, "values"), a.Arguments = a.Array, r("keys"), r("values"), r("entries");
          }, c3a1: function(t2, e2, n2) {
            var r = n2("e6f3"), i = n2("1691");
            t2.exports = Object.keys || function(t3) {
              return r(t3, i);
            };
          }, c649: function(t2, e2, n2) {
            "use strict";
            (function(t3) {
              n2.d(e2, "c", function() {
                return f;
              }), n2.d(e2, "a", function() {
                return u;
              }), n2.d(e2, "b", function() {
                return a;
              }), n2.d(e2, "d", function() {
                return l;
              });
              n2("a481");
              var r = n2("4aa6"), i = n2.n(r);
              var a = "undefined" != typeof window ? window.console : t3.console;
              var o, s, c = /-(\w)/g, u = (o = function(t4) {
                return t4.replace(c, function(t5, e3) {
                  return e3 ? e3.toUpperCase() : "";
                });
              }, s = i()(null), function(t4) {
                return s[t4] || (s[t4] = o(t4));
              });
              function l(t4) {
                null !== t4.parentElement && t4.parentElement.removeChild(t4);
              }
              function f(t4, e3, n3) {
                var r2 = 0 === n3 ? t4.children[0] : t4.children[n3 - 1].nextSibling;
                t4.insertBefore(e3, r2);
              }
            }).call(this, n2("c8ba"));
          }, c69a: function(t2, e2, n2) {
            t2.exports = !n2("9e1e") && !n2("79e5")(function() {
              return 7 != Object.defineProperty(n2("230e")("div"), "a", { get: function() {
                return 7;
              } }).a;
            });
          }, c8ba: function(t2, e2) {
            var n2;
            n2 = function() {
              return this;
            }();
            try {
              n2 = n2 || new Function("return this")();
            } catch (t3) {
              "object" == typeof window && (n2 = window);
            }
            t2.exports = n2;
          }, c8bb: function(t2, e2, n2) {
            t2.exports = n2("54a1");
          }, ca5a: function(t2, e2) {
            var n2 = 0, r = Math.random();
            t2.exports = function(t3) {
              return "Symbol(".concat(void 0 === t3 ? "" : t3, ")_", (++n2 + r).toString(36));
            };
          }, cb7c: function(t2, e2, n2) {
            var r = n2("d3f4");
            t2.exports = function(t3) {
              if (!r(t3))
                throw TypeError(t3 + " is not an object!");
              return t3;
            };
          }, ce7e: function(t2, e2, n2) {
            var r = n2("63b6"), i = n2("584a"), a = n2("294c");
            t2.exports = function(t3, e3) {
              var n3 = (i.Object || {})[t3] || Object[t3], o = {};
              o[t3] = e3(n3), r(r.S + r.F * a(function() {
                n3(1);
              }), "Object", o);
            };
          }, d2c8: function(t2, e2, n2) {
            var r = n2("aae3"), i = n2("be13");
            t2.exports = function(t3, e3, n3) {
              if (r(e3))
                throw TypeError("String#" + n3 + " doesn't accept regex!");
              return String(i(t3));
            };
          }, d2d5: function(t2, e2, n2) {
            n2("1654"), n2("549b"), t2.exports = n2("584a").Array.from;
          }, d3f4: function(t2, e2) {
            t2.exports = function(t3) {
              return "object" == typeof t3 ? null !== t3 : "function" == typeof t3;
            };
          }, d864: function(t2, e2, n2) {
            var r = n2("79aa");
            t2.exports = function(t3, e3, n3) {
              if (r(t3), void 0 === e3)
                return t3;
              switch (n3) {
                case 1:
                  return function(n4) {
                    return t3.call(e3, n4);
                  };
                case 2:
                  return function(n4, r2) {
                    return t3.call(e3, n4, r2);
                  };
                case 3:
                  return function(n4, r2, i) {
                    return t3.call(e3, n4, r2, i);
                  };
              }
              return function() {
                return t3.apply(e3, arguments);
              };
            };
          }, d8e8: function(t2, e2) {
            t2.exports = function(t3) {
              if ("function" != typeof t3)
                throw TypeError(t3 + " is not a function!");
              return t3;
            };
          }, d9f6: function(t2, e2, n2) {
            var r = n2("e4ae"), i = n2("794b"), a = n2("1bc3"), o = Object.defineProperty;
            e2.f = n2("8e60") ? Object.defineProperty : function(t3, e3, n3) {
              if (r(t3), e3 = a(e3, true), r(n3), i)
                try {
                  return o(t3, e3, n3);
                } catch (t4) {
                }
              if ("get" in n3 || "set" in n3)
                throw TypeError("Accessors not supported!");
              return "value" in n3 && (t3[e3] = n3.value), t3;
            };
          }, dbdb: function(t2, e2, n2) {
            var r = n2("584a"), i = n2("e53d"), a = i["__core-js_shared__"] || (i["__core-js_shared__"] = {});
            (t2.exports = function(t3, e3) {
              return a[t3] || (a[t3] = void 0 !== e3 ? e3 : {});
            })("versions", []).push({ version: r.version, mode: n2("b8e3") ? "pure" : "global", copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)" });
          }, dc62: function(t2, e2, n2) {
            n2("9427");
            var r = n2("584a").Object;
            t2.exports = function(t3, e3) {
              return r.create(t3, e3);
            };
          }, e4ae: function(t2, e2, n2) {
            var r = n2("f772");
            t2.exports = function(t3) {
              if (!r(t3))
                throw TypeError(t3 + " is not an object!");
              return t3;
            };
          }, e53d: function(t2, e2) {
            var n2 = t2.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
            "number" == typeof __g && (__g = n2);
          }, e6f3: function(t2, e2, n2) {
            var r = n2("07e3"), i = n2("36c3"), a = n2("5b4e")(false), o = n2("5559")("IE_PROTO");
            t2.exports = function(t3, e3) {
              var n3, s = i(t3), c = 0, u = [];
              for (n3 in s)
                n3 != o && r(s, n3) && u.push(n3);
              for (; e3.length > c; )
                r(s, n3 = e3[c++]) && (~a(u, n3) || u.push(n3));
              return u;
            };
          }, f410: function(t2, e2, n2) {
            n2("1af6"), t2.exports = n2("584a").Array.isArray;
          }, f559: function(t2, e2, n2) {
            "use strict";
            var r = n2("5ca1"), i = n2("9def"), a = n2("d2c8"), o = "".startsWith;
            r(r.P + r.F * n2("5147")("startsWith"), "String", { startsWith: function(t3) {
              var e3 = a(this, t3, "startsWith"), n3 = i(Math.min(arguments.length > 1 ? arguments[1] : void 0, e3.length)), r2 = String(t3);
              return o ? o.call(e3, r2, n3) : e3.slice(n3, n3 + r2.length) === r2;
            } });
          }, f772: function(t2, e2) {
            t2.exports = function(t3) {
              return "object" == typeof t3 ? null !== t3 : "function" == typeof t3;
            };
          }, fa5b: function(t2, e2, n2) {
            t2.exports = n2("5537")("native-function-to-string", Function.toString);
          }, fb15: function(t2, e2, n2) {
            "use strict";
            var r;
            (n2.r(e2), "undefined" != typeof window) && ((r = window.document.currentScript) && (r = r.src.match(/(.+\/)[^/]+\.js(\?.*)?$/)) && (n2.p = r[1]));
            var i = n2("5176"), a = n2.n(i), o = (n2("f559"), n2("a4bb")), s = n2.n(o), c = n2("a745"), u = n2.n(c);
            var l = n2("5d73"), f = n2.n(l);
            function d(t3, e3) {
              return function(t4) {
                if (u()(t4))
                  return t4;
              }(t3) || function(t4, e4) {
                var n3 = [], r2 = true, i2 = false, a2 = void 0;
                try {
                  for (var o2, s2 = f()(t4); !(r2 = (o2 = s2.next()).done) && (n3.push(o2.value), !e4 || n3.length !== e4); r2 = true)
                    ;
                } catch (t5) {
                  i2 = true, a2 = t5;
                } finally {
                  try {
                    r2 || null == s2.return || s2.return();
                  } finally {
                    if (i2)
                      throw a2;
                  }
                }
                return n3;
              }(t3, e3) || function() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }();
            }
            n2("6762"), n2("2fdb");
            var p = n2("774e"), h = n2.n(p), v = n2("c8bb"), m = n2.n(v);
            function g(t3) {
              return function(t4) {
                if (u()(t4)) {
                  for (var e3 = 0, n3 = new Array(t4.length); e3 < t4.length; e3++)
                    n3[e3] = t4[e3];
                  return n3;
                }
              }(t3) || function(t4) {
                if (m()(Object(t4)) || "[object Arguments]" === Object.prototype.toString.call(t4))
                  return h()(t4);
              }(t3) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance");
              }();
            }
            var y = n2("a352"), b = n2.n(y), _2 = n2("c649");
            function x(t3, e3) {
              var n3 = this;
              this.$nextTick(function() {
                return n3.$emit(t3.toLowerCase(), e3);
              });
            }
            function w(t3) {
              var e3 = this;
              return function(n3) {
                null !== e3.realList && e3["onDrag" + t3](n3), x.call(e3, t3, n3);
              };
            }
            function C(t3) {
              return ["transition-group", "TransitionGroup"].includes(t3);
            }
            function S(t3, e3, n3) {
              return t3[n3] || (e3[n3] ? e3[n3]() : void 0);
            }
            var O = ["Start", "Add", "Remove", "Update", "End"], k = ["Choose", "Unchoose", "Sort", "Filter", "Clone"], M = ["Move"].concat(O, k).map(function(t3) {
              return "on" + t3;
            }), D = null, j = { name: "draggable", inheritAttrs: false, props: { options: Object, list: { type: Array, required: false, default: null }, value: { type: Array, required: false, default: null }, noTransitionOnDrag: { type: Boolean, default: false }, clone: { type: Function, default: function(t3) {
              return t3;
            } }, element: { type: String, default: "div" }, tag: { type: String, default: null }, move: { type: Function, default: null }, componentData: { type: Object, required: false, default: null } }, data: function() {
              return { transitionMode: false, noneFunctionalComponentMode: false };
            }, render: function(t3) {
              var e3 = this.$slots.default;
              this.transitionMode = function(t4) {
                if (!t4 || 1 !== t4.length)
                  return false;
                var e4 = d(t4, 1)[0].componentOptions;
                return !!e4 && C(e4.tag);
              }(e3);
              var n3 = function(t4, e4, n4) {
                var r3 = 0, i3 = 0, a2 = S(e4, n4, "header");
                a2 && (r3 = a2.length, t4 = t4 ? [].concat(g(a2), g(t4)) : g(a2));
                var o3 = S(e4, n4, "footer");
                return o3 && (i3 = o3.length, t4 = t4 ? [].concat(g(t4), g(o3)) : g(o3)), { children: t4, headerOffset: r3, footerOffset: i3 };
              }(e3, this.$slots, this.$scopedSlots), r2 = n3.children, i2 = n3.headerOffset, o2 = n3.footerOffset;
              this.headerOffset = i2, this.footerOffset = o2;
              var c2 = function(t4, e4) {
                var n4 = null, r3 = function(t5, e5) {
                  n4 = function(t6, e6, n5) {
                    return void 0 === n5 || ((t6 = t6 || {})[e6] = n5), t6;
                  }(n4, t5, e5);
                };
                if (r3("attrs", s()(t4).filter(function(t5) {
                  return "id" === t5 || t5.startsWith("data-");
                }).reduce(function(e5, n5) {
                  return e5[n5] = t4[n5], e5;
                }, {})), !e4)
                  return n4;
                var i3 = e4.on, o3 = e4.props, c3 = e4.attrs;
                return r3("on", i3), r3("props", o3), a()(n4.attrs, c3), n4;
              }(this.$attrs, this.componentData);
              return t3(this.getTag(), c2, r2);
            }, created: function() {
              null !== this.list && null !== this.value && _2.b.error("Value and list props are mutually exclusive! Please set one or another."), "div" !== this.element && _2.b.warn("Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props"), void 0 !== this.options && _2.b.warn("Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props");
            }, mounted: function() {
              var t3 = this;
              if (this.noneFunctionalComponentMode = this.getTag().toLowerCase() !== this.$el.nodeName.toLowerCase() && !this.getIsFunctional(), this.noneFunctionalComponentMode && this.transitionMode)
                throw new Error("Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: ".concat(this.getTag()));
              var e3 = {};
              O.forEach(function(n4) {
                e3["on" + n4] = w.call(t3, n4);
              }), k.forEach(function(n4) {
                e3["on" + n4] = x.bind(t3, n4);
              });
              var n3 = s()(this.$attrs).reduce(function(e4, n4) {
                return e4[Object(_2.a)(n4)] = t3.$attrs[n4], e4;
              }, {}), r2 = a()({}, this.options, n3, e3, { onMove: function(e4, n4) {
                return t3.onDragMove(e4, n4);
              } });
              !("draggable" in r2) && (r2.draggable = ">*"), this._sortable = new b.a(this.rootContainer, r2), this.computeIndexes();
            }, beforeDestroy: function() {
              void 0 !== this._sortable && this._sortable.destroy();
            }, computed: { rootContainer: function() {
              return this.transitionMode ? this.$el.children[0] : this.$el;
            }, realList: function() {
              return this.list ? this.list : this.value;
            } }, watch: { options: { handler: function(t3) {
              this.updateOptions(t3);
            }, deep: true }, $attrs: { handler: function(t3) {
              this.updateOptions(t3);
            }, deep: true }, realList: function() {
              this.computeIndexes();
            } }, methods: { getIsFunctional: function() {
              var t3 = this._vnode.fnOptions;
              return t3 && t3.functional;
            }, getTag: function() {
              return this.tag || this.element;
            }, updateOptions: function(t3) {
              for (var e3 in t3) {
                var n3 = Object(_2.a)(e3);
                -1 === M.indexOf(n3) && this._sortable.option(n3, t3[e3]);
              }
            }, getChildrenNodes: function() {
              if (this.noneFunctionalComponentMode)
                return this.$children[0].$slots.default;
              var t3 = this.$slots.default;
              return this.transitionMode ? t3[0].child.$slots.default : t3;
            }, computeIndexes: function() {
              var t3 = this;
              this.$nextTick(function() {
                t3.visibleIndexes = function(t4, e3, n3, r2) {
                  if (!t4)
                    return [];
                  var i2 = t4.map(function(t5) {
                    return t5.elm;
                  }), a2 = e3.length - r2, o2 = g(e3).map(function(t5, e4) {
                    return e4 >= a2 ? i2.length : i2.indexOf(t5);
                  });
                  return n3 ? o2.filter(function(t5) {
                    return -1 !== t5;
                  }) : o2;
                }(t3.getChildrenNodes(), t3.rootContainer.children, t3.transitionMode, t3.footerOffset);
              });
            }, getUnderlyingVm: function(t3) {
              var e3 = function(t4, e4) {
                return t4.map(function(t5) {
                  return t5.elm;
                }).indexOf(e4);
              }(this.getChildrenNodes() || [], t3);
              return -1 === e3 ? null : { index: e3, element: this.realList[e3] };
            }, getUnderlyingPotencialDraggableComponent: function(t3) {
              var e3 = t3.__vue__;
              return e3 && e3.$options && C(e3.$options._componentTag) ? e3.$parent : !("realList" in e3) && 1 === e3.$children.length && "realList" in e3.$children[0] ? e3.$children[0] : e3;
            }, emitChanges: function(t3) {
              var e3 = this;
              this.$nextTick(function() {
                e3.$emit("change", t3);
              });
            }, alterList: function(t3) {
              if (this.list)
                t3(this.list);
              else {
                var e3 = g(this.value);
                t3(e3), this.$emit("input", e3);
              }
            }, spliceList: function() {
              var t3 = arguments, e3 = function(e4) {
                return e4.splice.apply(e4, g(t3));
              };
              this.alterList(e3);
            }, updatePosition: function(t3, e3) {
              var n3 = function(n4) {
                return n4.splice(e3, 0, n4.splice(t3, 1)[0]);
              };
              this.alterList(n3);
            }, getRelatedContextFromMoveEvent: function(t3) {
              var e3 = t3.to, n3 = t3.related, r2 = this.getUnderlyingPotencialDraggableComponent(e3);
              if (!r2)
                return { component: r2 };
              var i2 = r2.realList, o2 = { list: i2, component: r2 };
              if (e3 !== n3 && i2 && r2.getUnderlyingVm) {
                var s2 = r2.getUnderlyingVm(n3);
                if (s2)
                  return a()(s2, o2);
              }
              return o2;
            }, getVmIndex: function(t3) {
              var e3 = this.visibleIndexes, n3 = e3.length;
              return t3 > n3 - 1 ? n3 : e3[t3];
            }, getComponent: function() {
              return this.$slots.default[0].componentInstance;
            }, resetTransitionData: function(t3) {
              if (this.noTransitionOnDrag && this.transitionMode) {
                this.getChildrenNodes()[t3].data = null;
                var e3 = this.getComponent();
                e3.children = [], e3.kept = void 0;
              }
            }, onDragStart: function(t3) {
              this.context = this.getUnderlyingVm(t3.item), t3.item._underlying_vm_ = this.clone(this.context.element), D = t3.item;
            }, onDragAdd: function(t3) {
              var e3 = t3.item._underlying_vm_;
              if (void 0 !== e3) {
                Object(_2.d)(t3.item);
                var n3 = this.getVmIndex(t3.newIndex);
                this.spliceList(n3, 0, e3), this.computeIndexes();
                var r2 = { element: e3, newIndex: n3 };
                this.emitChanges({ added: r2 });
              }
            }, onDragRemove: function(t3) {
              if (Object(_2.c)(this.rootContainer, t3.item, t3.oldIndex), "clone" !== t3.pullMode) {
                var e3 = this.context.index;
                this.spliceList(e3, 1);
                var n3 = { element: this.context.element, oldIndex: e3 };
                this.resetTransitionData(e3), this.emitChanges({ removed: n3 });
              } else
                Object(_2.d)(t3.clone);
            }, onDragUpdate: function(t3) {
              Object(_2.d)(t3.item), Object(_2.c)(t3.from, t3.item, t3.oldIndex);
              var e3 = this.context.index, n3 = this.getVmIndex(t3.newIndex);
              this.updatePosition(e3, n3);
              var r2 = { element: this.context.element, oldIndex: e3, newIndex: n3 };
              this.emitChanges({ moved: r2 });
            }, updateProperty: function(t3, e3) {
              t3.hasOwnProperty(e3) && (t3[e3] += this.headerOffset);
            }, computeFutureIndex: function(t3, e3) {
              if (!t3.element)
                return 0;
              var n3 = g(e3.to.children).filter(function(t4) {
                return "none" !== t4.style.display;
              }), r2 = n3.indexOf(e3.related), i2 = t3.component.getVmIndex(r2);
              return -1 !== n3.indexOf(D) || !e3.willInsertAfter ? i2 : i2 + 1;
            }, onDragMove: function(t3, e3) {
              var n3 = this.move;
              if (!n3 || !this.realList)
                return true;
              var r2 = this.getRelatedContextFromMoveEvent(t3), i2 = this.context, o2 = this.computeFutureIndex(r2, t3);
              return a()(i2, { futureIndex: o2 }), n3(a()({}, t3, { relatedContext: r2, draggedContext: i2 }), e3);
            }, onDragEnd: function() {
              this.computeIndexes(), D = null;
            } } };
            "undefined" != typeof window && "Vue" in window && window.Vue.component("draggable", j);
            var L2 = j;
            e2.default = L2;
          } }).default;
        }, Mdgb: function(t, e) {
        }, MeTV: function(t, e, n) {
          "use strict";
          var r = n("9RVY");
          n.n(r).a;
        }, MerV: function(t, e) {
        }, N6C8: function(t, e, n) {
          "use strict";
          var r = n("ylaU");
          n.n(r).a;
        }, "NC/Q": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "DropdownMenu", status: "ready", release: "1.0.0", type: "Pattern", data: function() {
            return { isVisible: false };
          }, props: { element: { type: String, default: "div" }, buttonLabel: { type: String, default: "Dropdown" }, type: { type: String, default: "buttons", validator: function(t2) {
            return t2.match(/(links|buttons)/);
          } }, menuItems: { type: Array, default: "div" }, align: { type: String, default: "left", validator: function(t2) {
            return t2.match(/(left|right)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } } }, methods: { hide: function(t2) {
            this.isVisible = false;
          }, buttonClicked: function(t2) {
            this.isVisible = !this.isVisible, this.$emit("button-clicked", t2);
          }, menuItemClicked: function(t2) {
            this.isVisible = false, this.$emit("menu-item-clicked", t2);
          } }, directives: { "click-outside": { bind: function(t2, e2, n2) {
            var r2 = e2.modifiers.bubble, i2 = function(n3) {
              (r2 || !t2.contains(n3.target) && t2 !== n3.target) && e2.value(n3);
            };
            t2.__vueClickOutside__ = i2, document.addEventListener("click", i2);
          }, unbind: function(t2, e2) {
            document.removeEventListener("click", t2.__vueClickOutside__), t2.__vueClickOutside__ = null;
          } } } }, i = (n("gMq4"), n("KHd+")), a = n("9b0z"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.element, { directives: [{ name: "click-outside", rawName: "v-click-outside", value: t2.hide, expression: "hide" }], tag: "component", class: ["lux-dropdown-menu", t2.size] }, [n2("input-button", { staticClass: "lux-dropdown-button", attrs: { variation: "dropdown", size: t2.size }, on: { "button-clicked": function(e3) {
              return t2.buttonClicked(e3);
            } } }, [t2._v(t2._s(t2.buttonLabel))]), t2._v(" "), n2("menu-bar", { class: { "lux-show": t2.isVisible }, attrs: { type: t2.type, active: "All", "menu-items": t2.menuItems }, on: { "menu-item-clicked": function(e3) {
              return t2.menuItemClicked(e3);
            } } })], 1);
          }, [], false, null, "62ecb110", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, NeWu: function(t, e, n) {
          "use strict";
          var r = n("ol/U");
          n.n(r).a;
        }, Nhqd: function(t, e) {
        }, Nybi: function(t, e) {
        }, O1vI: function(t, e, n) {
          "use strict";
          var r = n("UAe1");
          n.n(r).a;
        }, OEVl: function(t, e) {
        }, OFxA: function(t, e, n) {
        }, ONH9: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Tag", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "tag", validator: function(t2) {
            return t2.match(/(tag|filter)/);
          } }, tagItems: { required: true, type: Array }, horizontal: { type: String, validator: function(t2) {
            return t2.match(/(start|center|end)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } }, label: { type: String, default: "" } }, methods: { isPill: function(t2) {
            return "pill" === t2;
          }, componentType: function(t2) {
            return t2.hasOwnProperty("href") ? "a" : "span";
          } } }, i = (n("7BlC"), n("KHd+")), a = n("L7ye"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("ul", { staticClass: "lux-tag", class: [t2.type, t2.horizontal], attrs: { "aria-label": t2.label } }, t2._l(t2.tagItems, function(e3, r2) {
              return n2("li", [n2(t2.componentType(e3), { key: r2, tag: "component", class: ["lux-tag-item", t2.size, e3.color, { pill: t2.isPill(e3.style) }], attrs: { href: e3.href } }, [e3.icon ? n2("span", { staticClass: "prepend-icon" }, [n2("lux-icon-base", { attrs: { width: "14", height: "14" } }, ["alert" === e3.icon ? n2("lux-icon-alert") : t2._e(), t2._v(" "), "approved" === e3.icon ? n2("lux-icon-approved") : t2._e(), t2._v(" "), "denied" === e3.icon ? n2("lux-icon-denied") : t2._e(), t2._v(" "), "clock" === e3.icon ? n2("lux-icon-clock") : t2._e(), t2._v(" "), "refresh" === e3.icon ? n2("lux-icon-refresh") : t2._e(), t2._v(" "), "reported" === e3.icon ? n2("lux-icon-reported") : t2._e()], 1)], 1) : t2._e(), t2._v(" "), n2("span", { domProps: { innerHTML: t2._s(e3.name) } }), t2._v(" "), "filter" === t2.type ? n2("span", { staticClass: "append-icon" }, [n2("lux-icon-base", { attrs: { width: "14", height: "14" } }, [n2("lux-icon-denied")], 1)], 1) : t2._e()])], 1);
            }), 0);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, Ob2K: function(t, e) {
        }, Obua: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LogoUniversity", status: "ready", release: "1.0.0", type: "Element", props: { width: { type: [Number, String], default: 263 }, height: { type: [Number, String], default: 72 } } }, i = (n("5C7p"), n("KHd+")), a = n("XvlE"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: t2.width, height: t2.height, viewBox: "0 0 263 71.84", "aria-labelledby": "logo-university", role: "img" } }, [n2("title", { attrs: { id: "logo-university", lang: "en" } }, [t2._v("Princeton University Logo")]), t2._v(" "), n2("g", [n2("path", { staticClass: "pu-logo-mc-a", attrs: { d: "M14.97 59.02a70.98 70.98 0 0 0 13.17 12.82 71.14 71.14 0 0 0 13.2-12.78L28.14 46.2z" } }), t2._v(" "), n2("path", { staticClass: "pu-logo-mc-a", attrs: { d: "M8.82 49.84l19.33-18.56L47.5 49.89a68.7 68.7 0 0 0 7.16-18.66l.19-.95H1.46a68.77 68.77 0 0 0 7.36 19.56z" } }), t2._v(" "), n2("path", { staticClass: "pu-logo-mc-a", attrs: { d: "M8.81 49.84a69.87 69.87 0 0 0 6.16 9.18l13.17-12.8 13.2 12.84a69.44 69.44 0 0 0 6.16-9.17L28.14 31.28z" } }), t2._v(" "), n2("path", { staticClass: "pu-logo-mc-b", attrs: { d: "M28.14 45.87L15 58.65a69.87 69.87 0 0 1-5.87-8.77l19.01-18.26L47.2 49.94a69.4 69.4 0 0 1-5.86 8.75z" } }), t2._v(" "), n2("path", { staticClass: "pu-logo-mc-b", attrs: { d: "M28.14 31.97l18.73 18.01a69.18 69.18 0 0 1-5.57 8.33L28.49 45.85l-.35-.33-.35.33-12.77 12.43a69.61 69.61 0 0 1-5.58-8.35l18.7-17.96m0-.7L8.8 49.85a69.87 69.87 0 0 0 6.16 9.18l13.17-12.8 13.2 12.84a69.44 69.44 0 0 0 6.16-9.17L28.14 31.28zM56.06 10.5a24.6 24.6 0 0 1-7.18 1.07A24.12 24.12 0 0 1 28.16 0 24.13 24.13 0 0 1 7.44 11.55 24.7 24.7 0 0 1 .26 10.5a67.64 67.64 0 0 0 1.18 19.8h53.4a68 68 0 0 0 1.22-19.8z" } }), t2._v(" "), n2("path", { staticStyle: { isolation: "isolate" }, attrs: { d: "M41.31 18.66v-2.27h-1.38v-1.6l-1.46-.4h-.1v-1.37s-.5.6-2.8.6c-2.18 0-3.46-.7-5.19-.7a2.36 2.36 0 0 0-2.18.95v.55h-.06v-.55a2.38 2.38 0 0 0-2.17-.96c-1.74 0-3.02.71-5.2.71-2.3 0-2.7-.6-2.7-.6v1.44h-.1l-1.57.33v1.6H15v2.27h1.4v3.67H15v2.27h1.4v2.82a33.88 33.88 0 0 0 4.5.37c2.55 0 4.02-.37 5.68-.4v.71a3.85 3.85 0 0 0 1.56.33 4.25 4.25 0 0 0 1.61-.33v-.71c1.66.03 3.13.4 5.7.4a33.84 33.84 0 0 0 4.48-.36V24.6h1.4v-2.27h-1.4v-3.67z", fill: "#fff" } }), t2._v(" "), n2("path", { staticClass: "pu-logo-mc-b", attrs: { d: "M38.59 14.23v-1.74l-.42.45s-.52.52-2.62.52l-2.85-.38-2.35-.33a2.78 2.78 0 0 0-2.2.84 2.8 2.8 0 0 0-2.21-.84l-2.34.33-2.85.38c-2.07 0-2.5-.5-2.51-.5l-.43-.52-.01.66v1.2l-1.69.35V27.7l.2.03a34.02 34.02 0 0 0 4.54.37 51.76 51.76 0 0 0 5.44-.38v.6l.13.07a4.1 4.1 0 0 0 1.67.35 4.46 4.46 0 0 0 1.72-.35l.14-.07v-.6a51.8 51.8 0 0 0 5.45.38 34.05 34.05 0 0 0 4.53-.38l.2-.02V14.66zm-10.2-.17a2.14 2.14 0 0 1 1.96-.83l2.24.32 2.96.4a5.88 5.88 0 0 0 2.57-.43v12.34a7.16 7.16 0 0 1-2.57.38l-2.85-.38-2.35-.33a2.94 2.94 0 0 0-1.96.62zm-10.1-.51a5.53 5.53 0 0 0 2.46.4l2.95-.39 2.24-.32a2.16 2.16 0 0 1 1.97.83v12.09a2.96 2.96 0 0 0-1.99-.63l-2.34.33-2.83.38c-2.07 0-2.5-.5-2.5-.5l.03-12.2zm21.37 13.73a33.04 33.04 0 0 1-4.25.33 53.52 53.52 0 0 1-5.67-.4l-.27-.03V28a4.07 4.07 0 0 1-1.37.26 3.81 3.81 0 0 1-1.32-.25v-.83l-.27.03a53.51 53.51 0 0 1-5.66.4 33.09 33.09 0 0 1-4.25-.33V15.04l1.2-.25v11.09c.12.25.63.84 2.95.84l2.93-.38 2.24-.33a2.18 2.18 0 0 1 1.99.83l.07-.03h.34l.07.03a2.14 2.14 0 0 1 1.96-.83l2.24.32 2.96.39c2.35 0 2.94-.62 3-.69l.04-11.3 1.07.3z" } }), t2._v(" "), n2("path", { staticClass: "pu-logo-mc-b", attrs: { d: "M21.72 15.72a.42.42 0 0 0-.37.24l-.78 1.73a.15.15 0 0 1-.06.03c-.03 0-.05-.03-.07-.08l-.32-.78-.25-.56a4.78 4.78 0 0 0-.19-.39.37.37 0 0 0-.32-.19.08.08 0 0 1-.02-.05.11.11 0 0 1 .01-.05h1.08l.02.04a.13.13 0 0 1-.01.06c-.1 0-.31 0-.31.14a.33.33 0 0 0 .02.11l.51 1.21.43-1a.63.63 0 0 0 .05-.26c0-.12-.08-.17-.3-.2a.18.18 0 0 1 0-.04.23.23 0 0 1 0-.06h.07l.4.01h.4l.02.04a.14.14 0 0 1-.01.05zm2.16 1.94c-.62 0-.95-.02-1.04-.02h-.3l-.5.02h-.12a.09.09 0 0 1 0-.05.26.26 0 0 1 0-.06.82.82 0 0 0 .3-.06.6.6 0 0 0 .07-.32v-1.2c0-.22-.11-.22-.34-.25a.24.24 0 0 1-.01-.05c0-.02 0-.05.02-.05h1.77c.05 0 .07 0 .07.04l.02.47-.05.02a.15.15 0 0 1-.05 0 .92.92 0 0 0-.3-.36.32.32 0 0 0-.19-.05h-.5c-.02 0-.02 0-.03.08l-.01.41v.27h.07a1 1 0 0 0 .23-.02.4.4 0 0 0 .2-.15.92.92 0 0 0 .06-.17.13.13 0 0 1 .06-.02.1.1 0 0 1 .05.02l-.01.44v.4a.07.07 0 0 1-.05.02.24.24 0 0 1-.06 0c-.02-.17-.05-.3-.2-.35a.55.55 0 0 0-.22-.05l-.14.01v.54a.67.67 0 0 0 .03.24.2.2 0 0 0 .12.11 1 1 0 0 0 .2.02h.29a.58.58 0 0 0 .22-.04 1.12 1.12 0 0 0 .33-.44.16.16 0 0 1 .06 0 .17.17 0 0 1 .06 0v.55c0 .04-.03.05-.1.05zm2.47-1.4h-.06a1.29 1.29 0 0 0-.15-.3.48.48 0 0 0-.38-.2h-.2v1.52c0 .24.1.24.35.27a.11.11 0 0 1 .02.06.1.1 0 0 1-.01.05h-.1l-.5-.01-.53.01a.07.07 0 0 1-.02-.05.12.12 0 0 1 .02-.06c.32-.02.36-.08.37-.18V16a1.27 1.27 0 0 0-.01-.25 1.4 1.4 0 0 0-.32.02.81.81 0 0 0-.41.45.2.2 0 0 1-.05 0 .06.06 0 0 1-.05-.02v-.53c0-.04 0-.06.06-.06h.97l.95-.01c.05 0 .08 0 .1.02a.4.4 0 0 1 0 .07v.53a.06.06 0 0 1-.05.02zm-4.73 3.2h-.06a1 1 0 0 0-.16-.3.48.48 0 0 0-.38-.2h-.2v1.52c0 .24.12.24.36.27a.1.1 0 0 1 .02.06.1.1 0 0 1-.01.05h-1.13a.1.1 0 0 1-.02-.05.25.25 0 0 1 .01-.05c.33-.03.36-.09.38-.2V19.2a1.3 1.3 0 0 0-.02-.25 1.45 1.45 0 0 0-.32.02.8.8 0 0 0-.4.45.25.25 0 0 1-.06 0 .06.06 0 0 1-.05-.02v-.52c0-.05 0-.06.06-.06h.97c.5 0 .86-.02.95-.02.05 0 .09 0 .1.02s0 .05 0 .08v.52a.06.06 0 0 1-.04.04zm2.34 1.4H22a.1.1 0 0 1-.02-.04.13.13 0 0 1 .02-.07.76.76 0 0 0 .3-.06c.05-.05.06-.13.07-.32l.01-.3v-.91c0-.22-.1-.22-.34-.25a.12.12 0 0 1-.01-.05c0-.02 0-.05.02-.06h1.77c.05 0 .07 0 .07.05l.02.47a.1.1 0 0 1-.05.02.17.17 0 0 1-.05 0 .85.85 0 0 0-.32-.35.3.3 0 0 0-.17-.05h-.51c-.02 0-.03 0-.03.08v.67h.06a.95.95 0 0 0 .23-.02.4.4 0 0 0 .22-.15.9.9 0 0 0 .04-.17.15.15 0 0 1 .06-.02.1.1 0 0 1 .06.02l-.02.44.01.4a.08.08 0 0 1-.06.02.27.27 0 0 1-.06 0c-.02-.17-.04-.3-.2-.35a.55.55 0 0 0-.21-.05 1.31 1.31 0 0 0-.14.01v.54a.84.84 0 0 0 .02.24c.02.03.07.1.12.11a1.07 1.07 0 0 0 .2.02h.3a.56.56 0 0 0 .21-.04 1.09 1.09 0 0 0 .33-.44.15.15 0 0 1 .07 0 .14.14 0 0 1 .05 0v.55c0 .05-.04.05-.11.05zm1.44.05a1.16 1.16 0 0 1-.47-.12.23.23 0 0 0-.08-.02.42.42 0 0 0-.15.08.13.13 0 0 1-.12-.06c0-.04.04-.17.04-.25l-.02-.33a.11.11 0 0 1 .09-.05h.03a4.29 4.29 0 0 0 .2.4.64.64 0 0 0 .45.22.44.44 0 0 0 .33-.1.29.29 0 0 0 .11-.25.26.26 0 0 0-.05-.19.5.5 0 0 0-.22-.15c-.09-.04-.4-.12-.52-.18a.82.82 0 0 1-.28-.2.63.63 0 0 1-.12-.38.58.58 0 0 1 .63-.57.76.76 0 0 1 .49.14 1.4 1.4 0 0 1 .12-.12.11.11 0 0 1 .1.06 2.24 2.24 0 0 0-.03.28l.04.3a.2.2 0 0 1-.09.03.14.14 0 0 1-.03-.01c-.06-.1-.11-.27-.17-.36a.46.46 0 0 0-.41-.17.34.34 0 0 0-.37.3c0 .17.14.25.25.3l.3.1a2.8 2.8 0 0 1 .33.13.56.56 0 0 1 .34.54.66.66 0 0 1-.72.63zm-2.96 3.17c-.62 0-.95-.02-1.04-.02h-.3l-.5.02h-.12a.09.09 0 0 1 0-.05.24.24 0 0 1 0-.06.83.83 0 0 0 .3-.06.6.6 0 0 0 .07-.32v-1.2c0-.22-.11-.22-.34-.25a.25.25 0 0 1-.01-.05c0-.02 0-.05.02-.05h1.77c.05 0 .07 0 .07.04l.02.47-.05.02a.14.14 0 0 1-.05 0 .92.92 0 0 0-.3-.36.32.32 0 0 0-.19-.05h-.5c-.02 0-.02 0-.03.08l-.01.41v.27h.07a1 1 0 0 0 .23-.03.4.4 0 0 0 .2-.14.9.9 0 0 0 .06-.17.13.13 0 0 1 .06-.02.1.1 0 0 1 .05.02l-.02.44.01.4a.07.07 0 0 1-.05.02.24.24 0 0 1-.06 0c-.02-.18-.05-.3-.2-.36a.55.55 0 0 0-.22-.04 1.3 1.3 0 0 0-.14 0v.54a.67.67 0 0 0 .03.25.2.2 0 0 0 .12.11 1.03 1.03 0 0 0 .2.01h.28a.58.58 0 0 0 .23-.03 1.13 1.13 0 0 0 .32-.44.17.17 0 0 1 .13 0v.54c0 .05-.03.06-.1.06zm2.99-1.95c-.21.01-.4.12-.4.46v1.05l.03.45a.22.22 0 0 1-.09.03.14.14 0 0 1-.05-.03l-1.44-1.55.01.32v.57c0 .04 0 .15.02.23a.26.26 0 0 0 .1.22.53.53 0 0 0 .27.09.1.1 0 0 1 .02.05.12.12 0 0 1-.02.05h-.91a.18.18 0 0 1 0-.04.13.13 0 0 1 .01-.05.5.5 0 0 0 .33-.14.68.68 0 0 0 .03-.25v-1.04a.36.36 0 0 0-.08-.22.74.74 0 0 0-.1-.1 1.18 1.18 0 0 0-.23-.1.16.16 0 0 1-.01-.05.1.1 0 0 1 .01-.06h.05l.44.01h.1a.2.2 0 0 1 .06.05l1.07 1.17.25.28v-.84l-.01-.24a.56.56 0 0 0-.07-.22c-.03-.05-.23-.08-.33-.1a.14.14 0 0 1-.01-.06.16.16 0 0 1 0-.04h.06l.36.01h.53a.11.11 0 0 1 0 .05.1.1 0 0 1 0 .04zm6.75-6.42c-.2 0-.39.12-.39.46v1.05l.01.45a.2.2 0 0 1-.08.03c-.01 0-.02 0-.05-.03l-1.45-1.55.02.32V17l.01.23a.29.29 0 0 0 .1.22.56.56 0 0 0 .28.09.1.1 0 0 1 .01.05.17.17 0 0 1-.01.05h-.9a.2.2 0 0 1-.01-.04.1.1 0 0 1 .01-.05.5.5 0 0 0 .33-.14.59.59 0 0 0 .03-.25v-1.04a.4.4 0 0 0-.07-.22.92.92 0 0 0-.1-.1 1.07 1.07 0 0 0-.24-.1.38.38 0 0 1 0-.05.2.2 0 0 1 0-.05h.59a.31.31 0 0 1 .07.05l1.07 1.17.24.28v-.84a2.03 2.03 0 0 0-.01-.24.5.5 0 0 0-.06-.22c-.04-.05-.24-.08-.34-.1a.15.15 0 0 1-.01-.06.09.09 0 0 1 0-.04h.07l.36.01h.52a.13.13 0 0 1 .01.04.1.1 0 0 1-.01.05zm2.13 1.69a1.02 1.02 0 0 1-1.45.01 1.13 1.13 0 0 1 0-1.55 1.02 1.02 0 0 1 .72-.3 1.1 1.1 0 0 1 .54.14 1.07 1.07 0 0 1 .5.91 1.14 1.14 0 0 1-.31.79zm-.34-1.5a.48.48 0 0 0-.4-.21.44.44 0 0 0-.38.21 1.18 1.18 0 0 0-.2.72 1.23 1.23 0 0 0 .19.72.45.45 0 0 0 .4.23.47.47 0 0 0 .44-.28 1.33 1.33 0 0 0 .14-.66 1.2 1.2 0 0 0-.19-.73zm3.25-.18a.41.41 0 0 0-.37.24l-.78 1.73a.15.15 0 0 1-.06.03c-.02 0-.06-.03-.07-.08l-.32-.78-.25-.56a4.78 4.78 0 0 0-.18-.4.38.38 0 0 0-.33-.18.07.07 0 0 1-.02-.05.08.08 0 0 1 .01-.06h.13l.38.01.49-.01h.08c.02 0 .02.03.02.05a.13.13 0 0 1 0 .05c-.1.01-.32 0-.32.14a.25.25 0 0 0 .02.12l.5 1.21.44-1a.69.69 0 0 0 .05-.27c0-.1-.08-.16-.3-.18a.17.17 0 0 1 0-.05.25.25 0 0 1 0-.06h.07l.4.01h.42a.1.1 0 0 1 0 .1zm-5.7 3.74h-.07a1 1 0 0 0-.15-.3.47.47 0 0 0-.38-.2h-.2v1.52c0 .24.11.24.36.27a.1.1 0 0 1 .01.06.1.1 0 0 1 0 .05h-1.15a.1.1 0 0 1-.01-.05.24.24 0 0 1 0-.05c.33-.03.37-.09.38-.2V19.2a1.32 1.32 0 0 0-.01-.25 1.45 1.45 0 0 0-.33.02.8.8 0 0 0-.4.45.24.24 0 0 1-.06 0 .06.06 0 0 1-.05-.02v-.52c0-.05.01-.06.07-.06h.97c.48 0 .85-.02.94-.02.06 0 .09 0 .1.02s0 .05 0 .08v.52a.06.06 0 0 1-.04.04zm2.45 1.4h-1.05a.08.08 0 0 1-.01-.05.17.17 0 0 1 0-.04c.2-.01.28-.05.28-.13a.7.7 0 0 0-.06-.26c-.06-.16-.1-.22-.1-.26-.02-.01-.02-.02-.06-.02h-.65a1.41 1.41 0 0 0-.15.39.45.45 0 0 0-.02.12c0 .06.07.14.3.14a.1.1 0 0 1 0 .06.17.17 0 0 1 0 .05h-.05l-.35-.01h-.45a.14.14 0 0 1 0-.03.12.12 0 0 1 0-.06.44.44 0 0 0 .3-.15 3.25 3.25 0 0 0 .26-.53l.31-.76.14-.3a4 4 0 0 1 .11-.21.13.13 0 0 1 .08-.04.12.12 0 0 1 .1.04.58.58 0 0 1 .04.1l.36.89.2.47.14.3c.08.16.2.16.32.2l.02.04-.01.05zm-1.3-1.62a3.76 3.76 0 0 0-.15.33 9.13 9.13 0 0 1-.16.4h.6c-.04-.13-.2-.5-.29-.73zm4.46 1.63l-.83-.01h-.23a.15.15 0 0 1-.01-.06.07.07 0 0 1 .02-.05 1.06 1.06 0 0 0 .2-.02c.08-.03.12-.12.12-.24V19l-.44.96-.15.33a4.29 4.29 0 0 0-.18.47.06.06 0 0 1-.07.03c-.03 0-.05 0-.06-.05-.06-.13-.1-.2-.11-.26l-.69-1.5h-.01v.38l.01.96c0 .3.16.43.39.43a.16.16 0 0 1 .02.05.12.12 0 0 1-.02.05H35l-.4-.01h-.42a.2.2 0 0 1-.01-.05.24.24 0 0 1 0-.05 1.06 1.06 0 0 0 .3-.1c.05-.04.09-.13.09-.33v-1.05c0-.16-.03-.23-.1-.29a1.02 1.02 0 0 0-.27-.05.14.14 0 0 1-.02-.05.17.17 0 0 1 .02-.06h.86a.12.12 0 0 1 .05.06l.6 1.38.12-.27c.1-.23.23-.56.42-.92l.12-.24.78-.01a.12.12 0 0 1 .02.05.1.1 0 0 1-.01.05c-.09.02-.24.02-.3.13-.03.04-.04.08-.04.25v.99c0 .38.1.41.14.44a.74.74 0 0 0 .2.03.1.1 0 0 1 .02.05l-.03.06zm-5.67 1.8h-.06a1 1 0 0 0-.15-.3.48.48 0 0 0-.38-.2h-.2v1.53c0 .24.11.24.36.27a.1.1 0 0 1 .01.06.1.1 0 0 1 0 .05h-.1l-.51-.01-.53.01a.1.1 0 0 1-.01-.05.25.25 0 0 1 0-.06c.33-.02.37-.08.38-.18v-1.36a1.3 1.3 0 0 0-.01-.26 1.45 1.45 0 0 0-.32.03.8.8 0 0 0-.41.45.24.24 0 0 1-.06 0 .06.06 0 0 1-.05-.02v-.53c0-.05.01-.06.07-.06h.97c.49 0 .85-.02.94-.02.06 0 .09 0 .1.02s0 .05 0 .08v.52a.06.06 0 0 1-.04.03zm2.55-.53a.41.41 0 0 0-.37.24l-.78 1.73a.15.15 0 0 1-.06.03c-.02 0-.05-.03-.07-.08l-.32-.78-.25-.56a4.69 4.69 0 0 0-.18-.4.38.38 0 0 0-.33-.18.07.07 0 0 1-.02-.05.08.08 0 0 1 .02-.06h.12l.38.01.49-.01h.08c.02 0 .02.03.02.05a.13.13 0 0 1 0 .05c-.1.01-.32 0-.32.14a.25.25 0 0 0 .02.12l.51 1.2.43-1a.69.69 0 0 0 .05-.26c0-.11-.08-.16-.29-.19a.17.17 0 0 1 0-.04.24.24 0 0 1 0-.07h.06c.1 0 .19.02.4.02l.26-.01h.15a.1.1 0 0 1 0 .1zm3.16 1.94l-.82-.01h-.23a.12.12 0 0 1-.01-.05.06.06 0 0 1 .01-.06 1.09 1.09 0 0 0 .2-.01c.09-.04.12-.13.12-.25v-1.48l-.44.96-.15.33a5.46 5.46 0 0 0-.18.46c-.01.04-.05.04-.07.04s-.04 0-.06-.06c-.05-.12-.1-.2-.11-.25l-.69-1.5h-.01v.38l.01.96c0 .3.16.43.4.43a.13.13 0 0 1 0 .05.11.11 0 0 1 0 .05h-.11l-.4-.01h-.42a.1.1 0 0 1-.02-.06.11.11 0 0 1 .02-.04 1.1 1.1 0 0 0 .3-.1.49.49 0 0 0 .07-.33v-1.05c0-.17-.02-.23-.1-.3a1.03 1.03 0 0 0-.26-.04.1.1 0 0 1-.02-.06.12.12 0 0 1 .02-.06l.36.01h.5a.12.12 0 0 1 .04.05l.6 1.39.12-.28a9.22 9.22 0 0 1 .43-.92l.12-.23.77-.02c.01.02.03.03.03.05a.12.12 0 0 1-.02.06c-.08 0-.23 0-.3.13-.03.04-.05.07-.05.24v.99c0 .38.1.42.15.45a.67.67 0 0 0 .2.02.08.08 0 0 1 .02.06c0 .03 0 .04-.02.06zm225.4-12.3a.83.83 0 0 0-.07-.37h-.6c-1.33 0-2.18.05-4.56.05-.82 0-2.04-.05-2.32-.05h-.7c-.07.05-.1.34-.1.45a.7.7 0 0 0 .13.45 11.1 11.1 0 0 1 2.73.76 5.15 5.15 0 0 1 .77 2.7c.02.4.05.8.05 1.88v5.53a10.62 10.62 0 0 1-.05 1.14c-.46-.5-1.09-1.46-2.15-2.65l-8.83-9.79a1.73 1.73 0 0 0-.4-.34l-.8-.02c-1.7 0-4.75-.08-5.2-.08a.97.97 0 0 0-.11.37 4.4 4.4 0 0 0 .08.5 3.63 3.63 0 0 1 1.98 1 8.9 8.9 0 0 1 1.4 1.67 2.3 2.3 0 0 1 .11.84c0 1.38-.08 3.31-.08 5.16v5.37a11.7 11.7 0 0 1-.16 2.01 5.5 5.5 0 0 1-2.77 1.35 1.54 1.54 0 0 0-.1.48c0 .08.02.34.07.36h.5c.53 0 1.75-.08 2.54-.08 1.17 0 1.96.08 3.04.08h1.6c.1-.02.12-.34.12-.45a1.22 1.22 0 0 0-.08-.42 5.09 5.09 0 0 1-3.17-1.64 15.06 15.06 0 0 1-.34-3.28c0-.84-.03-2-.03-3.57 0-2.09.03-3.91.06-4.83l.47.57 12.22 13.73a1.53 1.53 0 0 0 .74.16.63.63 0 0 0 .32-.05 3.05 3.05 0 0 0 .23-1.2l-.02-1.95V16.6c0-3.3 1.56-4.23 3.38-4.31a1.13 1.13 0 0 0 .1-.5m-30.3 8.4c0 4-1.11 7.52-2.62 8.76a4.29 4.29 0 0 1-2.8.96 3.96 3.96 0 0 1-3.51-1.78 14.08 14.08 0 0 1-1.56-6.87c0-3.68.95-6.56 2.64-7.96a4.21 4.21 0 0 1 2.75-1.03 4.4 4.4 0 0 1 3.6 1.82c1 1.38 1.5 3.36 1.5 6.1m4.8.5a8.87 8.87 0 0 0-4.71-8.22 10.22 10.22 0 0 0-5.03-1.35 10.77 10.77 0 0 0-8.91 4.93 10.1 10.1 0 0 0-1.53 5.34 9.86 9.86 0 0 0 3.78 7.75 9.92 9.92 0 0 0 6.03 1.9 10.95 10.95 0 0 0 4.02-.77 9.53 9.53 0 0 0 3.67-2.51 10.21 10.21 0 0 0 2.67-7.06m-23.24-3.33v-5.4c0-.4-.16-.5-.55-.5-.8 0-4.97.1-9.2.1-3.29 0-6.01-.05-7.49-.05h-1.96c-.34 0-.45.08-.45.45V17a.77.77 0 0 0 .43.1 2.02 2.02 0 0 0 .58-.05c1.19-2.4 2.3-3.7 3.7-4.42.79-.07 2.35-.1 2.77-.1.03.3.06 1.22.08 2.33.03 1.9.03 2.72.03 7.22 0 3.89-.03 5.63-.08 6.05-.1.74.02 1.3-3.15 1.44a1.5 1.5 0 0 0-.08.6 2.1 2.1 0 0 0 .03.42h1.02c.98 0 3.28-.1 4.24-.1.76 0 3.22.08 4.83.08h.74a1.33 1.33 0 0 0 .08-.55.99.99 0 0 0-.1-.48 5.48 5.48 0 0 1-2.72-.5 8.08 8.08 0 0 1-.24-1.98c-.03-2.86-.05-3.94-.05-5.85 0-2.45.02-4.12.02-8.7.37 0 1.22-.02 2.01 0a5.18 5.18 0 0 1 3.15 2.01 13.32 13.32 0 0 1 1.4 2.89 1.34 1.34 0 0 0 .45.05 1.42 1.42 0 0 0 .5-.1m-22.8 8.6a5.82 5.82 0 0 0-.02-.77.59.59 0 0 0-.4-.08 2.22 2.22 0 0 0-.58.05 10.1 10.1 0 0 1-2.91 4.03 4.03 4.03 0 0 1-1.99.3h-2.16a9.74 9.74 0 0 1-1.75-.14c-.4-.08-.82-.71-1-1.14a2.77 2.77 0 0 1-.29-1.66v-5.79h.98a4.17 4.17 0 0 1 1.61.37 2.44 2.44 0 0 1 1.2 1.11 9.1 9.1 0 0 1 .44 2.2 1.89 1.89 0 0 0 .7.1.94.94 0 0 0 .52-.14c0-.71-.16-2.64-.16-3.7 0-1.32.18-3.14.26-4.09a1.07 1.07 0 0 0-.52-.1 1.93 1.93 0 0 0-.69.07c-.08.37-.37 1.48-.43 1.56a3.2 3.2 0 0 1-1.8 1.38 7.12 7.12 0 0 1-1.53.2h-.56v-2.45c0-2.54.06-3.36.08-3.84l.1-.9a10.93 10.93 0 0 1 1.6-.05c1.53 0 2.24.02 2.48.02a3.02 3.02 0 0 1 1.7.53 11.22 11.22 0 0 1 2.53 3.28 2.11 2.11 0 0 0 .56.05c.16 0 .18-.05.4-.15 0-1.62-.11-3.7-.16-4.37-.03-.26-.08-.34-.6-.34-.22 0-1.23-.05-2.28-.05-1.5 0-2.12.02-4.42.02l-4.9.03c-1.58 0-2.93-.05-3.62-.05h-.9a.86.86 0 0 0-.13.42 1.19 1.19 0 0 0 .13.53 13.43 13.43 0 0 1 1.94.29 2.17 2.17 0 0 1 .95 1.72c.05.56.08 2.09.08 3.3v5.45c0 1.11-.03 2.73-.06 3.39a7.65 7.65 0 0 1-.58 2.51 6.99 6.99 0 0 1-2.38.4 1.6 1.6 0 0 0-.13.58 1.02 1.02 0 0 0 .13.48h.87c.85 0 3.97-.08 4.69-.08.66 0 1.93.05 3.46.05.85 0 3.33.16 8.67.16a2.25 2.25 0 0 0 .72-.06.8.8 0 0 0 .1-.42c.06-.53.06-2.09.06-4.23m-22.37.92a.88.88 0 0 0-.9-.63l-.19.03c-1.59 2.25-3.33 3.09-5.32 3.09a5.8 5.8 0 0 1-5.34-3.5 14.5 14.5 0 0 1-.82-4.8 11.67 11.67 0 0 1 .8-4.63c1.16-3.07 2.85-4.02 4.92-4.02a5.42 5.42 0 0 1 4.23 2.38 11.87 11.87 0 0 1 1.34 3.2 2.82 2.82 0 0 0 .59.07 1.29 1.29 0 0 0 .63-.23c-.02-.3-.29-2.33-.29-2.97 0-.79.21-2.08.21-2.59a2.1 2.1 0 0 0-1.03-.29 5.18 5.18 0 0 0-.9 1.09 8.7 8.7 0 0 0-5.87-1.88 9.02 9.02 0 0 0-6.64 2.62 10.04 10.04 0 0 0-2.83 7.45 9.67 9.67 0 0 0 3.73 7.91 10.54 10.54 0 0 0 6.16 1.77c3.23 0 5.59-1.21 6.77-2.82a5.54 5.54 0 0 0 .75-1.25m-20.59-15.1a.86.86 0 0 0-.08-.37h-.61c-1.32 0-2.17.05-4.55.05-.82 0-2.04-.05-2.33-.05h-.68c-.08.05-.11.35-.11.45a.69.69 0 0 0 .14.45 11.22 11.22 0 0 1 2.72.77 5.2 5.2 0 0 1 .76 2.7c.03.39.06.79.06 1.87v5.53a9.04 9.04 0 0 1-.06 1.14c-.44-.5-1.08-1.46-2.14-2.65l-8.82-9.78a1.75 1.75 0 0 0-.4-.34l-.79-.03c-1.7 0-4.76-.08-5.21-.08a.97.97 0 0 0-.1.37 4.37 4.37 0 0 0 .07.5 3.62 3.62 0 0 1 1.99 1 8.75 8.75 0 0 1 1.4 1.67 2.3 2.3 0 0 1 .1.84c0 1.38-.07 3.31-.07 5.16v5.37a11.62 11.62 0 0 1-.16 2.01 5.5 5.5 0 0 1-2.78 1.35 1.6 1.6 0 0 0-.1.48c0 .08.02.34.08.37h.5c.53 0 1.74-.09 2.54-.09 1.16 0 1.95.09 3.04.09h1.57c.1-.03.14-.35.14-.45a1.24 1.24 0 0 0-.08-.43 5.08 5.08 0 0 1-3.17-1.64 15.19 15.19 0 0 1-.34-3.28c0-.84-.03-2-.03-3.57 0-2.08.03-3.9.06-4.83.16.18.34.42.47.58l12.21 13.73a1.54 1.54 0 0 0 .74.16.62.62 0 0 0 .32-.05 3.05 3.05 0 0 0 .23-1.2c0-.76-.03-1.56-.03-1.95V16.59c0-3.3 1.57-4.23 3.4-4.31a1.13 1.13 0 0 0 .1-.5M121.91 30.1a1.77 1.77 0 0 0-.08-.53 19.7 19.7 0 0 1-1.95-.23 4.16 4.16 0 0 1-.9-2.04 362.9 362.9 0 0 1-.06-6.35v-6.5a2.1 2.1 0 0 1 .48-1.43 4.55 4.55 0 0 1 2.36-.69 1.66 1.66 0 0 0 .07-.5.78.78 0 0 0-.13-.42h-.77c-1.1 0-3.7.13-4.6.13-.55 0-3.14-.08-4.3-.1h-.58a.63.63 0 0 0-.14.45 3.24 3.24 0 0 0 .05.5 5.55 5.55 0 0 1 2.07.37 2.92 2.92 0 0 1 .87 2.24c.02.5.05 1.59.08 4.02.02 1.33.05 3.17.05 4.7 0 .77-.05 2.49-.08 3.41a4.53 4.53 0 0 1-.37 1.6c-.31.26-.63.73-2.57.86a2.04 2.04 0 0 0-.08.56c0 .21.06.32.06.45h.45c1.06 0 3.7-.14 5.07-.14.4 0 3.15.09 4.02.09h.88a1.06 1.06 0 0 0 .1-.45M100.7 16.3c0 1.64-1.11 3.52-2.4 3.83a8.86 8.86 0 0 1-2.17.22 5.97 5.97 0 0 1-.98-.06l-.03-2.25v-4.86a.84.84 0 0 1 .16-.58 2.64 2.64 0 0 1 1.12-.16c2.06 0 2.96.18 3.7 1.43a4.71 4.71 0 0 1 .6 2.43m7.67 13.83a1.29 1.29 0 0 0-.13-.56 4.04 4.04 0 0 1-1.75-.34 5.34 5.34 0 0 1-.45-.66 28.67 28.67 0 0 0-1.13-3.04 10 10 0 0 0-1.96-3.15 8.43 8.43 0 0 0-1.99-.87 27.45 27.45 0 0 1-1.08-.43 8.26 8.26 0 0 1 1.08-.15c1.96-.24 2.41-.58 2.91-.98a4.17 4.17 0 0 0 1.64-3.44 5.08 5.08 0 0 0-3.3-4.82 12.98 12.98 0 0 0-3.17-.28c-1.99 0-4.76.18-6.08.18-.4 0-2.7-.05-3.63-.05-.4 0-1.4-.05-1.56-.05a1.52 1.52 0 0 0-.13.5 2.94 2.94 0 0 0 .05.47c.45.05 1.27.16 1.7.24a3.13 3.13 0 0 1 1.1 1.43 67.13 67.13 0 0 1 .17 6.74c0 2.7.02 5.82-.1 6.83a2.01 2.01 0 0 1-1.09 1.77 13.67 13.67 0 0 1-1.5.18 1.3 1.3 0 0 0-.14.53 1.64 1.64 0 0 0 .1.42c.37 0 4.42-.07 5.26-.07 1.7 0 3.13.07 4.63.07a1.1 1.1 0 0 0 .1-.4 1.65 1.65 0 0 0-.1-.55c-.53-.05-1.19-.2-1.48-.27a1.98 1.98 0 0 1-1.14-1.87l-.02-6.11a5.52 5.52 0 0 1 .69-.03 2.7 2.7 0 0 1 1.4.42 5.12 5.12 0 0 1 2.09 1.94 16.1 16.1 0 0 1 1.66 5.68c.08.56.3 1.03.8 1.09.2.02 1.6.08 2.61.08h3.79a.73.73 0 0 0 .15-.45m-28.72-13.7a4.33 4.33 0 0 1-1.34 3.3 4.3 4.3 0 0 1-2.76.72 8.66 8.66 0 0 1-1.13-.05c-.21-.03-.35-.05-.35-.19l.03-7.75a12.09 12.09 0 0 1 1.53-.13c1.8 0 2.91.45 3.44 1.56a5.63 5.63 0 0 1 .58 2.54m4.73.1a5.06 5.06 0 0 0-2.82-4.6 13.08 13.08 0 0 0-4.74-.6c-2.03 0-5.2.16-6.6.16-.99 0-2.47-.11-3.29-.11a.97.97 0 0 0-.13.42 1.27 1.27 0 0 0 .08.53c.5.16 1.32.3 1.85.43a2.26 2.26 0 0 1 .71 1.5c.08.93.14 2.1.14 4.1 0 5.59-.03 8.52-.11 9.15a2.24 2.24 0 0 1-1.5 1.88 14.8 14.8 0 0 1-1.54.26 2.8 2.8 0 0 0-.06.56.74.74 0 0 0 .08.37c.85 0 3.34-.1 4.29-.1 2.35 0 4.76.1 5.73.1h.67a.76.76 0 0 0 .08-.42 1.28 1.28 0 0 0-.06-.48 4.3 4.3 0 0 1-2.48-.85 2.25 2.25 0 0 1-.53-1.56l-.08-5.81c1.58.1 3.28.15 4.2.15a9.93 9.93 0 0 0 3.07-.47 4.84 4.84 0 0 0 3.04-4.6M263 41.28c0-.16-.1-.22-.16-.32-1.08 0-2.51.08-3.07.08-1.34 0-2.98-.1-3.7-.1-.08.15-.1.18-.1.3a.94.94 0 0 0 .05.33c.77.15 1.88.34 2.09.71a1.9 1.9 0 0 1 .24 1.03 2.58 2.58 0 0 1-.16.98c-.24.66-.74 1.7-1.45 3.15a52.4 52.4 0 0 1-2.41 4.6 91.87 91.87 0 0 1-2.6-5.02l-1.47-3.23a2.45 2.45 0 0 1-.1-.72 1.76 1.76 0 0 1 .1-.68c.23-.48 1.05-.53 2.17-.67a1.16 1.16 0 0 0 .07-.39c0-.18-.08-.13-.16-.26h-.47c-1.77 0-1.25.08-4.29.08-1.3 0-2.85-.08-3.06-.08-.1.18-.16.2-.16.4a.57.57 0 0 0 .1.31c1.77.42 2.3.74 2.49 1.09l4.63 9.07a10.46 10.46 0 0 1 .84 1.98 14.71 14.71 0 0 1 .22 3.17 2.25 2.25 0 0 1-.85 2.04 12.68 12.68 0 0 1-2.12.34.63.63 0 0 0-.13.37 1.12 1.12 0 0 0 .08.32c1.35 0 2.75-.03 3.54-.03.56 0 1.4.03 2.97.06.9.02 1.58.05 2.06.05a.78.78 0 0 0 .13-.34.58.58 0 0 0-.1-.35 6.33 6.33 0 0 1-2.3-.53 2.03 2.03 0 0 1-.7-1.69l-.2-3.97a1.46 1.46 0 0 1 .1-.63 3.98 3.98 0 0 1 .29-.74l4.07-8.06a5.47 5.47 0 0 1 1.7-1.78 7.42 7.42 0 0 1 1.72-.53.97.97 0 0 0 .1-.34m-21.37 5.45v-5.14c0-.4-.16-.5-.55-.5-.8 0-4.45.1-8.68.1-3.28 0-5.47-.05-6.96-.05h-1.95c-.34 0-.45.08-.45.45v4.79a.47.47 0 0 0 .31.1.69.69 0 0 0 .32-.05c1.03-2.3 1.56-3.52 3.34-4.42.79-.08 3.56-.1 3.99-.1.02.29.05 1.21.08 2.33.03 1.9.03 2.93.03 7.43 0 3.89-.03 5.9-.09 6.32-.1.74.03 1.3-3.14 1.43a.84.84 0 0 0-.08.45 1.22 1.22 0 0 0 .03.31h1.03c.97 0 2.27-.1 3.22-.1.77 0 2.22.08 3.84.08h.74a.7.7 0 0 0 .08-.4.6.6 0 0 0-.11-.37 5.44 5.44 0 0 1-2.72-.5 8.07 8.07 0 0 1-.24-1.98c-.03-2.86-.05-4.2-.05-6.11 0-2.46.02-4.34.02-8.91.37 0 2.33-.03 3.13 0a4.76 4.76 0 0 1 2.98 2 8.48 8.48 0 0 1 1.19 2.89 1.05 1.05 0 0 0 .4.05.5.5 0 0 0 .3-.1M219.65 59.8a.85.85 0 0 0-.08-.37c-.4-.03-1.48-.14-1.96-.24a4.18 4.18 0 0 1-.9-2.04 398.46 398.46 0 0 1-.05-6.61v-6.71a2.12 2.12 0 0 1 .47-1.43 4.51 4.51 0 0 1 2.36-.69.78.78 0 0 0 .08-.34.45.45 0 0 0-.13-.32h-.76c-1.12 0-2.7.13-3.6.13-.56 0-2.15-.08-3.3-.1h-.59a.38.38 0 0 0-.13.34 1.82 1.82 0 0 0 .05.35 5.7 5.7 0 0 1 2.07.37 2.93 2.93 0 0 1 .87 2.25c.03.5.05 1.85.08 4.28.03 1.32.05 3.12.05 4.65 0 .77-.05 2.75-.08 3.68a4.5 4.5 0 0 1-.37 1.58c-.32.27-.63.74-2.56.88a1.06 1.06 0 0 0-.08.4c0 .2.05.2.05.34h.45c1.06 0 2.7-.13 4.07-.13.4 0 2.14.07 3.02.07h.87a.64.64 0 0 0 .1-.34m-13.06-4.86a4.9 4.9 0 0 0-2.99-4.66 14.79 14.79 0 0 0-2.93-1.06 19.17 19.17 0 0 1-3.84-1.45 3.17 3.17 0 0 1-1.56-2.88c0-1.7 1.72-3.1 3.73-3.1a4.43 4.43 0 0 1 3.62 1.85 13.49 13.49 0 0 1 1.64 3.02 1.05 1.05 0 0 0 .27.05.86.86 0 0 0 .58-.26 20.75 20.75 0 0 1-.21-2.38 13.8 13.8 0 0 1 .24-2.07.81.81 0 0 0-.8-.37 5.88 5.88 0 0 0-1.03.96 6.6 6.6 0 0 0-4.5-1.64c-3.25 0-5.58 2.17-5.58 5.05a5.3 5.3 0 0 0 .98 2.9 5.78 5.78 0 0 0 2.57 1.94c.76.31 4.2 1.35 4.68 1.53 2.11.82 2.9 1.53 2.9 3.41a4.13 4.13 0 0 1-1.16 2.67 3.69 3.69 0 0 1-2.93 1.25 5.93 5.93 0 0 1-4.45-1.96 12.6 12.6 0 0 1-1.8-3.57.9.9 0 0 0-.37-.05.94.94 0 0 0-.5.15c0 .35.1 2.1.1 2.62a11.04 11.04 0 0 1-.28 2.36 1 1 0 0 0 .85.53 3.73 3.73 0 0 1 1.32-.85 1.23 1.23 0 0 1 .63.24 7.63 7.63 0 0 0 4.42 1.32c3.73 0 6.4-1.88 6.4-5.55m-23.4-9.13a4.28 4.28 0 0 1-2.9 3.94 14.25 14.25 0 0 1-2.76.22 16.01 16.01 0 0 1-1.61-.06l-.03-2.33v-5c0-.34.08-.53.19-.6a8.55 8.55 0 0 1 1.85-.16c2.48 0 3.62.23 4.52 1.53a4.16 4.16 0 0 1 .74 2.46m5.55 14.01a.7.7 0 0 0-.13-.39 4.06 4.06 0 0 1-1.75-.34 5.94 5.94 0 0 1-.45-.66 33.85 33.85 0 0 0-1.1-3.3 9.87 9.87 0 0 0-1.96-3.16 7.06 7.06 0 0 0-1.9-.87 40.92 40.92 0 0 1-1.09-.42 10.45 10.45 0 0 1 1.09-.16 4.85 4.85 0 0 0 2.8-.98 4.2 4.2 0 0 0 1.74-3.41 5.04 5.04 0 0 0-3.3-4.79 13 13 0 0 0-3.17-.29c-1.99 0-3.47.18-4.8.18-.39 0-1.68-.05-2.6-.05-.4 0-1.4-.05-1.57-.05-.08.19-.13.24-.13.35a1.7 1.7 0 0 0 .05.37c.45.05 1.27.15 1.7.23a3.1 3.1 0 0 1 1.1 1.43c.14.85.16 3.23.16 6.96 0 2.7.03 6.08-.1 7.09a2 2 0 0 1-1.09 1.76 14.9 14.9 0 0 1-1.5.2.68.68 0 0 0-.14.36 1.07 1.07 0 0 0 .1.32c.38 0 3.42-.08 4.27-.08 1.69 0 2.11.08 3.62.08a.65.65 0 0 0 .1-.3.75.75 0 0 0-.1-.39c-.53-.05-1.2-.21-1.48-.26a1.98 1.98 0 0 1-1.14-1.88l-.02-6.61c.2-.03.97-.03 1.18-.03a4.9 4.9 0 0 1 2.12.37 5.93 5.93 0 0 1 2.6 2.14 16.6 16.6 0 0 1 1.66 5.77c.08.55.29 1.03.8 1.08a9.6 9.6 0 0 0 1.53.08h2.75a.45.45 0 0 0 .15-.34m-22.18-4.02a6.94 6.94 0 0 0-.03-.77.59.59 0 0 0-.4-.08.74.74 0 0 0-.34.06 7 7 0 0 1-2.73 4.04 4.98 4.98 0 0 1-2.24.3h-2.96a12.39 12.39 0 0 1-1.75-.14c-.4-.08-.82-.72-1-1.14a3.43 3.43 0 0 1-.3-1.82V50.2h.85a5.22 5.22 0 0 1 2.25.38 3.18 3.18 0 0 1 1.43 1.13 9.06 9.06 0 0 1 .37 2.2.66.66 0 0 0 .42.1.61.61 0 0 0 .43-.14c0-.7-.16-2.64-.16-3.7 0-1.32.18-2.93.26-3.89a.69.69 0 0 0-.42-.1.8.8 0 0 0-.43.08c-.07.37-.29 1.48-.34 1.56a3.85 3.85 0 0 1-2.03 1.4 8.42 8.42 0 0 1-2.17.22h-.43v-2.6c0-2.54.06-3.57.08-4.05l.1-.9c.25-.03 1-.05 2.23-.05 1.53 0 2.67.02 2.9.02a2.98 2.98 0 0 1 1.7.53 6.73 6.73 0 0 1 2.36 3.28.73.73 0 0 0 .31.05c.16 0 .19-.05.4-.15a59 59 0 0 0-.16-4.1c-.03-.27-.08-.34-.6-.34-.22 0-1.22-.06-2.28-.06-1.51 0-2.12.03-4.42.03l-4.52.03c-1.59 0-1.93-.06-2.62-.06h-.9a.54.54 0 0 0-.14.32.63.63 0 0 0 .14.37 13.4 13.4 0 0 1 1.94.3c.37.3.71.4.95 1.66.05.55.08 2.35.08 3.57v5.44c0 1.11-.03 2.94-.05 3.6a8 8 0 0 1-.59 2.57 6.99 6.99 0 0 1-2.39.4.88.88 0 0 0-.13.42.63.63 0 0 0 .13.37h.88c.85 0 2.97-.08 3.68-.08.66 0 1.56.05 3.1.05.85 0 3.33.16 8.68.16a2.24 2.24 0 0 0 .7-.05.8.8 0 0 0 .12-.42c.05-.53.05-1.83.05-3.97m-19.6-14.43c0-.11-.03-.27-.14-.3h-.9c-.63 0-1.64.06-2.09.06-2.14 0-2.9-.14-3.22-.14h-.48c-.05.14-.13.22-.13.35 0 .1.05.18.05.29a9.85 9.85 0 0 1 1.83.4 2.49 2.49 0 0 1 .66 1.66 10.03 10.03 0 0 1-.64 2.41l-4.25 10.47-5.23-13.25a1.99 1.99 0 0 1 .87-1.48 11.6 11.6 0 0 1 1.71-.21.97.97 0 0 0 .1-.37c0-.1-.02-.26-.13-.29h-.66c-.81 0-2.06.1-3.46.1-.6 0-1.8-.05-2.96-.05h-1.03a.55.55 0 0 0-.1.32.57.57 0 0 0 .08.31 9.18 9.18 0 0 1 2.22.9 47.23 47.23 0 0 1 2.17 4.82l2.19 5.3c1.82 4.38 2.9 7.31 3.04 7.82.13.08 0 .15.23.15s.22-.04.27-.18l6.82-16.4a5.26 5.26 0 0 1 .95-1.5 4.2 4.2 0 0 1 2.12-.85 1.25 1.25 0 0 0 .1-.34m-23.15 18.43a.82.82 0 0 0-.08-.37c-.4-.03-1.48-.13-1.96-.24a4.22 4.22 0 0 1-.9-2.04c-.02-1.27-.05-4.15-.05-6.6v-6.72a2.1 2.1 0 0 1 .48-1.44 4.5 4.5 0 0 1 2.35-.68.78.78 0 0 0 .08-.34.43.43 0 0 0-.14-.32h-.76c-1.11 0-2.7.13-3.6.13-.55 0-2.14-.08-3.3-.1h-.58a.37.37 0 0 0-.14.34 1.84 1.84 0 0 0 .05.34 5.68 5.68 0 0 1 2.07.37 2.91 2.91 0 0 1 .87 2.25c.03.5.05 1.86.08 4.29.03 1.32.06 3.12.06 4.65 0 .77-.06 2.75-.09 3.67a4.44 4.44 0 0 1-.37 1.6c-.31.26-.63.73-2.56.87a1.01 1.01 0 0 0-.08.4c0 .2.05.2.05.34h.45c1.06 0 2.7-.14 4.07-.14.4 0 2.14.08 3.02.08h.87a.61.61 0 0 0 .1-.34M111.86 41.3a.42.42 0 0 0-.08-.26h-.6c-1.33 0-1.9.05-4.29.05-.82 0-2.03-.05-2.32-.05h-.7c-.07.05-.1.24-.1.34a.34.34 0 0 0 .14.29 11.36 11.36 0 0 1 2.72.77 5.23 5.23 0 0 1 .77 2.7c.02.39.05.79.05 1.87v7.86a10.42 10.42 0 0 1-.05 1.13c-.45-.5-1.22-1.48-2.25-2.7l-10.1-11.79a1.75 1.75 0 0 0-.4-.34l-.68-.03c-1.7 0-3.18-.08-3.63-.08a.53.53 0 0 0-.07.27 1.99 1.99 0 0 0 .05.34 4.63 4.63 0 0 1 2.04.74 7.7 7.7 0 0 1 1.29 1.56 2.3 2.3 0 0 1 .1.85c0 1.37-.07 3.88-.07 5.73v5.64a11.9 11.9 0 0 1-.16 2 5.55 5.55 0 0 1-2.78 1.36.76.76 0 0 0-.1.32c0 .08.02.23.08.26h.5c.52 0 1.74-.08 2.54-.08 1.16 0 1.69.08 2.77.08h1.6c.1-.03.12-.24.12-.34a.5.5 0 0 0-.08-.27A5.09 5.09 0 0 1 95 57.88a15.54 15.54 0 0 1-.35-3.33l-.02-3.78c0-2.09.02-4.97.05-5.9l.58.69 12.54 14.67a.37.37 0 0 0 .32.16c.13 0 .05 0 .15-.05a4.05 4.05 0 0 0 .14-1.2c0-.76-.03-1.55-.03-1.95V45.96c0-3.3 1.56-4.24 3.39-4.31a.6.6 0 0 0 .1-.35m-24.5.13a.55.55 0 0 0-.12-.34h-.77c-.82 0-1.93.06-2.88.06-1.06 0-2.25-.06-3.02-.06h-.95a.62.62 0 0 0-.1.34.93.93 0 0 0 .07.35c.11 0 2.04.02 2.38.5a6.51 6.51 0 0 1 1.03 1.96 17.27 17.27 0 0 1 .22 2.9c0 2.25 0 3.76-.03 4.55a14.24 14.24 0 0 1-.48 3.52c-.74 2.3-2.45 3.44-5.18 3.44a7.24 7.24 0 0 1-3.1-.66 4.45 4.45 0 0 1-2.56-3.33l-.14-7.94-.02-3.22c0-.61.77-1.17 1.03-1.48a12.54 12.54 0 0 1 2.04-.27.76.76 0 0 0 .13-.37.44.44 0 0 0-.18-.34l-1 .03c-.99.02-2.28.05-3.1.05-1.27 0-2.25-.03-3.04-.03h-1.11a.45.45 0 0 0-.14.37.42.42 0 0 0 .1.32c.85.1 1.4.19 1.78.26a2.23 2.23 0 0 1 .93 1.17c.02.34.07 1.19.07 2.85v6.35a16.25 16.25 0 0 0 .27 3.54 5.22 5.22 0 0 0 2.3 3.25 8.66 8.66 0 0 0 4.84 1.27 9.1 9.1 0 0 0 4.55-1.08 5.42 5.42 0 0 0 2.61-3.52 12.12 12.12 0 0 0 .42-3.14v-5.08c0-.95.06-2.14.06-2.62a5.33 5.33 0 0 1 .8-2.91 10.94 10.94 0 0 1 2.19-.37.65.65 0 0 0 .1-.32" } })])]);
          }, [], false, null, "6dc82cb2", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, OlWi: function(t, e, n) {
        }, Otma: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconRefresh", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("QlrM"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M4.5,14C4.5,14,4.5,14,4.5,14c-0.2,0-0.3-0.1-0.4-0.2l-3-4.5C0.9,9,1,8.7,1.2,8.6c0.2-0.2,0.5-0.1,0.7,0.1l2.6,4\n      l3.1-3.5c0.2-0.2,0.5-0.2,0.7,0c0.2,0.2,0.2,0.5,0,0.7l-3.5,4C4.8,13.9,4.6,14,4.5,14z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M14,22c-0.3,0-0.5-0.2-0.5-0.5S13.7,21,14,21c5,0,9-4,9-9c0-5-4-9-9-9c-5,0-9,4-9,9v1.5C5,13.8,4.8,14,4.5,14\n      S4,13.8,4,13.5V12C4,6.5,8.5,2,14,2c5.5,0,10,4.5,10,10C24,17.5,19.5,22,14,22z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, P3nq: function(t, e) {
        }, P69X: function(t, e, n) {
        }, PSLC: function(t, e, n) {
          var r = { "./LogoFacebook.vue": "q2A7", "./LogoFriends.vue": "po+s", "./LogoGovDocs.vue": "YHd/", "./LogoLibrary.vue": "I7an", "./LogoLibraryIcon.vue": "Pgbo", "./LogoTwitter.vue": "i/xl", "./LogoUniversity.vue": "Obua" };
          function i(t2) {
            var e2 = a(t2);
            return n(e2);
          }
          function a(t2) {
            if (!n.o(r, t2)) {
              var e2 = new Error("Cannot find module '" + t2 + "'");
              throw e2.code = "MODULE_NOT_FOUND", e2;
            }
            return r[t2];
          }
          i.keys = function() {
            return Object.keys(r);
          }, i.resolve = a, t.exports = i, i.id = "PSLC";
        }, "PZ/G": function(t, e) {
        }, Pgbo: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LogoLibraryIcon", status: "ready", release: "1.0.0", type: "Element", props: { width: { type: [Number, String], default: 97 }, height: { type: [Number, String], default: 97 } } }, i = (n("9wbe"), n("KHd+")), a = n("Y3yW"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: this.width, height: this.height, viewBox: "0 0 96 97", preserveAspectRatio: "xMinYMid", "aria-labelledby": "logo-library-icon", role: "img" } }, [e2("title", { attrs: { id: "logo-library-icon" } }, [this._v("Princeton University Library Icon")]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12.2 0h71.5A12.27 12.27 0 0196 12.2v72.5A12.29 12.29 0 0183.7 97H12.2A12.27 12.27 0 010 84.7V12.2A12.25 12.25 0 0112.2 0z", fill: "#ef7622" } }), this._v(" "), e2("path", { staticClass: "cls-2", attrs: { d: "M10.8 83.5V20.1a22 22 0 006.6-3v59.8h.4a13.42 13.42 0 003.5-.4 39.8 39.8 0 007.6-2.5c1.2-.5 2.4-1.1 3.7-1.7a16.34 16.34 0 015.7-1.7 12 12 0 016.2.8 9.13 9.13 0 012.3 1.5 4.9 4.9 0 011.1 2c0 .1 0 .1.1.2s0-.1 0-.1a4.45 4.45 0 011.2-2.1 8 8 0 013.2-1.9 10.87 10.87 0 014.4-.5 16 16 0 016.4 1.7q3 1.5 6 2.7a27.18 27.18 0 006.2 1.7 12.29 12.29 0 002.7.2h.3V17.1a20.23 20.23 0 006.6 2.8v63.5H10.8z" } }), this._v(" "), e2("path", { staticClass: "cls-2", attrs: { d: "M24.8 32.7A74.92 74.92 0 0125 17l.4.2a17.22 17.22 0 004.8 1.7 13.15 13.15 0 008.9-1.4 19.23 19.23 0 005-3.9 22.63 22.63 0 003.5-4.8l.1-.2.3.2a24.47 24.47 0 005.7 6.7 16.37 16.37 0 006.3 3.2 13.91 13.91 0 007.3-.4 14.76 14.76 0 002.9-1.2l.2-.1h.1a74 74 0 01.2 15.6h-46m11 27.8a54.59 54.59 0 01-5.3-8.7l17.4-17.4 17.4 17.4a47.68 47.68 0 01-5.2 8.7l-6-6-6.1-6.1-12.2 12.1" } })])]);
          }, [], false, null, "d5693714", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, PrlM: function(t, e, n) {
          "use strict";
          var r = n("/OE0");
          n.n(r).a;
        }, Ps93: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LibraryHeader", status: "ready", release: "1.0.0", type: "Pattern", props: { type: { type: String, default: "div" }, appName: { type: String, default: "" }, abbrName: { type: String, default: "" }, appUrl: { type: String, default: "" }, maxWidth: { type: Number, default: 1170 }, theme: { type: String, default: "dark" } }, methods: { value: function(t2) {
            return "light" == t2 ? "light" : "dark";
          } } }, i = (n("bjrT"), n("KHd+")), a = n("s5+B"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.type, { tag: "component", class: ["lux-library-header", t2.theme] }, [n2("wrapper", { staticClass: "lux-header-content", attrs: { maxWidth: t2.maxWidth } }, [n2("library-logo", { attrs: { theme: t2.value(t2.theme) } }), t2._v(" "), n2("a", { staticClass: "lux-app-name", attrs: { href: t2.appUrl, title: t2.appName, "aria-labelledby": "appName" } }, [n2("span", { staticClass: "full-name", attrs: { id: "appName" } }, [t2._v(t2._s(t2.appName))]), t2._v(" "), n2("span", { staticClass: "abbr-name" }, [t2._v(t2._s(t2.abbrName))])]), t2._v(" "), n2("spacer"), t2._v(" "), t2._t("default")], 2)], 1);
          }, [], false, null, "55812d38", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, QC6r: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconSearch", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("7LhX"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M8.5,17C3.8,17,0,13.2,0,8.5C0,3.8,3.8,0,8.5,0C13.2,0,17,3.8,17,8.5C17,13.2,13.2,17,8.5,17z M8.5,1\n      C4.4,1,1,4.4,1,8.5S4.4,16,8.5,16S16,12.6,16,8.5S12.6,1,8.5,1z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M23.5,24c-0.1,0-0.3,0-0.4-0.1l-9.3-9.3c-0.2-0.2-0.2-0.5,0-0.7s0.5-0.2,0.7,0l9.3,9.3c0.2,0.2,0.2,0.5,0,0.7\n      C23.8,24,23.6,24,23.5,24z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, QCEB: function(t, e, n) {
          "use strict";
          var r = n("r6IM");
          n.n(r).a;
        }, QkTS: function(t, e, n) {
        }, QlrM: function(t, e) {
        }, QzVM: function(t, e, n) {
        }, Qzzu: function(t, e, n) {
        }, RBhM: function(t, e, n) {
        }, RFJP: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = n("cDf5"), i = n.n(r), a = { name: "InputAutocomplete", status: "prototype", release: "1.0.0", type: "Element", mixins: [n("+Dcj").mixin], props: { items: { type: Array, required: false, default: "" }, placeholder: { type: String, default: "" }, defaultValue: { type: String, default: "" }, label: { type: String, default: "" }, hideLabel: { type: Boolean, default: false }, id: { type: String, default: "" }, name: { type: String, default: "" }, isAsync: { type: Boolean, required: false, default: false }, required: { type: Boolean, default: false }, focused: { type: Boolean, default: false } }, data: function() {
            return { isOpen: false, results: [], search: "", inputValue: "", isLoading: false, arrowCounter: -1 };
          }, methods: { onChange: function() {
            this.$emit("input", this.search), this.isAsync ? this.isLoading = true : (this.filterResults(), this.isOpen = true);
          }, filterResults: function() {
            var t2 = this;
            if (this.items.length && "object" === i()(this.items[0])) {
              var e2 = this.items.filter(function(e3) {
                return e3.label.toLowerCase().indexOf(t2.search.toLowerCase()) > -1;
              });
              this.results = e2.map(function(t3) {
                return t3.label;
              });
            } else
              this.results = this.items.filter(function(e3) {
                return e3.toLowerCase().indexOf(t2.search.toLowerCase()) > -1;
              });
          }, setResult: function(t2) {
            if (this.search = t2, this.inputValue = t2, this.isOpen = false, this.items.length && "object" === i()(this.items[0])) {
              var e2 = this.items.find(function(e3) {
                return e3.label === t2;
              });
              void 0 !== e2 && (this.inputValue = e2.id);
            }
          }, onArrowDown: function() {
            this.arrowCounter < this.results.length && (this.arrowCounter = this.arrowCounter + 1);
          }, onArrowUp: function() {
            this.arrowCounter > 0 && (this.arrowCounter = this.arrowCounter - 1);
          }, onEnter: function() {
            this.setResult(this.results[this.arrowCounter]), this.isOpen = false, this.arrowCounter = -1;
          }, onEscape: function() {
            this.setResult(this.search), this.isOpen = false;
          }, handleClickOutside: function(t2) {
            this.$el.contains(t2.target) || (this.setResult(this.search), this.isOpen = false, this.arrowCounter = -1);
          } }, watch: { items: function(t2, e2) {
            this.isAsync && (this.results = t2, this.isOpen = true, this.isLoading = false);
          } }, created: function() {
            this.setResult(this.defaultValue);
          }, mounted: function() {
            document.addEventListener("click", this.handleClickOutside);
          }, destroyed: function() {
            document.removeEventListener("click", this.handleClickOutside);
          } }, o = (n("jur8"), n("KHd+")), s = n("wzZG"), c = n.n(s), u = Object(o.a)(a, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("div", { staticClass: "lux-autocomplete" }, [t2.label ? n2("label", { class: { "lux-hidden": t2.hideLabel } }, [t2._v(t2._s(t2.label))]) : t2._e(), t2._v(" "), n2("div", { staticClass: "lux-autocomplete-input" }, [n2("input", { directives: [{ name: "model", rawName: "v-model", value: t2.search, expression: "search" }, { name: "focus", rawName: "v-focus", value: t2.focused, expression: "focused" }], attrs: { id: "displayInput", autocomplete: "off", type: "text", required: t2.required }, domProps: { value: t2.search }, on: { input: [function(e3) {
              e3.target.composing || (t2.search = e3.target.value);
            }, t2.onChange], keydown: [function(e3) {
              return !e3.type.indexOf("key") && t2._k(e3.keyCode, "down", 40, e3.key, ["Down", "ArrowDown"]) ? null : t2.onArrowDown.apply(null, arguments);
            }, function(e3) {
              return !e3.type.indexOf("key") && t2._k(e3.keyCode, "up", 38, e3.key, ["Up", "ArrowUp"]) ? null : t2.onArrowUp.apply(null, arguments);
            }, function(e3) {
              return !e3.type.indexOf("key") && t2._k(e3.keyCode, "enter", 13, e3.key, "Enter") ? null : t2.onEnter.apply(null, arguments);
            }, function(e3) {
              return !e3.type.indexOf("key") && t2._k(e3.keyCode, "esc", 27, e3.key, ["Esc", "Escape"]) ? null : t2.onEscape.apply(null, arguments);
            }, function(e3) {
              return !e3.type.indexOf("key") && t2._k(e3.keyCode, "tab", 9, e3.key, "Tab") ? null : t2.onEscape.apply(null, arguments);
            }], focus: function(e3) {
              t2.focused = true;
            }, blur: function(e3) {
              t2.focused = false;
            } } }), t2._v(" "), n2("ul", { directives: [{ name: "show", rawName: "v-show", value: t2.isOpen, expression: "isOpen" }], staticClass: "lux-autocomplete-results" }, [t2.isLoading ? n2("li", { staticClass: "loading" }, [t2._v("Loading results...")]) : t2._l(t2.results, function(e3, r2) {
              return n2("li", { key: r2, staticClass: "lux-autocomplete-result", class: { "is-active": r2 === t2.arrowCounter }, on: { click: function(n3) {
                return t2.setResult(e3);
              } } }, [t2._v("\n        " + t2._s(e3) + "\n      ")]);
            })], 2), t2._v(" "), n2("input", { attrs: { name: t2.name, id: t2.id, type: "hidden", "data-input-value": "" }, domProps: { value: t2.inputValue } })])]);
          }, [], false, null, null, null);
          "function" == typeof c.a && c()(u);
          e.default = u.exports;
        }, "RH/b": function(t, e, n) {
          "use strict";
          var r = n("YXjX");
          n.n(r).a;
        }, RIqP: function(t, e, n) {
          var r = n("Ijbi"), i = n("EbDI"), a = n("Bnag");
          t.exports = function(t2) {
            return r(t2) || i(t2) || a();
          };
        }, RVJi: function(t, e) {
        }, "S/3G": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconExclamation", status: "ready", release: "3.1.1", type: "Element" }, i = n("KHd+"), a = n("DVR0"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("path", { attrs: { d: "M23.5,1h-23C0.2,1,0,1.2,0,1.5v16C0,17.8,0.2,18,0.5,18H7v3.5c0,0.2,0.1,0.4,0.3,0.5c0.1,0,0.1,0,0.2,0\n		c0.1,0,0.3-0.1,0.4-0.1l3.9-3.9h11.8c0.3,0,0.5-0.2,0.5-0.5v-16C24,1.2,23.8,1,23.5,1z M23,17H11.5c-0.1,0-0.3,0.1-0.4,0.1L8,20.3\n		v-2.8C8,17.2,7.8,17,7.5,17H1V2h22V17z" } }), this._v(" "), e2("path", { attrs: { d: "M11.5,11c0.3,0,0.5-0.2,0.5-0.5v-6C12,4.2,11.8,4,11.5,4S11,4.2,11,4.5v6C11,10.8,11.2,11,11.5,11z" } }), this._v(" "), e2("circle", { attrs: { cx: "11.5", cy: "13", r: "1" } })]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, SL3b: function(t, e, n) {
          "use strict";
          var r = n("lvZH");
          n.n(r).a;
        }, SThQ: function(t, e) {
        }, SfqK: function(t, e, n) {
        }, T5iX: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "UniversityLogo", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" } } }, i = (n("fL1g"), n("KHd+")), a = n("OEVl"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2(this.type, { tag: "component", staticClass: "lux-university-logo" }, [e2("a", { attrs: { href: "https://princeton.edu" } }, [e2("svg-icon", { attrs: { name: "logo-university", ariaLabel: "Princeton University", width: "142px", height: "40px" } })], 1)]);
          }, [], false, null, "657ddfae", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, TA8l: function(t, e, n) {
          "use strict";
          var r = n("ILXW");
          n.n(r).a;
        }, TRU7: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "MenuBar", status: "ready", release: "1.0.0", type: "Pattern", model: { prop: "active" }, data: function() {
            return { isVisible: false, activeItem: "" };
          }, props: { type: { type: String, default: "links", validator: function(t2) {
            return t2.match(/(links|buttons|main-menu)/);
          } }, active: { required: false, type: String }, menuItems: { required: true, type: Array } }, computed: { localActive: { get: function() {
            return this.active;
          }, set: function(t2) {
            this.$emit("input", t2);
          } } }, methods: { menuItemClicked: function(t2) {
            this.$emit("menu-item-clicked", t2);
          }, setActiveItem: function(t2) {
            this.activeItem === t2 ? this.activeItem = "" : this.activeItem = t2;
          }, hide: function(t2) {
            this.isVisible = false, this.activeItem = "";
          } }, directives: { "click-outside": { bind: function(t2, e2, n2) {
            var r2 = e2.modifiers.bubble, i2 = function(n3) {
              (r2 || !t2.contains(n3.target) && t2 !== n3.target) && e2.value(n3);
            };
            t2.__vueClickOutside__ = i2, document.addEventListener("click", i2);
          }, unbind: function(t2, e2) {
            document.removeEventListener("click", t2.__vueClickOutside__), t2.__vueClickOutside__ = null;
          } } } }, i = (n("v21v"), n("KHd+")), a = n("+97c"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return "links" === t2.type ? n2("nav", { staticClass: "lux-nav" }, [n2("ul", t2._l(t2.menuItems, function(e3, r2) {
              return n2("li", { key: r2 }, [e3.children ? [n2("a", { key: r2, staticClass: "lux-has-children lux-nav-item", attrs: { href: e3.href, title: e3.name, "aria-haspopup": "true" }, on: { click: function(n3) {
                return t2.menuItemClicked(n3, e3);
              } } }, [t2._v(t2._s(e3.name))]), t2._v(" "), n2("ul", { staticClass: "lux-nav-children", attrs: { "aria-label": "submenu" } }, t2._l(e3.children, function(r3) {
                var i2 = r3.href, a2 = r3.name, o2 = r3.index, s2 = r3.target;
                return n2("li", { key: o2 }, [n2("a", { staticClass: "lux-nav-item", attrs: { href: i2, title: a2, target: s2 }, on: { click: function(n3) {
                  return t2.menuItemClicked(n3, e3);
                } } }, [t2._v(t2._s(a2))])]);
              }), 0)] : [n2("a", { staticClass: "lux-nav-item", attrs: { href: e3.href, title: e3.name }, on: { click: function(n3) {
                return t2.menuItemClicked(n3, e3);
              } } }, [t2._v(t2._s(e3.name))])]], 2);
            }), 0)]) : "buttons" === t2.type ? n2("div", { staticClass: "lux-menu" }, [n2("ul", t2._l(t2.menuItems, function(e3, r2) {
              return n2("li", { key: e3 }, [n2("button", { key: r2, class: ["lux-menu-item", { "lux-active": t2.localActive === e3.component }, { "lux-disabled": e3.disabled }, { "lux-is-child": true === e3.hasOwnProperty("parent") }], attrs: { href: e3.href, disabled: e3.disabled }, domProps: { innerHTML: t2._s(e3.name) }, on: { click: function(n3) {
                return t2.menuItemClicked(n3, e3);
              } } })]);
            }), 0)]) : "main-menu" === t2.type ? n2("nav", { directives: [{ name: "click-outside", rawName: "v-click-outside", value: t2.hide, expression: "hide" }], staticClass: "lux-main-menu", attrs: { "aria-label": "Main Navigation" } }, [n2("button", { staticClass: "lux-main-menu-toggle", class: { "is-active": t2.isVisible }, attrs: { "aria-haspopup": "true", "aria-label": "Main Menu", "aria-expanded": t2.isVisible ? "true" : "false" }, on: { click: function(e3) {
              t2.isVisible = !t2.isVisible;
            } } }, [n2("hamburger")], 1), t2._v(" "), n2("ul", { staticClass: "lux-main-menu-list", class: { "lux-show": t2.isVisible } }, t2._l(t2.menuItems, function(e3, r2) {
              return n2("li", { key: r2, class: { "lux-has-children": e3.children }, attrs: { role: "presentation" } }, [e3.children ? [n2("button", { staticClass: "lux-submenu-toggle", attrs: { "aria-haspopup": "true", "aria-expanded": t2.activeItem ? "true" : "false" }, on: { click: function(e4) {
                return t2.setActiveItem(r2);
              } } }, [t2._v("\n          " + t2._s(e3.name) + "\n        ")]), t2._v(" "), n2("ul", { class: { "lux-show": r2 === t2.activeItem }, attrs: { role: "menu" } }, t2._l(e3.children, function(e4, r3) {
                return n2("li", { key: r3, attrs: { role: "presentation" } }, [n2("a", { key: r3, staticClass: "lux-nav-item", attrs: { role: "menuitem", href: e4.href, title: e4.name, target: e4.target, "data-method": e4.method } }, [t2._v(t2._s(e4.name))])]);
              }), 0)] : [n2("a", { key: r2, staticClass: "lux-nav-item", attrs: { href: e3.href, title: e3.name } }, [t2._v("\n          " + t2._s(e3.name) + "\n        ")])]], 2);
            }), 0)]) : t2._e();
          }, [], false, null, "b94021aa", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "U/5H": function(t, e, n) {
          var r, i;
          !function(a) {
            "use strict";
            void 0 === (i = "function" == typeof (r = a) ? r.call(e, n, e, t) : r) || (t.exports = i);
          }(function() {
            "use strict";
            if ("undefined" == typeof window || !window.document)
              return function() {
                throw new Error("Sortable.js requires a window with a document");
              };
            var t2, e2, n2, r2, i2, a, o, s, c, u, l, f, d, p, h, v, m, g, y, b, _2, x, w, C, S, O, k, M, D = [], j = false, L2 = false, E = false, A = [], T = false, $2 = false, I = [], P = /\s+/g, z = "Sortable" + new Date().getTime(), N = window, H = N.document, V = N.parseInt, Y = N.setTimeout, F = N.jQuery || N.Zepto, R = N.Polymer, B = { capture: false, passive: false }, W = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie|iemobile)/i), U = !!navigator.userAgent.match(/Edge/i), q = !!navigator.userAgent.match(/firefox/i), K = !(!navigator.userAgent.match(/safari/i) || navigator.userAgent.match(/chrome/i) || navigator.userAgent.match(/android/i)), X = !!navigator.userAgent.match(/iP(ad|od|hone)/i), G = U || W ? "cssFloat" : "float", J = "draggable" in H.createElement("div"), Q = function() {
              if (W)
                return false;
              var t3 = H.createElement("x");
              return t3.style.cssText = "pointer-events:auto", "auto" === t3.style.pointerEvents;
            }(), Z = false, tt = false, et = Math.abs, nt = Math.min, rt = Math.max, it = [], at = function(t3, e3) {
              var n3 = Ct(t3), r3 = V(n3.width) - V(n3.paddingLeft) - V(n3.paddingRight) - V(n3.borderLeftWidth) - V(n3.borderRightWidth), i3 = Lt(t3, 0, e3), a2 = Lt(t3, 1, e3), o2 = i3 && Ct(i3), s2 = a2 && Ct(a2), c2 = o2 && V(o2.marginLeft) + V(o2.marginRight) + Yt(i3).width, u2 = s2 && V(s2.marginLeft) + V(s2.marginRight) + Yt(a2).width;
              if ("flex" === n3.display)
                return "column" === n3.flexDirection || "column-reverse" === n3.flexDirection ? "vertical" : "horizontal";
              if ("grid" === n3.display)
                return n3.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
              if (i3 && "none" !== o2.float) {
                var l2 = "left" === o2.float ? "left" : "right";
                return !a2 || "both" !== s2.clear && s2.clear !== l2 ? "horizontal" : "vertical";
              }
              return i3 && ("block" === o2.display || "flex" === o2.display || "table" === o2.display || "grid" === o2.display || c2 >= r3 && "none" === n3[G] || a2 && "none" === n3[G] && c2 + u2 > r3) ? "vertical" : "horizontal";
            }, ot = function(t3, e3) {
              if (!t3 || !t3.getBoundingClientRect)
                return st();
              var n3 = t3, r3 = false;
              do {
                if (n3.clientWidth < n3.scrollWidth || n3.clientHeight < n3.scrollHeight) {
                  var i3 = Ct(n3);
                  if (n3.clientWidth < n3.scrollWidth && ("auto" == i3.overflowX || "scroll" == i3.overflowX) || n3.clientHeight < n3.scrollHeight && ("auto" == i3.overflowY || "scroll" == i3.overflowY)) {
                    if (!n3 || !n3.getBoundingClientRect || n3 === H.body)
                      return st();
                    if (r3 || e3)
                      return n3;
                    r3 = true;
                  }
                }
              } while (n3 = n3.parentNode);
              return st();
            }, st = function() {
              return W ? H.documentElement : H.scrollingElement;
            }, ct = function(t3, e3, n3) {
              t3.scrollLeft += e3, t3.scrollTop += n3;
            }, ut = Pt(function(t3, e3, n3, r3) {
              if (e3.scroll) {
                var i3 = n3 ? n3[z] : window, a2 = e3.scrollSensitivity, o2 = e3.scrollSpeed, l2 = t3.clientX, f2 = t3.clientY, d2 = st(), p2 = false;
                c !== n3 && (lt(), s = e3.scroll, u = e3.scrollFn, true === s && (s = ot(n3, true), c = s));
                var h2 = 0, v2 = s;
                do {
                  var m2, g2, y2, b2, x2, w2, C2, S2, O2, k2 = v2, M2 = Yt(k2), L3 = M2.top, E2 = M2.bottom, A2 = M2.left, T2 = M2.right, $3 = M2.width, I2 = M2.height;
                  if (m2 = k2.scrollWidth, g2 = k2.scrollHeight, y2 = Ct(k2), S2 = k2.scrollLeft, O2 = k2.scrollTop, k2 === d2 ? (w2 = $3 < m2 && ("auto" === y2.overflowX || "scroll" === y2.overflowX || "visible" === y2.overflowX), C2 = I2 < g2 && ("auto" === y2.overflowY || "scroll" === y2.overflowY || "visible" === y2.overflowY)) : (w2 = $3 < m2 && ("auto" === y2.overflowX || "scroll" === y2.overflowX), C2 = I2 < g2 && ("auto" === y2.overflowY || "scroll" === y2.overflowY)), b2 = w2 && (et(T2 - l2) <= a2 && S2 + $3 < m2) - (et(A2 - l2) <= a2 && !!S2), x2 = C2 && (et(E2 - f2) <= a2 && O2 + I2 < g2) - (et(L3 - f2) <= a2 && !!O2), !D[h2])
                    for (var P2 = 0; P2 <= h2; P2++)
                      D[P2] || (D[P2] = {});
                  D[h2].vx == b2 && D[h2].vy == x2 && D[h2].el === k2 || (D[h2].el = k2, D[h2].vx = b2, D[h2].vy = x2, clearInterval(D[h2].pid), !k2 || 0 == b2 && 0 == x2 || (p2 = true, D[h2].pid = setInterval(function() {
                    r3 && 0 === this.layer && (gt.active._emulateDragOver(true), gt.active._onTouchMove(_2, true));
                    var e4 = D[this.layer].vy ? D[this.layer].vy * o2 : 0, n4 = D[this.layer].vx ? D[this.layer].vx * o2 : 0;
                    "function" == typeof u && "continue" !== u.call(i3, n4, e4, t3, _2, D[this.layer].el) || ct(D[this.layer].el, n4, e4);
                  }.bind({ layer: h2 }), 24))), h2++;
                } while (e3.bubbleScroll && v2 !== d2 && (v2 = ot(v2, false)));
                j = p2;
              }
            }, 30), lt = function() {
              D.forEach(function(t3) {
                clearInterval(t3.pid);
              }), D = [];
            }, ft = function(t3) {
              function e3(t4, n4) {
                return function(r4, i3, a2, o2) {
                  var s2 = r4.options.group.name && i3.options.group.name && r4.options.group.name === i3.options.group.name;
                  if (null == t4 && (n4 || s2))
                    return true;
                  if (null == t4 || false === t4)
                    return false;
                  if (n4 && "clone" === t4)
                    return t4;
                  if ("function" == typeof t4)
                    return e3(t4(r4, i3, a2, o2), n4)(r4, i3, a2, o2);
                  var c2 = (n4 ? r4 : i3).options.group.name;
                  return true === t4 || "string" == typeof t4 && t4 === c2 || t4.join && t4.indexOf(c2) > -1;
                };
              }
              var n3 = {}, r3 = t3.group;
              r3 && "object" == typeof r3 || (r3 = { name: r3 }), n3.name = r3.name, n3.checkPull = e3(r3.pull, true), n3.checkPut = e3(r3.put), n3.revertClone = r3.revertClone, t3.group = n3;
            }, dt = function(e3) {
              t2 && t2.parentNode && t2.parentNode[z] && t2.parentNode[z]._computeIsAligned(e3);
            }, pt = function() {
              !Q && n2 && Ct(n2, "display", "none");
            }, ht = function() {
              !Q && n2 && Ct(n2, "display", "");
            };
            H.addEventListener("click", function(t3) {
              if (E)
                return t3.preventDefault(), t3.stopPropagation && t3.stopPropagation(), t3.stopImmediatePropagation && t3.stopImmediatePropagation(), E = false, false;
            }, true);
            var vt, mt = function(e3) {
              if (t2) {
                var n3 = function(t3, e4) {
                  for (var n4 = 0; n4 < A.length; n4++)
                    if (!Et(A[n4])) {
                      var r4 = Yt(A[n4]), i4 = A[n4][z].options.emptyInsertThreshold, a2 = t3 >= r4.left - i4 && t3 <= r4.right + i4, o2 = e4 >= r4.top - i4 && e4 <= r4.bottom + i4;
                      if (i4 && a2 && o2)
                        return A[n4];
                    }
                }((e3 = e3.touches ? e3.touches[0] : e3).clientX, e3.clientY);
                if (n3) {
                  var r3 = {};
                  for (var i3 in e3)
                    r3[i3] = e3[i3];
                  r3.target = r3.rootEl = n3, r3.preventDefault = void 0, r3.stopPropagation = void 0, n3[z]._onDragOver(r3);
                }
              }
            };
            function gt(t3, e3) {
              if (!t3 || !t3.nodeType || 1 !== t3.nodeType)
                throw "Sortable: `el` must be HTMLElement, not " + {}.toString.call(t3);
              this.el = t3, this.options = e3 = zt({}, e3), t3[z] = this;
              var n3 = { group: null, sort: true, disabled: false, store: null, handle: null, scroll: true, scrollSensitivity: 30, scrollSpeed: 10, bubbleScroll: true, draggable: /[uo]l/i.test(t3.nodeName) ? ">li" : ">*", swapThreshold: 1, invertSwap: false, invertedSwapThreshold: null, removeCloneOnHide: true, direction: function() {
                return at(t3, this.options);
              }, ghostClass: "sortable-ghost", chosenClass: "sortable-chosen", dragClass: "sortable-drag", ignore: "a, img", filter: null, preventOnFilter: true, animation: 0, easing: null, setData: function(t4, e4) {
                t4.setData("Text", e4.textContent);
              }, dropBubble: false, dragoverBubble: false, dataIdAttr: "data-id", delay: 0, delayOnTouchOnly: false, touchStartThreshold: V(window.devicePixelRatio, 10) || 1, forceFallback: false, fallbackClass: "sortable-fallback", fallbackOnBody: false, fallbackTolerance: 0, fallbackOffset: { x: 0, y: 0 }, supportPointer: false !== gt.supportPointer && "PointerEvent" in window, emptyInsertThreshold: 5 };
              for (var r3 in n3)
                !(r3 in e3) && (e3[r3] = n3[r3]);
              for (var i3 in ft(e3), this)
                "_" === i3.charAt(0) && "function" == typeof this[i3] && (this[i3] = this[i3].bind(this));
              this.nativeDraggable = !e3.forceFallback && J, this.nativeDraggable && (this.options.touchStartThreshold = 1), e3.supportPointer ? _t(t3, "pointerdown", this._onTapStart) : (_t(t3, "mousedown", this._onTapStart), _t(t3, "touchstart", this._onTapStart)), this.nativeDraggable && (_t(t3, "dragover", this), _t(t3, "dragenter", this)), A.push(this.el), e3.store && e3.store.get && this.sort(e3.store.get(this) || []);
            }
            function yt(t3, e3, n3, r3) {
              if (t3) {
                n3 = n3 || H;
                do {
                  if (null != e3 && (">" === e3[0] ? t3.parentNode === n3 && It(t3, e3) : It(t3, e3)) || r3 && t3 === n3)
                    return t3;
                  if (t3 === n3)
                    break;
                } while (t3 = bt(t3));
              }
              return null;
            }
            function bt(t3) {
              return t3.host && t3 !== H && t3.host.nodeType ? t3.host : t3.parentNode;
            }
            function _t(t3, e3, n3) {
              t3.addEventListener(e3, n3, !W && B);
            }
            function xt(t3, e3, n3) {
              t3.removeEventListener(e3, n3, !W && B);
            }
            function wt(t3, e3, n3) {
              if (t3 && e3)
                if (t3.classList)
                  t3.classList[n3 ? "add" : "remove"](e3);
                else {
                  var r3 = (" " + t3.className + " ").replace(P, " ").replace(" " + e3 + " ", " ");
                  t3.className = (r3 + (n3 ? " " + e3 : "")).replace(P, " ");
                }
            }
            function Ct(t3, e3, n3) {
              var r3 = t3 && t3.style;
              if (r3) {
                if (void 0 === n3)
                  return H.defaultView && H.defaultView.getComputedStyle ? n3 = H.defaultView.getComputedStyle(t3, "") : t3.currentStyle && (n3 = t3.currentStyle), void 0 === e3 ? n3 : n3[e3];
                e3 in r3 || -1 !== e3.indexOf("webkit") || (e3 = "-webkit-" + e3), r3[e3] = n3 + ("string" == typeof n3 ? "" : "px");
              }
            }
            function St(t3) {
              var e3 = "";
              do {
                var n3 = Ct(t3, "transform");
                n3 && "none" !== n3 && (e3 = n3 + " " + e3);
              } while (t3 = t3.parentNode);
              return window.DOMMatrix ? new DOMMatrix(e3) : window.WebKitCSSMatrix ? new WebKitCSSMatrix(e3) : window.CSSMatrix ? new CSSMatrix(e3) : void 0;
            }
            function Ot(t3, e3, n3) {
              if (t3) {
                var r3 = t3.getElementsByTagName(e3), i3 = 0, a2 = r3.length;
                if (n3)
                  for (; i3 < a2; i3++)
                    n3(r3[i3], i3);
                return r3;
              }
              return [];
            }
            function kt(t3, e3, n3, i3, a2, o2, s2, c2, u2, l2, f2) {
              var d2, p2 = (t3 = t3 || e3[z]).options, h2 = "on" + n3.charAt(0).toUpperCase() + n3.substr(1);
              !window.CustomEvent || W || U ? (d2 = H.createEvent("Event")).initEvent(n3, true, true) : d2 = new CustomEvent(n3, { bubbles: true, cancelable: true }), d2.to = a2 || e3, d2.from = o2 || e3, d2.item = i3 || e3, d2.clone = r2, d2.oldIndex = s2, d2.newIndex = c2, d2.oldDraggableIndex = u2, d2.newDraggableIndex = l2, d2.originalEvent = f2, d2.pullMode = v ? v.lastPutMode : void 0, e3 && e3.dispatchEvent(d2), p2[h2] && p2[h2].call(t3, d2);
            }
            function Mt(t3, e3, n3, r3, i3, a2, o2, s2) {
              var c2, u2, l2 = t3[z], f2 = l2.options.onMove;
              return !window.CustomEvent || W || U ? (c2 = H.createEvent("Event")).initEvent("move", true, true) : c2 = new CustomEvent("move", { bubbles: true, cancelable: true }), c2.to = e3, c2.from = t3, c2.dragged = n3, c2.draggedRect = r3, c2.related = i3 || e3, c2.relatedRect = a2 || Yt(e3), c2.willInsertAfter = s2, c2.originalEvent = o2, t3.dispatchEvent(c2), f2 && (u2 = f2.call(l2, c2, o2)), u2;
            }
            function Dt(t3) {
              t3.draggable = false;
            }
            function jt() {
              Z = false;
            }
            function Lt(e3, r3, i3) {
              for (var a2 = 0, o2 = 0, s2 = e3.children; o2 < s2.length; ) {
                if ("none" !== s2[o2].style.display && s2[o2] !== n2 && s2[o2] !== t2 && yt(s2[o2], i3.draggable, e3, false)) {
                  if (a2 === r3)
                    return s2[o2];
                  a2++;
                }
                o2++;
              }
              return null;
            }
            function Et(t3) {
              for (var e3 = t3.lastElementChild; e3 && (e3 === n2 || "none" === Ct(e3, "display")); )
                e3 = e3.previousElementSibling;
              return e3 || null;
            }
            function At(e3) {
              return $t(t2) < $t(e3) ? 1 : -1;
            }
            function Tt(t3) {
              for (var e3 = t3.tagName + t3.className + t3.src + t3.href + t3.textContent, n3 = e3.length, r3 = 0; n3--; )
                r3 += e3.charCodeAt(n3);
              return r3.toString(36);
            }
            function $t(t3, e3) {
              var n3 = 0;
              if (!t3 || !t3.parentNode)
                return -1;
              for (; t3 && (t3 = t3.previousElementSibling); )
                "TEMPLATE" === t3.nodeName.toUpperCase() || t3 === r2 || e3 && !It(t3, e3) || n3++;
              return n3;
            }
            function It(t3, e3) {
              if (e3) {
                if (">" === e3[0] && (e3 = e3.substring(1)), t3)
                  try {
                    if (t3.matches)
                      return t3.matches(e3);
                    if (t3.msMatchesSelector)
                      return t3.msMatchesSelector(e3);
                    if (t3.webkitMatchesSelector)
                      return t3.webkitMatchesSelector(e3);
                  } catch (t4) {
                    return false;
                  }
                return false;
              }
            }
            function Pt(t3, e3) {
              return function() {
                if (!vt) {
                  var n3 = arguments, r3 = this;
                  vt = Y(function() {
                    1 === n3.length ? t3.call(r3, n3[0]) : t3.apply(r3, n3), vt = void 0;
                  }, e3);
                }
              };
            }
            function zt(t3, e3) {
              if (t3 && e3)
                for (var n3 in e3)
                  e3.hasOwnProperty(n3) && (t3[n3] = e3[n3]);
              return t3;
            }
            function Nt(t3) {
              return R && R.dom ? R.dom(t3).cloneNode(true) : F ? F(t3).clone(true)[0] : t3.cloneNode(true);
            }
            function Ht(t3) {
              return Y(t3, 0);
            }
            function Vt(t3) {
              return clearTimeout(t3);
            }
            function Yt(t3, e3, n3, r3) {
              if (t3.getBoundingClientRect || t3 === N) {
                var i3, a2, o2, s2, c2, u2, l2;
                if (t3 !== N && t3 !== st() ? (a2 = (i3 = t3.getBoundingClientRect()).top, o2 = i3.left, s2 = i3.bottom, c2 = i3.right, u2 = i3.height, l2 = i3.width) : (a2 = 0, o2 = 0, s2 = window.innerHeight, c2 = window.innerWidth, u2 = window.innerHeight, l2 = window.innerWidth), r3 && t3 !== N && (n3 = n3 || t3.parentNode, !W))
                  do {
                    if (n3 && n3.getBoundingClientRect && "none" !== Ct(n3, "transform")) {
                      var f2 = n3.getBoundingClientRect();
                      a2 -= f2.top + V(Ct(n3, "border-top-width")), o2 -= f2.left + V(Ct(n3, "border-left-width")), s2 = a2 + i3.height, c2 = o2 + i3.width;
                      break;
                    }
                  } while (n3 = n3.parentNode);
                if (e3 && t3 !== N) {
                  var d2 = St(n3 || t3), p2 = d2 && d2.a, h2 = d2 && d2.d;
                  d2 && (s2 = (a2 /= h2) + (u2 /= h2), c2 = (o2 /= p2) + (l2 /= p2));
                }
                return { top: a2, left: o2, bottom: s2, right: c2, width: l2, height: u2 };
              }
            }
            function Ft(t3, e3) {
              for (var n3 = ot(t3, true), r3 = Yt(t3)[e3]; n3; ) {
                var i3 = Yt(n3)[e3];
                if (!("top" === e3 || "left" === e3 ? r3 >= i3 : r3 <= i3))
                  return n3;
                if (n3 === st())
                  break;
                n3 = ot(n3, false);
              }
              return false;
            }
            function Rt(t3) {
              var e3 = 0, n3 = 0, r3 = st();
              if (t3)
                do {
                  var i3 = St(t3), a2 = i3.a, o2 = i3.d;
                  e3 += t3.scrollLeft * a2, n3 += t3.scrollTop * o2;
                } while (t3 !== r3 && (t3 = t3.parentNode));
              return [e3, n3];
            }
            return gt.prototype = { constructor: gt, _computeIsAligned: function(e3) {
              var r3;
              if (n2 && !Q ? (pt(), r3 = H.elementFromPoint(e3.clientX, e3.clientY), ht()) : r3 = e3.target, r3 = yt(r3, this.options.draggable, this.el, false), !tt && t2 && t2.parentNode === this.el) {
                for (var i3, a2, o2, s2, c2, u2, l2, f2, d2 = this.el.children, p2 = 0; p2 < d2.length; p2++)
                  yt(d2[p2], this.options.draggable, this.el, false) && d2[p2] !== r3 && (d2[p2].sortableMouseAligned = (i3 = e3.clientX, a2 = e3.clientY, o2 = d2[p2], s2 = this._getDirection(e3, null), this.options, c2 = void 0, u2 = void 0, l2 = void 0, f2 = void 0, c2 = Yt(o2), u2 = "vertical" === s2 ? c2.left : c2.top, l2 = "vertical" === s2 ? c2.right : c2.bottom, u2 < (f2 = "vertical" === s2 ? i3 : a2) && f2 < l2));
                yt(r3, this.options.draggable, this.el, true) || (w = null), tt = true, Y(function() {
                  tt = false;
                }, 30);
              }
            }, _getDirection: function(e3, n3) {
              return "function" == typeof this.options.direction ? this.options.direction.call(this, e3, n3, t2) : this.options.direction;
            }, _onTapStart: function(e3) {
              if (e3.cancelable) {
                var n3, r3, i3 = this, a2 = this.el, s2 = this.options, c2 = s2.preventOnFilter, u2 = e3.type, l2 = e3.touches && e3.touches[0], f2 = (l2 || e3).target, d2 = e3.target.shadowRoot && (e3.path && e3.path[0] || e3.composedPath && e3.composedPath()[0]) || f2, p2 = s2.filter;
                if (function(t3) {
                  it.length = 0;
                  var e4 = t3.getElementsByTagName("input"), n4 = e4.length;
                  for (; n4--; ) {
                    var r4 = e4[n4];
                    r4.checked && it.push(r4);
                  }
                }(a2), !t2 && !(/mousedown|pointerdown/.test(u2) && 0 !== e3.button || s2.disabled || d2.isContentEditable || (f2 = yt(f2, s2.draggable, a2, false), o === f2))) {
                  if (n3 = $t(f2), r3 = $t(f2, s2.draggable), "function" == typeof p2) {
                    if (p2.call(this, e3, f2, this))
                      return kt(i3, d2, "filter", f2, a2, a2, n3, void 0, r3), void (c2 && e3.cancelable && e3.preventDefault());
                  } else if (p2 && (p2 = p2.split(",").some(function(t3) {
                    if (t3 = yt(d2, t3.trim(), a2, false))
                      return kt(i3, t3, "filter", f2, a2, a2, n3, void 0, r3), true;
                  })))
                    return void (c2 && e3.cancelable && e3.preventDefault());
                  s2.handle && !yt(d2, s2.handle, a2, false) || this._prepareDragStart(e3, l2, f2, n3, r3);
                }
              }
            }, _handleAutoScroll: function(e3, n3) {
              if (t2 && this.options.scroll) {
                var r3 = e3.clientX, i3 = e3.clientY, a2 = H.elementFromPoint(r3, i3), o2 = this;
                if (n3 || U || W || K) {
                  ut(e3, o2.options, a2, n3);
                  var s2 = ot(a2, true);
                  !j || m && r3 === g && i3 === y || (m && clearInterval(m), m = setInterval(function() {
                    if (t2) {
                      var a3 = ot(H.elementFromPoint(r3, i3), true);
                      a3 !== s2 && (s2 = a3, lt(), ut(e3, o2.options, s2, n3));
                    }
                  }, 10), g = r3, y = i3);
                } else {
                  if (!o2.options.bubbleScroll || ot(a2, true) === st())
                    return void lt();
                  ut(e3, o2.options, ot(a2, false), false);
                }
              }
            }, _prepareDragStart: function(n3, r3, s2, c2, u2) {
              var f2, p2 = this, v2 = p2.el, m2 = p2.options, g2 = v2.ownerDocument;
              s2 && !t2 && s2.parentNode === v2 && (i2 = v2, e2 = (t2 = s2).parentNode, a = t2.nextSibling, o = s2, h = m2.group, l = c2, d = u2, b = { target: t2, clientX: (r3 || n3).clientX, clientY: (r3 || n3).clientY }, this._lastX = (r3 || n3).clientX, this._lastY = (r3 || n3).clientY, t2.style["will-change"] = "all", t2.style.transition = "", t2.style.transform = "", f2 = function() {
                p2._disableDelayedDragEvents(), !q && p2.nativeDraggable && (t2.draggable = true), p2._triggerDragStart(n3, r3), kt(p2, i2, "choose", t2, i2, i2, l, void 0, d), wt(t2, m2.chosenClass, true);
              }, m2.ignore.split(",").forEach(function(e3) {
                Ot(t2, e3.trim(), Dt);
              }), _t(g2, "dragover", mt), _t(g2, "mousemove", mt), _t(g2, "touchmove", mt), _t(g2, "mouseup", p2._onDrop), _t(g2, "touchend", p2._onDrop), _t(g2, "touchcancel", p2._onDrop), q && this.nativeDraggable && (this.options.touchStartThreshold = 4, t2.draggable = true), !m2.delay || m2.delayOnTouchOnly && !r3 || this.nativeDraggable && (U || W) ? f2() : (_t(g2, "mouseup", p2._disableDelayedDrag), _t(g2, "touchend", p2._disableDelayedDrag), _t(g2, "touchcancel", p2._disableDelayedDrag), _t(g2, "mousemove", p2._delayedDragTouchMoveHandler), _t(g2, "touchmove", p2._delayedDragTouchMoveHandler), m2.supportPointer && _t(g2, "pointermove", p2._delayedDragTouchMoveHandler), p2._dragStartTimer = Y(f2, m2.delay)));
            }, _delayedDragTouchMoveHandler: function(t3) {
              var e3 = t3.touches ? t3.touches[0] : t3;
              rt(et(e3.clientX - this._lastX), et(e3.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1)) && this._disableDelayedDrag();
            }, _disableDelayedDrag: function() {
              t2 && Dt(t2), clearTimeout(this._dragStartTimer), this._disableDelayedDragEvents();
            }, _disableDelayedDragEvents: function() {
              var t3 = this.el.ownerDocument;
              xt(t3, "mouseup", this._disableDelayedDrag), xt(t3, "touchend", this._disableDelayedDrag), xt(t3, "touchcancel", this._disableDelayedDrag), xt(t3, "mousemove", this._delayedDragTouchMoveHandler), xt(t3, "touchmove", this._delayedDragTouchMoveHandler), xt(t3, "pointermove", this._delayedDragTouchMoveHandler);
            }, _triggerDragStart: function(e3, n3) {
              n3 = n3 || ("touch" == e3.pointerType ? e3 : null), !this.nativeDraggable || n3 ? this.options.supportPointer ? _t(H, "pointermove", this._onTouchMove) : _t(H, n3 ? "touchmove" : "mousemove", this._onTouchMove) : (_t(t2, "dragend", this), _t(i2, "dragstart", this._onDragStart));
              try {
                H.selection ? Ht(function() {
                  H.selection.empty();
                }) : window.getSelection().removeAllRanges();
              } catch (t3) {
              }
            }, _dragStarted: function(e3, n3) {
              if (L2 = false, i2 && t2) {
                this.nativeDraggable && (_t(H, "dragover", this._handleAutoScroll), _t(H, "dragover", dt));
                var r3 = this.options;
                !e3 && wt(t2, r3.dragClass, false), wt(t2, r3.ghostClass, true), Ct(t2, "transform", ""), gt.active = this, e3 && this._appendGhost(), kt(this, i2, "start", t2, i2, i2, l, void 0, d, void 0, n3);
              } else
                this._nulling();
            }, _emulateDragOver: function(e3) {
              if (_2) {
                if (this._lastX === _2.clientX && this._lastY === _2.clientY && !e3)
                  return;
                this._lastX = _2.clientX, this._lastY = _2.clientY, pt();
                for (var n3 = H.elementFromPoint(_2.clientX, _2.clientY), r3 = n3; n3 && n3.shadowRoot && (n3 = n3.shadowRoot.elementFromPoint(_2.clientX, _2.clientY)) !== r3; )
                  r3 = n3;
                if (r3)
                  do {
                    if (r3[z]) {
                      if (r3[z]._onDragOver({ clientX: _2.clientX, clientY: _2.clientY, target: n3, rootEl: r3 }) && !this.options.dragoverBubble)
                        break;
                    }
                    n3 = r3;
                  } while (r3 = r3.parentNode);
                t2.parentNode[z]._computeIsAligned(_2), ht();
              }
            }, _onTouchMove: function(t3, e3) {
              if (b) {
                var r3 = this.options, i3 = r3.fallbackTolerance, a2 = r3.fallbackOffset, o2 = t3.touches ? t3.touches[0] : t3, s2 = n2 && St(n2), c2 = n2 && s2 && s2.a, u2 = n2 && s2 && s2.d, l2 = X && k && Rt(k), f2 = (o2.clientX - b.clientX + a2.x) / (c2 || 1) + (l2 ? l2[0] - I[0] : 0) / (c2 || 1), d2 = (o2.clientY - b.clientY + a2.y) / (u2 || 1) + (l2 ? l2[1] - I[1] : 0) / (u2 || 1), p2 = t3.touches ? "translate3d(" + f2 + "px," + d2 + "px,0)" : "translate(" + f2 + "px," + d2 + "px)";
                if (!gt.active && !L2) {
                  if (i3 && nt(et(o2.clientX - this._lastX), et(o2.clientY - this._lastY)) < i3)
                    return;
                  this._onDragStart(t3, true);
                }
                !e3 && this._handleAutoScroll(o2, true), x = true, _2 = o2, Ct(n2, "webkitTransform", p2), Ct(n2, "mozTransform", p2), Ct(n2, "msTransform", p2), Ct(n2, "transform", p2), t3.cancelable && t3.preventDefault();
              }
            }, _appendGhost: function() {
              if (!n2) {
                var e3 = this.options.fallbackOnBody ? H.body : i2, r3 = Yt(t2, true, e3, !X), a2 = (Ct(t2), this.options);
                if (X) {
                  for (k = e3; "static" === Ct(k, "position") && "none" === Ct(k, "transform") && k !== H; )
                    k = k.parentNode;
                  if (k !== H) {
                    var o2 = Yt(k, true);
                    r3.top -= o2.top, r3.left -= o2.left;
                  }
                  k !== H.body && k !== H.documentElement ? (k === H && (k = st()), r3.top += k.scrollTop, r3.left += k.scrollLeft) : k = st(), I = Rt(k);
                }
                wt(n2 = t2.cloneNode(true), a2.ghostClass, false), wt(n2, a2.fallbackClass, true), wt(n2, a2.dragClass, true), Ct(n2, "box-sizing", "border-box"), Ct(n2, "margin", 0), Ct(n2, "top", r3.top), Ct(n2, "left", r3.left), Ct(n2, "width", r3.width), Ct(n2, "height", r3.height), Ct(n2, "opacity", "0.8"), Ct(n2, "position", X ? "absolute" : "fixed"), Ct(n2, "zIndex", "100000"), Ct(n2, "pointerEvents", "none"), e3.appendChild(n2);
              }
            }, _onDragStart: function(e3, n3) {
              var a2 = this, o2 = e3.dataTransfer, s2 = a2.options;
              (r2 = Nt(t2)).draggable = false, r2.style["will-change"] = "", this._hideClone(), wt(r2, a2.options.chosenClass, false), a2._cloneId = Ht(function() {
                a2.options.removeCloneOnHide || i2.insertBefore(r2, t2), kt(a2, i2, "clone", t2);
              }), !n3 && wt(t2, s2.dragClass, true), n3 ? (E = true, a2._loopId = setInterval(a2._emulateDragOver, 50)) : (xt(H, "mouseup", a2._onDrop), xt(H, "touchend", a2._onDrop), xt(H, "touchcancel", a2._onDrop), o2 && (o2.effectAllowed = "move", s2.setData && s2.setData.call(a2, o2, t2)), _t(H, "drop", a2), Ct(t2, "transform", "translateZ(0)")), L2 = true, a2._dragStartId = Ht(a2._dragStarted.bind(a2, n3, e3)), _t(H, "selectstart", a2), K && Ct(H.body, "user-select", "none");
            }, _onDragOver: function(n3) {
              var r3, o2, s2, c2 = this.el, u2 = n3.target, f2 = this.options, p2 = f2.group, m2 = gt.active, g2 = h === p2, y2 = f2.sort, b2 = this;
              if (!Z) {
                if (void 0 !== n3.preventDefault && n3.cancelable && n3.preventDefault(), x = true, u2 = yt(u2, f2.draggable, c2, true), t2.contains(n3.target) || u2.animated)
                  return B2(false);
                if (u2 !== t2 && (E = false), m2 && !f2.disabled && (g2 ? y2 || (s2 = !i2.contains(t2)) : v === this || (this.lastPutMode = h.checkPull(this, m2, t2, n3)) && p2.checkPut(this, m2, t2, n3))) {
                  var _3 = this._getDirection(n3, u2);
                  if (r3 = Yt(t2), s2)
                    return this._hideClone(), e2 = i2, a ? i2.insertBefore(t2, a) : i2.appendChild(t2), B2(true);
                  var k2 = Et(c2);
                  if (!k2 || function(t3, e3, n4) {
                    var r4 = Yt(Et(n4)), i3 = "vertical" === e3 ? t3.clientY : t3.clientX, a2 = "vertical" === e3 ? t3.clientX : t3.clientY, o3 = "vertical" === e3 ? r4.bottom : r4.right, s3 = "vertical" === e3 ? r4.left : r4.top, c3 = "vertical" === e3 ? r4.right : r4.bottom;
                    return "vertical" === e3 ? a2 > c3 + 10 || a2 <= c3 && i3 > o3 && a2 >= s3 : i3 > o3 && a2 > s3 || i3 <= o3 && a2 > c3 + 10;
                  }(n3, _3, c2) && !k2.animated) {
                    if (k2 && c2 === n3.target && (u2 = k2), u2 && (o2 = Yt(u2)), g2 ? m2._hideClone() : m2._showClone(this), false !== Mt(i2, c2, t2, r3, u2, o2, n3, !!u2))
                      return c2.appendChild(t2), e2 = c2, M = null, W2(), B2(true);
                  } else if (u2 && u2 !== t2 && u2.parentNode === c2) {
                    var D2, j2 = 0, L3 = u2.sortableMouseAligned, A2 = t2.parentNode !== c2, I2 = "vertical" === _3 ? "top" : "left", P2 = Ft(u2, "top") || Ft(t2, "top"), N2 = P2 ? P2.scrollTop : void 0;
                    if (w !== u2 && (S = null, D2 = Yt(u2)[I2], T = false), function(e3, n4, r4) {
                      var i3 = e3 === t2 && M || Yt(e3), a2 = n4 === t2 && M || Yt(n4), o3 = "vertical" === r4 ? i3.left : i3.top, s3 = "vertical" === r4 ? i3.right : i3.bottom, c3 = "vertical" === r4 ? i3.width : i3.height, u3 = "vertical" === r4 ? a2.left : a2.top, l2 = "vertical" === r4 ? a2.right : a2.bottom, f3 = "vertical" === r4 ? a2.width : a2.height;
                      return o3 === u3 || s3 === l2 || o3 + c3 / 2 === u3 + f3 / 2;
                    }(t2, u2, _3) && L3 || A2 || P2 || f2.invertSwap || "insert" === S || "swap" === S ? ("swap" !== S && ($2 = f2.invertSwap || A2), j2 = function(e3, n4, r4, i3, a2, o3, s3) {
                      var c3 = Yt(n4), u3 = "vertical" === r4 ? e3.clientY : e3.clientX, l2 = "vertical" === r4 ? c3.height : c3.width, f3 = "vertical" === r4 ? c3.top : c3.left, d2 = "vertical" === r4 ? c3.bottom : c3.right, p3 = Yt(t2), h2 = false;
                      if (!o3) {
                        if (s3 && O < l2 * i3)
                          if (!T && (1 === C ? u3 > f3 + l2 * a2 / 2 : u3 < d2 - l2 * a2 / 2) && (T = true), T)
                            h2 = true;
                          else {
                            "vertical" === r4 ? p3.top : p3.left, "vertical" === r4 ? p3.bottom : p3.right;
                            if (1 === C ? u3 < f3 + O : u3 > d2 - O)
                              return -1 * C;
                          }
                        else if (u3 > f3 + l2 * (1 - i3) / 2 && u3 < d2 - l2 * (1 - i3) / 2)
                          return At(n4);
                      }
                      if ((h2 = h2 || o3) && (u3 < f3 + l2 * a2 / 2 || u3 > d2 - l2 * a2 / 2))
                        return u3 > f3 + l2 / 2 ? 1 : -1;
                      return 0;
                    }(n3, u2, _3, f2.swapThreshold, null == f2.invertedSwapThreshold ? f2.swapThreshold : f2.invertedSwapThreshold, $2, w === u2), S = "swap") : (j2 = At(u2), S = "insert"), 0 === j2)
                      return B2(false);
                    M = null, w = u2, C = j2, o2 = Yt(u2);
                    var V2 = u2.nextElementSibling, F2 = false, R2 = Mt(i2, c2, t2, r3, u2, o2, n3, F2 = 1 === j2);
                    if (false !== R2)
                      return 1 !== R2 && -1 !== R2 || (F2 = 1 === R2), Z = true, Y(jt, 30), g2 ? m2._hideClone() : m2._showClone(this), F2 && !V2 ? c2.appendChild(t2) : u2.parentNode.insertBefore(t2, F2 ? V2 : u2), P2 && ct(P2, 0, N2 - P2.scrollTop), e2 = t2.parentNode, void 0 === D2 || $2 || (O = et(D2 - Yt(u2)[I2])), W2(), B2(true);
                  }
                  if (c2.contains(t2))
                    return B2(false);
                }
                return false;
              }
              function B2(e3) {
                return e3 && (g2 ? m2._hideClone() : m2._showClone(b2), m2 && (wt(t2, v ? v.options.ghostClass : m2.options.ghostClass, false), wt(t2, f2.ghostClass, true)), v !== b2 && b2 !== gt.active ? v = b2 : b2 === gt.active && (v = null), r3 && b2._animate(r3, t2), u2 && o2 && b2._animate(o2, u2)), (u2 === t2 && !t2.animated || u2 === c2 && !u2.animated) && (w = null), f2.dragoverBubble || n3.rootEl || u2 === H || (b2._handleAutoScroll(n3), t2.parentNode[z]._computeIsAligned(n3), !e3 && mt(n3)), !f2.dragoverBubble && n3.stopPropagation && n3.stopPropagation(), true;
              }
              function W2() {
                kt(b2, i2, "change", u2, c2, i2, l, $t(t2), d, $t(t2, f2.draggable), n3);
              }
            }, _animate: function(e3, n3) {
              var r3 = this.options.animation;
              if (r3) {
                var i3 = Yt(n3);
                if (n3 === t2 && (M = i3), 1 === e3.nodeType && (e3 = Yt(e3)), e3.left + e3.width / 2 !== i3.left + i3.width / 2 || e3.top + e3.height / 2 !== i3.top + i3.height / 2) {
                  var a2 = St(this.el), o2 = a2 && a2.a, s2 = a2 && a2.d;
                  Ct(n3, "transition", "none"), Ct(n3, "transform", "translate3d(" + (e3.left - i3.left) / (o2 || 1) + "px," + (e3.top - i3.top) / (s2 || 1) + "px,0)"), this._repaint(n3), Ct(n3, "transition", "transform " + r3 + "ms" + (this.options.easing ? " " + this.options.easing : "")), Ct(n3, "transform", "translate3d(0,0,0)");
                }
                "number" == typeof n3.animated && clearTimeout(n3.animated), n3.animated = Y(function() {
                  Ct(n3, "transition", ""), Ct(n3, "transform", ""), n3.animated = false;
                }, r3);
              }
            }, _repaint: function(t3) {
              return t3.offsetWidth;
            }, _offMoveEvents: function() {
              xt(H, "touchmove", this._onTouchMove), xt(H, "pointermove", this._onTouchMove), xt(H, "dragover", mt), xt(H, "mousemove", mt), xt(H, "touchmove", mt);
            }, _offUpEvents: function() {
              var t3 = this.el.ownerDocument;
              xt(t3, "mouseup", this._onDrop), xt(t3, "touchend", this._onDrop), xt(t3, "pointerup", this._onDrop), xt(t3, "touchcancel", this._onDrop), xt(H, "selectstart", this);
            }, _onDrop: function(o2) {
              var s2 = this.el, c2 = this.options;
              L2 = false, j = false, $2 = false, T = false, clearInterval(this._loopId), clearInterval(m), lt(), clearTimeout(vt), vt = void 0, clearTimeout(this._dragStartTimer), Vt(this._cloneId), Vt(this._dragStartId), xt(H, "mousemove", this._onTouchMove), this.nativeDraggable && (xt(H, "drop", this), xt(s2, "dragstart", this._onDragStart), xt(H, "dragover", this._handleAutoScroll), xt(H, "dragover", dt)), K && Ct(H.body, "user-select", ""), this._offMoveEvents(), this._offUpEvents(), o2 && (x && (o2.cancelable && o2.preventDefault(), !c2.dropBubble && o2.stopPropagation()), n2 && n2.parentNode && n2.parentNode.removeChild(n2), (i2 === e2 || v && "clone" !== v.lastPutMode) && r2 && r2.parentNode && r2.parentNode.removeChild(r2), t2 && (this.nativeDraggable && xt(t2, "dragend", this), Dt(t2), t2.style["will-change"] = "", wt(t2, v ? v.options.ghostClass : this.options.ghostClass, false), wt(t2, this.options.chosenClass, false), kt(this, i2, "unchoose", t2, e2, i2, l, null, d, null, o2), i2 !== e2 ? (f = $t(t2), p = $t(t2, c2.draggable), f >= 0 && (kt(null, e2, "add", t2, e2, i2, l, f, d, p, o2), kt(this, i2, "remove", t2, e2, i2, l, f, d, p, o2), kt(null, e2, "sort", t2, e2, i2, l, f, d, p, o2), kt(this, i2, "sort", t2, e2, i2, l, f, d, p, o2)), v && v.save()) : t2.nextSibling !== a && (f = $t(t2), p = $t(t2, c2.draggable), f >= 0 && (kt(this, i2, "update", t2, e2, i2, l, f, d, p, o2), kt(this, i2, "sort", t2, e2, i2, l, f, d, p, o2))), gt.active && (null != f && -1 !== f || (f = l, p = d), kt(this, i2, "end", t2, e2, i2, l, f, d, p, o2), this.save()))), this._nulling();
            }, _nulling: function() {
              i2 = t2 = e2 = n2 = a = r2 = o = s = c = D.length = m = g = y = b = _2 = x = f = l = w = C = M = v = h = gt.active = null, it.forEach(function(t3) {
                t3.checked = true;
              }), it.length = 0;
            }, handleEvent: function(e3) {
              switch (e3.type) {
                case "drop":
                case "dragend":
                  this._onDrop(e3);
                  break;
                case "dragenter":
                case "dragover":
                  t2 && (this._onDragOver(e3), function(t3) {
                    t3.dataTransfer && (t3.dataTransfer.dropEffect = "move");
                    t3.cancelable && t3.preventDefault();
                  }(e3));
                  break;
                case "selectstart":
                  e3.preventDefault();
              }
            }, toArray: function() {
              for (var t3, e3 = [], n3 = this.el.children, r3 = 0, i3 = n3.length, a2 = this.options; r3 < i3; r3++)
                yt(t3 = n3[r3], a2.draggable, this.el, false) && e3.push(t3.getAttribute(a2.dataIdAttr) || Tt(t3));
              return e3;
            }, sort: function(t3) {
              var e3 = {}, n3 = this.el;
              this.toArray().forEach(function(t4, r3) {
                var i3 = n3.children[r3];
                yt(i3, this.options.draggable, n3, false) && (e3[t4] = i3);
              }, this), t3.forEach(function(t4) {
                e3[t4] && (n3.removeChild(e3[t4]), n3.appendChild(e3[t4]));
              });
            }, save: function() {
              var t3 = this.options.store;
              t3 && t3.set && t3.set(this);
            }, closest: function(t3, e3) {
              return yt(t3, e3 || this.options.draggable, this.el, false);
            }, option: function(t3, e3) {
              var n3 = this.options;
              if (void 0 === e3)
                return n3[t3];
              n3[t3] = e3, "group" === t3 && ft(n3);
            }, destroy: function() {
              var t3 = this.el;
              t3[z] = null, xt(t3, "mousedown", this._onTapStart), xt(t3, "touchstart", this._onTapStart), xt(t3, "pointerdown", this._onTapStart), this.nativeDraggable && (xt(t3, "dragover", this), xt(t3, "dragenter", this)), Array.prototype.forEach.call(t3.querySelectorAll("[draggable]"), function(t4) {
                t4.removeAttribute("draggable");
              }), this._onDrop(), A.splice(A.indexOf(this.el), 1), this.el = t3 = null;
            }, _hideClone: function() {
              r2.cloneHidden || (Ct(r2, "display", "none"), r2.cloneHidden = true, r2.parentNode && this.options.removeCloneOnHide && r2.parentNode.removeChild(r2));
            }, _showClone: function(e3) {
              "clone" === e3.lastPutMode ? r2.cloneHidden && (i2.contains(t2) && !this.options.group.revertClone ? i2.insertBefore(r2, t2) : a ? i2.insertBefore(r2, a) : i2.appendChild(r2), this.options.group.revertClone && this._animate(t2, r2), Ct(r2, "display", ""), r2.cloneHidden = false) : this._hideClone();
            } }, _t(H, "touchmove", function(t3) {
              (gt.active || L2) && t3.cancelable && t3.preventDefault();
            }), gt.utils = { on: _t, off: xt, css: Ct, find: Ot, is: function(t3, e3) {
              return !!yt(t3, e3, t3, false);
            }, extend: zt, throttle: Pt, closest: yt, toggleClass: wt, clone: Nt, index: $t, nextTick: Ht, cancelNextTick: Vt, detectDirection: at, getChild: Lt }, gt.create = function(t3, e3) {
              return new gt(t3, e3);
            }, gt.version = "1.9.0", gt;
          });
        }, UAe1: function(t, e, n) {
        }, VO2P: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LibraryFooter", status: "ready", release: "1.0.0", type: "Pattern", props: { type: { type: String, default: "div" }, maxWidth: { type: Number, default: 1170 } } }, i = (n("o1cF"), n("KHd+")), a = n("BA3N"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.type, { tag: "component", class: ["lux-library-footer"] }, [n2("wrapper", { staticClass: "lux-footer-content", attrs: { maxWidth: t2.maxWidth } }, [n2("div", { staticClass: "lux-library-links" }, [n2("nav", { attrs: { role: "navigation", "aria-label": "Research Tools" } }, [n2("h2", [n2("a", { attrs: { href: "https://library.princeton.edu/research" } }, [t2._v("Research Tools")])]), t2._v(" "), n2("ul", [n2("li", [n2("a", { attrs: { href: "https://dss.princeton.edu" } }, [t2._v("Data and Statistics")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/research/databases" } }, [t2._v("Databases")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://getit.princeton.edu/" } }, [t2._v("E-journals")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/library-guides" } }, [t2._v("Research Guides")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://catalog.princeton.edu/" } }, [t2._v("Catalog")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/databases/subject/special-collections" } }, [t2._v("Special Collections")])])])])]), t2._v(" "), n2("div", { staticClass: "lux-library-links" }, [n2("nav", { attrs: { role: "navigation", "aria-label": "Library Services" } }, [n2("h2", [n2("a", { attrs: { href: "https://library.princeton.edu/services" } }, [t2._v("Library Services")])]), t2._v(" "), n2("ul", [n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/article-express", title: "Use our Interlibrary Loan and Article Express Services" } }, [t2._v("Article Express")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/borrowdirect" } }, [t2._v("Borrow Direct")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/access/circulation-policies" } }, [t2._v("Circulation")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/reserves" } }, [t2._v("Course Reserves")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/interlibrary-services", title: "Interlibrary Loan Services, Article Express" } }, [t2._v("Interlibrary Loan (ILL)")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/access" } }, [t2._v("Library Access")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/study-spaces" } }, [t2._v("Study Spaces and Lockers")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/help/trace-materials" } }, [t2._v("Trace a Book")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/accounts" } }, [t2._v("Your Accounts")])])])])]), t2._v(" "), n2("div", { staticClass: "lux-library-links" }, [n2("nav", { attrs: { role: "navigation", "aria-label": "About the Library" } }, [n2("h2", [n2("a", { attrs: { href: "https://library.princeton.edu/about" } }, [t2._v("About the Library")])]), t2._v(" "), n2("ul", [n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/collections-and-collection-development" } }, [t2._v("Collections and Collecting")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://rbsc.princeton.edu/exhibitions" } }, [t2._v("Exhibitions")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/about/locations" } }, [t2._v("Library Locations")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/alumni" } }, [t2._v("For Alumni")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/staff" } }, [t2._v("For Library Staff")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/staff/directory" } }, [t2._v("Staff Directory")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/about/friends" } }, [t2._v("Friends of the Library")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/technology/off-campus-access" } }, [t2._v("Using the Library Off-Campus")])])])])]), t2._v(" "), n2("div", { staticClass: "lux-library-links" }, [n2("library-contact-info"), t2._v(" "), n2("logo-university", { attrs: { width: "142", height: "40" } }), t2._v(" "), n2("university-copyright", { attrs: { type: "div" } }), t2._v(" "), n2("university-accessibility", { attrs: { type: "span" } })], 1)])], 1);
          }, [], false, null, "0cdd9be4", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, Vw4T: function(t, e) {
        }, "W+NU": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconGlobe", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("MerV"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M12,24c-3.1,0-6.1-1.2-8.5-3.5c-4.7-4.7-4.7-12.3,0-17c4.7-4.7,12.3-4.7,17,0s4.7,12.3,0,17C18.1,22.8,15.1,24,12,24z\n      M12,1C9.2,1,6.4,2.1,4.2,4.2c-4.3,4.3-4.3,11.3,0,15.6c4.3,4.3,11.3,4.3,15.6,0c4.3-4.3,4.3-11.3,0-15.6C17.6,2.1,14.8,1,12,1z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M11,20.5c-1,0-2-2.5-2-3c0-0.4,0.2-0.7,0.3-1c0.1-0.2,0.2-0.4,0.2-0.5c0-0.2-0.4-0.7-0.9-1.1c-0.1-0.1-0.1-0.2-0.1-0.4\n      c0-0.4-0.1-0.7-0.2-0.9c-0.3-0.2-0.8-0.2-1.5-0.2c-0.3,0-0.5,0-0.8,0c-1.6,0-2-1.6-2-2.5c0-0.2,0-3.9,2.9-4.5\n      c1.3-0.3,2.2-0.2,2.7,0.2C9.8,6.9,9.9,7.1,10,7.2c0.5,0.4,1.5,0.2,2.3,0c0.3-0.1,0.5-0.1,0.8-0.2c0.1-0.8,0.1-1.7,0-2\n      c-0.6,0.3-1.2,0.3-1.7,0c-0.5-0.3-0.8-0.8-0.9-1.5c-0.2-1.9,3.9-2.9,4.8-3c0.3-0.1,0.5,0.1,0.6,0.4c0.1,0.3-0.1,0.5-0.4,0.6\n      c-1.9,0.4-4,1.3-4,2c0,0.2,0.1,0.5,0.4,0.7c0.2,0.1,0.6,0.1,0.9-0.1c0.3-0.1,0.6-0.1,0.8,0c0.7,0.5,0.6,2.1,0.4,3.5\n      C14,7.8,13.7,8,13.5,8c-0.2,0-0.6,0.1-1,0.2C11.4,8.4,10,8.7,9.1,7.9C9.1,7.8,9,7.6,9,7.5c0,0-0.5-0.3-1.9,0C5,7.9,5,11,5,11\n      c0,0.1,0,1.5,1,1.5c0.2,0,0.5,0,0.7,0c0.8,0,1.7-0.1,2.2,0.4c0.3,0.3,0.5,0.8,0.5,1.4c0.4,0.4,1,1.1,1,1.7c0,0.4-0.2,0.7-0.3,1\n      c-0.1,0.2-0.2,0.4-0.2,0.5c0,0.4,0.7,1.8,1.1,2c1.6,0,2.4-0.7,2.4-2c0-0.2,0.1-0.4,0.3-0.5c0,0,0.7-0.2,1.3-0.9\n      c0.1-0.1,0.1-0.1,0.1-0.1c0,0-0.1-0.1-0.2-0.2c-0.2-0.2-0.5-0.5-0.5-0.9c0-0.4,0.3-0.6,0.8-1.2c0.7-0.8,1.5-1.6,1.4-2.2\n      c-0.5,0.1-1.1,0.2-1.6-0.3c-0.1-0.1-0.1-0.1-0.1-0.2c-0.2-0.7-0.5-1.4-0.6-1.6c-0.2,0-0.3-0.2-0.4-0.3c0-0.1-0.1-0.4,0.1-0.6\n      c0.4-0.4,2.1-1.4,3.8-1.1C19.6,6.5,20,4.2,20,4.2c0-0.3,0.3-0.5,0.6-0.4c0.3,0,0.5,0.3,0.4,0.6c0,0.1-0.6,3-2.8,4.1\n      c-0.1,0.1-0.2,0.1-0.3,0c-1.1-0.3-2.1,0.1-2.7,0.4c0.2,0.3,0.5,0.8,0.7,1.8c0.2,0.1,0.6,0,0.8-0.1c0.2-0.1,0.4-0.1,0.6,0.1\n      c1.2,1.2-0.4,2.8-1.3,3.8c-0.2,0.2-0.4,0.4-0.5,0.5c0,0,0.1,0.1,0.1,0.1c0.2,0.2,0.5,0.5,0.6,0.9c0,0.3-0.1,0.6-0.4,0.8\n      c-0.5,0.5-1,0.8-1.4,1C14.3,19.5,13.1,20.5,11,20.5z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, WHI8: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconUserHome", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("n1u2"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M20.5,23h-17C3.2,23,3,22.8,3,22.5v-11C3,11.2,3.2,11,3.5,11S4,11.2,4,11.5V22h16V11c0-0.3,0.2-0.5,0.5-0.5\n      S21,10.7,21,11v11.5C21,22.8,20.8,23,20.5,23z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M23.5,11.5c-0.1,0-0.2,0-0.3-0.1L12,1.2L0.8,11.4c-0.2,0.2-0.5,0.2-0.7,0c-0.2-0.2-0.2-0.5,0-0.7L11.7,0.1\n      c0.2-0.2,0.5-0.2,0.7,0l11.5,10.5c0.2,0.2,0.2,0.5,0,0.7C23.8,11.4,23.6,11.5,23.5,11.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M19.5,5.5C19.2,5.5,19,5.3,19,5V2h-3c-0.3,0-0.5-0.2-0.5-0.5S15.7,1,16,1h3.5C19.8,1,20,1.2,20,1.5V5\n      C20,5.3,19.8,5.5,19.5,5.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12,15c-1.9,0-3.5-1.6-3.5-3.5S10.1,8,12,8s3.5,1.6,3.5,3.5S13.9,15,12,15z M12,9c-1.4,0-2.5,1.1-2.5,2.5\n      S10.6,14,12,14c1.4,0,2.5-1.1,2.5-2.5S13.4,9,12,9z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M17.3,20H6.7c-0.3,0-0.5-0.2-0.5-0.5c0-3.1,2.5-5.5,5.8-5.5s5.8,2.4,5.8,5.5C17.8,19.8,17.6,20,17.3,20z M7.2,19h9.6\n      c-0.3-2.3-2.2-4-4.8-4C9.4,15,7.4,16.7,7.2,19z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, WXGF: function(t, e, n) {
        }, WvZL: function(t, e, n) {
        }, "X/We": function(t, e, n) {
          "use strict";
          var r = n("4z53");
          n.n(r).a;
        }, X2Ka: function(t, e, n) {
        }, X2fP: function(t, e, n) {
        }, X2rl: function(t, e, n) {
          "use strict";
          var r = n("Qzzu");
          n.n(r).a;
        }, XdQX: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "InputSelect", status: "ready", release: "1.0.0", type: "Element", model: { event: "change" }, computed: { hasError: function() {
            return this.errormessage.length;
          } }, props: { value: { type: String }, multiple: { type: Boolean, default: false }, options: { required: true, type: Array }, label: { type: String, default: "" }, hideLabel: { type: Boolean, default: false }, errormessage: { type: String, default: "" }, wrapper: { type: String, default: "div", validator: function(t2) {
            return t2.match(/(div|section)/);
          } }, id: { type: String, default: "", required: true }, name: { type: String, default: "", required: true }, width: { type: String, default: "auto", validator: function(t2) {
            return t2.match(/(auto|expand)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } }, disabled: { type: Boolean, default: false }, required: { type: Boolean, default: false }, hover: { type: Boolean, default: false }, focus: { type: Boolean, default: false } }, methods: { change: function(t2) {
            this.$emit("change", t2.target.value);
          }, inputblur: function(t2) {
            this.$emit("inputblur", t2);
          } } }, i = (n("GqHY"), n("KHd+")), a = n("zvzC"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.wrapper, { tag: "component", staticClass: "lux-select" }, [t2.label ? n2("label", { class: { "lux-hidden": t2.hideLabel }, attrs: { for: t2.id } }, [t2._v(t2._s(t2.label))]) : t2._e(), t2._v(" "), n2("select", { class: ["lux-select", { "lux-select-error": t2.hasError }, { "lux-select-expand": "expand" === t2.width }, t2.size], attrs: { id: t2.id, disabled: t2.disabled, required: t2.required, focus: t2.focus, multiple: t2.multiple, errormessage: t2.errormessage, name: t2.name }, domProps: { value: t2.value }, on: { change: function(e3) {
              return t2.change(e3);
            }, blur: function(e3) {
              return t2.inputblur(e3.target);
            } } }, t2._l(t2.options, function(e3, r2) {
              return n2("option", { key: r2, attrs: { disabled: e3.disabled }, domProps: { value: e3.value } }, [t2._v(t2._s(e3.label))]);
            }), 0), t2._v(" "), t2.errormessage ? n2("div", { staticClass: "lux-error", attrs: { role: "alert" } }, [t2._v(t2._s(t2.errormessage))]) : t2._e()]);
          }, [], false, null, "2a529e3a", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, Xl01: function(t, e, n) {
          var r = { "./Alert.vue": "zj92", "./Banner.vue": "EWKo", "./Card.vue": "uJhq", "./DataTable.vue": "mlqV", "./DatePicker.vue": "26cH", "./GridContainer.vue": "CNq7", "./GridItem.vue": "w9WQ", "./Heading.vue": "oIR/", "./Hyperlink.vue": "5Dup", "./InputAutocomplete.vue": "RFJP", "./InputButton.vue": "ADNt", "./InputCheckbox.vue": "eW0d", "./InputDataList.vue": "gEzz", "./InputRadio.vue": "A4bl", "./InputSelect.vue": "XdQX", "./InputText.vue": "xMM/", "./Loader.vue": "wAg7", "./MediaImage.vue": "d7pG", "./Spacer.vue": "vW6B", "./Tag.vue": "ONH9", "./TextStyle.vue": "r6ov", "./Wrapper.vue": "9t9y", "./_CardContent.vue": "xSCS", "./_CardHeader.vue": "2FPS", "./_CardMedia.vue": "ZYGN", "./_Hamburger.vue": "55Ur", "./_Icon.vue": "Lmn2", "./_LibraryContactInfo.vue": "wHW2", "./_LibraryLogo.vue": "yk1l", "./_SvgIcon.vue": "8IW8", "./_UniversityAccessibility.vue": "fL5o", "./_UniversityCopyright.vue": "BND2", "./_UniversityLogo.vue": "T5iX" };
          function i(t2) {
            var e2 = a(t2);
            return n(e2);
          }
          function a(t2) {
            if (!n.o(r, t2)) {
              var e2 = new Error("Cannot find module '" + t2 + "'");
              throw e2.code = "MODULE_NOT_FOUND", e2;
            }
            return r[t2];
          }
          i.keys = function() {
            return Object.keys(r);
          }, i.resolve = a, t.exports = i, i.id = "Xl01";
        }, XnhV: function(t, e) {
        }, XtJ2: function(t, e, n) {
        }, XvlE: function(t, e) {
        }, Y3yW: function(t, e) {
        }, Y4Or: function(t, e, n) {
        }, "YHd/": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LogoGovDocs", status: "ready", release: "1.0.0", type: "Element", props: { width: { type: [Number, String], default: 32 }, height: { type: [Number, String], default: 32 } } }, i = n("KHd+"), a = n("HXRA"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: t2.width, height: t2.height, viewBox: "0 0 32 32", preserveAspectRatio: "xMinYMid", "aria-labelledby": "logo-gov-docs", role: "img" } }, [n2("title", { attrs: { id: "logo-gov-docs", lang: "en" } }, [t2._v("Government Docs Logo")]), t2._v(" "), n2("g", [n2("path", { attrs: { fill: "#002C64", d: "M15.1 30.2c-1.2-.1-1.9-.2-2.7-.4-2.8-.7-5.1-2.1-7.2-4.1-3-3-4.8-6.9-5.1-11.5-.1-.6-.1-3.4-.1-6.7V1.8h32v.4c.1.7.1 11 0 11.9-.3 3.1-.9 5.4-2.3 7.8-2.6 4.8-7.2 7.8-12.3 8.3-.8 0-1.7.1-2.3 0z" } }), t2._v(" "), n2("path", { attrs: { fill: "#FFF", d: "M17.2 29.5c1.8-.1 4.4-1 6-1.9 2.7-1.6 4.9-3.9 6.3-6.9.8-1.6 1.2-4 1.2-7 0-1.4 0-1.7-.2-2.6-.5-2.7-1.8-5.2-3.7-7-.4-.4-.5-.5-.5-.8 0-.5 0-.5-3.5-.5-2.7 0-3.2 0-3.4.1-.4.2-.5.7-.1.7s.7.1 1 .3c.4.3.7.3 1.2.1.5-.2.7-.2.9 0 .1.1.2.2.2.5 0 .4-.1.5-.7.5-.5 0-.9-.2-1.7-.7-.6-.4-.8-.4-2.2 0-1.1.3-1.2.4-1.3.6-.3.4-.3.8 0 1.6.2.4.3.8.3.9 0 .1.1.2.2.2.2 0 .2 0 .4-.2.2-.4.6-.4 1.1-.3.8.2 1.4.5 2.3 1.4.5.5 1.1 1.9 1.2 3.2.1.9.1 2.3-.1 3.1-.5 2-1.7 3.9-3.2 4.9-.3.2-1.2.7-1.6.8-.5.2-1.8.2-2.4.1-1.2-.3-2.7-1.3-3.6-2.5-.3-.4-.7-1.4-.8-2.2-.1-.7 0-1.9.1-2.4.4-1.4 1.6-2.7 3.2-3.5.9-.4 1.1-.7 1-1.3-.1-.4-.3-.7-.6-1l-.3-.2H.7v2.6l.3.2.3.2h8s-.2.2-.4.5c-1 1.8-1.3 3.8-.8 6 .2.8.9 2.2 1.6 3.2 1.1 1.4 2.8 2.5 4.4 2.8.8.2 2.1.2 3 .1l.5-.1-.3.4c-.5.7-1 2-1.2 3.5-.1.8-.5 1.8-.8 2.2-.1.2-.2.3-.2.4 0 0 .2.1.5.1h.7s.5 0 .9-.1z" } }), t2._v(" "), n2("path", { attrs: { fill: "#FFF", d: "M14 29.2c.3-.1.7-.5.9-.8.1-.2.2-.7.3-1.2.2-.9.5-1.7.9-2.6.1-.3.2-.5.2-.5h-.4c-.2 0-.7-.1-1-.1-.3-.1-.7-.1-.8-.1-.4.1-1.5 1.3-2.3 2.5-.4.6-1 1.1-1.8 1.4-.3 0-.5.2-.4.2.1.2 1.8.8 3.3 1.1.8.2.8.2 1.1.1zm-4.6-2.1c.8-.4 1.2-.8 1.6-1.5.5-.7.7-1 1.5-1.6.3-.2.5-.4.5-.4s-.2-.1-.3-.2c-.4-.2-1.1-.6-1.7-1-.4-.3-.8-.3-1.5-.1-.4.1-1.6.7-2.2 1.1-.9.6-1.5.8-2.1.8h-.5c0 .3.9 1.2 2.1 2 1.1.8 1.6 1.1 1.9 1.1.1.1.4 0 .7-.2zm-4-3.6c.1-.1.5-.3.8-.5 1.2-.8 2.4-1.3 3.2-1.4.3 0 .5-.1.5-.1s-1.8-2.3-2-2.6c-.4-.5-1.6-.5-2.6 0-.7.3-1.5.5-2.3.5-.5 0-.8 0-.9-.1-.2-.1-.2-.1-.2 0 0 .2 1.5 3.2 1.8 3.5.5.7 1.1 1 1.7.7zm-2.5-4.8c1.4-.3 3.1-.6 3.5-.7.3 0 .5 0 .7.1.1.1.2.1.3.1 0 0 0-.2-.1-.4s-.2-.8-.3-1.3c-.1-.5-.1-.9-.2-1 0-.1-.2-.2-.4-.3-.3-.2-.4-.2-2.6-.2-2.1 0-2.4-.1-2.6-.2-.2-.1-.3-.1-.4-.1l.4 3c.1.7.2.8.4 1 .3.1.6.2 1.3 0zm12.7-.4c.3-.3.8-.3 1.1 0 .1.1.2.1 1.6.1h1.5v-6.6h-1v-.6c0-.7 0-.7-.8-.5-.6.2-1.1.4-1.5.8l-.3.3-.3-.3c-.4-.4-.9-.7-1.5-.8-.8-.2-.7-.2-.8.5v.6h-1v6.5h3z" } }), t2._v(" "), n2("path", { attrs: { fill: "#C30035", d: "M13.2 15.3c0-2.5 0-2.6.1-2.6s.1 0 .1 2.2v2.2h.4c.2 0 .5.1.7.1.3.1 1.2.6 1.2.6h-2.6v-2.5zm3.4 2.4c.7-.4 1.1-.6 1.6-.6h.5v-4.4h.4v5.2h-2.8l.3-.2z" } }), t2._v(" "), n2("path", { attrs: { fill: "#C30035", d: "M15.6 16.8c-.3-.2-1-.5-1.2-.5h-.2v-4.6l.3.1c.4.1.9.4 1.1.6l.2.2v2.1c-.1 2.2-.1 2.2-.2 2.1zm1-2c0-1.9 0-2.2.1-2.3.2-.3.7-.6 1.1-.7l.3-.1v4.6h-.2c-.2 0-.8.3-1.1.5l-.2.1v-2.1z" } }), t2._v(" "), n2("path", { attrs: { fill: "#FFF", d: "M6.9 14.3c0-.3.2-1.4.3-1.8.1-.3.1-.4 0-.7-.2-.6-.1-.6-3.1-.6H1.5L1 11l-.5-.2v.6c.1 1.2.3 2.2.4 2.4.1.1.2.3.3.3.1.1.9.1 2.4.1 2.3 0 2.9.1 3.1.3.1.1.2 0 .2-.2z" } })])]);
          }, [], false, null, "09d0af73", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, YXjX: function(t, e, n) {
        }, YXvi: function(t, e, n) {
          "use strict";
          var r = n("cGr5");
          n.n(r).a;
        }, ZQ2J: function(t, e, n) {
        }, ZYGN: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "CardMedia", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" } } }, i = (n("CPix"), n("KHd+")), a = n("5mbo"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", staticClass: "lux-card-media" }, [this._t("default")], 2);
          }, [], false, null, "479a9503", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, aHKj: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconPicture", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("p3Ql"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M23.5,24h-23C0.2,24,0,23.8,0,23.5v-23C0,0.2,0.2,0,0.5,0h23C23.8,0,24,0.2,24,0.5v23C24,23.8,23.8,24,23.5,24z M1,23\n					h22V1H1V23z" } })]), this._v(" "), e2("g", [e2("rect", { attrs: { x: "0.5", y: "17", width: "23", height: "1" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M9.5,9h-3c-1.1,0-2-0.9-2-2c0-0.7,0.3-1.3,0.9-1.6C5.8,5.1,6.2,5,6.7,5c0.4-1.2,1.5-2,2.8-2c1.7,0,3,1.3,3,3\n					S11.2,9,9.5,9z M6.5,6C6.3,6,6.1,6.1,5.9,6.2C5.7,6.4,5.5,6.7,5.5,7c0,0.6,0.4,1,1,1h3c1.1,0,2-0.9,2-2s-0.9-2-2-2\n					c-1,0-1.8,0.7-2,1.7C7.5,5.8,7.4,6,7.3,6C7.2,6.1,7,6.1,6.9,6.1C6.7,6,6.6,6,6.5,6z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M21.6,17.7L18,10.7c-0.2-0.4-0.6-0.6-1-0.6c-0.4,0-0.8,0.2-1.1,0.6l-3,5.2c-0.1,0.1-0.2,0.2-0.4,0.2\n					c-0.2,0-0.3-0.1-0.4-0.2c0,0-1.9-2.8-4.1-2.8c-1.8,0-3.5,3.4-4,4.7L3,17.3C3.3,16.8,5.2,12,8,12c2,0,3.7,1.7,4.4,2.6l2.6-4.5\n					C15.5,9.4,16.2,9,17,9c0.8,0,1.5,0.5,1.9,1.2l3.5,7.1L21.6,17.7z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, aKAn: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconQuestion", status: "ready", release: "3.1.1", type: "Element" }, i = n("KHd+"), a = n("Ob2K"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("path", { attrs: { d: "M23.5,1h-23C0.2,1,0,1.2,0,1.5v16C0,17.8,0.2,18,0.5,18H7v3.5c0,0.2,0.1,0.4,0.3,0.5c0.1,0,0.1,0,0.2,0\n		c0.1,0,0.3-0.1,0.4-0.1l3.9-3.9h11.8c0.3,0,0.5-0.2,0.5-0.5v-16C24,1.2,23.8,1,23.5,1z M23,17H11.5c-0.1,0-0.3,0.1-0.4,0.1L8,20.3\n		v-2.8C8,17.2,7.8,17,7.5,17H1V2h22V17z" } }), this._v(" "), e2("path", { attrs: { d: "M9.5,8C9.8,8,10,7.8,10,7.5C10,6.1,11.1,5,12.5,5S15,6.1,15,7.5S13.9,10,12.5,10c-0.3,0-0.5,0.2-0.5,0.5v1\n		c0,0.3,0.2,0.5,0.5,0.5s0.5-0.2,0.5-0.5V11c1.7-0.2,3-1.7,3-3.5C16,5.6,14.4,4,12.5,4S9,5.6,9,7.5C9,7.8,9.2,8,9.5,8z" } }), this._v(" "), e2("circle", { attrs: { cx: "12.5", cy: "14", r: "1" } })]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, abkU: function(t, e, n) {
          "use strict";
          var r = n("ZQ2J");
          n.n(r).a;
        }, bKDN: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = n("lSNA"), i = n.n(r), a = n("oCYn"), o = n("L2JU"), s = n("HOM/");
          a.default.use(o.a);
          var c = new o.a.Store({ modules: { counter: s.a, gallery: s.c } }), u = n("MQ60");
          function l(t2, e2) {
            var n2 = Object.keys(t2);
            if (Object.getOwnPropertySymbols) {
              var r2 = Object.getOwnPropertySymbols(t2);
              e2 && (r2 = r2.filter(function(e3) {
                return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
              })), n2.push.apply(n2, r2);
            }
            return n2;
          }
          var f = { name: "Gallery", status: "ready", release: "1.0.0", type: "Pattern", components: { draggable: n.n(u).a }, computed: function(t2) {
            for (var e2 = 1; e2 < arguments.length; e2++) {
              var n2 = null != arguments[e2] ? arguments[e2] : {};
              e2 % 2 ? l(Object(n2), true).forEach(function(e3) {
                i()(t2, e3, n2[e3]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(n2)) : l(Object(n2)).forEach(function(e3) {
                Object.defineProperty(t2, e3, Object.getOwnPropertyDescriptor(n2, e3));
              });
            }
            return t2;
          }({ items: { get: function() {
            return this.gallery.items;
          }, set: function(t2) {
            c.commit("SORT_ITEMS", t2);
          } } }, Object(o.b)({ gallery: function(t2) {
            return c.state.gallery;
          } })), props: { galleryItems: { required: true, type: Array }, cardPixelWidth: { required: false, default: 300 } }, methods: { deselect: function(t2) {
            "lux-gallery" !== t2.target.className && "lux-gallery lux-galleryWrapper" !== t2.target.className || this.selectNone();
          }, selectNone: function() {
            c.commit("SELECT", []);
          }, getItemById: function(t2) {
            var e2 = this.getItemIndexById(t2);
            return this.items[e2];
          }, getItemIndexById: function(t2) {
            return this.items.map(function(t3) {
              return t3.id;
            }).indexOf(t2);
          }, hasChanged: function(t2) {
            return this.gallery.changeList.indexOf(t2) > -1;
          }, isDisabled: function(t2) {
            return this.gallery.cut.indexOf(t2) > -1;
          }, isSelected: function(t2) {
            return this.gallery.selected.indexOf(t2) > -1;
          }, select: function(t2, e2) {
            if (!this.isDisabled(this.getItemById(t2))) {
              var n2 = [];
              if (e2.metaKey)
                (n2 = this.gallery.selected).push(this.getItemById(t2)), c.commit("SELECT", n2);
              else if (1 === this.gallery.selected.length && e2.shiftKey) {
                for (var r2 = this.getItemIndexById(this.gallery.selected[0].id), i2 = this.getItemIndexById(t2), a2 = Math.min(r2, i2), o2 = Math.max(r2, i2), s2 = a2; s2 <= o2; s2++)
                  n2.push(this.items[s2]);
                c.commit("SELECT", n2);
              } else
                c.commit("SELECT", [this.getItemById(t2)]);
            }
          } }, beforeMount: function() {
            this.galleryItems && c.commit("SET_GALLERY", this.galleryItems);
          } }, d = (n("N6C8"), n("KHd+")), p = n("DTy0"), h = n.n(p), v = Object(d.a)(f, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("draggable", { staticClass: "lux-gallery", attrs: { tag: "div" }, nativeOn: { click: function(e3) {
              return t2.deselect(e3);
            } }, model: { value: t2.items, callback: function(e3) {
              t2.items = e3;
            }, expression: "items" } }, t2._l(t2.items, function(e3, r2) {
              return n2("card", { key: e3.id, staticClass: "lux-galleryCard", attrs: { id: e3.id, cardPixelWidth: t2.cardPixelWidth, size: "medium", selected: t2.isSelected(e3), disabled: t2.isDisabled(e3), edited: t2.hasChanged(e3.id) }, on: { "!click": function(n3) {
                return t2.select(e3.id, n3);
              } } }, [n2("media-image", { attrs: { src: e3.mediaUrl } }), t2._v(" "), n2("heading", { attrs: { level: "h2" } }, [t2._v(t2._s(e3.title))]), t2._v(" "), n2("text-style", { attrs: { variation: "default" } }, [t2._v(t2._s(e3.caption))])], 1);
            }), 1);
          }, [], false, null, null, null);
          "function" == typeof h.a && h()(v);
          e.default = v.exports;
        }, bjrT: function(t, e, n) {
          "use strict";
          var r = n("AzCp");
          n.n(r).a;
        }, bzL3: function(t, e, n) {
          var r = { "./deprecated.svg": "/thn", "./prototype.svg": "2dwG", "./ready.svg": "AAsE", "./review.svg": "eAtJ" };
          function i(t2) {
            var e2 = a(t2);
            return n(e2);
          }
          function a(t2) {
            if (!n.o(r, t2)) {
              var e2 = new Error("Cannot find module '" + t2 + "'");
              throw e2.code = "MODULE_NOT_FOUND", e2;
            }
            return r[t2];
          }
          i.keys = function() {
            return Object.keys(r);
          }, i.resolve = a, t.exports = i, i.id = "bzL3";
        }, c1KM: function(t, e, n) {
          var r = { "./FormInputs.vue": "2F0E", "./Index.vue": "lF/O", "./NotFound.vue": "4K1/" };
          function i(t2) {
            var e2 = a(t2);
            return n(e2);
          }
          function a(t2) {
            if (!n.o(r, t2)) {
              var e2 = new Error("Cannot find module '" + t2 + "'");
              throw e2.code = "MODULE_NOT_FOUND", e2;
            }
            return r[t2];
          }
          i.keys = function() {
            return Object.keys(r);
          }, i.resolve = a, t.exports = i, i.id = "c1KM";
        }, cDf5: function(t, e) {
          function n(t2) {
            return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
              return typeof t3;
            } : function(t3) {
              return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
            })(t2);
          }
          function r(e2) {
            return "function" == typeof Symbol && "symbol" === n(Symbol.iterator) ? t.exports = r = function(t2) {
              return n(t2);
            } : t.exports = r = function(t2) {
              return t2 && "function" == typeof Symbol && t2.constructor === Symbol && t2 !== Symbol.prototype ? "symbol" : n(t2);
            }, r(e2);
          }
          t.exports = r;
        }, cGr5: function(t, e, n) {
        }, cX6P: function(t, e) {
        }, cu24: function(t, e, n) {
          "use strict";
          var r = n("r8XY");
          n.n(r).a;
        }, d7pG: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "MediaImage", status: "ready", release: "1.0.0", type: "Element", methods: { fixSrc: function(t2) {
            console.log(t2), t2.target.parentNode.classList.add("lux-default-thumbnail"), t2.target.remove();
          } }, props: { src: { type: String, default: null }, alt: { type: String, default: "" }, height: { type: String, default: "" }, cover: { type: Boolean, default: false }, contain: { type: Boolean, default: false } } }, i = (n("7hub"), n("KHd+")), a = n("sBaT"), o = n.n(a), s = Object(i.a)(r, function(t2, e2) {
            var n2 = e2._c;
            return n2("div", e2._g(e2._b({ staticClass: "lux-media-image", class: [e2.props.height, { "lux-default-thumbnail": !e2.props.src }, e2.data.class, e2.data.staticClass], style: [e2.data.style, e2.data.staticStyle] }, "div", e2.data.attrs, false), e2.listeners), [e2.props.src ? n2("img", { class: [{ "lux-cover": e2.props.cover }, { "lux-contain": e2.props.contain }], attrs: { src: e2.props.src, alt: e2.props.alt }, on: { error: e2.$options.methods.fixSrc } }) : e2._e(), e2._v(" "), n2("lux-icon-base", { attrs: { width: "50", height: "50", "icon-name": "file", "icon-color": "rgb(225,225,225)", "icon-hide": "true" } }, [n2("lux-icon-file")], 1)], 1);
          }, [], true, null, "3a93a7ad", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, daU6: function(t, e) {
        }, e7Eb: function(t, e) {
        }, eAtJ: function(t, e) {
          t.exports = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/></svg>';
        }, eCho: function(t, e) {
        }, eW0d: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "InputCheckbox", status: "ready", release: "1.0.0", type: "Element", model: { prop: "checked", event: "change" }, data: function() {
            return { wrapper: this.groupLabel.length ? "fieldset" : "div" };
          }, props: { vertical: { type: Boolean, default: false }, options: { required: true, type: Array }, label: { type: String, default: "" }, errormessage: { type: String, default: "" }, groupLabel: { type: String, default: "" }, disabled: { type: Boolean, default: false }, required: { type: Boolean, default: false }, hover: { type: Boolean, default: false }, focus: { type: Boolean, default: false } }, methods: { change: function(t2) {
            this.$emit("change", t2.target.checked);
          }, inputblur: function(t2) {
            this.$emit("inputblur", t2);
          } } }, i = (n("kwgh"), n("KHd+")), a = n("PZ/G"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.wrapper, { tag: "component", staticClass: "lux-input" }, [t2.groupLabel ? n2("legend", [t2._v(t2._s(t2.groupLabel))]) : t2._e(), t2._v(" "), t2._l(t2.options, function(e3, r2) {
              return n2("div", { class: ["lux-checkbox", { "lux-inline": !t2.vertical }] }, [n2("input", { attrs: { type: "checkbox", id: e3.id, name: t2.label, disabled: e3.disabled, required: e3.required }, domProps: { value: e3.value, checked: e3.checked }, on: { change: function(e4) {
                return t2.change(e4);
              }, blur: function(e4) {
                return t2.inputblur(e4.target);
              } } }), t2._v(" "), e3.label ? n2("label", { attrs: { for: e3.id } }, [t2._v(t2._s(e3.label))]) : n2("label", { attrs: { for: e3.id } }, [t2._v(t2._s(e3.value))])]);
            }), t2._v(" "), t2.errormessage ? n2("div", { staticClass: "lux-error", attrs: { role: "alert" } }, [t2._v(t2._s(t2.errormessage))]) : t2._e()], 2);
          }, [], false, null, "e556e8be", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, f8oI: function(t, e, n) {
        }, fHnW: function(t, e, n) {
          "use strict";
          var r = n("0tf1");
          n.n(r).a;
        }, fJkO: function(t, e, n) {
          "use strict";
          var r = n("jtsT");
          n.n(r).a;
        }, fL1g: function(t, e, n) {
          "use strict";
          var r = n("ASNS");
          n.n(r).a;
        }, fL5o: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "UniversityAccessibility", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "span" } } }, i = (n("GxD9"), n("KHd+")), a = n("eCho"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2(this.type, { tag: "component", staticClass: "lux-accessibility" }, [e2("a", { attrs: { href: "https://accessibility.princeton.edu/" } }, [this._v("Accessibility")])]);
          }, [], false, null, "958b8e4e", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, fmEb: function(t, e, n) {
        }, gEzz: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "InputDataList", status: "prototype", release: "1.0.0", type: "Element", computed: { datalistId: function() {
            return this.id + "-list";
          }, hasError: function() {
            return this.errormessage.length;
          } }, props: { type: { type: String, default: "text", validator: function(t2) {
            return t2.match(/(text|number|email)/);
          } }, value: { type: String, default: "" }, placeholder: { type: String, default: "" }, label: { type: String, default: "" }, list: { type: Array, default: [], required: true }, hideLabel: { type: Boolean, default: false }, errormessage: { type: String, default: "" }, helper: { type: String, default: "" }, wrapper: { type: String, default: "div", validator: function(t2) {
            return t2.match(/(div|section)/);
          } }, id: { type: String, default: "", required: true }, name: { type: String, default: "", required: true }, width: { type: String, default: "expand", validator: function(t2) {
            return t2.match(/(auto|expand)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } }, disabled: { type: Boolean, default: false }, hover: { type: Boolean, default: false }, focus: { type: Boolean, default: false } }, methods: { inputblur: function(t2) {
            this.$emit("inputblur", t2);
          } } }, i = (n("KznF"), n("KHd+")), a = n("wjTC"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.wrapper, { tag: "component", staticClass: "lux-input" }, [t2.label ? n2("label", { class: { "lux-hidden": t2.hideLabel }, attrs: { for: t2.id } }, [t2._v(t2._s(t2.label))]) : t2._e(), t2._v(" "), n2("div", { staticClass: "lux-input-field", class: [{ "lux-input-expand": "expand" === t2.width }, { disabled: t2.disabled }, t2.size] }, [n2("input", { class: ["lux-input", { "lux-input-error": t2.hasError }], attrs: { name: t2.name, id: t2.id, list: t2.datalistId, disabled: t2.disabled, type: t2.type, hover: t2.hover, focus: t2.focus, placeholder: t2.placeholder, errormessage: t2.errormessage }, domProps: { value: t2.value }, on: { input: function(e3) {
              return t2.$emit("input", e3.target.value);
            }, blur: function(e3) {
              return t2.inputblur(e3.target);
            } } }), t2._v(" "), n2("datalist", { attrs: { id: t2.datalistId } }, t2._l(t2.list, function(e3, r2) {
              return n2("option", { domProps: { value: e3.value } }, [t2._v("\n        " + t2._s(e3.label) + "\n      ")]);
            }), 0)]), t2._v(" "), t2.errormessage ? n2("div", { staticClass: "lux-error", attrs: { role: "alert" } }, [t2._v(t2._s(t2.errormessage))]) : t2._e(), t2._v(" "), t2.helper ? n2("div", { staticClass: "lux-helper" }, [t2._v(t2._s(t2.helper))]) : t2._e()]);
          }, [], false, null, "c0bae8ee", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, gMq4: function(t, e, n) {
          "use strict";
          var r = n("j2uB");
          n.n(r).a;
        }, gkHm: function(t, e) {
        }, gtuO: function(t, e) {
        }, gvHy: function(t, e) {
        }, hc6h: function(t, e) {
        }, "i/xl": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LogoTwitter", status: "ready", release: "1.0.0", type: "Element", props: { width: { type: [Number, String], default: 24 }, height: { type: [Number, String], default: 24 } } }, i = n("KHd+"), a = n("e7Eb"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: this.width, height: this.height, viewBox: "0 0 24 24", preserveAspectRatio: "xMinYMid", "aria-labelledby": "logo-twitter", role: "img" } }, [e2("title", { attrs: { id: "logo-twitter", lang: "en" } }, [this._v("Twitter Logo")]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M23.444 4.834c-.814.363-1.5.375-2.227.016.938-.562.981-.957 1.32-2.019-.878.521-1.851.9-2.886 1.104a4.545 4.545 0 0 0-7.743 4.145 12.897 12.897 0 0 1-9.366-4.748 4.525 4.525 0 0 0-.615 2.285c0 1.577.803 2.967 2.021 3.782a4.527 4.527 0 0 1-2.057-.568l-.001.057a4.547 4.547 0 0 0 3.646 4.456 4.575 4.575 0 0 1-2.053.079 4.551 4.551 0 0 0 4.245 3.155A9.138 9.138 0 0 1 1 18.459 12.865 12.865 0 0 0 7.966 20.5c8.358 0 12.928-6.924 12.928-12.929 0-.198-.003-.393-.012-.588.887-.64 1.953-1.237 2.562-2.149z" } }), this._v(" "), e2("path", { attrs: { fill: "none", d: "M0 0h24v24H0z" } })])]);
          }, [], false, null, "131c16d9", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, i9NM: function(t, e, n) {
          var r = { "./LuxIconAdd.vue": "qwBE", "./LuxIconAlert.vue": "30j6", "./LuxIconApproved.vue": "B7n5", "./LuxIconAscending.vue": "suyH", "./LuxIconBase.vue": "1dIj", "./LuxIconClock.vue": "/kEJ", "./LuxIconConsulting.vue": "y6ju", "./LuxIconDenied.vue": "8fTi", "./LuxIconDescending.vue": "o+Xd", "./LuxIconExclamation.vue": "S/3G", "./LuxIconFile.vue": "vnPu", "./LuxIconFilter.vue": "sBvN", "./LuxIconFlower.vue": "LPnE", "./LuxIconGlobe.vue": "W+NU", "./LuxIconHospital.vue": "KeWn", "./LuxIconNote.vue": "xAyx", "./LuxIconPerson.vue": "10Lx", "./LuxIconPicture.vue": "aHKj", "./LuxIconQuestion.vue": "aKAn", "./LuxIconRefresh.vue": "Otma", "./LuxIconRelax.vue": "ox1f", "./LuxIconReportRemove.vue": "KIrT", "./LuxIconReported.vue": "B+5f", "./LuxIconResearch.vue": "k+q1", "./LuxIconScales.vue": "30R6", "./LuxIconSearch.vue": "QC6r", "./LuxIconUnsorted.vue": "6z2N", "./LuxIconUserHome.vue": "WHI8", "./LuxIconVacation.vue": "rGKY" };
          function i(t2) {
            var e2 = a(t2);
            return n(e2);
          }
          function a(t2) {
            if (!n.o(r, t2)) {
              var e2 = new Error("Cannot find module '" + t2 + "'");
              throw e2.code = "MODULE_NOT_FOUND", e2;
            }
            return r[t2];
          }
          i.keys = function() {
            return Object.keys(r);
          }, i.resolve = a, t.exports = i, i.id = "i9NM";
        }, iNJb: function(t, e) {
        }, ijgq: function(t, e) {
        }, j2uB: function(t, e, n) {
        }, jEXX: function(t, e) {
        }, jQdm: function(t, e, n) {
          "use strict";
          var r = n("X2Ka");
          n.n(r).a;
        }, jtsT: function(t, e, n) {
        }, jur8: function(t, e, n) {
          "use strict";
          var r = n("JnUq");
          n.n(r).a;
        }, "k+q1": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconResearch", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("KTe4"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("g", [n2("g", [n2("path", { attrs: { d: "M8.5,18.9c-0.1,0-0.1,0-0.2,0c-2.1-0.9-5-1.4-7.8-1.4C0.2,17.5,0,17.3,0,17V0.5C0,0.2,0.2,0,0.5,0c4.7,0,9.5,1,11,2.8\n      C13,1,17.8,0,22.5,0C22.8,0,23,0.2,23,0.5V17c0,0.3-0.2,0.5-0.5,0.5c-0.3,0-1,0-1,0l0-1c0,0,0.2,0,0.5,0V1c-5.7,0.1-10,1.6-10,3\n      c0,0.3-0.2,0.5-0.5,0.5S11,4.3,11,4c0-1.3-4.3-2.9-10-3v15.5c2.8,0.1,5.6,0.6,7.7,1.4C8.9,18,9.1,18.3,9,18.6\n      C8.9,18.8,8.7,18.9,8.5,18.9z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M11.5,5C11.2,5,11,4.8,11,4.5V4c0-0.3,0.2-0.5,0.5-0.5S12,3.7,12,4v0.5C12,4.8,11.8,5,11.5,5z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M9,6.7c-0.1,0-0.1,0-0.2,0C7.2,6.1,5,5.7,2.5,5.5C2.2,5.5,2,5.2,2,5s0.3-0.5,0.5-0.5c2.6,0.2,5,0.6,6.6,1.3\n      c0.3,0.1,0.4,0.4,0.3,0.6C9.4,6.6,9.2,6.7,9,6.7z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M7,9.1c0,0-0.1,0-0.1,0C5.6,8.8,4.1,8.6,2.5,8.5C2.2,8.5,2,8.2,2,8s0.3-0.5,0.5-0.5c1.7,0.1,3.2,0.3,4.6,0.7\n      c0.3,0.1,0.4,0.3,0.4,0.6C7.5,9,7.2,9.1,7,9.1z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M5.9,11.9C5.9,11.9,5.9,11.9,5.9,11.9c-1.1-0.2-2.3-0.3-3.5-0.4C2.2,11.5,2,11.2,2,11s0.3-0.5,0.5-0.5\n      c1.2,0.1,2.4,0.2,3.5,0.4c0.3,0,0.5,0.3,0.4,0.6C6.4,11.8,6.2,11.9,5.9,11.9z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M6.1,14.9C6.1,14.9,6,14.9,6.1,14.9c-1.2-0.2-2.4-0.4-3.6-0.4C2.2,14.5,2,14.2,2,14s0.3-0.5,0.5-0.5\n      c1.3,0.1,2.5,0.2,3.6,0.5c0.3,0.1,0.4,0.3,0.4,0.6C6.5,14.8,6.3,14.9,6.1,14.9z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M16.5,6c-0.2,0-0.4-0.2-0.5-0.4C16,5.4,16.2,5.1,16.4,5c1.2-0.3,2.6-0.4,4-0.5C20.7,4.5,21,4.7,21,5\n      c0,0.3-0.2,0.5-0.5,0.5c-1.4,0.1-2.7,0.3-3.9,0.5C16.6,6,16.6,6,16.5,6z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M19.4,8.6c-0.3,0-0.5-0.2-0.5-0.5c0-0.3,0.2-0.5,0.4-0.5c0.4,0,0.7-0.1,1.1-0.1C20.7,7.5,21,7.7,21,8s-0.2,0.5-0.5,0.5\n      C20.2,8.5,19.8,8.6,19.4,8.6C19.5,8.6,19.4,8.6,19.4,8.6z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M13.5,19C9.9,19,7,16.1,7,12.5S9.9,6,13.5,6S20,8.9,20,12.5S17.1,19,13.5,19z M13.5,7C10.5,7,8,9.5,8,12.5\n      c0,3,2.5,5.5,5.5,5.5c3,0,5.5-2.5,5.5-5.5C19,9.5,16.5,7,13.5,7z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M23.5,23c-0.1,0-0.3,0-0.4-0.1l-5.7-5.7c-0.2-0.2-0.2-0.5,0-0.7s0.5-0.2,0.7,0l5.7,5.7c0.2,0.2,0.2,0.5,0,0.7\n      C23.8,23,23.6,23,23.5,23z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15.5,13c-0.3,0-0.5-0.2-0.5-0.5V11h-3v1.5c0,0.3-0.2,0.5-0.5,0.5S11,12.8,11,12.5v-2c0-0.3,0.2-0.5,0.5-0.5h4\n      c0.3,0,0.5,0.2,0.5,0.5v2C16,12.8,15.8,13,15.5,13z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M13.5,16c-0.3,0-0.5-0.2-0.5-0.5v-5c0-0.3,0.2-0.5,0.5-0.5s0.5,0.2,0.5,0.5v5C14,15.8,13.8,16,13.5,16z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15,16h-3c-0.3,0-0.5-0.2-0.5-0.5S11.7,15,12,15h3c0.3,0,0.5,0.2,0.5,0.5S15.3,16,15,16z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, kHig: function(t, e) {
        }, kda8: function(t, e, n) {
        }, kwgh: function(t, e, n) {
          "use strict";
          var r = n("fmEb");
          n.n(r).a;
        }, l6ne: function(t, e, n) {
        }, "lF/O": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Index", status: "deprecated", release: "1.0.0", type: "Template", metaInfo: { title: "LUX Design System", htmlAttrs: { lang: "en" } }, props: { type: { type: String, default: "div" } } }, i = (n("cu24"), n("KHd+")), a = n("9I8L"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2(this.type, { tag: "component", staticClass: "lux-index" }, [e2("menu-bar", { attrs: { type: "links", active: "Index", menuItems: [{ name: "Template", component: "Index", href: "/#/" }, { name: "Living Docs", href: "http://localhost:6060/" }] } }), this._v(" "), e2("wrapper", [e2("heading", { attrs: { level: "h1" } }, [this._v("LUX")]), this._v(" "), e2("text-style", [this._v("LUX (Library User Experience) is a set of organized tools, patterns, and practices that\n      work as the foundation for PUL web and application development. It aims to increase\n      consistency, improve accessibility, reduce design debt, and accelerate the design and\n      development process. Overall, it aims to illuminate the Library for our users.")])], 1)], 1);
          }, [], false, null, "f160a2c4", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, lSNA: function(t, e) {
          t.exports = function(t2, e2, n) {
            return e2 in t2 ? Object.defineProperty(t2, e2, { value: n, enumerable: true, configurable: true, writable: true }) : t2[e2] = n, t2;
          };
        }, leEq: function(t, e) {
        }, ls82: function(t, e, n) {
          var r = function(t2) {
            "use strict";
            var e2 = Object.prototype, n2 = e2.hasOwnProperty, r2 = "function" == typeof Symbol ? Symbol : {}, i = r2.iterator || "@@iterator", a = r2.asyncIterator || "@@asyncIterator", o = r2.toStringTag || "@@toStringTag";
            function s(t3, e3, n3) {
              return Object.defineProperty(t3, e3, { value: n3, enumerable: true, configurable: true, writable: true }), t3[e3];
            }
            try {
              s({}, "");
            } catch (t3) {
              s = function(t4, e3, n3) {
                return t4[e3] = n3;
              };
            }
            function c(t3, e3, n3, r3) {
              var i2 = e3 && e3.prototype instanceof f ? e3 : f, a2 = Object.create(i2.prototype), o2 = new C(r3 || []);
              return a2._invoke = function(t4, e4, n4) {
                var r4 = "suspendedStart";
                return function(i3, a3) {
                  if ("executing" === r4)
                    throw new Error("Generator is already running");
                  if ("completed" === r4) {
                    if ("throw" === i3)
                      throw a3;
                    return O();
                  }
                  for (n4.method = i3, n4.arg = a3; ; ) {
                    var o3 = n4.delegate;
                    if (o3) {
                      var s2 = _2(o3, n4);
                      if (s2) {
                        if (s2 === l)
                          continue;
                        return s2;
                      }
                    }
                    if ("next" === n4.method)
                      n4.sent = n4._sent = n4.arg;
                    else if ("throw" === n4.method) {
                      if ("suspendedStart" === r4)
                        throw r4 = "completed", n4.arg;
                      n4.dispatchException(n4.arg);
                    } else
                      "return" === n4.method && n4.abrupt("return", n4.arg);
                    r4 = "executing";
                    var c2 = u(t4, e4, n4);
                    if ("normal" === c2.type) {
                      if (r4 = n4.done ? "completed" : "suspendedYield", c2.arg === l)
                        continue;
                      return { value: c2.arg, done: n4.done };
                    }
                    "throw" === c2.type && (r4 = "completed", n4.method = "throw", n4.arg = c2.arg);
                  }
                };
              }(t3, n3, o2), a2;
            }
            function u(t3, e3, n3) {
              try {
                return { type: "normal", arg: t3.call(e3, n3) };
              } catch (t4) {
                return { type: "throw", arg: t4 };
              }
            }
            t2.wrap = c;
            var l = {};
            function f() {
            }
            function d() {
            }
            function p() {
            }
            var h = {};
            h[i] = function() {
              return this;
            };
            var v = Object.getPrototypeOf, m = v && v(v(S([])));
            m && m !== e2 && n2.call(m, i) && (h = m);
            var g = p.prototype = f.prototype = Object.create(h);
            function y(t3) {
              ["next", "throw", "return"].forEach(function(e3) {
                s(t3, e3, function(t4) {
                  return this._invoke(e3, t4);
                });
              });
            }
            function b(t3, e3) {
              var r3;
              this._invoke = function(i2, a2) {
                function o2() {
                  return new e3(function(r4, o3) {
                    !function r5(i3, a3, o4, s2) {
                      var c2 = u(t3[i3], t3, a3);
                      if ("throw" !== c2.type) {
                        var l2 = c2.arg, f2 = l2.value;
                        return f2 && "object" == typeof f2 && n2.call(f2, "__await") ? e3.resolve(f2.__await).then(function(t4) {
                          r5("next", t4, o4, s2);
                        }, function(t4) {
                          r5("throw", t4, o4, s2);
                        }) : e3.resolve(f2).then(function(t4) {
                          l2.value = t4, o4(l2);
                        }, function(t4) {
                          return r5("throw", t4, o4, s2);
                        });
                      }
                      s2(c2.arg);
                    }(i2, a2, r4, o3);
                  });
                }
                return r3 = r3 ? r3.then(o2, o2) : o2();
              };
            }
            function _2(t3, e3) {
              var n3 = t3.iterator[e3.method];
              if (void 0 === n3) {
                if (e3.delegate = null, "throw" === e3.method) {
                  if (t3.iterator.return && (e3.method = "return", e3.arg = void 0, _2(t3, e3), "throw" === e3.method))
                    return l;
                  e3.method = "throw", e3.arg = new TypeError("The iterator does not provide a 'throw' method");
                }
                return l;
              }
              var r3 = u(n3, t3.iterator, e3.arg);
              if ("throw" === r3.type)
                return e3.method = "throw", e3.arg = r3.arg, e3.delegate = null, l;
              var i2 = r3.arg;
              return i2 ? i2.done ? (e3[t3.resultName] = i2.value, e3.next = t3.nextLoc, "return" !== e3.method && (e3.method = "next", e3.arg = void 0), e3.delegate = null, l) : i2 : (e3.method = "throw", e3.arg = new TypeError("iterator result is not an object"), e3.delegate = null, l);
            }
            function x(t3) {
              var e3 = { tryLoc: t3[0] };
              1 in t3 && (e3.catchLoc = t3[1]), 2 in t3 && (e3.finallyLoc = t3[2], e3.afterLoc = t3[3]), this.tryEntries.push(e3);
            }
            function w(t3) {
              var e3 = t3.completion || {};
              e3.type = "normal", delete e3.arg, t3.completion = e3;
            }
            function C(t3) {
              this.tryEntries = [{ tryLoc: "root" }], t3.forEach(x, this), this.reset(true);
            }
            function S(t3) {
              if (t3) {
                var e3 = t3[i];
                if (e3)
                  return e3.call(t3);
                if ("function" == typeof t3.next)
                  return t3;
                if (!isNaN(t3.length)) {
                  var r3 = -1, a2 = function e4() {
                    for (; ++r3 < t3.length; )
                      if (n2.call(t3, r3))
                        return e4.value = t3[r3], e4.done = false, e4;
                    return e4.value = void 0, e4.done = true, e4;
                  };
                  return a2.next = a2;
                }
              }
              return { next: O };
            }
            function O() {
              return { value: void 0, done: true };
            }
            return d.prototype = g.constructor = p, p.constructor = d, d.displayName = s(p, o, "GeneratorFunction"), t2.isGeneratorFunction = function(t3) {
              var e3 = "function" == typeof t3 && t3.constructor;
              return !!e3 && (e3 === d || "GeneratorFunction" === (e3.displayName || e3.name));
            }, t2.mark = function(t3) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(t3, p) : (t3.__proto__ = p, s(t3, o, "GeneratorFunction")), t3.prototype = Object.create(g), t3;
            }, t2.awrap = function(t3) {
              return { __await: t3 };
            }, y(b.prototype), b.prototype[a] = function() {
              return this;
            }, t2.AsyncIterator = b, t2.async = function(e3, n3, r3, i2, a2) {
              void 0 === a2 && (a2 = Promise);
              var o2 = new b(c(e3, n3, r3, i2), a2);
              return t2.isGeneratorFunction(n3) ? o2 : o2.next().then(function(t3) {
                return t3.done ? t3.value : o2.next();
              });
            }, y(g), s(g, o, "Generator"), g[i] = function() {
              return this;
            }, g.toString = function() {
              return "[object Generator]";
            }, t2.keys = function(t3) {
              var e3 = [];
              for (var n3 in t3)
                e3.push(n3);
              return e3.reverse(), function n4() {
                for (; e3.length; ) {
                  var r3 = e3.pop();
                  if (r3 in t3)
                    return n4.value = r3, n4.done = false, n4;
                }
                return n4.done = true, n4;
              };
            }, t2.values = S, C.prototype = { constructor: C, reset: function(t3) {
              if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(w), !t3)
                for (var e3 in this)
                  "t" === e3.charAt(0) && n2.call(this, e3) && !isNaN(+e3.slice(1)) && (this[e3] = void 0);
            }, stop: function() {
              this.done = true;
              var t3 = this.tryEntries[0].completion;
              if ("throw" === t3.type)
                throw t3.arg;
              return this.rval;
            }, dispatchException: function(t3) {
              if (this.done)
                throw t3;
              var e3 = this;
              function r3(n3, r4) {
                return o2.type = "throw", o2.arg = t3, e3.next = n3, r4 && (e3.method = "next", e3.arg = void 0), !!r4;
              }
              for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                var a2 = this.tryEntries[i2], o2 = a2.completion;
                if ("root" === a2.tryLoc)
                  return r3("end");
                if (a2.tryLoc <= this.prev) {
                  var s2 = n2.call(a2, "catchLoc"), c2 = n2.call(a2, "finallyLoc");
                  if (s2 && c2) {
                    if (this.prev < a2.catchLoc)
                      return r3(a2.catchLoc, true);
                    if (this.prev < a2.finallyLoc)
                      return r3(a2.finallyLoc);
                  } else if (s2) {
                    if (this.prev < a2.catchLoc)
                      return r3(a2.catchLoc, true);
                  } else {
                    if (!c2)
                      throw new Error("try statement without catch or finally");
                    if (this.prev < a2.finallyLoc)
                      return r3(a2.finallyLoc);
                  }
                }
              }
            }, abrupt: function(t3, e3) {
              for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
                var i2 = this.tryEntries[r3];
                if (i2.tryLoc <= this.prev && n2.call(i2, "finallyLoc") && this.prev < i2.finallyLoc) {
                  var a2 = i2;
                  break;
                }
              }
              a2 && ("break" === t3 || "continue" === t3) && a2.tryLoc <= e3 && e3 <= a2.finallyLoc && (a2 = null);
              var o2 = a2 ? a2.completion : {};
              return o2.type = t3, o2.arg = e3, a2 ? (this.method = "next", this.next = a2.finallyLoc, l) : this.complete(o2);
            }, complete: function(t3, e3) {
              if ("throw" === t3.type)
                throw t3.arg;
              return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e3 && (this.next = e3), l;
            }, finish: function(t3) {
              for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
                var n3 = this.tryEntries[e3];
                if (n3.finallyLoc === t3)
                  return this.complete(n3.completion, n3.afterLoc), w(n3), l;
              }
            }, catch: function(t3) {
              for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
                var n3 = this.tryEntries[e3];
                if (n3.tryLoc === t3) {
                  var r3 = n3.completion;
                  if ("throw" === r3.type) {
                    var i2 = r3.arg;
                    w(n3);
                  }
                  return i2;
                }
              }
              throw new Error("illegal catch attempt");
            }, delegateYield: function(t3, e3, n3) {
              return this.delegate = { iterator: S(t3), resultName: e3, nextLoc: n3 }, "next" === this.method && (this.arg = void 0), l;
            } }, t2;
          }(t.exports);
          try {
            regeneratorRuntime = r;
          } catch (t2) {
            Function("r", "regeneratorRuntime = r")(r);
          }
        }, lvZH: function(t, e, n) {
        }, m0LI: function(t, e) {
          t.exports = function(t2, e2) {
            var n = [], r = true, i = false, a = void 0;
            try {
              for (var o, s = t2[Symbol.iterator](); !(r = (o = s.next()).done) && (n.push(o.value), !e2 || n.length !== e2); r = true)
                ;
            } catch (t3) {
              i = true, a = t3;
            } finally {
              try {
                r || null == s.return || s.return();
              } finally {
                if (i)
                  throw a;
              }
            }
            return n;
          };
        }, mN2E: function(t, e) {
        }, mlqV: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = n("cDf5"), i = n.n(r), a = n("J4zp"), o = n.n(a), s = { name: "DataTable", status: "ready", release: "3.1.4", type: "Element", data: function() {
            return { rows: this.jsonData, parsedColumns: [] };
          }, props: { caption: { required: true, type: String }, summaryLabel: { required: false, type: String }, columns: { required: true, type: Array }, jsonData: { required: true, type: Array } }, created: function() {
            var t2 = this, e2 = this.columns.map(function(e3) {
              return t2.isObject(e3) ? (e3.name = e3.name.toLowerCase(), e3.sortable && void 0 === e3.ascending && (e3.ascending = null), e3) : { name: e3.toLowerCase(), ascending: null };
            });
            this.parsedColumns = e2;
            for (var n2 = this.jsonData.length, r2 = 0; r2 < n2; r2++)
              for (var i2 in this.jsonData[r2])
                this.jsonData[r2].hasOwnProperty(i2) && (this.isObject(this.jsonData[r2][i2]) || (this.jsonData[r2][i2] = { value: this.jsonData[r2][i2], link: null }));
            this.rows = this.jsonData;
          }, computed: { footerColumns: function() {
            var t2 = this.columns;
            return t2.shift(), t2;
          } }, methods: { getAriaLabel: function(t2) {
            for (var e2 = [], n2 = 0, r2 = Object.entries(t2); n2 < r2.length; n2++) {
              var i2 = o()(r2[n2], 2), a2 = i2[0], s2 = i2[1];
              e2.push("".concat(a2, ": ").concat(s2.value));
            }
            return e2.join(", ");
          }, iconLabel: function(t2) {
            return true === t2 ? "ascending" : false === t2 ? "descending" : null === t2 ? "unsorted" : void 0;
          }, displayName: function(t2) {
            return t2.hasOwnProperty("display_name") ? t2.display_name : t2.name;
          }, sortTable: function(t2) {
            t2.ascending ? "number" === t2.datatype || "currency" === t2.datatype ? this.rows.sort(function(e2, n2) {
              return n2[t2.name].value - e2[t2.name].value;
            }) : "date" === t2.datatype ? this.rows.sort(function(e2, n2) {
              return new Date(n2[t2.name].value) - new Date(e2[t2.name].value);
            }) : this.rows.sort(function(e2, n2) {
              var r2 = e2[t2.name.toLowerCase()].value.toString().toLowerCase(), i2 = n2[t2.name.toLowerCase()].value.toString().toLowerCase();
              return r2 < i2 ? 1 : r2 > i2 ? -1 : 0;
            }) : "number" === t2.datatype || "currency" === t2.datatype ? this.rows.sort(function(e2, n2) {
              return e2[t2.name].value - n2[t2.name].value;
            }) : "date" === t2.datatype ? this.rows.sort(function(e2, n2) {
              return new Date(e2[t2.name].value) - new Date(n2[t2.name].value);
            }) : this.rows.sort(function(e2, n2) {
              var r2 = e2[t2.name.toLowerCase()].value.toString().toLowerCase(), i2 = n2[t2.name.toLowerCase()].value.toString().toLowerCase();
              return r2 < i2 ? -1 : r2 > i2 ? 1 : 0;
            }), t2.ascending = !t2.ascending, this.parsedColumns = this.parsedColumns.map(function(e2) {
              return t2.name != e2.name && (e2.ascending = null), e2;
            });
          }, isObject: function(t2) {
            return t2 && "object" === i()(t2) && t2.constructor === Object;
          }, isCurrency: function(t2) {
            return "currency" === t2;
          }, isNum: function(t2) {
            return "number" === t2;
          }, isLeft: function(t2) {
            return "left" === t2;
          }, isCenter: function(t2) {
            return "center" === t2;
          }, isRight: function(t2) {
            return "right" === t2;
          } } }, c = (n("7H6U"), n("KHd+")), u = n("gvHy"), l = n.n(u), f = Object(c.a)(s, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("table", { class: ["lux-data-table"], attrs: { border: "1px" } }, [n2("caption", [t2._v("\n    " + t2._s(t2.caption) + "\n  ")]), t2._v(" "), n2("thead", [n2("tr", t2._l(t2.parsedColumns, function(e3, r2) {
              return n2("th", { attrs: { scope: "col", nowrap: "" } }, [e3.sortable ? n2("input-button", { attrs: { type: "button", variation: "text" }, on: { "button-clicked": function(n3) {
                return t2.sortTable(e3);
              } } }, [e3.sortable ? n2("lux-icon-base", { attrs: { width: "16", height: "16", "icon-name": t2.iconLabel(e3.ascending) } }, [e3.ascending ? n2("lux-icon-ascending") : t2._e(), t2._v(" "), false === e3.ascending ? n2("lux-icon-descending") : t2._e(), t2._v(" "), null === e3.ascending ? n2("lux-icon-unsorted") : t2._e()], 1) : t2._e(), t2._v("\n          " + t2._s(t2.displayName(e3)))], 1) : n2("span", [t2._v(t2._s(t2.displayName(e3)))])], 1);
            }), 0)]), t2._v(" "), n2("tbody", t2._l(t2.rows, function(e3, r2) {
              return n2("tr", { staticClass: "row" }, t2._l(t2.parsedColumns, function(r3, i2) {
                return n2("td", { class: [{ "lux-data-table-left": t2.isLeft(r3.align) }, { "lux-data-table-center": t2.isCenter(r3.align) }, { "lux-data-table-right": t2.isRight(r3.align) }, { "lux-data-table-number": t2.isNum(r3.datatype) }, { "lux-data-table-currency": t2.isCurrency(r3.datatype) }] }, [r3.checkbox ? n2("input", { attrs: { id: e3[r3.name].value, type: "checkbox", "aria-label": t2.getAriaLabel(e3), name: r3.name }, domProps: { value: e3[r3.name].value } }) : n2("span", [e3[r3.name].link ? n2("hyperlink", { attrs: { href: e3[r3.name].link } }, [t2._v("\n            " + t2._s(e3[r3.name].value) + "\n          ")]) : n2("span", [t2._v("\n            " + t2._s(e3[r3.name].value) + "\n          ")])], 1)]);
              }), 0);
            }), 0), t2._v(" "), t2.summaryLabel ? n2("tfoot", [n2("tr", [n2("th", { attrs: { scope: "row" } }, [t2._v(t2._s(t2.summaryLabel))]), t2._v(" "), t2._l(t2.footerColumns, function(e3, r2) {
              return n2("td", { class: [{ "lux-data-table-left": t2.isLeft(e3.align) }, { "lux-data-table-center": t2.isCenter(e3.align) }, { "lux-data-table-right": t2.isRight(e3.align) }, { "lux-data-table-number": t2.isNum(e3.datatype) }, { "lux-data-table-currency": t2.isCurrency(e3.datatype) }] }, [n2("span", [t2._v("\n          " + t2._s(e3.summary_value) + "\n        ")])]);
            })], 2)]) : t2._e()]);
          }, [], false, null, "5c21905f", null);
          "function" == typeof l.a && l()(f);
          e.default = f.exports;
        }, mseA: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LoginForm", status: "prototype", release: "1.0.0", type: "Pattern", metaInfo: { title: "Form with validation", htmlAttrs: { lang: "en" } }, data: function() {
            return { errormessageEmail: "", errormessagePwd: "", emailValue: "", pwdValue: "", alert: false, alertStatus: "info", alertMessage: "Testing" };
          }, methods: { validate: function(t2) {
            "email" == t2.id && (this.emailValue = t2.value, /(.+)@(.+){2,}\.(.+){2,}/.test(t2.value) ? this.errormessageEmail = "" : this.errormessageEmail = "You need to supply an email."), "pwd" == t2.id && (this.pwdValue = t2.value, t2.value.length ? this.errormessagePwd = "" : this.errormessagePwd = "You need to supply a password.");
          }, showAlert: function(t2) {
            this.alertMessage = t2.alertMessage, this.alertStatus = t2.alertStatus, this.alert = true;
          } } }, i = n("KHd+"), a = n("w6ll"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("form", { attrs: { id: "app", novalidate: "true" } }, [t2.alert ? n2("alert", { attrs: { type: "alert", status: t2.alertStatus, autoclear: true } }, [t2._v(t2._s(t2.alertMessage))]) : t2._e(), t2._v(" "), n2("input-text", { attrs: { id: "email", errormessage: t2.errormessageEmail, value: t2.emailValue, label: "Email", placeholder: "Write your text" }, on: { inputblur: function(e3) {
              return t2.validate(e3);
            } } }), t2._v(" "), n2("input-text", { attrs: { id: "pwd", errormessage: t2.errormessagePwd, value: t2.pwdValue, label: "Password", placeholder: "Write your text" }, on: { inputblur: function(e3) {
              return t2.validate(e3);
            } } }), t2._v(" "), n2("input-button", { attrs: { customAlertEvent: { alertStatus: "success", alertMessage: "Successfully logged in!" }, type: "button", variation: "solid", block: "" }, on: { "system-alert": function(e3) {
              return t2.showAlert(e3);
            } } }, [t2._v("\n    Login\n  ")])], 1);
          }, [], false, null, "a47710dc", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, mxAO: function(t, e) {
        }, n1u2: function(t, e) {
        }, "o+Xd": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconDescending", status: "ready", release: "1.0.0", type: "Element" }, i = (n("QCEB"), n("KHd+")), a = n("gtuO"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("circle", { staticClass: "st0", attrs: { cx: "12", cy: "12", r: "2" } }), this._v(" "), e2("polygon", { staticClass: "st1", attrs: { points: "17.5,6.5 12,0.5 6.5,6.5 	" } }), this._v(" "), e2("polygon", { staticClass: "st2", attrs: { points: "6.5,17.5 12,23.5 17.5,17.5 	" } })]);
          }, [], false, null, "1502d3f3", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, o0o1: function(t, e, n) {
          t.exports = n("ls82");
        }, o1cF: function(t, e, n) {
          "use strict";
          var r = n("tCVW");
          n.n(r).a;
        }, oCYn: function(t, e, n) {
          "use strict";
          n.r(e), function(t2) {
            var n2 = Object.freeze({});
            function r(t3) {
              return null == t3;
            }
            function i(t3) {
              return null != t3;
            }
            function a(t3) {
              return true === t3;
            }
            function o(t3) {
              return "string" == typeof t3 || "number" == typeof t3 || "symbol" == typeof t3 || "boolean" == typeof t3;
            }
            function s(t3) {
              return null !== t3 && "object" == typeof t3;
            }
            var c = Object.prototype.toString;
            function u(t3) {
              return "[object Object]" === c.call(t3);
            }
            function l(t3) {
              return "[object RegExp]" === c.call(t3);
            }
            function f(t3) {
              var e2 = parseFloat(String(t3));
              return e2 >= 0 && Math.floor(e2) === e2 && isFinite(t3);
            }
            function d(t3) {
              return i(t3) && "function" == typeof t3.then && "function" == typeof t3.catch;
            }
            function p(t3) {
              return null == t3 ? "" : Array.isArray(t3) || u(t3) && t3.toString === c ? JSON.stringify(t3, null, 2) : String(t3);
            }
            function h(t3) {
              var e2 = parseFloat(t3);
              return isNaN(e2) ? t3 : e2;
            }
            function v(t3, e2) {
              for (var n3 = /* @__PURE__ */ Object.create(null), r2 = t3.split(","), i2 = 0; i2 < r2.length; i2++)
                n3[r2[i2]] = true;
              return e2 ? function(t4) {
                return n3[t4.toLowerCase()];
              } : function(t4) {
                return n3[t4];
              };
            }
            var m = v("slot,component", true), g = v("key,ref,slot,slot-scope,is");
            function y(t3, e2) {
              if (t3.length) {
                var n3 = t3.indexOf(e2);
                if (n3 > -1)
                  return t3.splice(n3, 1);
              }
            }
            var b = Object.prototype.hasOwnProperty;
            function _2(t3, e2) {
              return b.call(t3, e2);
            }
            function x(t3) {
              var e2 = /* @__PURE__ */ Object.create(null);
              return function(n3) {
                return e2[n3] || (e2[n3] = t3(n3));
              };
            }
            var w = /-(\w)/g, C = x(function(t3) {
              return t3.replace(w, function(t4, e2) {
                return e2 ? e2.toUpperCase() : "";
              });
            }), S = x(function(t3) {
              return t3.charAt(0).toUpperCase() + t3.slice(1);
            }), O = /\B([A-Z])/g, k = x(function(t3) {
              return t3.replace(O, "-$1").toLowerCase();
            });
            var M = Function.prototype.bind ? function(t3, e2) {
              return t3.bind(e2);
            } : function(t3, e2) {
              function n3(n4) {
                var r2 = arguments.length;
                return r2 ? r2 > 1 ? t3.apply(e2, arguments) : t3.call(e2, n4) : t3.call(e2);
              }
              return n3._length = t3.length, n3;
            };
            function D(t3, e2) {
              e2 = e2 || 0;
              for (var n3 = t3.length - e2, r2 = new Array(n3); n3--; )
                r2[n3] = t3[n3 + e2];
              return r2;
            }
            function j(t3, e2) {
              for (var n3 in e2)
                t3[n3] = e2[n3];
              return t3;
            }
            function L2(t3) {
              for (var e2 = {}, n3 = 0; n3 < t3.length; n3++)
                t3[n3] && j(e2, t3[n3]);
              return e2;
            }
            function E(t3, e2, n3) {
            }
            var A = function(t3, e2, n3) {
              return false;
            }, T = function(t3) {
              return t3;
            };
            function $2(t3, e2) {
              if (t3 === e2)
                return true;
              var n3 = s(t3), r2 = s(e2);
              if (!n3 || !r2)
                return !n3 && !r2 && String(t3) === String(e2);
              try {
                var i2 = Array.isArray(t3), a2 = Array.isArray(e2);
                if (i2 && a2)
                  return t3.length === e2.length && t3.every(function(t4, n4) {
                    return $2(t4, e2[n4]);
                  });
                if (t3 instanceof Date && e2 instanceof Date)
                  return t3.getTime() === e2.getTime();
                if (i2 || a2)
                  return false;
                var o2 = Object.keys(t3), c2 = Object.keys(e2);
                return o2.length === c2.length && o2.every(function(n4) {
                  return $2(t3[n4], e2[n4]);
                });
              } catch (t4) {
                return false;
              }
            }
            function I(t3, e2) {
              for (var n3 = 0; n3 < t3.length; n3++)
                if ($2(t3[n3], e2))
                  return n3;
              return -1;
            }
            function P(t3) {
              var e2 = false;
              return function() {
                e2 || (e2 = true, t3.apply(this, arguments));
              };
            }
            var z = ["component", "directive", "filter"], N = ["beforeCreate", "created", "beforeMount", "mounted", "beforeUpdate", "updated", "beforeDestroy", "destroyed", "activated", "deactivated", "errorCaptured", "serverPrefetch"], H = { optionMergeStrategies: /* @__PURE__ */ Object.create(null), silent: false, productionTip: false, devtools: false, performance: false, errorHandler: null, warnHandler: null, ignoredElements: [], keyCodes: /* @__PURE__ */ Object.create(null), isReservedTag: A, isReservedAttr: A, isUnknownElement: A, getTagNamespace: E, parsePlatformTagName: T, mustUseProp: A, async: true, _lifecycleHooks: N }, V = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
            function Y(t3) {
              var e2 = (t3 + "").charCodeAt(0);
              return 36 === e2 || 95 === e2;
            }
            function F(t3, e2, n3, r2) {
              Object.defineProperty(t3, e2, { value: n3, enumerable: !!r2, writable: true, configurable: true });
            }
            var R = new RegExp("[^" + V.source + ".$_\\d]");
            var B, W = "__proto__" in {}, U = "undefined" != typeof window, q = "undefined" != typeof WXEnvironment && !!WXEnvironment.platform, K = q && WXEnvironment.platform.toLowerCase(), X = U && window.navigator.userAgent.toLowerCase(), G = X && /msie|trident/.test(X), J = X && X.indexOf("msie 9.0") > 0, Q = X && X.indexOf("edge/") > 0, Z = (X && X.indexOf("android"), X && /iphone|ipad|ipod|ios/.test(X) || "ios" === K), tt = (X && /chrome\/\d+/.test(X), X && /phantomjs/.test(X), X && X.match(/firefox\/(\d+)/)), et = {}.watch, nt = false;
            if (U)
              try {
                var rt = {};
                Object.defineProperty(rt, "passive", { get: function() {
                  nt = true;
                } }), window.addEventListener("test-passive", null, rt);
              } catch (t3) {
              }
            var it = function() {
              return void 0 === B && (B = !U && !q && void 0 !== t2 && (t2.process && "server" === t2.process.env.VUE_ENV)), B;
            }, at = U && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
            function ot(t3) {
              return "function" == typeof t3 && /native code/.test(t3.toString());
            }
            var st, ct = "undefined" != typeof Symbol && ot(Symbol) && "undefined" != typeof Reflect && ot(Reflect.ownKeys);
            st = "undefined" != typeof Set && ot(Set) ? Set : function() {
              function t3() {
                this.set = /* @__PURE__ */ Object.create(null);
              }
              return t3.prototype.has = function(t4) {
                return true === this.set[t4];
              }, t3.prototype.add = function(t4) {
                this.set[t4] = true;
              }, t3.prototype.clear = function() {
                this.set = /* @__PURE__ */ Object.create(null);
              }, t3;
            }();
            var ut = E, lt = 0, ft = function() {
              this.id = lt++, this.subs = [];
            };
            ft.prototype.addSub = function(t3) {
              this.subs.push(t3);
            }, ft.prototype.removeSub = function(t3) {
              y(this.subs, t3);
            }, ft.prototype.depend = function() {
              ft.target && ft.target.addDep(this);
            }, ft.prototype.notify = function() {
              var t3 = this.subs.slice();
              for (var e2 = 0, n3 = t3.length; e2 < n3; e2++)
                t3[e2].update();
            }, ft.target = null;
            var dt = [];
            function pt(t3) {
              dt.push(t3), ft.target = t3;
            }
            function ht() {
              dt.pop(), ft.target = dt[dt.length - 1];
            }
            var vt = function(t3, e2, n3, r2, i2, a2, o2, s2) {
              this.tag = t3, this.data = e2, this.children = n3, this.text = r2, this.elm = i2, this.ns = void 0, this.context = a2, this.fnContext = void 0, this.fnOptions = void 0, this.fnScopeId = void 0, this.key = e2 && e2.key, this.componentOptions = o2, this.componentInstance = void 0, this.parent = void 0, this.raw = false, this.isStatic = false, this.isRootInsert = true, this.isComment = false, this.isCloned = false, this.isOnce = false, this.asyncFactory = s2, this.asyncMeta = void 0, this.isAsyncPlaceholder = false;
            }, mt = { child: { configurable: true } };
            mt.child.get = function() {
              return this.componentInstance;
            }, Object.defineProperties(vt.prototype, mt);
            var gt = function(t3) {
              void 0 === t3 && (t3 = "");
              var e2 = new vt();
              return e2.text = t3, e2.isComment = true, e2;
            };
            function yt(t3) {
              return new vt(void 0, void 0, void 0, String(t3));
            }
            function bt(t3) {
              var e2 = new vt(t3.tag, t3.data, t3.children && t3.children.slice(), t3.text, t3.elm, t3.context, t3.componentOptions, t3.asyncFactory);
              return e2.ns = t3.ns, e2.isStatic = t3.isStatic, e2.key = t3.key, e2.isComment = t3.isComment, e2.fnContext = t3.fnContext, e2.fnOptions = t3.fnOptions, e2.fnScopeId = t3.fnScopeId, e2.asyncMeta = t3.asyncMeta, e2.isCloned = true, e2;
            }
            var _t = Array.prototype, xt = Object.create(_t);
            ["push", "pop", "shift", "unshift", "splice", "sort", "reverse"].forEach(function(t3) {
              var e2 = _t[t3];
              F(xt, t3, function() {
                for (var n3 = [], r2 = arguments.length; r2--; )
                  n3[r2] = arguments[r2];
                var i2, a2 = e2.apply(this, n3), o2 = this.__ob__;
                switch (t3) {
                  case "push":
                  case "unshift":
                    i2 = n3;
                    break;
                  case "splice":
                    i2 = n3.slice(2);
                }
                return i2 && o2.observeArray(i2), o2.dep.notify(), a2;
              });
            });
            var wt = Object.getOwnPropertyNames(xt), Ct = true;
            function St(t3) {
              Ct = t3;
            }
            var Ot = function(t3) {
              this.value = t3, this.dep = new ft(), this.vmCount = 0, F(t3, "__ob__", this), Array.isArray(t3) ? (W ? function(t4, e2) {
                t4.__proto__ = e2;
              }(t3, xt) : function(t4, e2, n3) {
                for (var r2 = 0, i2 = n3.length; r2 < i2; r2++) {
                  var a2 = n3[r2];
                  F(t4, a2, e2[a2]);
                }
              }(t3, xt, wt), this.observeArray(t3)) : this.walk(t3);
            };
            function kt(t3, e2) {
              var n3;
              if (s(t3) && !(t3 instanceof vt))
                return _2(t3, "__ob__") && t3.__ob__ instanceof Ot ? n3 = t3.__ob__ : Ct && !it() && (Array.isArray(t3) || u(t3)) && Object.isExtensible(t3) && !t3._isVue && (n3 = new Ot(t3)), e2 && n3 && n3.vmCount++, n3;
            }
            function Mt(t3, e2, n3, r2, i2) {
              var a2 = new ft(), o2 = Object.getOwnPropertyDescriptor(t3, e2);
              if (!o2 || false !== o2.configurable) {
                var s2 = o2 && o2.get, c2 = o2 && o2.set;
                s2 && !c2 || 2 !== arguments.length || (n3 = t3[e2]);
                var u2 = !i2 && kt(n3);
                Object.defineProperty(t3, e2, { enumerable: true, configurable: true, get: function() {
                  var e3 = s2 ? s2.call(t3) : n3;
                  return ft.target && (a2.depend(), u2 && (u2.dep.depend(), Array.isArray(e3) && Lt(e3))), e3;
                }, set: function(e3) {
                  var r3 = s2 ? s2.call(t3) : n3;
                  e3 === r3 || e3 != e3 && r3 != r3 || s2 && !c2 || (c2 ? c2.call(t3, e3) : n3 = e3, u2 = !i2 && kt(e3), a2.notify());
                } });
              }
            }
            function Dt(t3, e2, n3) {
              if (Array.isArray(t3) && f(e2))
                return t3.length = Math.max(t3.length, e2), t3.splice(e2, 1, n3), n3;
              if (e2 in t3 && !(e2 in Object.prototype))
                return t3[e2] = n3, n3;
              var r2 = t3.__ob__;
              return t3._isVue || r2 && r2.vmCount ? n3 : r2 ? (Mt(r2.value, e2, n3), r2.dep.notify(), n3) : (t3[e2] = n3, n3);
            }
            function jt(t3, e2) {
              if (Array.isArray(t3) && f(e2))
                t3.splice(e2, 1);
              else {
                var n3 = t3.__ob__;
                t3._isVue || n3 && n3.vmCount || _2(t3, e2) && (delete t3[e2], n3 && n3.dep.notify());
              }
            }
            function Lt(t3) {
              for (var e2 = void 0, n3 = 0, r2 = t3.length; n3 < r2; n3++)
                (e2 = t3[n3]) && e2.__ob__ && e2.__ob__.dep.depend(), Array.isArray(e2) && Lt(e2);
            }
            Ot.prototype.walk = function(t3) {
              for (var e2 = Object.keys(t3), n3 = 0; n3 < e2.length; n3++)
                Mt(t3, e2[n3]);
            }, Ot.prototype.observeArray = function(t3) {
              for (var e2 = 0, n3 = t3.length; e2 < n3; e2++)
                kt(t3[e2]);
            };
            var Et = H.optionMergeStrategies;
            function At(t3, e2) {
              if (!e2)
                return t3;
              for (var n3, r2, i2, a2 = ct ? Reflect.ownKeys(e2) : Object.keys(e2), o2 = 0; o2 < a2.length; o2++)
                "__ob__" !== (n3 = a2[o2]) && (r2 = t3[n3], i2 = e2[n3], _2(t3, n3) ? r2 !== i2 && u(r2) && u(i2) && At(r2, i2) : Dt(t3, n3, i2));
              return t3;
            }
            function Tt(t3, e2, n3) {
              return n3 ? function() {
                var r2 = "function" == typeof e2 ? e2.call(n3, n3) : e2, i2 = "function" == typeof t3 ? t3.call(n3, n3) : t3;
                return r2 ? At(r2, i2) : i2;
              } : e2 ? t3 ? function() {
                return At("function" == typeof e2 ? e2.call(this, this) : e2, "function" == typeof t3 ? t3.call(this, this) : t3);
              } : e2 : t3;
            }
            function $t(t3, e2) {
              var n3 = e2 ? t3 ? t3.concat(e2) : Array.isArray(e2) ? e2 : [e2] : t3;
              return n3 ? function(t4) {
                for (var e3 = [], n4 = 0; n4 < t4.length; n4++)
                  -1 === e3.indexOf(t4[n4]) && e3.push(t4[n4]);
                return e3;
              }(n3) : n3;
            }
            function It(t3, e2, n3, r2) {
              var i2 = Object.create(t3 || null);
              return e2 ? j(i2, e2) : i2;
            }
            Et.data = function(t3, e2, n3) {
              return n3 ? Tt(t3, e2, n3) : e2 && "function" != typeof e2 ? t3 : Tt(t3, e2);
            }, N.forEach(function(t3) {
              Et[t3] = $t;
            }), z.forEach(function(t3) {
              Et[t3 + "s"] = It;
            }), Et.watch = function(t3, e2, n3, r2) {
              if (t3 === et && (t3 = void 0), e2 === et && (e2 = void 0), !e2)
                return Object.create(t3 || null);
              if (!t3)
                return e2;
              var i2 = {};
              for (var a2 in j(i2, t3), e2) {
                var o2 = i2[a2], s2 = e2[a2];
                o2 && !Array.isArray(o2) && (o2 = [o2]), i2[a2] = o2 ? o2.concat(s2) : Array.isArray(s2) ? s2 : [s2];
              }
              return i2;
            }, Et.props = Et.methods = Et.inject = Et.computed = function(t3, e2, n3, r2) {
              if (!t3)
                return e2;
              var i2 = /* @__PURE__ */ Object.create(null);
              return j(i2, t3), e2 && j(i2, e2), i2;
            }, Et.provide = Tt;
            var Pt = function(t3, e2) {
              return void 0 === e2 ? t3 : e2;
            };
            function zt(t3, e2, n3) {
              if ("function" == typeof e2 && (e2 = e2.options), function(t4, e3) {
                var n4 = t4.props;
                if (n4) {
                  var r3, i3, a3 = {};
                  if (Array.isArray(n4))
                    for (r3 = n4.length; r3--; )
                      "string" == typeof (i3 = n4[r3]) && (a3[C(i3)] = { type: null });
                  else if (u(n4))
                    for (var o3 in n4)
                      i3 = n4[o3], a3[C(o3)] = u(i3) ? i3 : { type: i3 };
                  else
                    0;
                  t4.props = a3;
                }
              }(e2), function(t4, e3) {
                var n4 = t4.inject;
                if (n4) {
                  var r3 = t4.inject = {};
                  if (Array.isArray(n4))
                    for (var i3 = 0; i3 < n4.length; i3++)
                      r3[n4[i3]] = { from: n4[i3] };
                  else if (u(n4))
                    for (var a3 in n4) {
                      var o3 = n4[a3];
                      r3[a3] = u(o3) ? j({ from: a3 }, o3) : { from: o3 };
                    }
                  else
                    0;
                }
              }(e2), function(t4) {
                var e3 = t4.directives;
                if (e3)
                  for (var n4 in e3) {
                    var r3 = e3[n4];
                    "function" == typeof r3 && (e3[n4] = { bind: r3, update: r3 });
                  }
              }(e2), !e2._base && (e2.extends && (t3 = zt(t3, e2.extends, n3)), e2.mixins))
                for (var r2 = 0, i2 = e2.mixins.length; r2 < i2; r2++)
                  t3 = zt(t3, e2.mixins[r2], n3);
              var a2, o2 = {};
              for (a2 in t3)
                s2(a2);
              for (a2 in e2)
                _2(t3, a2) || s2(a2);
              function s2(r3) {
                var i3 = Et[r3] || Pt;
                o2[r3] = i3(t3[r3], e2[r3], n3, r3);
              }
              return o2;
            }
            function Nt(t3, e2, n3, r2) {
              if ("string" == typeof n3) {
                var i2 = t3[e2];
                if (_2(i2, n3))
                  return i2[n3];
                var a2 = C(n3);
                if (_2(i2, a2))
                  return i2[a2];
                var o2 = S(a2);
                return _2(i2, o2) ? i2[o2] : i2[n3] || i2[a2] || i2[o2];
              }
            }
            function Ht(t3, e2, n3, r2) {
              var i2 = e2[t3], a2 = !_2(n3, t3), o2 = n3[t3], s2 = Rt(Boolean, i2.type);
              if (s2 > -1) {
                if (a2 && !_2(i2, "default"))
                  o2 = false;
                else if ("" === o2 || o2 === k(t3)) {
                  var c2 = Rt(String, i2.type);
                  (c2 < 0 || s2 < c2) && (o2 = true);
                }
              }
              if (void 0 === o2) {
                o2 = function(t4, e3, n4) {
                  if (!_2(e3, "default"))
                    return;
                  var r3 = e3.default;
                  0;
                  if (t4 && t4.$options.propsData && void 0 === t4.$options.propsData[n4] && void 0 !== t4._props[n4])
                    return t4._props[n4];
                  return "function" == typeof r3 && "Function" !== Yt(e3.type) ? r3.call(t4) : r3;
                }(r2, i2, t3);
                var u2 = Ct;
                St(true), kt(o2), St(u2);
              }
              return o2;
            }
            var Vt = /^\s*function (\w+)/;
            function Yt(t3) {
              var e2 = t3 && t3.toString().match(Vt);
              return e2 ? e2[1] : "";
            }
            function Ft(t3, e2) {
              return Yt(t3) === Yt(e2);
            }
            function Rt(t3, e2) {
              if (!Array.isArray(e2))
                return Ft(e2, t3) ? 0 : -1;
              for (var n3 = 0, r2 = e2.length; n3 < r2; n3++)
                if (Ft(e2[n3], t3))
                  return n3;
              return -1;
            }
            function Bt(t3, e2, n3) {
              pt();
              try {
                if (e2)
                  for (var r2 = e2; r2 = r2.$parent; ) {
                    var i2 = r2.$options.errorCaptured;
                    if (i2)
                      for (var a2 = 0; a2 < i2.length; a2++)
                        try {
                          if (false === i2[a2].call(r2, t3, e2, n3))
                            return;
                        } catch (t4) {
                          Ut(t4, r2, "errorCaptured hook");
                        }
                  }
                Ut(t3, e2, n3);
              } finally {
                ht();
              }
            }
            function Wt(t3, e2, n3, r2, i2) {
              var a2;
              try {
                (a2 = n3 ? t3.apply(e2, n3) : t3.call(e2)) && !a2._isVue && d(a2) && !a2._handled && (a2.catch(function(t4) {
                  return Bt(t4, r2, i2 + " (Promise/async)");
                }), a2._handled = true);
              } catch (t4) {
                Bt(t4, r2, i2);
              }
              return a2;
            }
            function Ut(t3, e2, n3) {
              if (H.errorHandler)
                try {
                  return H.errorHandler.call(null, t3, e2, n3);
                } catch (e3) {
                  e3 !== t3 && qt(e3, null, "config.errorHandler");
                }
              qt(t3, e2, n3);
            }
            function qt(t3, e2, n3) {
              if (!U && !q || "undefined" == typeof console)
                throw t3;
              console.error(t3);
            }
            var Kt, Xt = false, Gt = [], Jt = false;
            function Qt() {
              Jt = false;
              var t3 = Gt.slice(0);
              Gt.length = 0;
              for (var e2 = 0; e2 < t3.length; e2++)
                t3[e2]();
            }
            if ("undefined" != typeof Promise && ot(Promise)) {
              var Zt = Promise.resolve();
              Kt = function() {
                Zt.then(Qt), Z && setTimeout(E);
              }, Xt = true;
            } else if (G || "undefined" == typeof MutationObserver || !ot(MutationObserver) && "[object MutationObserverConstructor]" !== MutationObserver.toString())
              Kt = "undefined" != typeof setImmediate && ot(setImmediate) ? function() {
                setImmediate(Qt);
              } : function() {
                setTimeout(Qt, 0);
              };
            else {
              var te = 1, ee = new MutationObserver(Qt), ne = document.createTextNode(String(te));
              ee.observe(ne, { characterData: true }), Kt = function() {
                te = (te + 1) % 2, ne.data = String(te);
              }, Xt = true;
            }
            function re(t3, e2) {
              var n3;
              if (Gt.push(function() {
                if (t3)
                  try {
                    t3.call(e2);
                  } catch (t4) {
                    Bt(t4, e2, "nextTick");
                  }
                else
                  n3 && n3(e2);
              }), Jt || (Jt = true, Kt()), !t3 && "undefined" != typeof Promise)
                return new Promise(function(t4) {
                  n3 = t4;
                });
            }
            var ie = new st();
            function ae(t3) {
              !function t4(e2, n3) {
                var r2, i2, a2 = Array.isArray(e2);
                if (!a2 && !s(e2) || Object.isFrozen(e2) || e2 instanceof vt)
                  return;
                if (e2.__ob__) {
                  var o2 = e2.__ob__.dep.id;
                  if (n3.has(o2))
                    return;
                  n3.add(o2);
                }
                if (a2)
                  for (r2 = e2.length; r2--; )
                    t4(e2[r2], n3);
                else
                  for (i2 = Object.keys(e2), r2 = i2.length; r2--; )
                    t4(e2[i2[r2]], n3);
              }(t3, ie), ie.clear();
            }
            var oe = x(function(t3) {
              var e2 = "&" === t3.charAt(0), n3 = "~" === (t3 = e2 ? t3.slice(1) : t3).charAt(0), r2 = "!" === (t3 = n3 ? t3.slice(1) : t3).charAt(0);
              return { name: t3 = r2 ? t3.slice(1) : t3, once: n3, capture: r2, passive: e2 };
            });
            function se(t3, e2) {
              function n3() {
                var t4 = arguments, r2 = n3.fns;
                if (!Array.isArray(r2))
                  return Wt(r2, null, arguments, e2, "v-on handler");
                for (var i2 = r2.slice(), a2 = 0; a2 < i2.length; a2++)
                  Wt(i2[a2], null, t4, e2, "v-on handler");
              }
              return n3.fns = t3, n3;
            }
            function ce(t3, e2, n3, i2, o2, s2) {
              var c2, u2, l2, f2;
              for (c2 in t3)
                u2 = t3[c2], l2 = e2[c2], f2 = oe(c2), r(u2) || (r(l2) ? (r(u2.fns) && (u2 = t3[c2] = se(u2, s2)), a(f2.once) && (u2 = t3[c2] = o2(f2.name, u2, f2.capture)), n3(f2.name, u2, f2.capture, f2.passive, f2.params)) : u2 !== l2 && (l2.fns = u2, t3[c2] = l2));
              for (c2 in e2)
                r(t3[c2]) && i2((f2 = oe(c2)).name, e2[c2], f2.capture);
            }
            function ue(t3, e2, n3) {
              var o2;
              t3 instanceof vt && (t3 = t3.data.hook || (t3.data.hook = {}));
              var s2 = t3[e2];
              function c2() {
                n3.apply(this, arguments), y(o2.fns, c2);
              }
              r(s2) ? o2 = se([c2]) : i(s2.fns) && a(s2.merged) ? (o2 = s2).fns.push(c2) : o2 = se([s2, c2]), o2.merged = true, t3[e2] = o2;
            }
            function le(t3, e2, n3, r2, a2) {
              if (i(e2)) {
                if (_2(e2, n3))
                  return t3[n3] = e2[n3], a2 || delete e2[n3], true;
                if (_2(e2, r2))
                  return t3[n3] = e2[r2], a2 || delete e2[r2], true;
              }
              return false;
            }
            function fe(t3) {
              return o(t3) ? [yt(t3)] : Array.isArray(t3) ? function t4(e2, n3) {
                var s2, c2, u2, l2, f2 = [];
                for (s2 = 0; s2 < e2.length; s2++)
                  r(c2 = e2[s2]) || "boolean" == typeof c2 || (u2 = f2.length - 1, l2 = f2[u2], Array.isArray(c2) ? c2.length > 0 && (de((c2 = t4(c2, (n3 || "") + "_" + s2))[0]) && de(l2) && (f2[u2] = yt(l2.text + c2[0].text), c2.shift()), f2.push.apply(f2, c2)) : o(c2) ? de(l2) ? f2[u2] = yt(l2.text + c2) : "" !== c2 && f2.push(yt(c2)) : de(c2) && de(l2) ? f2[u2] = yt(l2.text + c2.text) : (a(e2._isVList) && i(c2.tag) && r(c2.key) && i(n3) && (c2.key = "__vlist" + n3 + "_" + s2 + "__"), f2.push(c2)));
                return f2;
              }(t3) : void 0;
            }
            function de(t3) {
              return i(t3) && i(t3.text) && false === t3.isComment;
            }
            function pe(t3, e2) {
              if (t3) {
                for (var n3 = /* @__PURE__ */ Object.create(null), r2 = ct ? Reflect.ownKeys(t3) : Object.keys(t3), i2 = 0; i2 < r2.length; i2++) {
                  var a2 = r2[i2];
                  if ("__ob__" !== a2) {
                    for (var o2 = t3[a2].from, s2 = e2; s2; ) {
                      if (s2._provided && _2(s2._provided, o2)) {
                        n3[a2] = s2._provided[o2];
                        break;
                      }
                      s2 = s2.$parent;
                    }
                    if (!s2)
                      if ("default" in t3[a2]) {
                        var c2 = t3[a2].default;
                        n3[a2] = "function" == typeof c2 ? c2.call(e2) : c2;
                      } else
                        0;
                  }
                }
                return n3;
              }
            }
            function he(t3, e2) {
              if (!t3 || !t3.length)
                return {};
              for (var n3 = {}, r2 = 0, i2 = t3.length; r2 < i2; r2++) {
                var a2 = t3[r2], o2 = a2.data;
                if (o2 && o2.attrs && o2.attrs.slot && delete o2.attrs.slot, a2.context !== e2 && a2.fnContext !== e2 || !o2 || null == o2.slot)
                  (n3.default || (n3.default = [])).push(a2);
                else {
                  var s2 = o2.slot, c2 = n3[s2] || (n3[s2] = []);
                  "template" === a2.tag ? c2.push.apply(c2, a2.children || []) : c2.push(a2);
                }
              }
              for (var u2 in n3)
                n3[u2].every(ve) && delete n3[u2];
              return n3;
            }
            function ve(t3) {
              return t3.isComment && !t3.asyncFactory || " " === t3.text;
            }
            function me(t3) {
              return t3.isComment && t3.asyncFactory;
            }
            function ge(t3, e2, r2) {
              var i2, a2 = Object.keys(e2).length > 0, o2 = t3 ? !!t3.$stable : !a2, s2 = t3 && t3.$key;
              if (t3) {
                if (t3._normalized)
                  return t3._normalized;
                if (o2 && r2 && r2 !== n2 && s2 === r2.$key && !a2 && !r2.$hasNormal)
                  return r2;
                for (var c2 in i2 = {}, t3)
                  t3[c2] && "$" !== c2[0] && (i2[c2] = ye(e2, c2, t3[c2]));
              } else
                i2 = {};
              for (var u2 in e2)
                u2 in i2 || (i2[u2] = be(e2, u2));
              return t3 && Object.isExtensible(t3) && (t3._normalized = i2), F(i2, "$stable", o2), F(i2, "$key", s2), F(i2, "$hasNormal", a2), i2;
            }
            function ye(t3, e2, n3) {
              var r2 = function() {
                var t4 = arguments.length ? n3.apply(null, arguments) : n3({}), e3 = (t4 = t4 && "object" == typeof t4 && !Array.isArray(t4) ? [t4] : fe(t4)) && t4[0];
                return t4 && (!e3 || 1 === t4.length && e3.isComment && !me(e3)) ? void 0 : t4;
              };
              return n3.proxy && Object.defineProperty(t3, e2, { get: r2, enumerable: true, configurable: true }), r2;
            }
            function be(t3, e2) {
              return function() {
                return t3[e2];
              };
            }
            function _e(t3, e2) {
              var n3, r2, a2, o2, c2;
              if (Array.isArray(t3) || "string" == typeof t3)
                for (n3 = new Array(t3.length), r2 = 0, a2 = t3.length; r2 < a2; r2++)
                  n3[r2] = e2(t3[r2], r2);
              else if ("number" == typeof t3)
                for (n3 = new Array(t3), r2 = 0; r2 < t3; r2++)
                  n3[r2] = e2(r2 + 1, r2);
              else if (s(t3))
                if (ct && t3[Symbol.iterator]) {
                  n3 = [];
                  for (var u2 = t3[Symbol.iterator](), l2 = u2.next(); !l2.done; )
                    n3.push(e2(l2.value, n3.length)), l2 = u2.next();
                } else
                  for (o2 = Object.keys(t3), n3 = new Array(o2.length), r2 = 0, a2 = o2.length; r2 < a2; r2++)
                    c2 = o2[r2], n3[r2] = e2(t3[c2], c2, r2);
              return i(n3) || (n3 = []), n3._isVList = true, n3;
            }
            function xe(t3, e2, n3, r2) {
              var i2, a2 = this.$scopedSlots[t3];
              a2 ? (n3 = n3 || {}, r2 && (n3 = j(j({}, r2), n3)), i2 = a2(n3) || ("function" == typeof e2 ? e2() : e2)) : i2 = this.$slots[t3] || ("function" == typeof e2 ? e2() : e2);
              var o2 = n3 && n3.slot;
              return o2 ? this.$createElement("template", { slot: o2 }, i2) : i2;
            }
            function we(t3) {
              return Nt(this.$options, "filters", t3) || T;
            }
            function Ce(t3, e2) {
              return Array.isArray(t3) ? -1 === t3.indexOf(e2) : t3 !== e2;
            }
            function Se(t3, e2, n3, r2, i2) {
              var a2 = H.keyCodes[e2] || n3;
              return i2 && r2 && !H.keyCodes[e2] ? Ce(i2, r2) : a2 ? Ce(a2, t3) : r2 ? k(r2) !== e2 : void 0 === t3;
            }
            function Oe(t3, e2, n3, r2, i2) {
              if (n3)
                if (s(n3)) {
                  var a2;
                  Array.isArray(n3) && (n3 = L2(n3));
                  var o2 = function(o3) {
                    if ("class" === o3 || "style" === o3 || g(o3))
                      a2 = t3;
                    else {
                      var s2 = t3.attrs && t3.attrs.type;
                      a2 = r2 || H.mustUseProp(e2, s2, o3) ? t3.domProps || (t3.domProps = {}) : t3.attrs || (t3.attrs = {});
                    }
                    var c3 = C(o3), u2 = k(o3);
                    c3 in a2 || u2 in a2 || (a2[o3] = n3[o3], i2 && ((t3.on || (t3.on = {}))["update:" + o3] = function(t4) {
                      n3[o3] = t4;
                    }));
                  };
                  for (var c2 in n3)
                    o2(c2);
                } else
                  ;
              return t3;
            }
            function ke(t3, e2) {
              var n3 = this._staticTrees || (this._staticTrees = []), r2 = n3[t3];
              return r2 && !e2 || De(r2 = n3[t3] = this.$options.staticRenderFns[t3].call(this._renderProxy, null, this), "__static__" + t3, false), r2;
            }
            function Me(t3, e2, n3) {
              return De(t3, "__once__" + e2 + (n3 ? "_" + n3 : ""), true), t3;
            }
            function De(t3, e2, n3) {
              if (Array.isArray(t3))
                for (var r2 = 0; r2 < t3.length; r2++)
                  t3[r2] && "string" != typeof t3[r2] && je(t3[r2], e2 + "_" + r2, n3);
              else
                je(t3, e2, n3);
            }
            function je(t3, e2, n3) {
              t3.isStatic = true, t3.key = e2, t3.isOnce = n3;
            }
            function Le(t3, e2) {
              if (e2)
                if (u(e2)) {
                  var n3 = t3.on = t3.on ? j({}, t3.on) : {};
                  for (var r2 in e2) {
                    var i2 = n3[r2], a2 = e2[r2];
                    n3[r2] = i2 ? [].concat(i2, a2) : a2;
                  }
                } else
                  ;
              return t3;
            }
            function Ee(t3, e2, n3, r2) {
              e2 = e2 || { $stable: !n3 };
              for (var i2 = 0; i2 < t3.length; i2++) {
                var a2 = t3[i2];
                Array.isArray(a2) ? Ee(a2, e2, n3) : a2 && (a2.proxy && (a2.fn.proxy = true), e2[a2.key] = a2.fn);
              }
              return r2 && (e2.$key = r2), e2;
            }
            function Ae(t3, e2) {
              for (var n3 = 0; n3 < e2.length; n3 += 2) {
                var r2 = e2[n3];
                "string" == typeof r2 && r2 && (t3[e2[n3]] = e2[n3 + 1]);
              }
              return t3;
            }
            function Te(t3, e2) {
              return "string" == typeof t3 ? e2 + t3 : t3;
            }
            function $e(t3) {
              t3._o = Me, t3._n = h, t3._s = p, t3._l = _e, t3._t = xe, t3._q = $2, t3._i = I, t3._m = ke, t3._f = we, t3._k = Se, t3._b = Oe, t3._v = yt, t3._e = gt, t3._u = Ee, t3._g = Le, t3._d = Ae, t3._p = Te;
            }
            function Ie(t3, e2, r2, i2, o2) {
              var s2, c2 = this, u2 = o2.options;
              _2(i2, "_uid") ? (s2 = Object.create(i2))._original = i2 : (s2 = i2, i2 = i2._original);
              var l2 = a(u2._compiled), f2 = !l2;
              this.data = t3, this.props = e2, this.children = r2, this.parent = i2, this.listeners = t3.on || n2, this.injections = pe(u2.inject, i2), this.slots = function() {
                return c2.$slots || ge(t3.scopedSlots, c2.$slots = he(r2, i2)), c2.$slots;
              }, Object.defineProperty(this, "scopedSlots", { enumerable: true, get: function() {
                return ge(t3.scopedSlots, this.slots());
              } }), l2 && (this.$options = u2, this.$slots = this.slots(), this.$scopedSlots = ge(t3.scopedSlots, this.$slots)), u2._scopeId ? this._c = function(t4, e3, n3, r3) {
                var a2 = Fe(s2, t4, e3, n3, r3, f2);
                return a2 && !Array.isArray(a2) && (a2.fnScopeId = u2._scopeId, a2.fnContext = i2), a2;
              } : this._c = function(t4, e3, n3, r3) {
                return Fe(s2, t4, e3, n3, r3, f2);
              };
            }
            function Pe(t3, e2, n3, r2, i2) {
              var a2 = bt(t3);
              return a2.fnContext = n3, a2.fnOptions = r2, e2.slot && ((a2.data || (a2.data = {})).slot = e2.slot), a2;
            }
            function ze(t3, e2) {
              for (var n3 in e2)
                t3[C(n3)] = e2[n3];
            }
            $e(Ie.prototype);
            var Ne = { init: function(t3, e2) {
              if (t3.componentInstance && !t3.componentInstance._isDestroyed && t3.data.keepAlive) {
                var n3 = t3;
                Ne.prepatch(n3, n3);
              } else {
                (t3.componentInstance = function(t4, e3) {
                  var n4 = { _isComponent: true, _parentVnode: t4, parent: e3 }, r2 = t4.data.inlineTemplate;
                  i(r2) && (n4.render = r2.render, n4.staticRenderFns = r2.staticRenderFns);
                  return new t4.componentOptions.Ctor(n4);
                }(t3, Je)).$mount(e2 ? t3.elm : void 0, e2);
              }
            }, prepatch: function(t3, e2) {
              var r2 = e2.componentOptions;
              !function(t4, e3, r3, i2, a2) {
                0;
                var o2 = i2.data.scopedSlots, s2 = t4.$scopedSlots, c2 = !!(o2 && !o2.$stable || s2 !== n2 && !s2.$stable || o2 && t4.$scopedSlots.$key !== o2.$key || !o2 && t4.$scopedSlots.$key), u2 = !!(a2 || t4.$options._renderChildren || c2);
                t4.$options._parentVnode = i2, t4.$vnode = i2, t4._vnode && (t4._vnode.parent = i2);
                if (t4.$options._renderChildren = a2, t4.$attrs = i2.data.attrs || n2, t4.$listeners = r3 || n2, e3 && t4.$options.props) {
                  St(false);
                  for (var l2 = t4._props, f2 = t4.$options._propKeys || [], d2 = 0; d2 < f2.length; d2++) {
                    var p2 = f2[d2], h2 = t4.$options.props;
                    l2[p2] = Ht(p2, h2, e3, t4);
                  }
                  St(true), t4.$options.propsData = e3;
                }
                r3 = r3 || n2;
                var v2 = t4.$options._parentListeners;
                t4.$options._parentListeners = r3, Ge(t4, r3, v2), u2 && (t4.$slots = he(a2, i2.context), t4.$forceUpdate());
                0;
              }(e2.componentInstance = t3.componentInstance, r2.propsData, r2.listeners, e2, r2.children);
            }, insert: function(t3) {
              var e2, n3 = t3.context, r2 = t3.componentInstance;
              r2._isMounted || (r2._isMounted = true, en(r2, "mounted")), t3.data.keepAlive && (n3._isMounted ? ((e2 = r2)._inactive = false, rn.push(e2)) : tn(r2, true));
            }, destroy: function(t3) {
              var e2 = t3.componentInstance;
              e2._isDestroyed || (t3.data.keepAlive ? function t4(e3, n3) {
                if (n3 && (e3._directInactive = true, Ze(e3)))
                  return;
                if (!e3._inactive) {
                  e3._inactive = true;
                  for (var r2 = 0; r2 < e3.$children.length; r2++)
                    t4(e3.$children[r2]);
                  en(e3, "deactivated");
                }
              }(e2, true) : e2.$destroy());
            } }, He = Object.keys(Ne);
            function Ve(t3, e2, o2, c2, u2) {
              if (!r(t3)) {
                var l2 = o2.$options._base;
                if (s(t3) && (t3 = l2.extend(t3)), "function" == typeof t3) {
                  var f2;
                  if (r(t3.cid) && void 0 === (t3 = function(t4, e3) {
                    if (a(t4.error) && i(t4.errorComp))
                      return t4.errorComp;
                    if (i(t4.resolved))
                      return t4.resolved;
                    var n3 = Be;
                    n3 && i(t4.owners) && -1 === t4.owners.indexOf(n3) && t4.owners.push(n3);
                    if (a(t4.loading) && i(t4.loadingComp))
                      return t4.loadingComp;
                    if (n3 && !i(t4.owners)) {
                      var o3 = t4.owners = [n3], c3 = true, u3 = null, l3 = null;
                      n3.$on("hook:destroyed", function() {
                        return y(o3, n3);
                      });
                      var f3 = function(t5) {
                        for (var e4 = 0, n4 = o3.length; e4 < n4; e4++)
                          o3[e4].$forceUpdate();
                        t5 && (o3.length = 0, null !== u3 && (clearTimeout(u3), u3 = null), null !== l3 && (clearTimeout(l3), l3 = null));
                      }, p3 = P(function(n4) {
                        t4.resolved = We(n4, e3), c3 ? o3.length = 0 : f3(true);
                      }), h3 = P(function(e4) {
                        i(t4.errorComp) && (t4.error = true, f3(true));
                      }), v3 = t4(p3, h3);
                      return s(v3) && (d(v3) ? r(t4.resolved) && v3.then(p3, h3) : d(v3.component) && (v3.component.then(p3, h3), i(v3.error) && (t4.errorComp = We(v3.error, e3)), i(v3.loading) && (t4.loadingComp = We(v3.loading, e3), 0 === v3.delay ? t4.loading = true : u3 = setTimeout(function() {
                        u3 = null, r(t4.resolved) && r(t4.error) && (t4.loading = true, f3(false));
                      }, v3.delay || 200)), i(v3.timeout) && (l3 = setTimeout(function() {
                        l3 = null, r(t4.resolved) && h3(null);
                      }, v3.timeout)))), c3 = false, t4.loading ? t4.loadingComp : t4.resolved;
                    }
                  }(f2 = t3, l2)))
                    return function(t4, e3, n3, r2, i2) {
                      var a2 = gt();
                      return a2.asyncFactory = t4, a2.asyncMeta = { data: e3, context: n3, children: r2, tag: i2 }, a2;
                    }(f2, e2, o2, c2, u2);
                  e2 = e2 || {}, Sn(t3), i(e2.model) && function(t4, e3) {
                    var n3 = t4.model && t4.model.prop || "value", r2 = t4.model && t4.model.event || "input";
                    (e3.attrs || (e3.attrs = {}))[n3] = e3.model.value;
                    var a2 = e3.on || (e3.on = {}), o3 = a2[r2], s2 = e3.model.callback;
                    i(o3) ? (Array.isArray(o3) ? -1 === o3.indexOf(s2) : o3 !== s2) && (a2[r2] = [s2].concat(o3)) : a2[r2] = s2;
                  }(t3.options, e2);
                  var p2 = function(t4, e3, n3) {
                    var a2 = e3.options.props;
                    if (!r(a2)) {
                      var o3 = {}, s2 = t4.attrs, c3 = t4.props;
                      if (i(s2) || i(c3))
                        for (var u3 in a2) {
                          var l3 = k(u3);
                          le(o3, c3, u3, l3, true) || le(o3, s2, u3, l3, false);
                        }
                      return o3;
                    }
                  }(e2, t3);
                  if (a(t3.options.functional))
                    return function(t4, e3, r2, a2, o3) {
                      var s2 = t4.options, c3 = {}, u3 = s2.props;
                      if (i(u3))
                        for (var l3 in u3)
                          c3[l3] = Ht(l3, u3, e3 || n2);
                      else
                        i(r2.attrs) && ze(c3, r2.attrs), i(r2.props) && ze(c3, r2.props);
                      var f3 = new Ie(r2, c3, o3, a2, t4), d2 = s2.render.call(null, f3._c, f3);
                      if (d2 instanceof vt)
                        return Pe(d2, r2, f3.parent, s2, f3);
                      if (Array.isArray(d2)) {
                        for (var p3 = fe(d2) || [], h3 = new Array(p3.length), v3 = 0; v3 < p3.length; v3++)
                          h3[v3] = Pe(p3[v3], r2, f3.parent, s2, f3);
                        return h3;
                      }
                    }(t3, p2, e2, o2, c2);
                  var h2 = e2.on;
                  if (e2.on = e2.nativeOn, a(t3.options.abstract)) {
                    var v2 = e2.slot;
                    e2 = {}, v2 && (e2.slot = v2);
                  }
                  !function(t4) {
                    for (var e3 = t4.hook || (t4.hook = {}), n3 = 0; n3 < He.length; n3++) {
                      var r2 = He[n3], i2 = e3[r2], a2 = Ne[r2];
                      i2 === a2 || i2 && i2._merged || (e3[r2] = i2 ? Ye(a2, i2) : a2);
                    }
                  }(e2);
                  var m2 = t3.options.name || u2;
                  return new vt("vue-component-" + t3.cid + (m2 ? "-" + m2 : ""), e2, void 0, void 0, void 0, o2, { Ctor: t3, propsData: p2, listeners: h2, tag: u2, children: c2 }, f2);
                }
              }
            }
            function Ye(t3, e2) {
              var n3 = function(n4, r2) {
                t3(n4, r2), e2(n4, r2);
              };
              return n3._merged = true, n3;
            }
            function Fe(t3, e2, n3, c2, u2, l2) {
              return (Array.isArray(n3) || o(n3)) && (u2 = c2, c2 = n3, n3 = void 0), a(l2) && (u2 = 2), function(t4, e3, n4, o2, c3) {
                if (i(n4) && i(n4.__ob__))
                  return gt();
                i(n4) && i(n4.is) && (e3 = n4.is);
                if (!e3)
                  return gt();
                0;
                Array.isArray(o2) && "function" == typeof o2[0] && ((n4 = n4 || {}).scopedSlots = { default: o2[0] }, o2.length = 0);
                2 === c3 ? o2 = fe(o2) : 1 === c3 && (o2 = function(t5) {
                  for (var e4 = 0; e4 < t5.length; e4++)
                    if (Array.isArray(t5[e4]))
                      return Array.prototype.concat.apply([], t5);
                  return t5;
                }(o2));
                var u3, l3;
                if ("string" == typeof e3) {
                  var f2;
                  l3 = t4.$vnode && t4.$vnode.ns || H.getTagNamespace(e3), u3 = H.isReservedTag(e3) ? new vt(H.parsePlatformTagName(e3), n4, o2, void 0, void 0, t4) : n4 && n4.pre || !i(f2 = Nt(t4.$options, "components", e3)) ? new vt(e3, n4, o2, void 0, void 0, t4) : Ve(f2, n4, t4, o2, e3);
                } else
                  u3 = Ve(e3, n4, t4, o2);
                return Array.isArray(u3) ? u3 : i(u3) ? (i(l3) && function t5(e4, n5, o3) {
                  e4.ns = n5, "foreignObject" === e4.tag && (n5 = void 0, o3 = true);
                  if (i(e4.children))
                    for (var s2 = 0, c4 = e4.children.length; s2 < c4; s2++) {
                      var u4 = e4.children[s2];
                      i(u4.tag) && (r(u4.ns) || a(o3) && "svg" !== u4.tag) && t5(u4, n5, o3);
                    }
                }(u3, l3), i(n4) && function(t5) {
                  s(t5.style) && ae(t5.style);
                  s(t5.class) && ae(t5.class);
                }(n4), u3) : gt();
              }(t3, e2, n3, c2, u2);
            }
            var Re, Be = null;
            function We(t3, e2) {
              return (t3.__esModule || ct && "Module" === t3[Symbol.toStringTag]) && (t3 = t3.default), s(t3) ? e2.extend(t3) : t3;
            }
            function Ue(t3) {
              if (Array.isArray(t3))
                for (var e2 = 0; e2 < t3.length; e2++) {
                  var n3 = t3[e2];
                  if (i(n3) && (i(n3.componentOptions) || me(n3)))
                    return n3;
                }
            }
            function qe(t3, e2) {
              Re.$on(t3, e2);
            }
            function Ke(t3, e2) {
              Re.$off(t3, e2);
            }
            function Xe(t3, e2) {
              var n3 = Re;
              return function r2() {
                var i2 = e2.apply(null, arguments);
                null !== i2 && n3.$off(t3, r2);
              };
            }
            function Ge(t3, e2, n3) {
              Re = t3, ce(e2, n3 || {}, qe, Ke, Xe, t3), Re = void 0;
            }
            var Je = null;
            function Qe(t3) {
              var e2 = Je;
              return Je = t3, function() {
                Je = e2;
              };
            }
            function Ze(t3) {
              for (; t3 && (t3 = t3.$parent); )
                if (t3._inactive)
                  return true;
              return false;
            }
            function tn(t3, e2) {
              if (e2) {
                if (t3._directInactive = false, Ze(t3))
                  return;
              } else if (t3._directInactive)
                return;
              if (t3._inactive || null === t3._inactive) {
                t3._inactive = false;
                for (var n3 = 0; n3 < t3.$children.length; n3++)
                  tn(t3.$children[n3]);
                en(t3, "activated");
              }
            }
            function en(t3, e2) {
              pt();
              var n3 = t3.$options[e2], r2 = e2 + " hook";
              if (n3)
                for (var i2 = 0, a2 = n3.length; i2 < a2; i2++)
                  Wt(n3[i2], t3, null, t3, r2);
              t3._hasHookEvent && t3.$emit("hook:" + e2), ht();
            }
            var nn = [], rn = [], an = {}, on = false, sn = false, cn = 0;
            var un = 0, ln = Date.now;
            if (U && !G) {
              var fn = window.performance;
              fn && "function" == typeof fn.now && ln() > document.createEvent("Event").timeStamp && (ln = function() {
                return fn.now();
              });
            }
            function dn() {
              var t3, e2;
              for (un = ln(), sn = true, nn.sort(function(t4, e3) {
                return t4.id - e3.id;
              }), cn = 0; cn < nn.length; cn++)
                (t3 = nn[cn]).before && t3.before(), e2 = t3.id, an[e2] = null, t3.run();
              var n3 = rn.slice(), r2 = nn.slice();
              cn = nn.length = rn.length = 0, an = {}, on = sn = false, function(t4) {
                for (var e3 = 0; e3 < t4.length; e3++)
                  t4[e3]._inactive = true, tn(t4[e3], true);
              }(n3), function(t4) {
                var e3 = t4.length;
                for (; e3--; ) {
                  var n4 = t4[e3], r3 = n4.vm;
                  r3._watcher === n4 && r3._isMounted && !r3._isDestroyed && en(r3, "updated");
                }
              }(r2), at && H.devtools && at.emit("flush");
            }
            var pn = 0, hn = function(t3, e2, n3, r2, i2) {
              this.vm = t3, i2 && (t3._watcher = this), t3._watchers.push(this), r2 ? (this.deep = !!r2.deep, this.user = !!r2.user, this.lazy = !!r2.lazy, this.sync = !!r2.sync, this.before = r2.before) : this.deep = this.user = this.lazy = this.sync = false, this.cb = n3, this.id = ++pn, this.active = true, this.dirty = this.lazy, this.deps = [], this.newDeps = [], this.depIds = new st(), this.newDepIds = new st(), this.expression = "", "function" == typeof e2 ? this.getter = e2 : (this.getter = function(t4) {
                if (!R.test(t4)) {
                  var e3 = t4.split(".");
                  return function(t5) {
                    for (var n4 = 0; n4 < e3.length; n4++) {
                      if (!t5)
                        return;
                      t5 = t5[e3[n4]];
                    }
                    return t5;
                  };
                }
              }(e2), this.getter || (this.getter = E)), this.value = this.lazy ? void 0 : this.get();
            };
            hn.prototype.get = function() {
              var t3;
              pt(this);
              var e2 = this.vm;
              try {
                t3 = this.getter.call(e2, e2);
              } catch (t4) {
                if (!this.user)
                  throw t4;
                Bt(t4, e2, 'getter for watcher "' + this.expression + '"');
              } finally {
                this.deep && ae(t3), ht(), this.cleanupDeps();
              }
              return t3;
            }, hn.prototype.addDep = function(t3) {
              var e2 = t3.id;
              this.newDepIds.has(e2) || (this.newDepIds.add(e2), this.newDeps.push(t3), this.depIds.has(e2) || t3.addSub(this));
            }, hn.prototype.cleanupDeps = function() {
              for (var t3 = this.deps.length; t3--; ) {
                var e2 = this.deps[t3];
                this.newDepIds.has(e2.id) || e2.removeSub(this);
              }
              var n3 = this.depIds;
              this.depIds = this.newDepIds, this.newDepIds = n3, this.newDepIds.clear(), n3 = this.deps, this.deps = this.newDeps, this.newDeps = n3, this.newDeps.length = 0;
            }, hn.prototype.update = function() {
              this.lazy ? this.dirty = true : this.sync ? this.run() : function(t3) {
                var e2 = t3.id;
                if (null == an[e2]) {
                  if (an[e2] = true, sn) {
                    for (var n3 = nn.length - 1; n3 > cn && nn[n3].id > t3.id; )
                      n3--;
                    nn.splice(n3 + 1, 0, t3);
                  } else
                    nn.push(t3);
                  on || (on = true, re(dn));
                }
              }(this);
            }, hn.prototype.run = function() {
              if (this.active) {
                var t3 = this.get();
                if (t3 !== this.value || s(t3) || this.deep) {
                  var e2 = this.value;
                  if (this.value = t3, this.user) {
                    var n3 = 'callback for watcher "' + this.expression + '"';
                    Wt(this.cb, this.vm, [t3, e2], this.vm, n3);
                  } else
                    this.cb.call(this.vm, t3, e2);
                }
              }
            }, hn.prototype.evaluate = function() {
              this.value = this.get(), this.dirty = false;
            }, hn.prototype.depend = function() {
              for (var t3 = this.deps.length; t3--; )
                this.deps[t3].depend();
            }, hn.prototype.teardown = function() {
              if (this.active) {
                this.vm._isBeingDestroyed || y(this.vm._watchers, this);
                for (var t3 = this.deps.length; t3--; )
                  this.deps[t3].removeSub(this);
                this.active = false;
              }
            };
            var vn = { enumerable: true, configurable: true, get: E, set: E };
            function mn(t3, e2, n3) {
              vn.get = function() {
                return this[e2][n3];
              }, vn.set = function(t4) {
                this[e2][n3] = t4;
              }, Object.defineProperty(t3, n3, vn);
            }
            function gn(t3) {
              t3._watchers = [];
              var e2 = t3.$options;
              e2.props && function(t4, e3) {
                var n3 = t4.$options.propsData || {}, r2 = t4._props = {}, i2 = t4.$options._propKeys = [];
                t4.$parent && St(false);
                var a2 = function(a3) {
                  i2.push(a3);
                  var o3 = Ht(a3, e3, n3, t4);
                  Mt(r2, a3, o3), a3 in t4 || mn(t4, "_props", a3);
                };
                for (var o2 in e3)
                  a2(o2);
                St(true);
              }(t3, e2.props), e2.methods && function(t4, e3) {
                t4.$options.props;
                for (var n3 in e3)
                  t4[n3] = "function" != typeof e3[n3] ? E : M(e3[n3], t4);
              }(t3, e2.methods), e2.data ? function(t4) {
                var e3 = t4.$options.data;
                u(e3 = t4._data = "function" == typeof e3 ? function(t5, e4) {
                  pt();
                  try {
                    return t5.call(e4, e4);
                  } catch (t6) {
                    return Bt(t6, e4, "data()"), {};
                  } finally {
                    ht();
                  }
                }(e3, t4) : e3 || {}) || (e3 = {});
                var n3 = Object.keys(e3), r2 = t4.$options.props, i2 = (t4.$options.methods, n3.length);
                for (; i2--; ) {
                  var a2 = n3[i2];
                  0, r2 && _2(r2, a2) || Y(a2) || mn(t4, "_data", a2);
                }
                kt(e3, true);
              }(t3) : kt(t3._data = {}, true), e2.computed && function(t4, e3) {
                var n3 = t4._computedWatchers = /* @__PURE__ */ Object.create(null), r2 = it();
                for (var i2 in e3) {
                  var a2 = e3[i2], o2 = "function" == typeof a2 ? a2 : a2.get;
                  0, r2 || (n3[i2] = new hn(t4, o2 || E, E, yn)), i2 in t4 || bn(t4, i2, a2);
                }
              }(t3, e2.computed), e2.watch && e2.watch !== et && function(t4, e3) {
                for (var n3 in e3) {
                  var r2 = e3[n3];
                  if (Array.isArray(r2))
                    for (var i2 = 0; i2 < r2.length; i2++)
                      wn(t4, n3, r2[i2]);
                  else
                    wn(t4, n3, r2);
                }
              }(t3, e2.watch);
            }
            var yn = { lazy: true };
            function bn(t3, e2, n3) {
              var r2 = !it();
              "function" == typeof n3 ? (vn.get = r2 ? _n(e2) : xn(n3), vn.set = E) : (vn.get = n3.get ? r2 && false !== n3.cache ? _n(e2) : xn(n3.get) : E, vn.set = n3.set || E), Object.defineProperty(t3, e2, vn);
            }
            function _n(t3) {
              return function() {
                var e2 = this._computedWatchers && this._computedWatchers[t3];
                if (e2)
                  return e2.dirty && e2.evaluate(), ft.target && e2.depend(), e2.value;
              };
            }
            function xn(t3) {
              return function() {
                return t3.call(this, this);
              };
            }
            function wn(t3, e2, n3, r2) {
              return u(n3) && (r2 = n3, n3 = n3.handler), "string" == typeof n3 && (n3 = t3[n3]), t3.$watch(e2, n3, r2);
            }
            var Cn = 0;
            function Sn(t3) {
              var e2 = t3.options;
              if (t3.super) {
                var n3 = Sn(t3.super);
                if (n3 !== t3.superOptions) {
                  t3.superOptions = n3;
                  var r2 = function(t4) {
                    var e3, n4 = t4.options, r3 = t4.sealedOptions;
                    for (var i2 in n4)
                      n4[i2] !== r3[i2] && (e3 || (e3 = {}), e3[i2] = n4[i2]);
                    return e3;
                  }(t3);
                  r2 && j(t3.extendOptions, r2), (e2 = t3.options = zt(n3, t3.extendOptions)).name && (e2.components[e2.name] = t3);
                }
              }
              return e2;
            }
            function On(t3) {
              this._init(t3);
            }
            function kn(t3) {
              t3.cid = 0;
              var e2 = 1;
              t3.extend = function(t4) {
                t4 = t4 || {};
                var n3 = this, r2 = n3.cid, i2 = t4._Ctor || (t4._Ctor = {});
                if (i2[r2])
                  return i2[r2];
                var a2 = t4.name || n3.options.name;
                var o2 = function(t5) {
                  this._init(t5);
                };
                return (o2.prototype = Object.create(n3.prototype)).constructor = o2, o2.cid = e2++, o2.options = zt(n3.options, t4), o2.super = n3, o2.options.props && function(t5) {
                  var e3 = t5.options.props;
                  for (var n4 in e3)
                    mn(t5.prototype, "_props", n4);
                }(o2), o2.options.computed && function(t5) {
                  var e3 = t5.options.computed;
                  for (var n4 in e3)
                    bn(t5.prototype, n4, e3[n4]);
                }(o2), o2.extend = n3.extend, o2.mixin = n3.mixin, o2.use = n3.use, z.forEach(function(t5) {
                  o2[t5] = n3[t5];
                }), a2 && (o2.options.components[a2] = o2), o2.superOptions = n3.options, o2.extendOptions = t4, o2.sealedOptions = j({}, o2.options), i2[r2] = o2, o2;
              };
            }
            function Mn(t3) {
              return t3 && (t3.Ctor.options.name || t3.tag);
            }
            function Dn(t3, e2) {
              return Array.isArray(t3) ? t3.indexOf(e2) > -1 : "string" == typeof t3 ? t3.split(",").indexOf(e2) > -1 : !!l(t3) && t3.test(e2);
            }
            function jn(t3, e2) {
              var n3 = t3.cache, r2 = t3.keys, i2 = t3._vnode;
              for (var a2 in n3) {
                var o2 = n3[a2];
                if (o2) {
                  var s2 = o2.name;
                  s2 && !e2(s2) && Ln(n3, a2, r2, i2);
                }
              }
            }
            function Ln(t3, e2, n3, r2) {
              var i2 = t3[e2];
              !i2 || r2 && i2.tag === r2.tag || i2.componentInstance.$destroy(), t3[e2] = null, y(n3, e2);
            }
            !function(t3) {
              t3.prototype._init = function(t4) {
                var e2 = this;
                e2._uid = Cn++, e2._isVue = true, t4 && t4._isComponent ? function(t5, e3) {
                  var n3 = t5.$options = Object.create(t5.constructor.options), r2 = e3._parentVnode;
                  n3.parent = e3.parent, n3._parentVnode = r2;
                  var i2 = r2.componentOptions;
                  n3.propsData = i2.propsData, n3._parentListeners = i2.listeners, n3._renderChildren = i2.children, n3._componentTag = i2.tag, e3.render && (n3.render = e3.render, n3.staticRenderFns = e3.staticRenderFns);
                }(e2, t4) : e2.$options = zt(Sn(e2.constructor), t4 || {}, e2), e2._renderProxy = e2, e2._self = e2, function(t5) {
                  var e3 = t5.$options, n3 = e3.parent;
                  if (n3 && !e3.abstract) {
                    for (; n3.$options.abstract && n3.$parent; )
                      n3 = n3.$parent;
                    n3.$children.push(t5);
                  }
                  t5.$parent = n3, t5.$root = n3 ? n3.$root : t5, t5.$children = [], t5.$refs = {}, t5._watcher = null, t5._inactive = null, t5._directInactive = false, t5._isMounted = false, t5._isDestroyed = false, t5._isBeingDestroyed = false;
                }(e2), function(t5) {
                  t5._events = /* @__PURE__ */ Object.create(null), t5._hasHookEvent = false;
                  var e3 = t5.$options._parentListeners;
                  e3 && Ge(t5, e3);
                }(e2), function(t5) {
                  t5._vnode = null, t5._staticTrees = null;
                  var e3 = t5.$options, r2 = t5.$vnode = e3._parentVnode, i2 = r2 && r2.context;
                  t5.$slots = he(e3._renderChildren, i2), t5.$scopedSlots = n2, t5._c = function(e4, n3, r3, i3) {
                    return Fe(t5, e4, n3, r3, i3, false);
                  }, t5.$createElement = function(e4, n3, r3, i3) {
                    return Fe(t5, e4, n3, r3, i3, true);
                  };
                  var a2 = r2 && r2.data;
                  Mt(t5, "$attrs", a2 && a2.attrs || n2, null, true), Mt(t5, "$listeners", e3._parentListeners || n2, null, true);
                }(e2), en(e2, "beforeCreate"), function(t5) {
                  var e3 = pe(t5.$options.inject, t5);
                  e3 && (St(false), Object.keys(e3).forEach(function(n3) {
                    Mt(t5, n3, e3[n3]);
                  }), St(true));
                }(e2), gn(e2), function(t5) {
                  var e3 = t5.$options.provide;
                  e3 && (t5._provided = "function" == typeof e3 ? e3.call(t5) : e3);
                }(e2), en(e2, "created"), e2.$options.el && e2.$mount(e2.$options.el);
              };
            }(On), function(t3) {
              var e2 = { get: function() {
                return this._data;
              } }, n3 = { get: function() {
                return this._props;
              } };
              Object.defineProperty(t3.prototype, "$data", e2), Object.defineProperty(t3.prototype, "$props", n3), t3.prototype.$set = Dt, t3.prototype.$delete = jt, t3.prototype.$watch = function(t4, e3, n4) {
                if (u(e3))
                  return wn(this, t4, e3, n4);
                (n4 = n4 || {}).user = true;
                var r2 = new hn(this, t4, e3, n4);
                if (n4.immediate) {
                  var i2 = 'callback for immediate watcher "' + r2.expression + '"';
                  pt(), Wt(e3, this, [r2.value], this, i2), ht();
                }
                return function() {
                  r2.teardown();
                };
              };
            }(On), function(t3) {
              var e2 = /^hook:/;
              t3.prototype.$on = function(t4, n3) {
                var r2 = this;
                if (Array.isArray(t4))
                  for (var i2 = 0, a2 = t4.length; i2 < a2; i2++)
                    r2.$on(t4[i2], n3);
                else
                  (r2._events[t4] || (r2._events[t4] = [])).push(n3), e2.test(t4) && (r2._hasHookEvent = true);
                return r2;
              }, t3.prototype.$once = function(t4, e3) {
                var n3 = this;
                function r2() {
                  n3.$off(t4, r2), e3.apply(n3, arguments);
                }
                return r2.fn = e3, n3.$on(t4, r2), n3;
              }, t3.prototype.$off = function(t4, e3) {
                var n3 = this;
                if (!arguments.length)
                  return n3._events = /* @__PURE__ */ Object.create(null), n3;
                if (Array.isArray(t4)) {
                  for (var r2 = 0, i2 = t4.length; r2 < i2; r2++)
                    n3.$off(t4[r2], e3);
                  return n3;
                }
                var a2, o2 = n3._events[t4];
                if (!o2)
                  return n3;
                if (!e3)
                  return n3._events[t4] = null, n3;
                for (var s2 = o2.length; s2--; )
                  if ((a2 = o2[s2]) === e3 || a2.fn === e3) {
                    o2.splice(s2, 1);
                    break;
                  }
                return n3;
              }, t3.prototype.$emit = function(t4) {
                var e3 = this, n3 = e3._events[t4];
                if (n3) {
                  n3 = n3.length > 1 ? D(n3) : n3;
                  for (var r2 = D(arguments, 1), i2 = 'event handler for "' + t4 + '"', a2 = 0, o2 = n3.length; a2 < o2; a2++)
                    Wt(n3[a2], e3, r2, e3, i2);
                }
                return e3;
              };
            }(On), function(t3) {
              t3.prototype._update = function(t4, e2) {
                var n3 = this, r2 = n3.$el, i2 = n3._vnode, a2 = Qe(n3);
                n3._vnode = t4, n3.$el = i2 ? n3.__patch__(i2, t4) : n3.__patch__(n3.$el, t4, e2, false), a2(), r2 && (r2.__vue__ = null), n3.$el && (n3.$el.__vue__ = n3), n3.$vnode && n3.$parent && n3.$vnode === n3.$parent._vnode && (n3.$parent.$el = n3.$el);
              }, t3.prototype.$forceUpdate = function() {
                this._watcher && this._watcher.update();
              }, t3.prototype.$destroy = function() {
                var t4 = this;
                if (!t4._isBeingDestroyed) {
                  en(t4, "beforeDestroy"), t4._isBeingDestroyed = true;
                  var e2 = t4.$parent;
                  !e2 || e2._isBeingDestroyed || t4.$options.abstract || y(e2.$children, t4), t4._watcher && t4._watcher.teardown();
                  for (var n3 = t4._watchers.length; n3--; )
                    t4._watchers[n3].teardown();
                  t4._data.__ob__ && t4._data.__ob__.vmCount--, t4._isDestroyed = true, t4.__patch__(t4._vnode, null), en(t4, "destroyed"), t4.$off(), t4.$el && (t4.$el.__vue__ = null), t4.$vnode && (t4.$vnode.parent = null);
                }
              };
            }(On), function(t3) {
              $e(t3.prototype), t3.prototype.$nextTick = function(t4) {
                return re(t4, this);
              }, t3.prototype._render = function() {
                var t4, e2 = this, n3 = e2.$options, r2 = n3.render, i2 = n3._parentVnode;
                i2 && (e2.$scopedSlots = ge(i2.data.scopedSlots, e2.$slots, e2.$scopedSlots)), e2.$vnode = i2;
                try {
                  Be = e2, t4 = r2.call(e2._renderProxy, e2.$createElement);
                } catch (n4) {
                  Bt(n4, e2, "render"), t4 = e2._vnode;
                } finally {
                  Be = null;
                }
                return Array.isArray(t4) && 1 === t4.length && (t4 = t4[0]), t4 instanceof vt || (t4 = gt()), t4.parent = i2, t4;
              };
            }(On);
            var En = [String, RegExp, Array], An = { KeepAlive: { name: "keep-alive", abstract: true, props: { include: En, exclude: En, max: [String, Number] }, methods: { cacheVNode: function() {
              var t3 = this.cache, e2 = this.keys, n3 = this.vnodeToCache, r2 = this.keyToCache;
              if (n3) {
                var i2 = n3.tag, a2 = n3.componentInstance, o2 = n3.componentOptions;
                t3[r2] = { name: Mn(o2), tag: i2, componentInstance: a2 }, e2.push(r2), this.max && e2.length > parseInt(this.max) && Ln(t3, e2[0], e2, this._vnode), this.vnodeToCache = null;
              }
            } }, created: function() {
              this.cache = /* @__PURE__ */ Object.create(null), this.keys = [];
            }, destroyed: function() {
              for (var t3 in this.cache)
                Ln(this.cache, t3, this.keys);
            }, mounted: function() {
              var t3 = this;
              this.cacheVNode(), this.$watch("include", function(e2) {
                jn(t3, function(t4) {
                  return Dn(e2, t4);
                });
              }), this.$watch("exclude", function(e2) {
                jn(t3, function(t4) {
                  return !Dn(e2, t4);
                });
              });
            }, updated: function() {
              this.cacheVNode();
            }, render: function() {
              var t3 = this.$slots.default, e2 = Ue(t3), n3 = e2 && e2.componentOptions;
              if (n3) {
                var r2 = Mn(n3), i2 = this.include, a2 = this.exclude;
                if (i2 && (!r2 || !Dn(i2, r2)) || a2 && r2 && Dn(a2, r2))
                  return e2;
                var o2 = this.cache, s2 = this.keys, c2 = null == e2.key ? n3.Ctor.cid + (n3.tag ? "::" + n3.tag : "") : e2.key;
                o2[c2] ? (e2.componentInstance = o2[c2].componentInstance, y(s2, c2), s2.push(c2)) : (this.vnodeToCache = e2, this.keyToCache = c2), e2.data.keepAlive = true;
              }
              return e2 || t3 && t3[0];
            } } };
            !function(t3) {
              var e2 = { get: function() {
                return H;
              } };
              Object.defineProperty(t3, "config", e2), t3.util = { warn: ut, extend: j, mergeOptions: zt, defineReactive: Mt }, t3.set = Dt, t3.delete = jt, t3.nextTick = re, t3.observable = function(t4) {
                return kt(t4), t4;
              }, t3.options = /* @__PURE__ */ Object.create(null), z.forEach(function(e3) {
                t3.options[e3 + "s"] = /* @__PURE__ */ Object.create(null);
              }), t3.options._base = t3, j(t3.options.components, An), function(t4) {
                t4.use = function(t5) {
                  var e3 = this._installedPlugins || (this._installedPlugins = []);
                  if (e3.indexOf(t5) > -1)
                    return this;
                  var n3 = D(arguments, 1);
                  return n3.unshift(this), "function" == typeof t5.install ? t5.install.apply(t5, n3) : "function" == typeof t5 && t5.apply(null, n3), e3.push(t5), this;
                };
              }(t3), function(t4) {
                t4.mixin = function(t5) {
                  return this.options = zt(this.options, t5), this;
                };
              }(t3), kn(t3), function(t4) {
                z.forEach(function(e3) {
                  t4[e3] = function(t5, n3) {
                    return n3 ? ("component" === e3 && u(n3) && (n3.name = n3.name || t5, n3 = this.options._base.extend(n3)), "directive" === e3 && "function" == typeof n3 && (n3 = { bind: n3, update: n3 }), this.options[e3 + "s"][t5] = n3, n3) : this.options[e3 + "s"][t5];
                  };
                });
              }(t3);
            }(On), Object.defineProperty(On.prototype, "$isServer", { get: it }), Object.defineProperty(On.prototype, "$ssrContext", { get: function() {
              return this.$vnode && this.$vnode.ssrContext;
            } }), Object.defineProperty(On, "FunctionalRenderContext", { value: Ie }), On.version = "2.6.14";
            var Tn = v("style,class"), $n = v("input,textarea,option,select,progress"), In = function(t3, e2, n3) {
              return "value" === n3 && $n(t3) && "button" !== e2 || "selected" === n3 && "option" === t3 || "checked" === n3 && "input" === t3 || "muted" === n3 && "video" === t3;
            }, Pn = v("contenteditable,draggable,spellcheck"), zn = v("events,caret,typing,plaintext-only"), Nn = v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"), Hn = "http://www.w3.org/1999/xlink", Vn = function(t3) {
              return ":" === t3.charAt(5) && "xlink" === t3.slice(0, 5);
            }, Yn = function(t3) {
              return Vn(t3) ? t3.slice(6, t3.length) : "";
            }, Fn = function(t3) {
              return null == t3 || false === t3;
            };
            function Rn(t3) {
              for (var e2 = t3.data, n3 = t3, r2 = t3; i(r2.componentInstance); )
                (r2 = r2.componentInstance._vnode) && r2.data && (e2 = Bn(r2.data, e2));
              for (; i(n3 = n3.parent); )
                n3 && n3.data && (e2 = Bn(e2, n3.data));
              return function(t4, e3) {
                if (i(t4) || i(e3))
                  return Wn(t4, Un(e3));
                return "";
              }(e2.staticClass, e2.class);
            }
            function Bn(t3, e2) {
              return { staticClass: Wn(t3.staticClass, e2.staticClass), class: i(t3.class) ? [t3.class, e2.class] : e2.class };
            }
            function Wn(t3, e2) {
              return t3 ? e2 ? t3 + " " + e2 : t3 : e2 || "";
            }
            function Un(t3) {
              return Array.isArray(t3) ? function(t4) {
                for (var e2, n3 = "", r2 = 0, a2 = t4.length; r2 < a2; r2++)
                  i(e2 = Un(t4[r2])) && "" !== e2 && (n3 && (n3 += " "), n3 += e2);
                return n3;
              }(t3) : s(t3) ? function(t4) {
                var e2 = "";
                for (var n3 in t4)
                  t4[n3] && (e2 && (e2 += " "), e2 += n3);
                return e2;
              }(t3) : "string" == typeof t3 ? t3 : "";
            }
            var qn = { svg: "http://www.w3.org/2000/svg", math: "http://www.w3.org/1998/Math/MathML" }, Kn = v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"), Xn = v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", true), Gn = function(t3) {
              return Kn(t3) || Xn(t3);
            };
            function Jn(t3) {
              return Xn(t3) ? "svg" : "math" === t3 ? "math" : void 0;
            }
            var Qn = /* @__PURE__ */ Object.create(null);
            var Zn = v("text,number,password,search,email,tel,url");
            function tr(t3) {
              if ("string" == typeof t3) {
                var e2 = document.querySelector(t3);
                return e2 || document.createElement("div");
              }
              return t3;
            }
            var er = Object.freeze({ createElement: function(t3, e2) {
              var n3 = document.createElement(t3);
              return "select" !== t3 || e2.data && e2.data.attrs && void 0 !== e2.data.attrs.multiple && n3.setAttribute("multiple", "multiple"), n3;
            }, createElementNS: function(t3, e2) {
              return document.createElementNS(qn[t3], e2);
            }, createTextNode: function(t3) {
              return document.createTextNode(t3);
            }, createComment: function(t3) {
              return document.createComment(t3);
            }, insertBefore: function(t3, e2, n3) {
              t3.insertBefore(e2, n3);
            }, removeChild: function(t3, e2) {
              t3.removeChild(e2);
            }, appendChild: function(t3, e2) {
              t3.appendChild(e2);
            }, parentNode: function(t3) {
              return t3.parentNode;
            }, nextSibling: function(t3) {
              return t3.nextSibling;
            }, tagName: function(t3) {
              return t3.tagName;
            }, setTextContent: function(t3, e2) {
              t3.textContent = e2;
            }, setStyleScope: function(t3, e2) {
              t3.setAttribute(e2, "");
            } }), nr = { create: function(t3, e2) {
              rr(e2);
            }, update: function(t3, e2) {
              t3.data.ref !== e2.data.ref && (rr(t3, true), rr(e2));
            }, destroy: function(t3) {
              rr(t3, true);
            } };
            function rr(t3, e2) {
              var n3 = t3.data.ref;
              if (i(n3)) {
                var r2 = t3.context, a2 = t3.componentInstance || t3.elm, o2 = r2.$refs;
                e2 ? Array.isArray(o2[n3]) ? y(o2[n3], a2) : o2[n3] === a2 && (o2[n3] = void 0) : t3.data.refInFor ? Array.isArray(o2[n3]) ? o2[n3].indexOf(a2) < 0 && o2[n3].push(a2) : o2[n3] = [a2] : o2[n3] = a2;
              }
            }
            var ir = new vt("", {}, []), ar = ["create", "activate", "update", "remove", "destroy"];
            function or(t3, e2) {
              return t3.key === e2.key && t3.asyncFactory === e2.asyncFactory && (t3.tag === e2.tag && t3.isComment === e2.isComment && i(t3.data) === i(e2.data) && function(t4, e3) {
                if ("input" !== t4.tag)
                  return true;
                var n3, r2 = i(n3 = t4.data) && i(n3 = n3.attrs) && n3.type, a2 = i(n3 = e3.data) && i(n3 = n3.attrs) && n3.type;
                return r2 === a2 || Zn(r2) && Zn(a2);
              }(t3, e2) || a(t3.isAsyncPlaceholder) && r(e2.asyncFactory.error));
            }
            function sr(t3, e2, n3) {
              var r2, a2, o2 = {};
              for (r2 = e2; r2 <= n3; ++r2)
                i(a2 = t3[r2].key) && (o2[a2] = r2);
              return o2;
            }
            var cr = { create: ur, update: ur, destroy: function(t3) {
              ur(t3, ir);
            } };
            function ur(t3, e2) {
              (t3.data.directives || e2.data.directives) && function(t4, e3) {
                var n3, r2, i2, a2 = t4 === ir, o2 = e3 === ir, s2 = fr(t4.data.directives, t4.context), c2 = fr(e3.data.directives, e3.context), u2 = [], l2 = [];
                for (n3 in c2)
                  r2 = s2[n3], i2 = c2[n3], r2 ? (i2.oldValue = r2.value, i2.oldArg = r2.arg, pr(i2, "update", e3, t4), i2.def && i2.def.componentUpdated && l2.push(i2)) : (pr(i2, "bind", e3, t4), i2.def && i2.def.inserted && u2.push(i2));
                if (u2.length) {
                  var f2 = function() {
                    for (var n4 = 0; n4 < u2.length; n4++)
                      pr(u2[n4], "inserted", e3, t4);
                  };
                  a2 ? ue(e3, "insert", f2) : f2();
                }
                l2.length && ue(e3, "postpatch", function() {
                  for (var n4 = 0; n4 < l2.length; n4++)
                    pr(l2[n4], "componentUpdated", e3, t4);
                });
                if (!a2)
                  for (n3 in s2)
                    c2[n3] || pr(s2[n3], "unbind", t4, t4, o2);
              }(t3, e2);
            }
            var lr = /* @__PURE__ */ Object.create(null);
            function fr(t3, e2) {
              var n3, r2, i2 = /* @__PURE__ */ Object.create(null);
              if (!t3)
                return i2;
              for (n3 = 0; n3 < t3.length; n3++)
                (r2 = t3[n3]).modifiers || (r2.modifiers = lr), i2[dr(r2)] = r2, r2.def = Nt(e2.$options, "directives", r2.name);
              return i2;
            }
            function dr(t3) {
              return t3.rawName || t3.name + "." + Object.keys(t3.modifiers || {}).join(".");
            }
            function pr(t3, e2, n3, r2, i2) {
              var a2 = t3.def && t3.def[e2];
              if (a2)
                try {
                  a2(n3.elm, t3, n3, r2, i2);
                } catch (r3) {
                  Bt(r3, n3.context, "directive " + t3.name + " " + e2 + " hook");
                }
            }
            var hr = [nr, cr];
            function vr(t3, e2) {
              var n3 = e2.componentOptions;
              if (!(i(n3) && false === n3.Ctor.options.inheritAttrs || r(t3.data.attrs) && r(e2.data.attrs))) {
                var a2, o2, s2 = e2.elm, c2 = t3.data.attrs || {}, u2 = e2.data.attrs || {};
                for (a2 in i(u2.__ob__) && (u2 = e2.data.attrs = j({}, u2)), u2)
                  o2 = u2[a2], c2[a2] !== o2 && mr(s2, a2, o2, e2.data.pre);
                for (a2 in (G || Q) && u2.value !== c2.value && mr(s2, "value", u2.value), c2)
                  r(u2[a2]) && (Vn(a2) ? s2.removeAttributeNS(Hn, Yn(a2)) : Pn(a2) || s2.removeAttribute(a2));
              }
            }
            function mr(t3, e2, n3, r2) {
              r2 || t3.tagName.indexOf("-") > -1 ? gr(t3, e2, n3) : Nn(e2) ? Fn(n3) ? t3.removeAttribute(e2) : (n3 = "allowfullscreen" === e2 && "EMBED" === t3.tagName ? "true" : e2, t3.setAttribute(e2, n3)) : Pn(e2) ? t3.setAttribute(e2, function(t4, e3) {
                return Fn(e3) || "false" === e3 ? "false" : "contenteditable" === t4 && zn(e3) ? e3 : "true";
              }(e2, n3)) : Vn(e2) ? Fn(n3) ? t3.removeAttributeNS(Hn, Yn(e2)) : t3.setAttributeNS(Hn, e2, n3) : gr(t3, e2, n3);
            }
            function gr(t3, e2, n3) {
              if (Fn(n3))
                t3.removeAttribute(e2);
              else {
                if (G && !J && "TEXTAREA" === t3.tagName && "placeholder" === e2 && "" !== n3 && !t3.__ieph) {
                  var r2 = function(e3) {
                    e3.stopImmediatePropagation(), t3.removeEventListener("input", r2);
                  };
                  t3.addEventListener("input", r2), t3.__ieph = true;
                }
                t3.setAttribute(e2, n3);
              }
            }
            var yr = { create: vr, update: vr };
            function br(t3, e2) {
              var n3 = e2.elm, a2 = e2.data, o2 = t3.data;
              if (!(r(a2.staticClass) && r(a2.class) && (r(o2) || r(o2.staticClass) && r(o2.class)))) {
                var s2 = Rn(e2), c2 = n3._transitionClasses;
                i(c2) && (s2 = Wn(s2, Un(c2))), s2 !== n3._prevClass && (n3.setAttribute("class", s2), n3._prevClass = s2);
              }
            }
            var _r, xr, wr, Cr, Sr, Or, kr = { create: br, update: br }, Mr = /[\w).+\-_$\]]/;
            function Dr(t3) {
              var e2, n3, r2, i2, a2, o2 = false, s2 = false, c2 = false, u2 = false, l2 = 0, f2 = 0, d2 = 0, p2 = 0;
              for (r2 = 0; r2 < t3.length; r2++)
                if (n3 = e2, e2 = t3.charCodeAt(r2), o2)
                  39 === e2 && 92 !== n3 && (o2 = false);
                else if (s2)
                  34 === e2 && 92 !== n3 && (s2 = false);
                else if (c2)
                  96 === e2 && 92 !== n3 && (c2 = false);
                else if (u2)
                  47 === e2 && 92 !== n3 && (u2 = false);
                else if (124 !== e2 || 124 === t3.charCodeAt(r2 + 1) || 124 === t3.charCodeAt(r2 - 1) || l2 || f2 || d2) {
                  switch (e2) {
                    case 34:
                      s2 = true;
                      break;
                    case 39:
                      o2 = true;
                      break;
                    case 96:
                      c2 = true;
                      break;
                    case 40:
                      d2++;
                      break;
                    case 41:
                      d2--;
                      break;
                    case 91:
                      f2++;
                      break;
                    case 93:
                      f2--;
                      break;
                    case 123:
                      l2++;
                      break;
                    case 125:
                      l2--;
                  }
                  if (47 === e2) {
                    for (var h2 = r2 - 1, v2 = void 0; h2 >= 0 && " " === (v2 = t3.charAt(h2)); h2--)
                      ;
                    v2 && Mr.test(v2) || (u2 = true);
                  }
                } else
                  void 0 === i2 ? (p2 = r2 + 1, i2 = t3.slice(0, r2).trim()) : m2();
              function m2() {
                (a2 || (a2 = [])).push(t3.slice(p2, r2).trim()), p2 = r2 + 1;
              }
              if (void 0 === i2 ? i2 = t3.slice(0, r2).trim() : 0 !== p2 && m2(), a2)
                for (r2 = 0; r2 < a2.length; r2++)
                  i2 = jr(i2, a2[r2]);
              return i2;
            }
            function jr(t3, e2) {
              var n3 = e2.indexOf("(");
              if (n3 < 0)
                return '_f("' + e2 + '")(' + t3 + ")";
              var r2 = e2.slice(0, n3), i2 = e2.slice(n3 + 1);
              return '_f("' + r2 + '")(' + t3 + (")" !== i2 ? "," + i2 : i2);
            }
            function Lr(t3, e2) {
              console.error("[Vue compiler]: " + t3);
            }
            function Er(t3, e2) {
              return t3 ? t3.map(function(t4) {
                return t4[e2];
              }).filter(function(t4) {
                return t4;
              }) : [];
            }
            function Ar(t3, e2, n3, r2, i2) {
              (t3.props || (t3.props = [])).push(Yr({ name: e2, value: n3, dynamic: i2 }, r2)), t3.plain = false;
            }
            function Tr(t3, e2, n3, r2, i2) {
              (i2 ? t3.dynamicAttrs || (t3.dynamicAttrs = []) : t3.attrs || (t3.attrs = [])).push(Yr({ name: e2, value: n3, dynamic: i2 }, r2)), t3.plain = false;
            }
            function $r(t3, e2, n3, r2) {
              t3.attrsMap[e2] = n3, t3.attrsList.push(Yr({ name: e2, value: n3 }, r2));
            }
            function Ir(t3, e2, n3, r2, i2, a2, o2, s2) {
              (t3.directives || (t3.directives = [])).push(Yr({ name: e2, rawName: n3, value: r2, arg: i2, isDynamicArg: a2, modifiers: o2 }, s2)), t3.plain = false;
            }
            function Pr(t3, e2, n3) {
              return n3 ? "_p(" + e2 + ',"' + t3 + '")' : t3 + e2;
            }
            function zr(t3, e2, r2, i2, a2, o2, s2, c2) {
              var u2;
              (i2 = i2 || n2).right ? c2 ? e2 = "(" + e2 + ")==='click'?'contextmenu':(" + e2 + ")" : "click" === e2 && (e2 = "contextmenu", delete i2.right) : i2.middle && (c2 ? e2 = "(" + e2 + ")==='click'?'mouseup':(" + e2 + ")" : "click" === e2 && (e2 = "mouseup")), i2.capture && (delete i2.capture, e2 = Pr("!", e2, c2)), i2.once && (delete i2.once, e2 = Pr("~", e2, c2)), i2.passive && (delete i2.passive, e2 = Pr("&", e2, c2)), i2.native ? (delete i2.native, u2 = t3.nativeEvents || (t3.nativeEvents = {})) : u2 = t3.events || (t3.events = {});
              var l2 = Yr({ value: r2.trim(), dynamic: c2 }, s2);
              i2 !== n2 && (l2.modifiers = i2);
              var f2 = u2[e2];
              Array.isArray(f2) ? a2 ? f2.unshift(l2) : f2.push(l2) : u2[e2] = f2 ? a2 ? [l2, f2] : [f2, l2] : l2, t3.plain = false;
            }
            function Nr(t3, e2, n3) {
              var r2 = Hr(t3, ":" + e2) || Hr(t3, "v-bind:" + e2);
              if (null != r2)
                return Dr(r2);
              if (false !== n3) {
                var i2 = Hr(t3, e2);
                if (null != i2)
                  return JSON.stringify(i2);
              }
            }
            function Hr(t3, e2, n3) {
              var r2;
              if (null != (r2 = t3.attrsMap[e2])) {
                for (var i2 = t3.attrsList, a2 = 0, o2 = i2.length; a2 < o2; a2++)
                  if (i2[a2].name === e2) {
                    i2.splice(a2, 1);
                    break;
                  }
              }
              return n3 && delete t3.attrsMap[e2], r2;
            }
            function Vr(t3, e2) {
              for (var n3 = t3.attrsList, r2 = 0, i2 = n3.length; r2 < i2; r2++) {
                var a2 = n3[r2];
                if (e2.test(a2.name))
                  return n3.splice(r2, 1), a2;
              }
            }
            function Yr(t3, e2) {
              return e2 && (null != e2.start && (t3.start = e2.start), null != e2.end && (t3.end = e2.end)), t3;
            }
            function Fr(t3, e2, n3) {
              var r2 = n3 || {}, i2 = r2.number, a2 = "$$v";
              r2.trim && (a2 = "(typeof $$v === 'string'? $$v.trim(): $$v)"), i2 && (a2 = "_n(" + a2 + ")");
              var o2 = Rr(e2, a2);
              t3.model = { value: "(" + e2 + ")", expression: JSON.stringify(e2), callback: "function ($$v) {" + o2 + "}" };
            }
            function Rr(t3, e2) {
              var n3 = function(t4) {
                if (t4 = t4.trim(), _r = t4.length, t4.indexOf("[") < 0 || t4.lastIndexOf("]") < _r - 1)
                  return (Cr = t4.lastIndexOf(".")) > -1 ? { exp: t4.slice(0, Cr), key: '"' + t4.slice(Cr + 1) + '"' } : { exp: t4, key: null };
                xr = t4, Cr = Sr = Or = 0;
                for (; !Wr(); )
                  Ur(wr = Br()) ? Kr(wr) : 91 === wr && qr(wr);
                return { exp: t4.slice(0, Sr), key: t4.slice(Sr + 1, Or) };
              }(t3);
              return null === n3.key ? t3 + "=" + e2 : "$set(" + n3.exp + ", " + n3.key + ", " + e2 + ")";
            }
            function Br() {
              return xr.charCodeAt(++Cr);
            }
            function Wr() {
              return Cr >= _r;
            }
            function Ur(t3) {
              return 34 === t3 || 39 === t3;
            }
            function qr(t3) {
              var e2 = 1;
              for (Sr = Cr; !Wr(); )
                if (Ur(t3 = Br()))
                  Kr(t3);
                else if (91 === t3 && e2++, 93 === t3 && e2--, 0 === e2) {
                  Or = Cr;
                  break;
                }
            }
            function Kr(t3) {
              for (var e2 = t3; !Wr() && (t3 = Br()) !== e2; )
                ;
            }
            var Xr;
            function Gr(t3, e2, n3) {
              var r2 = Xr;
              return function i2() {
                var a2 = e2.apply(null, arguments);
                null !== a2 && Zr(t3, i2, n3, r2);
              };
            }
            var Jr = Xt && !(tt && Number(tt[1]) <= 53);
            function Qr(t3, e2, n3, r2) {
              if (Jr) {
                var i2 = un, a2 = e2;
                e2 = a2._wrapper = function(t4) {
                  if (t4.target === t4.currentTarget || t4.timeStamp >= i2 || t4.timeStamp <= 0 || t4.target.ownerDocument !== document)
                    return a2.apply(this, arguments);
                };
              }
              Xr.addEventListener(t3, e2, nt ? { capture: n3, passive: r2 } : n3);
            }
            function Zr(t3, e2, n3, r2) {
              (r2 || Xr).removeEventListener(t3, e2._wrapper || e2, n3);
            }
            function ti(t3, e2) {
              if (!r(t3.data.on) || !r(e2.data.on)) {
                var n3 = e2.data.on || {}, a2 = t3.data.on || {};
                Xr = e2.elm, function(t4) {
                  if (i(t4.__r)) {
                    var e3 = G ? "change" : "input";
                    t4[e3] = [].concat(t4.__r, t4[e3] || []), delete t4.__r;
                  }
                  i(t4.__c) && (t4.change = [].concat(t4.__c, t4.change || []), delete t4.__c);
                }(n3), ce(n3, a2, Qr, Zr, Gr, e2.context), Xr = void 0;
              }
            }
            var ei, ni = { create: ti, update: ti };
            function ri(t3, e2) {
              if (!r(t3.data.domProps) || !r(e2.data.domProps)) {
                var n3, a2, o2 = e2.elm, s2 = t3.data.domProps || {}, c2 = e2.data.domProps || {};
                for (n3 in i(c2.__ob__) && (c2 = e2.data.domProps = j({}, c2)), s2)
                  n3 in c2 || (o2[n3] = "");
                for (n3 in c2) {
                  if (a2 = c2[n3], "textContent" === n3 || "innerHTML" === n3) {
                    if (e2.children && (e2.children.length = 0), a2 === s2[n3])
                      continue;
                    1 === o2.childNodes.length && o2.removeChild(o2.childNodes[0]);
                  }
                  if ("value" === n3 && "PROGRESS" !== o2.tagName) {
                    o2._value = a2;
                    var u2 = r(a2) ? "" : String(a2);
                    ii(o2, u2) && (o2.value = u2);
                  } else if ("innerHTML" === n3 && Xn(o2.tagName) && r(o2.innerHTML)) {
                    (ei = ei || document.createElement("div")).innerHTML = "<svg>" + a2 + "</svg>";
                    for (var l2 = ei.firstChild; o2.firstChild; )
                      o2.removeChild(o2.firstChild);
                    for (; l2.firstChild; )
                      o2.appendChild(l2.firstChild);
                  } else if (a2 !== s2[n3])
                    try {
                      o2[n3] = a2;
                    } catch (t4) {
                    }
                }
              }
            }
            function ii(t3, e2) {
              return !t3.composing && ("OPTION" === t3.tagName || function(t4, e3) {
                var n3 = true;
                try {
                  n3 = document.activeElement !== t4;
                } catch (t5) {
                }
                return n3 && t4.value !== e3;
              }(t3, e2) || function(t4, e3) {
                var n3 = t4.value, r2 = t4._vModifiers;
                if (i(r2)) {
                  if (r2.number)
                    return h(n3) !== h(e3);
                  if (r2.trim)
                    return n3.trim() !== e3.trim();
                }
                return n3 !== e3;
              }(t3, e2));
            }
            var ai = { create: ri, update: ri }, oi = x(function(t3) {
              var e2 = {}, n3 = /:(.+)/;
              return t3.split(/;(?![^(]*\))/g).forEach(function(t4) {
                if (t4) {
                  var r2 = t4.split(n3);
                  r2.length > 1 && (e2[r2[0].trim()] = r2[1].trim());
                }
              }), e2;
            });
            function si(t3) {
              var e2 = ci(t3.style);
              return t3.staticStyle ? j(t3.staticStyle, e2) : e2;
            }
            function ci(t3) {
              return Array.isArray(t3) ? L2(t3) : "string" == typeof t3 ? oi(t3) : t3;
            }
            var ui, li = /^--/, fi = /\s*!important$/, di = function(t3, e2, n3) {
              if (li.test(e2))
                t3.style.setProperty(e2, n3);
              else if (fi.test(n3))
                t3.style.setProperty(k(e2), n3.replace(fi, ""), "important");
              else {
                var r2 = hi(e2);
                if (Array.isArray(n3))
                  for (var i2 = 0, a2 = n3.length; i2 < a2; i2++)
                    t3.style[r2] = n3[i2];
                else
                  t3.style[r2] = n3;
              }
            }, pi = ["Webkit", "Moz", "ms"], hi = x(function(t3) {
              if (ui = ui || document.createElement("div").style, "filter" !== (t3 = C(t3)) && t3 in ui)
                return t3;
              for (var e2 = t3.charAt(0).toUpperCase() + t3.slice(1), n3 = 0; n3 < pi.length; n3++) {
                var r2 = pi[n3] + e2;
                if (r2 in ui)
                  return r2;
              }
            });
            function vi(t3, e2) {
              var n3 = e2.data, a2 = t3.data;
              if (!(r(n3.staticStyle) && r(n3.style) && r(a2.staticStyle) && r(a2.style))) {
                var o2, s2, c2 = e2.elm, u2 = a2.staticStyle, l2 = a2.normalizedStyle || a2.style || {}, f2 = u2 || l2, d2 = ci(e2.data.style) || {};
                e2.data.normalizedStyle = i(d2.__ob__) ? j({}, d2) : d2;
                var p2 = function(t4, e3) {
                  var n4, r2 = {};
                  if (e3)
                    for (var i2 = t4; i2.componentInstance; )
                      (i2 = i2.componentInstance._vnode) && i2.data && (n4 = si(i2.data)) && j(r2, n4);
                  (n4 = si(t4.data)) && j(r2, n4);
                  for (var a3 = t4; a3 = a3.parent; )
                    a3.data && (n4 = si(a3.data)) && j(r2, n4);
                  return r2;
                }(e2, true);
                for (s2 in f2)
                  r(p2[s2]) && di(c2, s2, "");
                for (s2 in p2)
                  (o2 = p2[s2]) !== f2[s2] && di(c2, s2, null == o2 ? "" : o2);
              }
            }
            var mi = { create: vi, update: vi }, gi = /\s+/;
            function yi(t3, e2) {
              if (e2 && (e2 = e2.trim()))
                if (t3.classList)
                  e2.indexOf(" ") > -1 ? e2.split(gi).forEach(function(e3) {
                    return t3.classList.add(e3);
                  }) : t3.classList.add(e2);
                else {
                  var n3 = " " + (t3.getAttribute("class") || "") + " ";
                  n3.indexOf(" " + e2 + " ") < 0 && t3.setAttribute("class", (n3 + e2).trim());
                }
            }
            function bi(t3, e2) {
              if (e2 && (e2 = e2.trim()))
                if (t3.classList)
                  e2.indexOf(" ") > -1 ? e2.split(gi).forEach(function(e3) {
                    return t3.classList.remove(e3);
                  }) : t3.classList.remove(e2), t3.classList.length || t3.removeAttribute("class");
                else {
                  for (var n3 = " " + (t3.getAttribute("class") || "") + " ", r2 = " " + e2 + " "; n3.indexOf(r2) >= 0; )
                    n3 = n3.replace(r2, " ");
                  (n3 = n3.trim()) ? t3.setAttribute("class", n3) : t3.removeAttribute("class");
                }
            }
            function _i(t3) {
              if (t3) {
                if ("object" == typeof t3) {
                  var e2 = {};
                  return false !== t3.css && j(e2, xi(t3.name || "v")), j(e2, t3), e2;
                }
                return "string" == typeof t3 ? xi(t3) : void 0;
              }
            }
            var xi = x(function(t3) {
              return { enterClass: t3 + "-enter", enterToClass: t3 + "-enter-to", enterActiveClass: t3 + "-enter-active", leaveClass: t3 + "-leave", leaveToClass: t3 + "-leave-to", leaveActiveClass: t3 + "-leave-active" };
            }), wi = U && !J, Ci = "transition", Si = "transitionend", Oi = "animation", ki = "animationend";
            wi && (void 0 === window.ontransitionend && void 0 !== window.onwebkittransitionend && (Ci = "WebkitTransition", Si = "webkitTransitionEnd"), void 0 === window.onanimationend && void 0 !== window.onwebkitanimationend && (Oi = "WebkitAnimation", ki = "webkitAnimationEnd"));
            var Mi = U ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function(t3) {
              return t3();
            };
            function Di(t3) {
              Mi(function() {
                Mi(t3);
              });
            }
            function ji(t3, e2) {
              var n3 = t3._transitionClasses || (t3._transitionClasses = []);
              n3.indexOf(e2) < 0 && (n3.push(e2), yi(t3, e2));
            }
            function Li(t3, e2) {
              t3._transitionClasses && y(t3._transitionClasses, e2), bi(t3, e2);
            }
            function Ei(t3, e2, n3) {
              var r2 = Ti(t3, e2), i2 = r2.type, a2 = r2.timeout, o2 = r2.propCount;
              if (!i2)
                return n3();
              var s2 = "transition" === i2 ? Si : ki, c2 = 0, u2 = function() {
                t3.removeEventListener(s2, l2), n3();
              }, l2 = function(e3) {
                e3.target === t3 && ++c2 >= o2 && u2();
              };
              setTimeout(function() {
                c2 < o2 && u2();
              }, a2 + 1), t3.addEventListener(s2, l2);
            }
            var Ai = /\b(transform|all)(,|$)/;
            function Ti(t3, e2) {
              var n3, r2 = window.getComputedStyle(t3), i2 = (r2[Ci + "Delay"] || "").split(", "), a2 = (r2[Ci + "Duration"] || "").split(", "), o2 = $i(i2, a2), s2 = (r2[Oi + "Delay"] || "").split(", "), c2 = (r2[Oi + "Duration"] || "").split(", "), u2 = $i(s2, c2), l2 = 0, f2 = 0;
              return "transition" === e2 ? o2 > 0 && (n3 = "transition", l2 = o2, f2 = a2.length) : "animation" === e2 ? u2 > 0 && (n3 = "animation", l2 = u2, f2 = c2.length) : f2 = (n3 = (l2 = Math.max(o2, u2)) > 0 ? o2 > u2 ? "transition" : "animation" : null) ? "transition" === n3 ? a2.length : c2.length : 0, { type: n3, timeout: l2, propCount: f2, hasTransform: "transition" === n3 && Ai.test(r2[Ci + "Property"]) };
            }
            function $i(t3, e2) {
              for (; t3.length < e2.length; )
                t3 = t3.concat(t3);
              return Math.max.apply(null, e2.map(function(e3, n3) {
                return Ii(e3) + Ii(t3[n3]);
              }));
            }
            function Ii(t3) {
              return 1e3 * Number(t3.slice(0, -1).replace(",", "."));
            }
            function Pi(t3, e2) {
              var n3 = t3.elm;
              i(n3._leaveCb) && (n3._leaveCb.cancelled = true, n3._leaveCb());
              var a2 = _i(t3.data.transition);
              if (!r(a2) && !i(n3._enterCb) && 1 === n3.nodeType) {
                for (var o2 = a2.css, c2 = a2.type, u2 = a2.enterClass, l2 = a2.enterToClass, f2 = a2.enterActiveClass, d2 = a2.appearClass, p2 = a2.appearToClass, v2 = a2.appearActiveClass, m2 = a2.beforeEnter, g2 = a2.enter, y2 = a2.afterEnter, b2 = a2.enterCancelled, _3 = a2.beforeAppear, x2 = a2.appear, w2 = a2.afterAppear, C2 = a2.appearCancelled, S2 = a2.duration, O2 = Je, k2 = Je.$vnode; k2 && k2.parent; )
                  O2 = k2.context, k2 = k2.parent;
                var M2 = !O2._isMounted || !t3.isRootInsert;
                if (!M2 || x2 || "" === x2) {
                  var D2 = M2 && d2 ? d2 : u2, j2 = M2 && v2 ? v2 : f2, L3 = M2 && p2 ? p2 : l2, E2 = M2 && _3 || m2, A2 = M2 && "function" == typeof x2 ? x2 : g2, T2 = M2 && w2 || y2, $3 = M2 && C2 || b2, I2 = h(s(S2) ? S2.enter : S2);
                  0;
                  var z2 = false !== o2 && !J, N2 = Hi(A2), H2 = n3._enterCb = P(function() {
                    z2 && (Li(n3, L3), Li(n3, j2)), H2.cancelled ? (z2 && Li(n3, D2), $3 && $3(n3)) : T2 && T2(n3), n3._enterCb = null;
                  });
                  t3.data.show || ue(t3, "insert", function() {
                    var e3 = n3.parentNode, r2 = e3 && e3._pending && e3._pending[t3.key];
                    r2 && r2.tag === t3.tag && r2.elm._leaveCb && r2.elm._leaveCb(), A2 && A2(n3, H2);
                  }), E2 && E2(n3), z2 && (ji(n3, D2), ji(n3, j2), Di(function() {
                    Li(n3, D2), H2.cancelled || (ji(n3, L3), N2 || (Ni(I2) ? setTimeout(H2, I2) : Ei(n3, c2, H2)));
                  })), t3.data.show && (e2 && e2(), A2 && A2(n3, H2)), z2 || N2 || H2();
                }
              }
            }
            function zi(t3, e2) {
              var n3 = t3.elm;
              i(n3._enterCb) && (n3._enterCb.cancelled = true, n3._enterCb());
              var a2 = _i(t3.data.transition);
              if (r(a2) || 1 !== n3.nodeType)
                return e2();
              if (!i(n3._leaveCb)) {
                var o2 = a2.css, c2 = a2.type, u2 = a2.leaveClass, l2 = a2.leaveToClass, f2 = a2.leaveActiveClass, d2 = a2.beforeLeave, p2 = a2.leave, v2 = a2.afterLeave, m2 = a2.leaveCancelled, g2 = a2.delayLeave, y2 = a2.duration, b2 = false !== o2 && !J, _3 = Hi(p2), x2 = h(s(y2) ? y2.leave : y2);
                0;
                var w2 = n3._leaveCb = P(function() {
                  n3.parentNode && n3.parentNode._pending && (n3.parentNode._pending[t3.key] = null), b2 && (Li(n3, l2), Li(n3, f2)), w2.cancelled ? (b2 && Li(n3, u2), m2 && m2(n3)) : (e2(), v2 && v2(n3)), n3._leaveCb = null;
                });
                g2 ? g2(C2) : C2();
              }
              function C2() {
                w2.cancelled || (!t3.data.show && n3.parentNode && ((n3.parentNode._pending || (n3.parentNode._pending = {}))[t3.key] = t3), d2 && d2(n3), b2 && (ji(n3, u2), ji(n3, f2), Di(function() {
                  Li(n3, u2), w2.cancelled || (ji(n3, l2), _3 || (Ni(x2) ? setTimeout(w2, x2) : Ei(n3, c2, w2)));
                })), p2 && p2(n3, w2), b2 || _3 || w2());
              }
            }
            function Ni(t3) {
              return "number" == typeof t3 && !isNaN(t3);
            }
            function Hi(t3) {
              if (r(t3))
                return false;
              var e2 = t3.fns;
              return i(e2) ? Hi(Array.isArray(e2) ? e2[0] : e2) : (t3._length || t3.length) > 1;
            }
            function Vi(t3, e2) {
              true !== e2.data.show && Pi(e2);
            }
            var Yi = function(t3) {
              var e2, n3, s2 = {}, c2 = t3.modules, u2 = t3.nodeOps;
              for (e2 = 0; e2 < ar.length; ++e2)
                for (s2[ar[e2]] = [], n3 = 0; n3 < c2.length; ++n3)
                  i(c2[n3][ar[e2]]) && s2[ar[e2]].push(c2[n3][ar[e2]]);
              function l2(t4) {
                var e3 = u2.parentNode(t4);
                i(e3) && u2.removeChild(e3, t4);
              }
              function f2(t4, e3, n4, r2, o2, c3, l3) {
                if (i(t4.elm) && i(c3) && (t4 = c3[l3] = bt(t4)), t4.isRootInsert = !o2, !function(t5, e4, n5, r3) {
                  var o3 = t5.data;
                  if (i(o3)) {
                    var c4 = i(t5.componentInstance) && o3.keepAlive;
                    if (i(o3 = o3.hook) && i(o3 = o3.init) && o3(t5, false), i(t5.componentInstance))
                      return d2(t5, e4), p2(n5, t5.elm, r3), a(c4) && function(t6, e5, n6, r4) {
                        var a2, o4 = t6;
                        for (; o4.componentInstance; )
                          if (o4 = o4.componentInstance._vnode, i(a2 = o4.data) && i(a2 = a2.transition)) {
                            for (a2 = 0; a2 < s2.activate.length; ++a2)
                              s2.activate[a2](ir, o4);
                            e5.push(o4);
                            break;
                          }
                        p2(n6, t6.elm, r4);
                      }(t5, e4, n5, r3), true;
                  }
                }(t4, e3, n4, r2)) {
                  var f3 = t4.data, v2 = t4.children, m3 = t4.tag;
                  i(m3) ? (t4.elm = t4.ns ? u2.createElementNS(t4.ns, m3) : u2.createElement(m3, t4), y2(t4), h2(t4, v2, e3), i(f3) && g2(t4, e3), p2(n4, t4.elm, r2)) : a(t4.isComment) ? (t4.elm = u2.createComment(t4.text), p2(n4, t4.elm, r2)) : (t4.elm = u2.createTextNode(t4.text), p2(n4, t4.elm, r2));
                }
              }
              function d2(t4, e3) {
                i(t4.data.pendingInsert) && (e3.push.apply(e3, t4.data.pendingInsert), t4.data.pendingInsert = null), t4.elm = t4.componentInstance.$el, m2(t4) ? (g2(t4, e3), y2(t4)) : (rr(t4), e3.push(t4));
              }
              function p2(t4, e3, n4) {
                i(t4) && (i(n4) ? u2.parentNode(n4) === t4 && u2.insertBefore(t4, e3, n4) : u2.appendChild(t4, e3));
              }
              function h2(t4, e3, n4) {
                if (Array.isArray(e3)) {
                  0;
                  for (var r2 = 0; r2 < e3.length; ++r2)
                    f2(e3[r2], n4, t4.elm, null, true, e3, r2);
                } else
                  o(t4.text) && u2.appendChild(t4.elm, u2.createTextNode(String(t4.text)));
              }
              function m2(t4) {
                for (; t4.componentInstance; )
                  t4 = t4.componentInstance._vnode;
                return i(t4.tag);
              }
              function g2(t4, n4) {
                for (var r2 = 0; r2 < s2.create.length; ++r2)
                  s2.create[r2](ir, t4);
                i(e2 = t4.data.hook) && (i(e2.create) && e2.create(ir, t4), i(e2.insert) && n4.push(t4));
              }
              function y2(t4) {
                var e3;
                if (i(e3 = t4.fnScopeId))
                  u2.setStyleScope(t4.elm, e3);
                else
                  for (var n4 = t4; n4; )
                    i(e3 = n4.context) && i(e3 = e3.$options._scopeId) && u2.setStyleScope(t4.elm, e3), n4 = n4.parent;
                i(e3 = Je) && e3 !== t4.context && e3 !== t4.fnContext && i(e3 = e3.$options._scopeId) && u2.setStyleScope(t4.elm, e3);
              }
              function b2(t4, e3, n4, r2, i2, a2) {
                for (; r2 <= i2; ++r2)
                  f2(n4[r2], a2, t4, e3, false, n4, r2);
              }
              function _3(t4) {
                var e3, n4, r2 = t4.data;
                if (i(r2))
                  for (i(e3 = r2.hook) && i(e3 = e3.destroy) && e3(t4), e3 = 0; e3 < s2.destroy.length; ++e3)
                    s2.destroy[e3](t4);
                if (i(e3 = t4.children))
                  for (n4 = 0; n4 < t4.children.length; ++n4)
                    _3(t4.children[n4]);
              }
              function x2(t4, e3, n4) {
                for (; e3 <= n4; ++e3) {
                  var r2 = t4[e3];
                  i(r2) && (i(r2.tag) ? (w2(r2), _3(r2)) : l2(r2.elm));
                }
              }
              function w2(t4, e3) {
                if (i(e3) || i(t4.data)) {
                  var n4, r2 = s2.remove.length + 1;
                  for (i(e3) ? e3.listeners += r2 : e3 = function(t5, e4) {
                    function n5() {
                      0 == --n5.listeners && l2(t5);
                    }
                    return n5.listeners = e4, n5;
                  }(t4.elm, r2), i(n4 = t4.componentInstance) && i(n4 = n4._vnode) && i(n4.data) && w2(n4, e3), n4 = 0; n4 < s2.remove.length; ++n4)
                    s2.remove[n4](t4, e3);
                  i(n4 = t4.data.hook) && i(n4 = n4.remove) ? n4(t4, e3) : e3();
                } else
                  l2(t4.elm);
              }
              function C2(t4, e3, n4, r2) {
                for (var a2 = n4; a2 < r2; a2++) {
                  var o2 = e3[a2];
                  if (i(o2) && or(t4, o2))
                    return a2;
                }
              }
              function S2(t4, e3, n4, o2, c3, l3) {
                if (t4 !== e3) {
                  i(e3.elm) && i(o2) && (e3 = o2[c3] = bt(e3));
                  var d3 = e3.elm = t4.elm;
                  if (a(t4.isAsyncPlaceholder))
                    i(e3.asyncFactory.resolved) ? M2(t4.elm, e3, n4) : e3.isAsyncPlaceholder = true;
                  else if (a(e3.isStatic) && a(t4.isStatic) && e3.key === t4.key && (a(e3.isCloned) || a(e3.isOnce)))
                    e3.componentInstance = t4.componentInstance;
                  else {
                    var p3, h3 = e3.data;
                    i(h3) && i(p3 = h3.hook) && i(p3 = p3.prepatch) && p3(t4, e3);
                    var v2 = t4.children, g3 = e3.children;
                    if (i(h3) && m2(e3)) {
                      for (p3 = 0; p3 < s2.update.length; ++p3)
                        s2.update[p3](t4, e3);
                      i(p3 = h3.hook) && i(p3 = p3.update) && p3(t4, e3);
                    }
                    r(e3.text) ? i(v2) && i(g3) ? v2 !== g3 && function(t5, e4, n5, a2, o3) {
                      var s3, c4, l4, d4 = 0, p4 = 0, h4 = e4.length - 1, v3 = e4[0], m3 = e4[h4], g4 = n5.length - 1, y3 = n5[0], _4 = n5[g4], w3 = !o3;
                      for (0; d4 <= h4 && p4 <= g4; )
                        r(v3) ? v3 = e4[++d4] : r(m3) ? m3 = e4[--h4] : or(v3, y3) ? (S2(v3, y3, a2, n5, p4), v3 = e4[++d4], y3 = n5[++p4]) : or(m3, _4) ? (S2(m3, _4, a2, n5, g4), m3 = e4[--h4], _4 = n5[--g4]) : or(v3, _4) ? (S2(v3, _4, a2, n5, g4), w3 && u2.insertBefore(t5, v3.elm, u2.nextSibling(m3.elm)), v3 = e4[++d4], _4 = n5[--g4]) : or(m3, y3) ? (S2(m3, y3, a2, n5, p4), w3 && u2.insertBefore(t5, m3.elm, v3.elm), m3 = e4[--h4], y3 = n5[++p4]) : (r(s3) && (s3 = sr(e4, d4, h4)), r(c4 = i(y3.key) ? s3[y3.key] : C2(y3, e4, d4, h4)) ? f2(y3, a2, t5, v3.elm, false, n5, p4) : or(l4 = e4[c4], y3) ? (S2(l4, y3, a2, n5, p4), e4[c4] = void 0, w3 && u2.insertBefore(t5, l4.elm, v3.elm)) : f2(y3, a2, t5, v3.elm, false, n5, p4), y3 = n5[++p4]);
                      d4 > h4 ? b2(t5, r(n5[g4 + 1]) ? null : n5[g4 + 1].elm, n5, p4, g4, a2) : p4 > g4 && x2(e4, d4, h4);
                    }(d3, v2, g3, n4, l3) : i(g3) ? (i(t4.text) && u2.setTextContent(d3, ""), b2(d3, null, g3, 0, g3.length - 1, n4)) : i(v2) ? x2(v2, 0, v2.length - 1) : i(t4.text) && u2.setTextContent(d3, "") : t4.text !== e3.text && u2.setTextContent(d3, e3.text), i(h3) && i(p3 = h3.hook) && i(p3 = p3.postpatch) && p3(t4, e3);
                  }
                }
              }
              function O2(t4, e3, n4) {
                if (a(n4) && i(t4.parent))
                  t4.parent.data.pendingInsert = e3;
                else
                  for (var r2 = 0; r2 < e3.length; ++r2)
                    e3[r2].data.hook.insert(e3[r2]);
              }
              var k2 = v("attrs,class,staticClass,staticStyle,key");
              function M2(t4, e3, n4, r2) {
                var o2, s3 = e3.tag, c3 = e3.data, u3 = e3.children;
                if (r2 = r2 || c3 && c3.pre, e3.elm = t4, a(e3.isComment) && i(e3.asyncFactory))
                  return e3.isAsyncPlaceholder = true, true;
                if (i(c3) && (i(o2 = c3.hook) && i(o2 = o2.init) && o2(e3, true), i(o2 = e3.componentInstance)))
                  return d2(e3, n4), true;
                if (i(s3)) {
                  if (i(u3))
                    if (t4.hasChildNodes())
                      if (i(o2 = c3) && i(o2 = o2.domProps) && i(o2 = o2.innerHTML)) {
                        if (o2 !== t4.innerHTML)
                          return false;
                      } else {
                        for (var l3 = true, f3 = t4.firstChild, p3 = 0; p3 < u3.length; p3++) {
                          if (!f3 || !M2(f3, u3[p3], n4, r2)) {
                            l3 = false;
                            break;
                          }
                          f3 = f3.nextSibling;
                        }
                        if (!l3 || f3)
                          return false;
                      }
                    else
                      h2(e3, u3, n4);
                  if (i(c3)) {
                    var v2 = false;
                    for (var m3 in c3)
                      if (!k2(m3)) {
                        v2 = true, g2(e3, n4);
                        break;
                      }
                    !v2 && c3.class && ae(c3.class);
                  }
                } else
                  t4.data !== e3.text && (t4.data = e3.text);
                return true;
              }
              return function(t4, e3, n4, o2) {
                if (!r(e3)) {
                  var c3, l3 = false, d3 = [];
                  if (r(t4))
                    l3 = true, f2(e3, d3);
                  else {
                    var p3 = i(t4.nodeType);
                    if (!p3 && or(t4, e3))
                      S2(t4, e3, d3, null, null, o2);
                    else {
                      if (p3) {
                        if (1 === t4.nodeType && t4.hasAttribute("data-server-rendered") && (t4.removeAttribute("data-server-rendered"), n4 = true), a(n4) && M2(t4, e3, d3))
                          return O2(e3, d3, true), t4;
                        c3 = t4, t4 = new vt(u2.tagName(c3).toLowerCase(), {}, [], void 0, c3);
                      }
                      var h3 = t4.elm, v2 = u2.parentNode(h3);
                      if (f2(e3, d3, h3._leaveCb ? null : v2, u2.nextSibling(h3)), i(e3.parent))
                        for (var g3 = e3.parent, y3 = m2(e3); g3; ) {
                          for (var b3 = 0; b3 < s2.destroy.length; ++b3)
                            s2.destroy[b3](g3);
                          if (g3.elm = e3.elm, y3) {
                            for (var w3 = 0; w3 < s2.create.length; ++w3)
                              s2.create[w3](ir, g3);
                            var C3 = g3.data.hook.insert;
                            if (C3.merged)
                              for (var k3 = 1; k3 < C3.fns.length; k3++)
                                C3.fns[k3]();
                          } else
                            rr(g3);
                          g3 = g3.parent;
                        }
                      i(v2) ? x2([t4], 0, 0) : i(t4.tag) && _3(t4);
                    }
                  }
                  return O2(e3, d3, l3), e3.elm;
                }
                i(t4) && _3(t4);
              };
            }({ nodeOps: er, modules: [yr, kr, ni, ai, mi, U ? { create: Vi, activate: Vi, remove: function(t3, e2) {
              true !== t3.data.show ? zi(t3, e2) : e2();
            } } : {}].concat(hr) });
            J && document.addEventListener("selectionchange", function() {
              var t3 = document.activeElement;
              t3 && t3.vmodel && Xi(t3, "input");
            });
            var Fi = { inserted: function(t3, e2, n3, r2) {
              "select" === n3.tag ? (r2.elm && !r2.elm._vOptions ? ue(n3, "postpatch", function() {
                Fi.componentUpdated(t3, e2, n3);
              }) : Ri(t3, e2, n3.context), t3._vOptions = [].map.call(t3.options, Ui)) : ("textarea" === n3.tag || Zn(t3.type)) && (t3._vModifiers = e2.modifiers, e2.modifiers.lazy || (t3.addEventListener("compositionstart", qi), t3.addEventListener("compositionend", Ki), t3.addEventListener("change", Ki), J && (t3.vmodel = true)));
            }, componentUpdated: function(t3, e2, n3) {
              if ("select" === n3.tag) {
                Ri(t3, e2, n3.context);
                var r2 = t3._vOptions, i2 = t3._vOptions = [].map.call(t3.options, Ui);
                if (i2.some(function(t4, e3) {
                  return !$2(t4, r2[e3]);
                }))
                  (t3.multiple ? e2.value.some(function(t4) {
                    return Wi(t4, i2);
                  }) : e2.value !== e2.oldValue && Wi(e2.value, i2)) && Xi(t3, "change");
              }
            } };
            function Ri(t3, e2, n3) {
              Bi(t3, e2, n3), (G || Q) && setTimeout(function() {
                Bi(t3, e2, n3);
              }, 0);
            }
            function Bi(t3, e2, n3) {
              var r2 = e2.value, i2 = t3.multiple;
              if (!i2 || Array.isArray(r2)) {
                for (var a2, o2, s2 = 0, c2 = t3.options.length; s2 < c2; s2++)
                  if (o2 = t3.options[s2], i2)
                    a2 = I(r2, Ui(o2)) > -1, o2.selected !== a2 && (o2.selected = a2);
                  else if ($2(Ui(o2), r2))
                    return void (t3.selectedIndex !== s2 && (t3.selectedIndex = s2));
                i2 || (t3.selectedIndex = -1);
              }
            }
            function Wi(t3, e2) {
              return e2.every(function(e3) {
                return !$2(e3, t3);
              });
            }
            function Ui(t3) {
              return "_value" in t3 ? t3._value : t3.value;
            }
            function qi(t3) {
              t3.target.composing = true;
            }
            function Ki(t3) {
              t3.target.composing && (t3.target.composing = false, Xi(t3.target, "input"));
            }
            function Xi(t3, e2) {
              var n3 = document.createEvent("HTMLEvents");
              n3.initEvent(e2, true, true), t3.dispatchEvent(n3);
            }
            function Gi(t3) {
              return !t3.componentInstance || t3.data && t3.data.transition ? t3 : Gi(t3.componentInstance._vnode);
            }
            var Ji = { model: Fi, show: { bind: function(t3, e2, n3) {
              var r2 = e2.value, i2 = (n3 = Gi(n3)).data && n3.data.transition, a2 = t3.__vOriginalDisplay = "none" === t3.style.display ? "" : t3.style.display;
              r2 && i2 ? (n3.data.show = true, Pi(n3, function() {
                t3.style.display = a2;
              })) : t3.style.display = r2 ? a2 : "none";
            }, update: function(t3, e2, n3) {
              var r2 = e2.value;
              !r2 != !e2.oldValue && ((n3 = Gi(n3)).data && n3.data.transition ? (n3.data.show = true, r2 ? Pi(n3, function() {
                t3.style.display = t3.__vOriginalDisplay;
              }) : zi(n3, function() {
                t3.style.display = "none";
              })) : t3.style.display = r2 ? t3.__vOriginalDisplay : "none");
            }, unbind: function(t3, e2, n3, r2, i2) {
              i2 || (t3.style.display = t3.__vOriginalDisplay);
            } } }, Qi = { name: String, appear: Boolean, css: Boolean, mode: String, type: String, enterClass: String, leaveClass: String, enterToClass: String, leaveToClass: String, enterActiveClass: String, leaveActiveClass: String, appearClass: String, appearActiveClass: String, appearToClass: String, duration: [Number, String, Object] };
            function Zi(t3) {
              var e2 = t3 && t3.componentOptions;
              return e2 && e2.Ctor.options.abstract ? Zi(Ue(e2.children)) : t3;
            }
            function ta(t3) {
              var e2 = {}, n3 = t3.$options;
              for (var r2 in n3.propsData)
                e2[r2] = t3[r2];
              var i2 = n3._parentListeners;
              for (var a2 in i2)
                e2[C(a2)] = i2[a2];
              return e2;
            }
            function ea(t3, e2) {
              if (/\d-keep-alive$/.test(e2.tag))
                return t3("keep-alive", { props: e2.componentOptions.propsData });
            }
            var na = function(t3) {
              return t3.tag || me(t3);
            }, ra = function(t3) {
              return "show" === t3.name;
            }, ia = { name: "transition", props: Qi, abstract: true, render: function(t3) {
              var e2 = this, n3 = this.$slots.default;
              if (n3 && (n3 = n3.filter(na)).length) {
                0;
                var r2 = this.mode;
                0;
                var i2 = n3[0];
                if (function(t4) {
                  for (; t4 = t4.parent; )
                    if (t4.data.transition)
                      return true;
                }(this.$vnode))
                  return i2;
                var a2 = Zi(i2);
                if (!a2)
                  return i2;
                if (this._leaving)
                  return ea(t3, i2);
                var s2 = "__transition-" + this._uid + "-";
                a2.key = null == a2.key ? a2.isComment ? s2 + "comment" : s2 + a2.tag : o(a2.key) ? 0 === String(a2.key).indexOf(s2) ? a2.key : s2 + a2.key : a2.key;
                var c2 = (a2.data || (a2.data = {})).transition = ta(this), u2 = this._vnode, l2 = Zi(u2);
                if (a2.data.directives && a2.data.directives.some(ra) && (a2.data.show = true), l2 && l2.data && !function(t4, e3) {
                  return e3.key === t4.key && e3.tag === t4.tag;
                }(a2, l2) && !me(l2) && (!l2.componentInstance || !l2.componentInstance._vnode.isComment)) {
                  var f2 = l2.data.transition = j({}, c2);
                  if ("out-in" === r2)
                    return this._leaving = true, ue(f2, "afterLeave", function() {
                      e2._leaving = false, e2.$forceUpdate();
                    }), ea(t3, i2);
                  if ("in-out" === r2) {
                    if (me(a2))
                      return u2;
                    var d2, p2 = function() {
                      d2();
                    };
                    ue(c2, "afterEnter", p2), ue(c2, "enterCancelled", p2), ue(f2, "delayLeave", function(t4) {
                      d2 = t4;
                    });
                  }
                }
                return i2;
              }
            } }, aa = j({ tag: String, moveClass: String }, Qi);
            function oa(t3) {
              t3.elm._moveCb && t3.elm._moveCb(), t3.elm._enterCb && t3.elm._enterCb();
            }
            function sa(t3) {
              t3.data.newPos = t3.elm.getBoundingClientRect();
            }
            function ca(t3) {
              var e2 = t3.data.pos, n3 = t3.data.newPos, r2 = e2.left - n3.left, i2 = e2.top - n3.top;
              if (r2 || i2) {
                t3.data.moved = true;
                var a2 = t3.elm.style;
                a2.transform = a2.WebkitTransform = "translate(" + r2 + "px," + i2 + "px)", a2.transitionDuration = "0s";
              }
            }
            delete aa.mode;
            var ua = { Transition: ia, TransitionGroup: { props: aa, beforeMount: function() {
              var t3 = this, e2 = this._update;
              this._update = function(n3, r2) {
                var i2 = Qe(t3);
                t3.__patch__(t3._vnode, t3.kept, false, true), t3._vnode = t3.kept, i2(), e2.call(t3, n3, r2);
              };
            }, render: function(t3) {
              for (var e2 = this.tag || this.$vnode.data.tag || "span", n3 = /* @__PURE__ */ Object.create(null), r2 = this.prevChildren = this.children, i2 = this.$slots.default || [], a2 = this.children = [], o2 = ta(this), s2 = 0; s2 < i2.length; s2++) {
                var c2 = i2[s2];
                if (c2.tag)
                  if (null != c2.key && 0 !== String(c2.key).indexOf("__vlist"))
                    a2.push(c2), n3[c2.key] = c2, (c2.data || (c2.data = {})).transition = o2;
                  else
                    ;
              }
              if (r2) {
                for (var u2 = [], l2 = [], f2 = 0; f2 < r2.length; f2++) {
                  var d2 = r2[f2];
                  d2.data.transition = o2, d2.data.pos = d2.elm.getBoundingClientRect(), n3[d2.key] ? u2.push(d2) : l2.push(d2);
                }
                this.kept = t3(e2, null, u2), this.removed = l2;
              }
              return t3(e2, null, a2);
            }, updated: function() {
              var t3 = this.prevChildren, e2 = this.moveClass || (this.name || "v") + "-move";
              t3.length && this.hasMove(t3[0].elm, e2) && (t3.forEach(oa), t3.forEach(sa), t3.forEach(ca), this._reflow = document.body.offsetHeight, t3.forEach(function(t4) {
                if (t4.data.moved) {
                  var n3 = t4.elm, r2 = n3.style;
                  ji(n3, e2), r2.transform = r2.WebkitTransform = r2.transitionDuration = "", n3.addEventListener(Si, n3._moveCb = function t5(r3) {
                    r3 && r3.target !== n3 || r3 && !/transform$/.test(r3.propertyName) || (n3.removeEventListener(Si, t5), n3._moveCb = null, Li(n3, e2));
                  });
                }
              }));
            }, methods: { hasMove: function(t3, e2) {
              if (!wi)
                return false;
              if (this._hasMove)
                return this._hasMove;
              var n3 = t3.cloneNode();
              t3._transitionClasses && t3._transitionClasses.forEach(function(t4) {
                bi(n3, t4);
              }), yi(n3, e2), n3.style.display = "none", this.$el.appendChild(n3);
              var r2 = Ti(n3);
              return this.$el.removeChild(n3), this._hasMove = r2.hasTransform;
            } } } };
            On.config.mustUseProp = In, On.config.isReservedTag = Gn, On.config.isReservedAttr = Tn, On.config.getTagNamespace = Jn, On.config.isUnknownElement = function(t3) {
              if (!U)
                return true;
              if (Gn(t3))
                return false;
              if (t3 = t3.toLowerCase(), null != Qn[t3])
                return Qn[t3];
              var e2 = document.createElement(t3);
              return t3.indexOf("-") > -1 ? Qn[t3] = e2.constructor === window.HTMLUnknownElement || e2.constructor === window.HTMLElement : Qn[t3] = /HTMLUnknownElement/.test(e2.toString());
            }, j(On.options.directives, Ji), j(On.options.components, ua), On.prototype.__patch__ = U ? Yi : E, On.prototype.$mount = function(t3, e2) {
              return function(t4, e3, n3) {
                var r2;
                return t4.$el = e3, t4.$options.render || (t4.$options.render = gt), en(t4, "beforeMount"), r2 = function() {
                  t4._update(t4._render(), n3);
                }, new hn(t4, r2, E, { before: function() {
                  t4._isMounted && !t4._isDestroyed && en(t4, "beforeUpdate");
                } }, true), n3 = false, null == t4.$vnode && (t4._isMounted = true, en(t4, "mounted")), t4;
              }(this, t3 = t3 && U ? tr(t3) : void 0, e2);
            }, U && setTimeout(function() {
              H.devtools && at && at.emit("init", On);
            }, 0);
            var la = /\{\{((?:.|\r?\n)+?)\}\}/g, fa = /[-.*+?^${}()|[\]\/\\]/g, da = x(function(t3) {
              var e2 = t3[0].replace(fa, "\\$&"), n3 = t3[1].replace(fa, "\\$&");
              return new RegExp(e2 + "((?:.|\\n)+?)" + n3, "g");
            });
            var pa = { staticKeys: ["staticClass"], transformNode: function(t3, e2) {
              e2.warn;
              var n3 = Hr(t3, "class");
              n3 && (t3.staticClass = JSON.stringify(n3));
              var r2 = Nr(t3, "class", false);
              r2 && (t3.classBinding = r2);
            }, genData: function(t3) {
              var e2 = "";
              return t3.staticClass && (e2 += "staticClass:" + t3.staticClass + ","), t3.classBinding && (e2 += "class:" + t3.classBinding + ","), e2;
            } };
            var ha, va = { staticKeys: ["staticStyle"], transformNode: function(t3, e2) {
              e2.warn;
              var n3 = Hr(t3, "style");
              n3 && (t3.staticStyle = JSON.stringify(oi(n3)));
              var r2 = Nr(t3, "style", false);
              r2 && (t3.styleBinding = r2);
            }, genData: function(t3) {
              var e2 = "";
              return t3.staticStyle && (e2 += "staticStyle:" + t3.staticStyle + ","), t3.styleBinding && (e2 += "style:(" + t3.styleBinding + "),"), e2;
            } }, ma = function(t3) {
              return (ha = ha || document.createElement("div")).innerHTML = t3, ha.textContent;
            }, ga = v("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"), ya = v("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"), ba = v("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"), _a3 = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/, xa = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/, wa = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + V.source + "]*", Ca = "((?:" + wa + "\\:)?" + wa + ")", Sa = new RegExp("^<" + Ca), Oa = /^\s*(\/?)>/, ka = new RegExp("^<\\/" + Ca + "[^>]*>"), Ma = /^<!DOCTYPE [^>]+>/i, Da = /^<!\--/, ja = /^<!\[/, La = v("script,style,textarea", true), Ea = {}, Aa = { "&lt;": "<", "&gt;": ">", "&quot;": '"', "&amp;": "&", "&#10;": "\n", "&#9;": "	", "&#39;": "'" }, Ta = /&(?:lt|gt|quot|amp|#39);/g, $a = /&(?:lt|gt|quot|amp|#39|#10|#9);/g, Ia = v("pre,textarea", true), Pa = function(t3, e2) {
              return t3 && Ia(t3) && "\n" === e2[0];
            };
            function za(t3, e2) {
              var n3 = e2 ? $a : Ta;
              return t3.replace(n3, function(t4) {
                return Aa[t4];
              });
            }
            var Na, Ha, Va, Ya, Fa, Ra, Ba, Wa, Ua = /^@|^v-on:/, qa = /^v-|^@|^:|^#/, Ka = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/, Xa = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/, Ga = /^\(|\)$/g, Ja = /^\[.*\]$/, Qa = /:(.*)$/, Za = /^:|^\.|^v-bind:/, to = /\.[^.\]]+(?=[^\]]*$)/g, eo = /^v-slot(:|$)|^#/, no = /[\r\n]/, ro = /[ \f\t\r\n]+/g, io = x(ma);
            function ao(t3, e2, n3) {
              return { type: 1, tag: t3, attrsList: e2, attrsMap: po(e2), rawAttrsMap: {}, parent: n3, children: [] };
            }
            function oo(t3, e2) {
              Na = e2.warn || Lr, Ra = e2.isPreTag || A, Ba = e2.mustUseProp || A, Wa = e2.getTagNamespace || A;
              var n3 = e2.isReservedTag || A;
              (function(t4) {
                return !(!(t4.component || t4.attrsMap[":is"] || t4.attrsMap["v-bind:is"]) && (t4.attrsMap.is ? n3(t4.attrsMap.is) : n3(t4.tag)));
              }), Va = Er(e2.modules, "transformNode"), Ya = Er(e2.modules, "preTransformNode"), Fa = Er(e2.modules, "postTransformNode"), Ha = e2.delimiters;
              var r2, i2, a2 = [], o2 = false !== e2.preserveWhitespace, s2 = e2.whitespace, c2 = false, u2 = false;
              function l2(t4) {
                if (f2(t4), c2 || t4.processed || (t4 = so(t4, e2)), a2.length || t4 === r2 || r2.if && (t4.elseif || t4.else) && uo(r2, { exp: t4.elseif, block: t4 }), i2 && !t4.forbidden)
                  if (t4.elseif || t4.else)
                    o3 = t4, (s3 = function(t5) {
                      for (var e3 = t5.length; e3--; ) {
                        if (1 === t5[e3].type)
                          return t5[e3];
                        t5.pop();
                      }
                    }(i2.children)) && s3.if && uo(s3, { exp: o3.elseif, block: o3 });
                  else {
                    if (t4.slotScope) {
                      var n4 = t4.slotTarget || '"default"';
                      (i2.scopedSlots || (i2.scopedSlots = {}))[n4] = t4;
                    }
                    i2.children.push(t4), t4.parent = i2;
                  }
                var o3, s3;
                t4.children = t4.children.filter(function(t5) {
                  return !t5.slotScope;
                }), f2(t4), t4.pre && (c2 = false), Ra(t4.tag) && (u2 = false);
                for (var l3 = 0; l3 < Fa.length; l3++)
                  Fa[l3](t4, e2);
              }
              function f2(t4) {
                if (!u2)
                  for (var e3; (e3 = t4.children[t4.children.length - 1]) && 3 === e3.type && " " === e3.text; )
                    t4.children.pop();
              }
              return function(t4, e3) {
                for (var n4, r3, i3 = [], a3 = e3.expectHTML, o3 = e3.isUnaryTag || A, s3 = e3.canBeLeftOpenTag || A, c3 = 0; t4; ) {
                  if (n4 = t4, r3 && La(r3)) {
                    var u3 = 0, l3 = r3.toLowerCase(), f3 = Ea[l3] || (Ea[l3] = new RegExp("([\\s\\S]*?)(</" + l3 + "[^>]*>)", "i")), d2 = t4.replace(f3, function(t5, n5, r4) {
                      return u3 = r4.length, La(l3) || "noscript" === l3 || (n5 = n5.replace(/<!\--([\s\S]*?)-->/g, "$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g, "$1")), Pa(l3, n5) && (n5 = n5.slice(1)), e3.chars && e3.chars(n5), "";
                    });
                    c3 += t4.length - d2.length, t4 = d2, k2(l3, c3 - u3, c3);
                  } else {
                    var p2 = t4.indexOf("<");
                    if (0 === p2) {
                      if (Da.test(t4)) {
                        var h2 = t4.indexOf("-->");
                        if (h2 >= 0) {
                          e3.shouldKeepComment && e3.comment(t4.substring(4, h2), c3, c3 + h2 + 3), C2(h2 + 3);
                          continue;
                        }
                      }
                      if (ja.test(t4)) {
                        var v2 = t4.indexOf("]>");
                        if (v2 >= 0) {
                          C2(v2 + 2);
                          continue;
                        }
                      }
                      var m2 = t4.match(Ma);
                      if (m2) {
                        C2(m2[0].length);
                        continue;
                      }
                      var g2 = t4.match(ka);
                      if (g2) {
                        var y2 = c3;
                        C2(g2[0].length), k2(g2[1], y2, c3);
                        continue;
                      }
                      var b2 = S2();
                      if (b2) {
                        O2(b2), Pa(b2.tagName, t4) && C2(1);
                        continue;
                      }
                    }
                    var _3 = void 0, x2 = void 0, w2 = void 0;
                    if (p2 >= 0) {
                      for (x2 = t4.slice(p2); !(ka.test(x2) || Sa.test(x2) || Da.test(x2) || ja.test(x2) || (w2 = x2.indexOf("<", 1)) < 0); )
                        p2 += w2, x2 = t4.slice(p2);
                      _3 = t4.substring(0, p2);
                    }
                    p2 < 0 && (_3 = t4), _3 && C2(_3.length), e3.chars && _3 && e3.chars(_3, c3 - _3.length, c3);
                  }
                  if (t4 === n4) {
                    e3.chars && e3.chars(t4);
                    break;
                  }
                }
                function C2(e4) {
                  c3 += e4, t4 = t4.substring(e4);
                }
                function S2() {
                  var e4 = t4.match(Sa);
                  if (e4) {
                    var n5, r4, i4 = { tagName: e4[1], attrs: [], start: c3 };
                    for (C2(e4[0].length); !(n5 = t4.match(Oa)) && (r4 = t4.match(xa) || t4.match(_a3)); )
                      r4.start = c3, C2(r4[0].length), r4.end = c3, i4.attrs.push(r4);
                    if (n5)
                      return i4.unarySlash = n5[1], C2(n5[0].length), i4.end = c3, i4;
                  }
                }
                function O2(t5) {
                  var n5 = t5.tagName, c4 = t5.unarySlash;
                  a3 && ("p" === r3 && ba(n5) && k2(r3), s3(n5) && r3 === n5 && k2(n5));
                  for (var u4 = o3(n5) || !!c4, l4 = t5.attrs.length, f4 = new Array(l4), d3 = 0; d3 < l4; d3++) {
                    var p3 = t5.attrs[d3], h3 = p3[3] || p3[4] || p3[5] || "", v3 = "a" === n5 && "href" === p3[1] ? e3.shouldDecodeNewlinesForHref : e3.shouldDecodeNewlines;
                    f4[d3] = { name: p3[1], value: za(h3, v3) };
                  }
                  u4 || (i3.push({ tag: n5, lowerCasedTag: n5.toLowerCase(), attrs: f4, start: t5.start, end: t5.end }), r3 = n5), e3.start && e3.start(n5, f4, u4, t5.start, t5.end);
                }
                function k2(t5, n5, a4) {
                  var o4, s4;
                  if (null == n5 && (n5 = c3), null == a4 && (a4 = c3), t5)
                    for (s4 = t5.toLowerCase(), o4 = i3.length - 1; o4 >= 0 && i3[o4].lowerCasedTag !== s4; o4--)
                      ;
                  else
                    o4 = 0;
                  if (o4 >= 0) {
                    for (var u4 = i3.length - 1; u4 >= o4; u4--)
                      e3.end && e3.end(i3[u4].tag, n5, a4);
                    i3.length = o4, r3 = o4 && i3[o4 - 1].tag;
                  } else
                    "br" === s4 ? e3.start && e3.start(t5, [], true, n5, a4) : "p" === s4 && (e3.start && e3.start(t5, [], false, n5, a4), e3.end && e3.end(t5, n5, a4));
                }
                k2();
              }(t3, { warn: Na, expectHTML: e2.expectHTML, isUnaryTag: e2.isUnaryTag, canBeLeftOpenTag: e2.canBeLeftOpenTag, shouldDecodeNewlines: e2.shouldDecodeNewlines, shouldDecodeNewlinesForHref: e2.shouldDecodeNewlinesForHref, shouldKeepComment: e2.comments, outputSourceRange: e2.outputSourceRange, start: function(t4, n4, o3, s3, f3) {
                var d2 = i2 && i2.ns || Wa(t4);
                G && "svg" === d2 && (n4 = function(t5) {
                  for (var e3 = [], n5 = 0; n5 < t5.length; n5++) {
                    var r3 = t5[n5];
                    ho.test(r3.name) || (r3.name = r3.name.replace(vo, ""), e3.push(r3));
                  }
                  return e3;
                }(n4));
                var p2, h2 = ao(t4, n4, i2);
                d2 && (h2.ns = d2), "style" !== (p2 = h2).tag && ("script" !== p2.tag || p2.attrsMap.type && "text/javascript" !== p2.attrsMap.type) || it() || (h2.forbidden = true);
                for (var v2 = 0; v2 < Ya.length; v2++)
                  h2 = Ya[v2](h2, e2) || h2;
                c2 || (!function(t5) {
                  null != Hr(t5, "v-pre") && (t5.pre = true);
                }(h2), h2.pre && (c2 = true)), Ra(h2.tag) && (u2 = true), c2 ? function(t5) {
                  var e3 = t5.attrsList, n5 = e3.length;
                  if (n5)
                    for (var r3 = t5.attrs = new Array(n5), i3 = 0; i3 < n5; i3++)
                      r3[i3] = { name: e3[i3].name, value: JSON.stringify(e3[i3].value) }, null != e3[i3].start && (r3[i3].start = e3[i3].start, r3[i3].end = e3[i3].end);
                  else
                    t5.pre || (t5.plain = true);
                }(h2) : h2.processed || (co(h2), function(t5) {
                  var e3 = Hr(t5, "v-if");
                  if (e3)
                    t5.if = e3, uo(t5, { exp: e3, block: t5 });
                  else {
                    null != Hr(t5, "v-else") && (t5.else = true);
                    var n5 = Hr(t5, "v-else-if");
                    n5 && (t5.elseif = n5);
                  }
                }(h2), function(t5) {
                  null != Hr(t5, "v-once") && (t5.once = true);
                }(h2)), r2 || (r2 = h2), o3 ? l2(h2) : (i2 = h2, a2.push(h2));
              }, end: function(t4, e3, n4) {
                var r3 = a2[a2.length - 1];
                a2.length -= 1, i2 = a2[a2.length - 1], l2(r3);
              }, chars: function(t4, e3, n4) {
                if (i2 && (!G || "textarea" !== i2.tag || i2.attrsMap.placeholder !== t4)) {
                  var r3, a3, l3, f3 = i2.children;
                  if (t4 = u2 || t4.trim() ? "script" === (r3 = i2).tag || "style" === r3.tag ? t4 : io(t4) : f3.length ? s2 ? "condense" === s2 && no.test(t4) ? "" : " " : o2 ? " " : "" : "")
                    u2 || "condense" !== s2 || (t4 = t4.replace(ro, " ")), !c2 && " " !== t4 && (a3 = function(t5, e4) {
                      var n5 = e4 ? da(e4) : la;
                      if (n5.test(t5)) {
                        for (var r4, i3, a4, o3 = [], s3 = [], c3 = n5.lastIndex = 0; r4 = n5.exec(t5); ) {
                          (i3 = r4.index) > c3 && (s3.push(a4 = t5.slice(c3, i3)), o3.push(JSON.stringify(a4)));
                          var u3 = Dr(r4[1].trim());
                          o3.push("_s(" + u3 + ")"), s3.push({ "@binding": u3 }), c3 = i3 + r4[0].length;
                        }
                        return c3 < t5.length && (s3.push(a4 = t5.slice(c3)), o3.push(JSON.stringify(a4))), { expression: o3.join("+"), tokens: s3 };
                      }
                    }(t4, Ha)) ? l3 = { type: 2, expression: a3.expression, tokens: a3.tokens, text: t4 } : " " === t4 && f3.length && " " === f3[f3.length - 1].text || (l3 = { type: 3, text: t4 }), l3 && f3.push(l3);
                }
              }, comment: function(t4, e3, n4) {
                if (i2) {
                  var r3 = { type: 3, text: t4, isComment: true };
                  0, i2.children.push(r3);
                }
              } }), r2;
            }
            function so(t3, e2) {
              var n3;
              !function(t4) {
                var e3 = Nr(t4, "key");
                if (e3) {
                  t4.key = e3;
                }
              }(t3), t3.plain = !t3.key && !t3.scopedSlots && !t3.attrsList.length, function(t4) {
                var e3 = Nr(t4, "ref");
                e3 && (t4.ref = e3, t4.refInFor = function(t5) {
                  var e4 = t5;
                  for (; e4; ) {
                    if (void 0 !== e4.for)
                      return true;
                    e4 = e4.parent;
                  }
                  return false;
                }(t4));
              }(t3), function(t4) {
                var e3;
                "template" === t4.tag ? (e3 = Hr(t4, "scope"), t4.slotScope = e3 || Hr(t4, "slot-scope")) : (e3 = Hr(t4, "slot-scope")) && (t4.slotScope = e3);
                var n4 = Nr(t4, "slot");
                n4 && (t4.slotTarget = '""' === n4 ? '"default"' : n4, t4.slotTargetDynamic = !(!t4.attrsMap[":slot"] && !t4.attrsMap["v-bind:slot"]), "template" === t4.tag || t4.slotScope || Tr(t4, "slot", n4, function(t5, e4) {
                  return t5.rawAttrsMap[":" + e4] || t5.rawAttrsMap["v-bind:" + e4] || t5.rawAttrsMap[e4];
                }(t4, "slot")));
                if ("template" === t4.tag) {
                  var r3 = Vr(t4, eo);
                  if (r3) {
                    0;
                    var i2 = lo(r3), a2 = i2.name, o2 = i2.dynamic;
                    t4.slotTarget = a2, t4.slotTargetDynamic = o2, t4.slotScope = r3.value || "_empty_";
                  }
                } else {
                  var s2 = Vr(t4, eo);
                  if (s2) {
                    0;
                    var c2 = t4.scopedSlots || (t4.scopedSlots = {}), u2 = lo(s2), l2 = u2.name, f2 = u2.dynamic, d2 = c2[l2] = ao("template", [], t4);
                    d2.slotTarget = l2, d2.slotTargetDynamic = f2, d2.children = t4.children.filter(function(t5) {
                      if (!t5.slotScope)
                        return t5.parent = d2, true;
                    }), d2.slotScope = s2.value || "_empty_", t4.children = [], t4.plain = false;
                  }
                }
              }(t3), "slot" === (n3 = t3).tag && (n3.slotName = Nr(n3, "name")), function(t4) {
                var e3;
                (e3 = Nr(t4, "is")) && (t4.component = e3);
                null != Hr(t4, "inline-template") && (t4.inlineTemplate = true);
              }(t3);
              for (var r2 = 0; r2 < Va.length; r2++)
                t3 = Va[r2](t3, e2) || t3;
              return function(t4) {
                var e3, n4, r3, i2, a2, o2, s2, c2, u2 = t4.attrsList;
                for (e3 = 0, n4 = u2.length; e3 < n4; e3++) {
                  if (r3 = i2 = u2[e3].name, a2 = u2[e3].value, qa.test(r3))
                    if (t4.hasBindings = true, (o2 = fo(r3.replace(qa, ""))) && (r3 = r3.replace(to, "")), Za.test(r3))
                      r3 = r3.replace(Za, ""), a2 = Dr(a2), (c2 = Ja.test(r3)) && (r3 = r3.slice(1, -1)), o2 && (o2.prop && !c2 && "innerHtml" === (r3 = C(r3)) && (r3 = "innerHTML"), o2.camel && !c2 && (r3 = C(r3)), o2.sync && (s2 = Rr(a2, "$event"), c2 ? zr(t4, '"update:"+(' + r3 + ")", s2, null, false, 0, u2[e3], true) : (zr(t4, "update:" + C(r3), s2, null, false, 0, u2[e3]), k(r3) !== C(r3) && zr(t4, "update:" + k(r3), s2, null, false, 0, u2[e3])))), o2 && o2.prop || !t4.component && Ba(t4.tag, t4.attrsMap.type, r3) ? Ar(t4, r3, a2, u2[e3], c2) : Tr(t4, r3, a2, u2[e3], c2);
                    else if (Ua.test(r3))
                      r3 = r3.replace(Ua, ""), (c2 = Ja.test(r3)) && (r3 = r3.slice(1, -1)), zr(t4, r3, a2, o2, false, 0, u2[e3], c2);
                    else {
                      var l2 = (r3 = r3.replace(qa, "")).match(Qa), f2 = l2 && l2[1];
                      c2 = false, f2 && (r3 = r3.slice(0, -(f2.length + 1)), Ja.test(f2) && (f2 = f2.slice(1, -1), c2 = true)), Ir(t4, r3, i2, a2, f2, c2, o2, u2[e3]);
                    }
                  else
                    Tr(t4, r3, JSON.stringify(a2), u2[e3]), !t4.component && "muted" === r3 && Ba(t4.tag, t4.attrsMap.type, r3) && Ar(t4, r3, "true", u2[e3]);
                }
              }(t3), t3;
            }
            function co(t3) {
              var e2;
              if (e2 = Hr(t3, "v-for")) {
                var n3 = function(t4) {
                  var e3 = t4.match(Ka);
                  if (!e3)
                    return;
                  var n4 = {};
                  n4.for = e3[2].trim();
                  var r2 = e3[1].trim().replace(Ga, ""), i2 = r2.match(Xa);
                  i2 ? (n4.alias = r2.replace(Xa, "").trim(), n4.iterator1 = i2[1].trim(), i2[2] && (n4.iterator2 = i2[2].trim())) : n4.alias = r2;
                  return n4;
                }(e2);
                n3 && j(t3, n3);
              }
            }
            function uo(t3, e2) {
              t3.ifConditions || (t3.ifConditions = []), t3.ifConditions.push(e2);
            }
            function lo(t3) {
              var e2 = t3.name.replace(eo, "");
              return e2 || "#" !== t3.name[0] && (e2 = "default"), Ja.test(e2) ? { name: e2.slice(1, -1), dynamic: true } : { name: '"' + e2 + '"', dynamic: false };
            }
            function fo(t3) {
              var e2 = t3.match(to);
              if (e2) {
                var n3 = {};
                return e2.forEach(function(t4) {
                  n3[t4.slice(1)] = true;
                }), n3;
              }
            }
            function po(t3) {
              for (var e2 = {}, n3 = 0, r2 = t3.length; n3 < r2; n3++)
                e2[t3[n3].name] = t3[n3].value;
              return e2;
            }
            var ho = /^xmlns:NS\d+/, vo = /^NS\d+:/;
            function mo(t3) {
              return ao(t3.tag, t3.attrsList.slice(), t3.parent);
            }
            var go = [pa, va, { preTransformNode: function(t3, e2) {
              if ("input" === t3.tag) {
                var n3, r2 = t3.attrsMap;
                if (!r2["v-model"])
                  return;
                if ((r2[":type"] || r2["v-bind:type"]) && (n3 = Nr(t3, "type")), r2.type || n3 || !r2["v-bind"] || (n3 = "(" + r2["v-bind"] + ").type"), n3) {
                  var i2 = Hr(t3, "v-if", true), a2 = i2 ? "&&(" + i2 + ")" : "", o2 = null != Hr(t3, "v-else", true), s2 = Hr(t3, "v-else-if", true), c2 = mo(t3);
                  co(c2), $r(c2, "type", "checkbox"), so(c2, e2), c2.processed = true, c2.if = "(" + n3 + ")==='checkbox'" + a2, uo(c2, { exp: c2.if, block: c2 });
                  var u2 = mo(t3);
                  Hr(u2, "v-for", true), $r(u2, "type", "radio"), so(u2, e2), uo(c2, { exp: "(" + n3 + ")==='radio'" + a2, block: u2 });
                  var l2 = mo(t3);
                  return Hr(l2, "v-for", true), $r(l2, ":type", n3), so(l2, e2), uo(c2, { exp: i2, block: l2 }), o2 ? c2.else = true : s2 && (c2.elseif = s2), c2;
                }
              }
            } }];
            var yo, bo, _o = { expectHTML: true, modules: go, directives: { model: function(t3, e2, n3) {
              n3;
              var r2 = e2.value, i2 = e2.modifiers, a2 = t3.tag, o2 = t3.attrsMap.type;
              if (t3.component)
                return Fr(t3, r2, i2), false;
              if ("select" === a2)
                !function(t4, e3, n4) {
                  var r3 = 'var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return ' + (n4 && n4.number ? "_n(val)" : "val") + "});";
                  r3 = r3 + " " + Rr(e3, "$event.target.multiple ? $$selectedVal : $$selectedVal[0]"), zr(t4, "change", r3, null, true);
                }(t3, r2, i2);
              else if ("input" === a2 && "checkbox" === o2)
                !function(t4, e3, n4) {
                  var r3 = n4 && n4.number, i3 = Nr(t4, "value") || "null", a3 = Nr(t4, "true-value") || "true", o3 = Nr(t4, "false-value") || "false";
                  Ar(t4, "checked", "Array.isArray(" + e3 + ")?_i(" + e3 + "," + i3 + ")>-1" + ("true" === a3 ? ":(" + e3 + ")" : ":_q(" + e3 + "," + a3 + ")")), zr(t4, "change", "var $$a=" + e3 + ",$$el=$event.target,$$c=$$el.checked?(" + a3 + "):(" + o3 + ");if(Array.isArray($$a)){var $$v=" + (r3 ? "_n(" + i3 + ")" : i3) + ",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(" + Rr(e3, "$$a.concat([$$v])") + ")}else{$$i>-1&&(" + Rr(e3, "$$a.slice(0,$$i).concat($$a.slice($$i+1))") + ")}}else{" + Rr(e3, "$$c") + "}", null, true);
                }(t3, r2, i2);
              else if ("input" === a2 && "radio" === o2)
                !function(t4, e3, n4) {
                  var r3 = n4 && n4.number, i3 = Nr(t4, "value") || "null";
                  Ar(t4, "checked", "_q(" + e3 + "," + (i3 = r3 ? "_n(" + i3 + ")" : i3) + ")"), zr(t4, "change", Rr(e3, i3), null, true);
                }(t3, r2, i2);
              else if ("input" === a2 || "textarea" === a2)
                !function(t4, e3, n4) {
                  var r3 = t4.attrsMap.type;
                  0;
                  var i3 = n4 || {}, a3 = i3.lazy, o3 = i3.number, s2 = i3.trim, c2 = !a3 && "range" !== r3, u2 = a3 ? "change" : "range" === r3 ? "__r" : "input", l2 = "$event.target.value";
                  s2 && (l2 = "$event.target.value.trim()");
                  o3 && (l2 = "_n(" + l2 + ")");
                  var f2 = Rr(e3, l2);
                  c2 && (f2 = "if($event.target.composing)return;" + f2);
                  Ar(t4, "value", "(" + e3 + ")"), zr(t4, u2, f2, null, true), (s2 || o3) && zr(t4, "blur", "$forceUpdate()");
                }(t3, r2, i2);
              else {
                if (!H.isReservedTag(a2))
                  return Fr(t3, r2, i2), false;
              }
              return true;
            }, text: function(t3, e2) {
              e2.value && Ar(t3, "textContent", "_s(" + e2.value + ")", e2);
            }, html: function(t3, e2) {
              e2.value && Ar(t3, "innerHTML", "_s(" + e2.value + ")", e2);
            } }, isPreTag: function(t3) {
              return "pre" === t3;
            }, isUnaryTag: ga, mustUseProp: In, canBeLeftOpenTag: ya, isReservedTag: Gn, getTagNamespace: Jn, staticKeys: function(t3) {
              return t3.reduce(function(t4, e2) {
                return t4.concat(e2.staticKeys || []);
              }, []).join(",");
            }(go) }, xo = x(function(t3) {
              return v("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap" + (t3 ? "," + t3 : ""));
            });
            function wo(t3, e2) {
              t3 && (yo = xo(e2.staticKeys || ""), bo = e2.isReservedTag || A, function t4(e3) {
                if (e3.static = function(t5) {
                  if (2 === t5.type)
                    return false;
                  if (3 === t5.type)
                    return true;
                  return !(!t5.pre && (t5.hasBindings || t5.if || t5.for || m(t5.tag) || !bo(t5.tag) || function(t6) {
                    for (; t6.parent; ) {
                      if ("template" !== (t6 = t6.parent).tag)
                        return false;
                      if (t6.for)
                        return true;
                    }
                    return false;
                  }(t5) || !Object.keys(t5).every(yo)));
                }(e3), 1 === e3.type) {
                  if (!bo(e3.tag) && "slot" !== e3.tag && null == e3.attrsMap["inline-template"])
                    return;
                  for (var n3 = 0, r2 = e3.children.length; n3 < r2; n3++) {
                    var i2 = e3.children[n3];
                    t4(i2), i2.static || (e3.static = false);
                  }
                  if (e3.ifConditions)
                    for (var a2 = 1, o2 = e3.ifConditions.length; a2 < o2; a2++) {
                      var s2 = e3.ifConditions[a2].block;
                      t4(s2), s2.static || (e3.static = false);
                    }
                }
              }(t3), function t4(e3, n3) {
                if (1 === e3.type) {
                  if ((e3.static || e3.once) && (e3.staticInFor = n3), e3.static && e3.children.length && (1 !== e3.children.length || 3 !== e3.children[0].type))
                    return void (e3.staticRoot = true);
                  if (e3.staticRoot = false, e3.children)
                    for (var r2 = 0, i2 = e3.children.length; r2 < i2; r2++)
                      t4(e3.children[r2], n3 || !!e3.for);
                  if (e3.ifConditions)
                    for (var a2 = 1, o2 = e3.ifConditions.length; a2 < o2; a2++)
                      t4(e3.ifConditions[a2].block, n3);
                }
              }(t3, false));
            }
            var Co = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/, So = /\([^)]*?\);*$/, Oo = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/, ko = { esc: 27, tab: 9, enter: 13, space: 32, up: 38, left: 37, right: 39, down: 40, delete: [8, 46] }, Mo = { esc: ["Esc", "Escape"], tab: "Tab", enter: "Enter", space: [" ", "Spacebar"], up: ["Up", "ArrowUp"], left: ["Left", "ArrowLeft"], right: ["Right", "ArrowRight"], down: ["Down", "ArrowDown"], delete: ["Backspace", "Delete", "Del"] }, Do = function(t3) {
              return "if(" + t3 + ")return null;";
            }, jo = { stop: "$event.stopPropagation();", prevent: "$event.preventDefault();", self: Do("$event.target !== $event.currentTarget"), ctrl: Do("!$event.ctrlKey"), shift: Do("!$event.shiftKey"), alt: Do("!$event.altKey"), meta: Do("!$event.metaKey"), left: Do("'button' in $event && $event.button !== 0"), middle: Do("'button' in $event && $event.button !== 1"), right: Do("'button' in $event && $event.button !== 2") };
            function Lo(t3, e2) {
              var n3 = e2 ? "nativeOn:" : "on:", r2 = "", i2 = "";
              for (var a2 in t3) {
                var o2 = Eo(t3[a2]);
                t3[a2] && t3[a2].dynamic ? i2 += a2 + "," + o2 + "," : r2 += '"' + a2 + '":' + o2 + ",";
              }
              return r2 = "{" + r2.slice(0, -1) + "}", i2 ? n3 + "_d(" + r2 + ",[" + i2.slice(0, -1) + "])" : n3 + r2;
            }
            function Eo(t3) {
              if (!t3)
                return "function(){}";
              if (Array.isArray(t3))
                return "[" + t3.map(function(t4) {
                  return Eo(t4);
                }).join(",") + "]";
              var e2 = Oo.test(t3.value), n3 = Co.test(t3.value), r2 = Oo.test(t3.value.replace(So, ""));
              if (t3.modifiers) {
                var i2 = "", a2 = "", o2 = [];
                for (var s2 in t3.modifiers)
                  if (jo[s2])
                    a2 += jo[s2], ko[s2] && o2.push(s2);
                  else if ("exact" === s2) {
                    var c2 = t3.modifiers;
                    a2 += Do(["ctrl", "shift", "alt", "meta"].filter(function(t4) {
                      return !c2[t4];
                    }).map(function(t4) {
                      return "$event." + t4 + "Key";
                    }).join("||"));
                  } else
                    o2.push(s2);
                return o2.length && (i2 += function(t4) {
                  return "if(!$event.type.indexOf('key')&&" + t4.map(Ao).join("&&") + ")return null;";
                }(o2)), a2 && (i2 += a2), "function($event){" + i2 + (e2 ? "return " + t3.value + ".apply(null, arguments)" : n3 ? "return (" + t3.value + ").apply(null, arguments)" : r2 ? "return " + t3.value : t3.value) + "}";
              }
              return e2 || n3 ? t3.value : "function($event){" + (r2 ? "return " + t3.value : t3.value) + "}";
            }
            function Ao(t3) {
              var e2 = parseInt(t3, 10);
              if (e2)
                return "$event.keyCode!==" + e2;
              var n3 = ko[t3], r2 = Mo[t3];
              return "_k($event.keyCode," + JSON.stringify(t3) + "," + JSON.stringify(n3) + ",$event.key," + JSON.stringify(r2) + ")";
            }
            var To = { on: function(t3, e2) {
              t3.wrapListeners = function(t4) {
                return "_g(" + t4 + "," + e2.value + ")";
              };
            }, bind: function(t3, e2) {
              t3.wrapData = function(n3) {
                return "_b(" + n3 + ",'" + t3.tag + "'," + e2.value + "," + (e2.modifiers && e2.modifiers.prop ? "true" : "false") + (e2.modifiers && e2.modifiers.sync ? ",true" : "") + ")";
              };
            }, cloak: E }, $o = function(t3) {
              this.options = t3, this.warn = t3.warn || Lr, this.transforms = Er(t3.modules, "transformCode"), this.dataGenFns = Er(t3.modules, "genData"), this.directives = j(j({}, To), t3.directives);
              var e2 = t3.isReservedTag || A;
              this.maybeComponent = function(t4) {
                return !!t4.component || !e2(t4.tag);
              }, this.onceId = 0, this.staticRenderFns = [], this.pre = false;
            };
            function Io(t3, e2) {
              var n3 = new $o(e2);
              return { render: "with(this){return " + (t3 ? "script" === t3.tag ? "null" : Po(t3, n3) : '_c("div")') + "}", staticRenderFns: n3.staticRenderFns };
            }
            function Po(t3, e2) {
              if (t3.parent && (t3.pre = t3.pre || t3.parent.pre), t3.staticRoot && !t3.staticProcessed)
                return zo(t3, e2);
              if (t3.once && !t3.onceProcessed)
                return No(t3, e2);
              if (t3.for && !t3.forProcessed)
                return Vo(t3, e2);
              if (t3.if && !t3.ifProcessed)
                return Ho(t3, e2);
              if ("template" !== t3.tag || t3.slotTarget || e2.pre) {
                if ("slot" === t3.tag)
                  return function(t4, e3) {
                    var n4 = t4.slotName || '"default"', r3 = Bo(t4, e3), i3 = "_t(" + n4 + (r3 ? ",function(){return " + r3 + "}" : ""), a3 = t4.attrs || t4.dynamicAttrs ? qo((t4.attrs || []).concat(t4.dynamicAttrs || []).map(function(t5) {
                      return { name: C(t5.name), value: t5.value, dynamic: t5.dynamic };
                    })) : null, o2 = t4.attrsMap["v-bind"];
                    !a3 && !o2 || r3 || (i3 += ",null");
                    a3 && (i3 += "," + a3);
                    o2 && (i3 += (a3 ? "" : ",null") + "," + o2);
                    return i3 + ")";
                  }(t3, e2);
                var n3;
                if (t3.component)
                  n3 = function(t4, e3, n4) {
                    var r3 = e3.inlineTemplate ? null : Bo(e3, n4, true);
                    return "_c(" + t4 + "," + Yo(e3, n4) + (r3 ? "," + r3 : "") + ")";
                  }(t3.component, t3, e2);
                else {
                  var r2;
                  (!t3.plain || t3.pre && e2.maybeComponent(t3)) && (r2 = Yo(t3, e2));
                  var i2 = t3.inlineTemplate ? null : Bo(t3, e2, true);
                  n3 = "_c('" + t3.tag + "'" + (r2 ? "," + r2 : "") + (i2 ? "," + i2 : "") + ")";
                }
                for (var a2 = 0; a2 < e2.transforms.length; a2++)
                  n3 = e2.transforms[a2](t3, n3);
                return n3;
              }
              return Bo(t3, e2) || "void 0";
            }
            function zo(t3, e2) {
              t3.staticProcessed = true;
              var n3 = e2.pre;
              return t3.pre && (e2.pre = t3.pre), e2.staticRenderFns.push("with(this){return " + Po(t3, e2) + "}"), e2.pre = n3, "_m(" + (e2.staticRenderFns.length - 1) + (t3.staticInFor ? ",true" : "") + ")";
            }
            function No(t3, e2) {
              if (t3.onceProcessed = true, t3.if && !t3.ifProcessed)
                return Ho(t3, e2);
              if (t3.staticInFor) {
                for (var n3 = "", r2 = t3.parent; r2; ) {
                  if (r2.for) {
                    n3 = r2.key;
                    break;
                  }
                  r2 = r2.parent;
                }
                return n3 ? "_o(" + Po(t3, e2) + "," + e2.onceId++ + "," + n3 + ")" : Po(t3, e2);
              }
              return zo(t3, e2);
            }
            function Ho(t3, e2, n3, r2) {
              return t3.ifProcessed = true, function t4(e3, n4, r3, i2) {
                if (!e3.length)
                  return i2 || "_e()";
                var a2 = e3.shift();
                return a2.exp ? "(" + a2.exp + ")?" + o2(a2.block) + ":" + t4(e3, n4, r3, i2) : "" + o2(a2.block);
                function o2(t5) {
                  return r3 ? r3(t5, n4) : t5.once ? No(t5, n4) : Po(t5, n4);
                }
              }(t3.ifConditions.slice(), e2, n3, r2);
            }
            function Vo(t3, e2, n3, r2) {
              var i2 = t3.for, a2 = t3.alias, o2 = t3.iterator1 ? "," + t3.iterator1 : "", s2 = t3.iterator2 ? "," + t3.iterator2 : "";
              return t3.forProcessed = true, (r2 || "_l") + "((" + i2 + "),function(" + a2 + o2 + s2 + "){return " + (n3 || Po)(t3, e2) + "})";
            }
            function Yo(t3, e2) {
              var n3 = "{", r2 = function(t4, e3) {
                var n4 = t4.directives;
                if (!n4)
                  return;
                var r3, i3, a3, o2, s2 = "directives:[", c2 = false;
                for (r3 = 0, i3 = n4.length; r3 < i3; r3++) {
                  a3 = n4[r3], o2 = true;
                  var u2 = e3.directives[a3.name];
                  u2 && (o2 = !!u2(t4, a3, e3.warn)), o2 && (c2 = true, s2 += '{name:"' + a3.name + '",rawName:"' + a3.rawName + '"' + (a3.value ? ",value:(" + a3.value + "),expression:" + JSON.stringify(a3.value) : "") + (a3.arg ? ",arg:" + (a3.isDynamicArg ? a3.arg : '"' + a3.arg + '"') : "") + (a3.modifiers ? ",modifiers:" + JSON.stringify(a3.modifiers) : "") + "},");
                }
                if (c2)
                  return s2.slice(0, -1) + "]";
              }(t3, e2);
              r2 && (n3 += r2 + ","), t3.key && (n3 += "key:" + t3.key + ","), t3.ref && (n3 += "ref:" + t3.ref + ","), t3.refInFor && (n3 += "refInFor:true,"), t3.pre && (n3 += "pre:true,"), t3.component && (n3 += 'tag:"' + t3.tag + '",');
              for (var i2 = 0; i2 < e2.dataGenFns.length; i2++)
                n3 += e2.dataGenFns[i2](t3);
              if (t3.attrs && (n3 += "attrs:" + qo(t3.attrs) + ","), t3.props && (n3 += "domProps:" + qo(t3.props) + ","), t3.events && (n3 += Lo(t3.events, false) + ","), t3.nativeEvents && (n3 += Lo(t3.nativeEvents, true) + ","), t3.slotTarget && !t3.slotScope && (n3 += "slot:" + t3.slotTarget + ","), t3.scopedSlots && (n3 += function(t4, e3, n4) {
                var r3 = t4.for || Object.keys(e3).some(function(t5) {
                  var n5 = e3[t5];
                  return n5.slotTargetDynamic || n5.if || n5.for || Fo(n5);
                }), i3 = !!t4.if;
                if (!r3)
                  for (var a3 = t4.parent; a3; ) {
                    if (a3.slotScope && "_empty_" !== a3.slotScope || a3.for) {
                      r3 = true;
                      break;
                    }
                    a3.if && (i3 = true), a3 = a3.parent;
                  }
                var o2 = Object.keys(e3).map(function(t5) {
                  return Ro(e3[t5], n4);
                }).join(",");
                return "scopedSlots:_u([" + o2 + "]" + (r3 ? ",null,true" : "") + (!r3 && i3 ? ",null,false," + function(t5) {
                  var e4 = 5381, n5 = t5.length;
                  for (; n5; )
                    e4 = 33 * e4 ^ t5.charCodeAt(--n5);
                  return e4 >>> 0;
                }(o2) : "") + ")";
              }(t3, t3.scopedSlots, e2) + ","), t3.model && (n3 += "model:{value:" + t3.model.value + ",callback:" + t3.model.callback + ",expression:" + t3.model.expression + "},"), t3.inlineTemplate) {
                var a2 = function(t4, e3) {
                  var n4 = t4.children[0];
                  0;
                  if (n4 && 1 === n4.type) {
                    var r3 = Io(n4, e3.options);
                    return "inlineTemplate:{render:function(){" + r3.render + "},staticRenderFns:[" + r3.staticRenderFns.map(function(t5) {
                      return "function(){" + t5 + "}";
                    }).join(",") + "]}";
                  }
                }(t3, e2);
                a2 && (n3 += a2 + ",");
              }
              return n3 = n3.replace(/,$/, "") + "}", t3.dynamicAttrs && (n3 = "_b(" + n3 + ',"' + t3.tag + '",' + qo(t3.dynamicAttrs) + ")"), t3.wrapData && (n3 = t3.wrapData(n3)), t3.wrapListeners && (n3 = t3.wrapListeners(n3)), n3;
            }
            function Fo(t3) {
              return 1 === t3.type && ("slot" === t3.tag || t3.children.some(Fo));
            }
            function Ro(t3, e2) {
              var n3 = t3.attrsMap["slot-scope"];
              if (t3.if && !t3.ifProcessed && !n3)
                return Ho(t3, e2, Ro, "null");
              if (t3.for && !t3.forProcessed)
                return Vo(t3, e2, Ro);
              var r2 = "_empty_" === t3.slotScope ? "" : String(t3.slotScope), i2 = "function(" + r2 + "){return " + ("template" === t3.tag ? t3.if && n3 ? "(" + t3.if + ")?" + (Bo(t3, e2) || "undefined") + ":undefined" : Bo(t3, e2) || "undefined" : Po(t3, e2)) + "}", a2 = r2 ? "" : ",proxy:true";
              return "{key:" + (t3.slotTarget || '"default"') + ",fn:" + i2 + a2 + "}";
            }
            function Bo(t3, e2, n3, r2, i2) {
              var a2 = t3.children;
              if (a2.length) {
                var o2 = a2[0];
                if (1 === a2.length && o2.for && "template" !== o2.tag && "slot" !== o2.tag) {
                  var s2 = n3 ? e2.maybeComponent(o2) ? ",1" : ",0" : "";
                  return "" + (r2 || Po)(o2, e2) + s2;
                }
                var c2 = n3 ? function(t4, e3) {
                  for (var n4 = 0, r3 = 0; r3 < t4.length; r3++) {
                    var i3 = t4[r3];
                    if (1 === i3.type) {
                      if (Wo(i3) || i3.ifConditions && i3.ifConditions.some(function(t5) {
                        return Wo(t5.block);
                      })) {
                        n4 = 2;
                        break;
                      }
                      (e3(i3) || i3.ifConditions && i3.ifConditions.some(function(t5) {
                        return e3(t5.block);
                      })) && (n4 = 1);
                    }
                  }
                  return n4;
                }(a2, e2.maybeComponent) : 0, u2 = i2 || Uo;
                return "[" + a2.map(function(t4) {
                  return u2(t4, e2);
                }).join(",") + "]" + (c2 ? "," + c2 : "");
              }
            }
            function Wo(t3) {
              return void 0 !== t3.for || "template" === t3.tag || "slot" === t3.tag;
            }
            function Uo(t3, e2) {
              return 1 === t3.type ? Po(t3, e2) : 3 === t3.type && t3.isComment ? function(t4) {
                return "_e(" + JSON.stringify(t4.text) + ")";
              }(t3) : function(t4) {
                return "_v(" + (2 === t4.type ? t4.expression : Ko(JSON.stringify(t4.text))) + ")";
              }(t3);
            }
            function qo(t3) {
              for (var e2 = "", n3 = "", r2 = 0; r2 < t3.length; r2++) {
                var i2 = t3[r2], a2 = Ko(i2.value);
                i2.dynamic ? n3 += i2.name + "," + a2 + "," : e2 += '"' + i2.name + '":' + a2 + ",";
              }
              return e2 = "{" + e2.slice(0, -1) + "}", n3 ? "_d(" + e2 + ",[" + n3.slice(0, -1) + "])" : e2;
            }
            function Ko(t3) {
              return t3.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
            }
            new RegExp("\\b" + "do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b") + "\\b"), new RegExp("\\b" + "delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b") + "\\s*\\([^\\)]*\\)");
            function Xo(t3, e2) {
              try {
                return new Function(t3);
              } catch (n3) {
                return e2.push({ err: n3, code: t3 }), E;
              }
            }
            function Go(t3) {
              var e2 = /* @__PURE__ */ Object.create(null);
              return function(n3, r2, i2) {
                (r2 = j({}, r2)).warn;
                delete r2.warn;
                var a2 = r2.delimiters ? String(r2.delimiters) + n3 : n3;
                if (e2[a2])
                  return e2[a2];
                var o2 = t3(n3, r2);
                var s2 = {}, c2 = [];
                return s2.render = Xo(o2.render, c2), s2.staticRenderFns = o2.staticRenderFns.map(function(t4) {
                  return Xo(t4, c2);
                }), e2[a2] = s2;
              };
            }
            var Jo, Qo, Zo = (Jo = function(t3, e2) {
              var n3 = oo(t3.trim(), e2);
              false !== e2.optimize && wo(n3, e2);
              var r2 = Io(n3, e2);
              return { ast: n3, render: r2.render, staticRenderFns: r2.staticRenderFns };
            }, function(t3) {
              function e2(e3, n3) {
                var r2 = Object.create(t3), i2 = [], a2 = [];
                if (n3)
                  for (var o2 in n3.modules && (r2.modules = (t3.modules || []).concat(n3.modules)), n3.directives && (r2.directives = j(Object.create(t3.directives || null), n3.directives)), n3)
                    "modules" !== o2 && "directives" !== o2 && (r2[o2] = n3[o2]);
                r2.warn = function(t4, e4, n4) {
                  (n4 ? a2 : i2).push(t4);
                };
                var s2 = Jo(e3.trim(), r2);
                return s2.errors = i2, s2.tips = a2, s2;
              }
              return { compile: e2, compileToFunctions: Go(e2) };
            })(_o), ts = (Zo.compile, Zo.compileToFunctions);
            function es(t3) {
              return (Qo = Qo || document.createElement("div")).innerHTML = t3 ? '<a href="\n"/>' : '<div a="\n"/>', Qo.innerHTML.indexOf("&#10;") > 0;
            }
            var ns = !!U && es(false), rs = !!U && es(true), is = x(function(t3) {
              var e2 = tr(t3);
              return e2 && e2.innerHTML;
            }), as = On.prototype.$mount;
            On.prototype.$mount = function(t3, e2) {
              if ((t3 = t3 && tr(t3)) === document.body || t3 === document.documentElement)
                return this;
              var n3 = this.$options;
              if (!n3.render) {
                var r2 = n3.template;
                if (r2)
                  if ("string" == typeof r2)
                    "#" === r2.charAt(0) && (r2 = is(r2));
                  else {
                    if (!r2.nodeType)
                      return this;
                    r2 = r2.innerHTML;
                  }
                else
                  t3 && (r2 = function(t4) {
                    if (t4.outerHTML)
                      return t4.outerHTML;
                    var e3 = document.createElement("div");
                    return e3.appendChild(t4.cloneNode(true)), e3.innerHTML;
                  }(t3));
                if (r2) {
                  0;
                  var i2 = ts(r2, { outputSourceRange: false, shouldDecodeNewlines: ns, shouldDecodeNewlinesForHref: rs, delimiters: n3.delimiters, comments: n3.comments }, this), a2 = i2.render, o2 = i2.staticRenderFns;
                  n3.render = a2, n3.staticRenderFns = o2;
                }
              }
              return as.call(this, t3, e2);
            }, On.compile = ts, e.default = On;
          }.call(this, n("yLpj"));
        }, "oIR/": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Heading", status: "ready", release: "1.0.0", type: "Element", props: { level: { type: String, default: "h1", validator: function(t2) {
            return t2.match(/(h1|h2|h3|h4|h5|h6)/);
          } }, size: { type: String, default: "h1", validator: function(t2) {
            return t2.match(/(h1|h2|h3|h4|h5|h6)/);
          } }, hidden: { type: Boolean, default: false } } }, i = (n("O1vI"), n("KHd+")), a = n("woMB"), o = n.n(a), s = Object(i.a)(r, function(t2, e2) {
            return (0, e2._c)(e2.props.level, e2._g(e2._b({ tag: "component", staticClass: "lux-heading", class: [{ "lux-hidden": e2.props.hidden }, e2.data.style, e2.data.staticStyle, e2.props.size], style: [e2.data.style, e2.data.staticStyle] }, "component", e2.data.attrs, false), e2.listeners), [e2._t("default")], 2);
          }, [], true, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "ol/U": function(t, e, n) {
        }, ox1f: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconRelax", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("vaTQ"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M12,24C5.4,24,0,18.6,0,12C0,5.4,5.4,0,12,0c6.6,0,12,5.4,12,12C24,18.6,18.6,24,12,24z M12,1C5.9,1,1,5.9,1,12\n      s4.9,11,11,11s11-4.9,11-11S18.1,1,12,1z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12,21c-4.4,0-8-3.6-8-8c0-0.3,0.2-0.5,0.5-0.5S5,12.7,5,13c0,3.9,3.1,7,7,7c3.9,0,7-3.1,7-7c0-0.3,0.2-0.5,0.5-0.5\n      S20,12.7,20,13C20,17.4,16.4,21,12,21z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M16.5,10.5C15.3,10.5,14,9.6,14,8c0-0.3,0.2-0.5,0.5-0.5S15,7.7,15,8c0,1.6,1.8,1.8,2.5,1.1C17.8,8.8,18,8.5,18,8\n      c0-0.3,0.2-0.5,0.5-0.5S19,7.7,19,8c0,1-0.4,1.5-0.8,1.9C17.8,10.3,17.1,10.5,16.5,10.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M7.5,10.5c-0.6,0-1.3-0.2-1.7-0.6C5.4,9.5,5,9,5,8c0-0.3,0.2-0.5,0.5-0.5S6,7.7,6,8c0,0.5,0.2,0.8,0.5,1.1\n      C7.2,9.8,9,9.6,9,8c0-0.3,0.2-0.5,0.5-0.5S10,7.7,10,8C10,9.6,8.7,10.5,7.5,10.5z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "p+lg": function(t, e, n) {
          "use strict";
          var r = n("WvZL");
          n.n(r).a;
        }, p3Ql: function(t, e) {
        }, "pCL/": function(t, e) {
        }, "po+s": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LogoFriends", status: "ready", release: "1.0.0", type: "Element", props: { width: { type: [Number, String], default: 115 }, height: { type: [Number, String], default: 31 } } }, i = (n("4rX5"), n("KHd+")), a = n("8dhO"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: t2.width, height: t2.height, viewBox: "0 0 115.7 31.1", preserveAspectRatio: "xMinYMid", "aria-labelledby": "logo-friends", role: "img" } }, [n2("title", { attrs: { id: "logo-friends", lang: "en" } }, [t2._v("Friends of Princeton University Library")]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M.5 27.1A3.54 3.54 0 0 0 4 30.6h107.7a3.54 3.54 0 0 0 3.5-3.5V4a3.54 3.54 0 0 0-3.5-3.5H4.1A3.54 3.54 0 0 0 .6 4v23.1z" } }), t2._v(" "), n2("path", { attrs: { d: "M.5 27.1A3.54 3.54 0 0 0 4 30.6h107.7a3.54 3.54 0 0 0 3.5-3.5V4a3.54 3.54 0 0 0-3.5-3.5H4.1A3.54 3.54 0 0 0 .6 4v23.1z", "stroke-miterlimit": "10", stroke: "#000" } }), t2._v(" "), n2("path", { staticClass: "friends-b", attrs: { d: "M24.3 9.3a1.39 1.39 0 0 0-1.4-1.1v15.3a37 37 0 0 1-3.8-1.4 4.24 4.24 0 0 0-3.9.2 4.32 4.32 0 0 0-3.9-.2 37 37 0 0 1-3.8 1.4V8.1a1.38 1.38 0 0 0-1.3 1.1v15.5h18.1V9.3z" } }), t2._v(" "), n2("path", { staticClass: "friends-b", attrs: { d: "M10.7 17.3a11 11 0 0 0 1.4 2.1l3.1-3 3.1 3c.5-.7 1-1.4 1.4-2.1L15.2 13zm11.1-9.2a4.68 4.68 0 0 1-1.7.2 5.46 5.46 0 0 1-4.8-2.7 5.72 5.72 0 0 1-4.8 2.7 9.85 9.85 0 0 1-1.7-.2 17.53 17.53 0 0 0 .3 4.6h12.5a23.63 23.63 0 0 0 .2-4.6" } }), t2._v(" "), n2("path", { attrs: { d: "M40.82 12.85a.24.24 0 0 1-.15 0h-.28a9.76 9.76 0 0 0-.66-1.19 8.14 8.14 0 0 0-.62-.83 4.1 4.1 0 0 0-.56-.55 6.93 6.93 0 0 0-.49-.39 1.15 1.15 0 0 0-.71-.19h-3.59c-.2 0-.32 0-.35.06s0 .14 0 .3v6h1.52a3.19 3.19 0 0 0 .6-.12 2.21 2.21 0 0 0 .55-.23 1.19 1.19 0 0 0 .43-.37 1.82 1.82 0 0 0 .25-.46 3.3 3.3 0 0 0 .13-.52c0-.18.06-.34.08-.51s0-.29 0-.38h.45l.14.07v6.05a.49.49 0 0 1-.32.08h-.27c0-.07 0-.2-.06-.38s-.06-.39-.09-.63a1.9 1.9 0 0 0-.28-.77 2.77 2.77 0 0 0-.66-.72 1.54 1.54 0 0 0-.62-.25 5.14 5.14 0 0 0-1.15-.11 3.36 3.36 0 0 0-.63.06v.56a5.55 5.55 0 0 0 0 .65v4.13a2.45 2.45 0 0 0 .41.93 1.59 1.59 0 0 0 .52.45 2 2 0 0 0 .31.05h.5l.5.05a2.85 2.85 0 0 0 .37 0 .8.8 0 0 1 .06.3.49.49 0 0 1 0 .12.65.65 0 0 1 0 .15h-7.71a.48.48 0 0 1-.1-.27.5.5 0 0 1 .08-.27c.32 0 .68-.08 1.07-.15l.91-.15a2.55 2.55 0 0 0 .36-.76 7 7 0 0 0 .24-1.34v-9.43a5 5 0 0 0-.06-.73 1.73 1.73 0 0 0-.24-.66 3.86 3.86 0 0 0-.47-.58 1.43 1.43 0 0 0-.68-.17l-1-.1a.51.51 0 0 1-.07-.3v-.14l.07-.13H40.6l.07.14v.24l.19 3.28a.31.31 0 0 0-.04.11zm12.49 11.08a1.12 1.12 0 0 1-.05.27h-3a.41.41 0 0 1-.38-.18 1.14 1.14 0 0 1-.14-.45l-.16-.81c-.06-.29-.14-.57-.22-.85a8.11 8.11 0 0 0-.36-.81 3.26 3.26 0 0 0-.34-.62l-.57-.66a1.8 1.8 0 0 0-.76-.51 2.17 2.17 0 0 0-.69-.11h-1v2.86a1.7 1.7 0 0 0 .28 1.11 1 1 0 0 0 .5.36 3.31 3.31 0 0 0 .84.14.7.7 0 0 1 .13.3.12.12 0 0 1 0 .11.58.58 0 0 0-.07.14h-5.48a1 1 0 0 1-.05-.17.49.49 0 0 1 0-.12.34.34 0 0 1 0-.11 1.26 1.26 0 0 1 .05-.15h.38l.43-.06a2.11 2.11 0 0 0 .4-.11.65.65 0 0 0 .24-.12 1 1 0 0 0 .22-.38 3.9 3.9 0 0 0 .12-.46v-6.33a8 8 0 0 0-.09-.81 1 1 0 0 0-.47-.73 3.06 3.06 0 0 0-1.33-.3.76.76 0 0 1 0-.29v-.11l.06-.12h6.97a4 4 0 0 1 .88.14 2.54 2.54 0 0 1 1.48 1 2.7 2.7 0 0 1 .48 1.57 2.24 2.24 0 0 1-.67 1.62 3.56 3.56 0 0 1-2.25.86v.11a3 3 0 0 1 1 .31 2.74 2.74 0 0 1 .6.44 4.32 4.32 0 0 1 .51.65 8.53 8.53 0 0 1 .46.95l.32.81.33.89a1.45 1.45 0 0 0 .12.19.53.53 0 0 0 .19.15h.19l.33.05h.32a1 1 0 0 0 .21 0 .51.51 0 0 1 .04.34zm-3.89-7.5a2.82 2.82 0 0 0-.08-.68 1.45 1.45 0 0 0-.32-.58 1.49 1.49 0 0 0-.42-.41 1.51 1.51 0 0 0-.53-.24 3.53 3.53 0 0 0-.71-.11h-.94a1.53 1.53 0 0 0-.64.08.33.33 0 0 0-.12.3v3.78h1.57a4.85 4.85 0 0 0 .8-.08 1.67 1.67 0 0 0 .58-.29 1.62 1.62 0 0 0 .42-.48 2.48 2.48 0 0 0 .27-.62 2.57 2.57 0 0 0 .12-.67zm10.86 7.5a.54.54 0 0 1-.09.27h-5.52a.6.6 0 0 1-.05-.14.28.28 0 0 1 0-.09.8.8 0 0 1 .06-.3 7.23 7.23 0 0 0 1.13-.22.82.82 0 0 0 .53-.47 2.09 2.09 0 0 0 .07-.54c0-.31 0-.65.05-1s0-.72 0-1.05v-4.22c0-.26 0-.55-.06-.85a.74.74 0 0 0-.46-.71 5.86 5.86 0 0 0-1.24-.2.88.88 0 0 1-.06-.29.23.23 0 0 1 0-.13.81.81 0 0 0 .08-.12h5.29a.43.43 0 0 1 .12.25 1 1 0 0 1-.06.29l-.93.14a.71.71 0 0 0-.6.43 1.1 1.1 0 0 0-.07.31v6.33a7.46 7.46 0 0 0 .09 1.21.81.81 0 0 0 .56.72 2.06 2.06 0 0 0 .5.06h.6l.05.13.01.19zm12.39.28a1.4 1.4 0 0 1-.42.05h-9.97a.53.53 0 0 1-.06-.23v-.15a.28.28 0 0 1 0-.15 6.51 6.51 0 0 0 1-.13 1.22 1.22 0 0 0 .53-.2 1.14 1.14 0 0 0 .22-.53 6.77 6.77 0 0 0 .11-1.07v-6.12a1.66 1.66 0 0 0-.11-.67 1 1 0 0 0-.33-.36 1.32 1.32 0 0 0-.53-.16l-.77-.09a.83.83 0 0 1-.06-.27.5.5 0 0 1 0-.14.26.26 0 0 1 .07-.13h8.97a.82.82 0 0 1 .27 0c.06 0 .09.09.09.2l.32 2.43-.14.07h-.38a7.4 7.4 0 0 0-.46-.73 4.22 4.22 0 0 0-.39-.47 3.46 3.46 0 0 0-.35-.33l-.37-.28a1.85 1.85 0 0 0-.91-.27h-2.28a1.14 1.14 0 0 0-.35 0h-.11v.36a2.2 2.2 0 0 1 0 .23v3.21h1.03a1.82 1.82 0 0 0 .5-.1 1.87 1.87 0 0 0 .61-.28 1.52 1.52 0 0 0 .46-.45 1.21 1.21 0 0 0 .13-.42c0-.21.08-.36.1-.46a.82.82 0 0 1 .34-.07.34.34 0 0 1 .27.09c0 .21 0 .51-.06.89s0 .83 0 1.33v2.08l-.14.07h-.15a1.92 1.92 0 0 1-.3 0 4.89 4.89 0 0 0-.25-1.13 1.21 1.21 0 0 0-.73-.68 3.16 3.16 0 0 0-.59-.17 3.48 3.48 0 0 0-.57 0h-.69v2.73a4 4 0 0 0 .12 1.22 1.69 1.69 0 0 0 .24.35.68.68 0 0 0 .39.24h3.11a1 1 0 0 0 .49-.14 2 2 0 0 0 .37-.31c.16-.16.32-.34.49-.54a7 7 0 0 0 .47-.66 3.89 3.89 0 0 0 .35-.71l.16-.06h.15a.52.52 0 0 1 .29.09V24c-.06.09-.1.18-.18.21zM87.24 14.1a.45.45 0 0 1 0 .11.34.34 0 0 1 0 .14 2.39 2.39 0 0 0-.76.15 1.74 1.74 0 0 0-.63.39 1.85 1.85 0 0 0-.43.7 3.32 3.32 0 0 0-.15 1.07v7.67a1 1 0 0 1-.23.12.63.63 0 0 1-.19 0 .68.68 0 0 1-.27-.16l-7.35-7.92.08 1.63v3.44c0 .24 0 .46.06.65a1.77 1.77 0 0 0 .18.71 1.35 1.35 0 0 0 .35.4 1.7 1.7 0 0 0 .69.33c.27.06.51.11.72.14a.53.53 0 0 1 .06.23.89.89 0 0 1 0 .11l-.06.16h-4.58a.68.68 0 0 1 0-.23v-.11a1.16 1.16 0 0 1 .06-.16c.12 0 .27 0 .43-.08a2.54 2.54 0 0 0 .47-.14 4.32 4.32 0 0 0 .43-.22 1.87 1.87 0 0 0 .33-.28 1.53 1.53 0 0 0 .13-.54v-5.9a1.85 1.85 0 0 0-.35-1.13 2.71 2.71 0 0 1-.19-.21l-.34-.34a1.35 1.35 0 0 0-.54-.29l-.64-.23a.58.58 0 0 1 0-.14.44.44 0 0 1 0-.09.6.6 0 0 1 .06-.27h2.99a.78.78 0 0 1 .33.21L83.23 20l.66.76c.23.26.43.49.58.69v-5.46a2.65 2.65 0 0 0-.32-1.11.5.5 0 0 0-.26-.19 2.37 2.37 0 0 0-.45-.15 4.51 4.51 0 0 0-.53-.1l-.46-.09a.94.94 0 0 1-.06-.31.53.53 0 0 1 0-.23h4.81a.57.57 0 0 1 .04.29zm13.29 5.12a5.36 5.36 0 0 1-.22 1.51 4.55 4.55 0 0 1-.66 1.43 6 6 0 0 1-.91 1 3.62 3.62 0 0 1-1.07.64 6.47 6.47 0 0 1-1.33.34 12.2 12.2 0 0 1-1.69.1H88.8a.47.47 0 0 1-.07-.25v-.11a1.16 1.16 0 0 1 .06-.16 4.22 4.22 0 0 0 1.21-.18 1 1 0 0 0 .53-.43 2.84 2.84 0 0 0 .13-.41 4.08 4.08 0 0 0 .1-1.08v-4.86c0-.51 0-.85-.07-1a3.78 3.78 0 0 0-.06-.47.9.9 0 0 0-.21-.44 1.21 1.21 0 0 0-.52-.31 3 3 0 0 0-1-.13.83.83 0 0 1 0-.15.39.39 0 0 1 0-.14.51.51 0 0 1 .09-.25h3.61l1.09-.05h1a8 8 0 0 1 1.92.22 6.64 6.64 0 0 1 1.46.56 4 4 0 0 1 1.16.86 5.43 5.43 0 0 1 .81 1.15 5.86 5.86 0 0 1 .48 1.31 6.37 6.37 0 0 1 .01 1.3zm-2.26-.1a5.58 5.58 0 0 0-.39-2.2 3.72 3.72 0 0 0-1.27-1.56 4.76 4.76 0 0 0-1.36-.71 5.6 5.6 0 0 0-1.73-.24 2.36 2.36 0 0 0-.44 0l-.36.06v7.41a1.8 1.8 0 0 0 .28 1.25 1.79 1.79 0 0 0 .47.38 1.34 1.34 0 0 0 .6.12 4.8 4.8 0 0 0 1.74-.29 3.15 3.15 0 0 0 1.28-1 4.36 4.36 0 0 0 .91-1.42 5.07 5.07 0 0 0 .27-1.8zm12.53 2.22a2.87 2.87 0 0 1-.3 1.31 3 3 0 0 1-.81 1 3.34 3.34 0 0 1-1.16.63 4.36 4.36 0 0 1-1.4.22 4.25 4.25 0 0 1-1.31-.2 6 6 0 0 1-1.11-.43.53.53 0 0 0-.19-.06h-.18a.79.79 0 0 0-.32.1 3 3 0 0 0-.46.3.81.81 0 0 1-.37-.09.42.42 0 0 1-.24-.23 2.9 2.9 0 0 1 .09-.56 2.88 2.88 0 0 0 .1-.72v-1.33a2.66 2.66 0 0 1 0-.35.54.54 0 0 1 .46-.23h.17c0 .1.12.24.19.42l.25.57.26.58a2.84 2.84 0 0 0 .26.45 2.94 2.94 0 0 0 1.13.83 3.33 3.33 0 0 0 1.18.26 2.29 2.29 0 0 0 1.68-.5 2.13 2.13 0 0 0 .47-.62 1.56 1.56 0 0 0 .12-.64 1.48 1.48 0 0 0-.29-.95 1.92 1.92 0 0 0-.41-.4l-.69-.38a4.5 4.5 0 0 0-.51-.18l-.75-.24-.77-.25a2.82 2.82 0 0 1-.61-.25 4.17 4.17 0 0 1-.85-.49 5 5 0 0 1-.6-.54 2.26 2.26 0 0 1-.46-.93 3.8 3.8 0 0 1-.13-1 2.93 2.93 0 0 1 .23-1.16 2.68 2.68 0 0 1 .66-.93 3.26 3.26 0 0 1 1-.61 3.78 3.78 0 0 1 1.28-.22 6.78 6.78 0 0 1 1.21.12 2.79 2.79 0 0 1 1.27.6 3.84 3.84 0 0 1 .28-.3l.33-.29a.74.74 0 0 1 .38.09c.09.07.15.13.16.18s0 .33-.09.61a4.62 4.62 0 0 0-.07.82 3.1 3.1 0 0 0 0 .34l.06.47v.45a1.8 1.8 0 0 1 0 .27l-.17.1a.54.54 0 0 1-.22 0 .54.54 0 0 1-.19 0 4.66 4.66 0 0 1-.43-.92 4.9 4.9 0 0 0-.45-.89 2 2 0 0 0-.88-.69 3.1 3.1 0 0 0-1.18-.21 2.12 2.12 0 0 0-1.34.44 1.35 1.35 0 0 0-.55 1.11 1.22 1.22 0 0 0 .42 1 3.62 3.62 0 0 0 .86.54l.72.27c.26.1.54.19.85.29a13.82 13.82 0 0 1 1.66.63 3.17 3.17 0 0 1 1.31 1.14 3 3 0 0 1 .45 1.65z", stroke: "#fff", "stroke-width": ".5", fill: "#fff", "stroke-miterlimit": "10" } })])]);
          }, [], false, null, "55925480", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, puGq: function(t, e, n) {
        }, q2A7: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LogoFacebook", status: "ready", release: "1.0.0", type: "Element", props: { width: { type: [Number, String], default: 24 }, height: { type: [Number, String], default: 24 } } }, i = n("KHd+"), a = n("64/Z"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: this.width, height: this.height, viewBox: "0 0 24 24", preserveAspectRatio: "xMinYMid", "aria-labelledby": "logo-facebook", role: "img" } }, [e2("title", { attrs: { id: "logo-facebook", lang: "en" } }, [this._v("Facebook Logo")]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M18.768 7.465H14.5V5.56c0-.896.594-1.105 1.012-1.105H18.5V.513L14.171.5C10.244.5 9.5 3.438 9.5 5.32v2.144h-3v4h3v12h5v-12h3.851l.417-3.999z" } }), this._v(" "), e2("path", { attrs: { fill: "none", d: "M0 0h24v24H0z" } })])]);
          }, [], false, null, "ca322810", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, qKJg: function(t, e) {
        }, qwBE: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconAdd", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("swsh"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("path", { attrs: { d: "M11.5,0C5.159,0,0,5.159,0,11.5S5.159,23,11.5,23S23,17.841,23,11.5S17.841,0,11.5,0z M11.5,22C5.71,22,1,17.29,1,11.5\n		S5.71,1,11.5,1S22,5.71,22,11.5S17.29,22,11.5,22z" } }), this._v(" "), e2("path", { attrs: { d: "M17.5,11H12V5.5C12,5.224,11.776,5,11.5,5S11,5.224,11,5.5V11H5.5C5.224,11,5,11.224,5,11.5S5.224,12,5.5,12H11v5.5\n		c0,0.276,0.224,0.5,0.5,0.5s0.5-0.224,0.5-0.5V12h5.5c0.276,0,0.5-0.224,0.5-0.5S17.776,11,17.5,11z" } })]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, r6IM: function(t, e, n) {
        }, r6Js: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "SpecialCollectionsFooter", status: "ready", release: "3.1.3", type: "Pattern", props: { type: { type: String, default: "div" }, maxWidth: { type: Number, default: 1170 } } }, i = (n("Eg5U"), n("KHd+")), a = n("Nybi"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.type, { tag: "component", class: ["lux-library-footer"] }, [n2("wrapper", { staticClass: "lux-footer-content", attrs: { maxWidth: t2.maxWidth } }, [n2("div", { staticClass: "lux-library-links" }, [n2("nav", { attrs: { role: "navigation", "aria-label": "About Archival Collections" } }, [n2("h2", [n2("a", { attrs: { href: "/research_help" } }, [t2._v("About Archival Collections")])]), t2._v(" "), n2("ul", [n2("li", [n2("a", { attrs: { href: "/research_account" } }, [t2._v("Creating a Research Account")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "/requesting_materials" } }, [t2._v("Requesting Materials")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "/search_tips" } }, [t2._v("Search Tips")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "/archival_language" } }, [t2._v("Statement on Archival Language")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "/av_materials" } }, [t2._v("Statement on Audio Visual Materials")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "/faq" } }, [t2._v("Frequently Asked Questions (FAQs)")])])])])]), t2._v(" "), n2("div", { staticClass: "lux-library-links" }, [n2("nav", { attrs: { role: "navigation", "aria-label": "Library Services" } }, [n2("h2", [n2("a", { attrs: { href: "https://library.princeton.edu/services" } }, [t2._v("Library Services")])]), t2._v(" "), n2("ul", [n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/article-express", title: "Use our Interlibrary Loan and Article Express Services" } }, [t2._v("Article Express")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/borrowdirect" } }, [t2._v("Borrow Direct")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/access/circulation-policies" } }, [t2._v("Circulation")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/reserves" } }, [t2._v("Course Reserves")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/interlibrary-services", title: "Interlibrary Loan Services, Article Express" } }, [t2._v("Interlibrary Loan (ILL)")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/access" } }, [t2._v("Library Access")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/study-spaces" } }, [t2._v("Study Spaces and Lockers")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/help/trace-materials" } }, [t2._v("Trace a Book")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/accounts" } }, [t2._v("Your Accounts")])])])])]), t2._v(" "), n2("div", { staticClass: "lux-library-links" }, [n2("nav", { attrs: { role: "navigation", "aria-label": "About the Library" } }, [n2("h2", [n2("a", { attrs: { href: "https://library.princeton.edu/about" } }, [t2._v("About the Library")])]), t2._v(" "), n2("ul", [n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/collections-and-collection-development" } }, [t2._v("Collections and Collecting")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://rbsc.princeton.edu/exhibitions" } }, [t2._v("Exhibitions")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/about/locations" } }, [t2._v("Library Locations")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/alumni" } }, [t2._v("For Alumni")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/staff" } }, [t2._v("For Library Staff")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/staff/directory" } }, [t2._v("Staff Directory")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/about/friends" } }, [t2._v("Friends of the Library")])]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://library.princeton.edu/services/technology/off-campus-access" } }, [t2._v("Using the Library Off-Campus")])])])])]), t2._v(" "), n2("div", { staticClass: "lux-library-links" }, [n2("library-contact-info"), t2._v(" "), n2("logo-university", { attrs: { width: "142", height: "40" } }), t2._v(" "), n2("university-copyright", { attrs: { type: "div" } }), t2._v(" "), n2("university-accessibility", { attrs: { type: "span" } })], 1)])], 1);
          }, [], false, null, "889b9626", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, r6ov: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "TextStyle", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "p" }, variation: { type: String, default: "default", validator: function(t2) {
            return t2.match(/(default|disabled|strong|emphasis|positive|negative|small|uppercase)/);
          } } } }, i = (n("abkU"), n("KHd+")), a = n("7kMZ"), o = n.n(a), s = Object(i.a)(r, function(t2, e2) {
            return (0, e2._c)(e2.props.type, e2._g(e2._b({ tag: "component", class: ["lux-text-style ", e2.props.variation, e2.data.class, e2.data.staticClass], style: [e2.data.style, e2.data.staticStyle] }, "component", e2.data.attrs, false), e2.listeners), [e2._t("default")], 2);
          }, [], true, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, r8XY: function(t, e, n) {
        }, rGKY: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconVacation", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("RVJi"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M18.4,24H0.5C0.2,24,0,23.8,0,23.5c0-3.7,4.9-5,9.5-5c4.6,0,9.5,1.3,9.5,5C18.9,23.8,18.7,24,18.4,24z M1,23h16.8\n      c-0.5-2.6-4.7-3.5-8.4-3.5C5.8,19.5,1.5,20.4,1,23z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M6.5,19.5L5.6,19l5.9-10.8C11.7,8.1,11.9,8,12.1,8s0.4,0.3,0.4,0.5L12,19.1l-1,0l0.4-8.5L6.5,19.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M3.7,11.4c-0.9,0-1.8,0-2.7-0.1c-0.2,0-0.3-0.1-0.4-0.2c-0.1-0.1-0.1-0.3,0-0.5c2.1-5,8.7-4.8,11.7-3.6\n      c0.2,0.1,0.3,0.3,0.3,0.5v1c0,0.2-0.1,0.3-0.2,0.4C9.5,10.9,6.7,11.4,3.7,11.4z M1.7,10.3c3.6,0.2,6.7,0,9.8-2.1V7.9\n      C9.3,7.1,3.9,6.6,1.7,10.3z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12,8c-0.1,0-0.1,0-0.2,0L4.3,5C4.1,4.9,4,4.7,4,4.6c0-0.2,0.1-0.4,0.2-0.5C6,2.9,8.1,2.8,9.9,3.8\n      c1.6,0.8,2.6,2.3,2.6,3.7c0,0.2-0.1,0.3-0.2,0.4C12.2,8,12.1,8,12,8z M5.7,4.4l5.7,2.3c-0.3-0.8-1-1.6-1.9-2.1\n      C8.2,4,6.9,3.9,5.7,4.4z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M19.1,11.5c-2.9,0-5.6-0.5-7.5-2.6c-0.1-0.1-0.1-0.2-0.1-0.3v-1c0-0.2,0.1-0.4,0.3-0.5c3-1.2,9.6-1.4,11.7,3.6\n      c0.1,0.1,0.1,0.3,0,0.5c-0.1,0.1-0.2,0.2-0.4,0.2l-0.9,0C21.2,11.4,20.1,11.5,19.1,11.5z M12.5,8.3c2.2,2.5,6,2.2,9.7,2l0.1,0\n      c-2.2-3.7-7.6-3.2-9.8-2.5V8.3z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M12,8c-0.1,0-0.2,0-0.3-0.1c-0.1-0.1-0.2-0.2-0.2-0.4c0-1.4,1-2.9,2.6-3.7c1.8-1,3.9-0.9,5.7,0.3\n      C19.9,4.2,20,4.4,20,4.6c0,0.2-0.1,0.3-0.3,0.4l-7.5,3C12.1,8,12.1,8,12,8z M16.7,4.1c-0.7,0-1.4,0.2-2.1,0.5\n      c-0.9,0.5-1.6,1.3-1.9,2.1l5.7-2.3C17.8,4.2,17.2,4.1,16.7,4.1z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M11.6,17.5H10c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1.6c0.3,0,0.5,0.2,0.5,0.5S11.9,17.5,11.6,17.5z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M11.7,15.5h-1.2c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h1.2c0.3,0,0.5,0.2,0.5,0.5S12,15.5,11.7,15.5z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "s5+B": function(t, e) {
        }, sBaT: function(t, e) {
        }, sBvN: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconFilter", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("C0Ao"), o = n.n(a), s = Object(i.a)(r, function(t2, e2) {
            var n2 = e2._c;
            return n2("g", [n2("path", { staticClass: "st0", attrs: { d: "M23.5,0.5h-23l10,12.1v10.9l3-3v-7.9L23.5,0.5z" } })]);
          }, [], true, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, soGp: function(t, e, n) {
        }, suyH: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconAscending", status: "ready", release: "1.0.0", type: "Element" }, i = (n("4U07"), n("KHd+")), a = n("G91T"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("circle", { staticClass: "st0", attrs: { cx: "12", cy: "12", r: "2" } }), this._v(" "), e2("polygon", { staticClass: "st1", attrs: { points: "17.5,6.5 12,0.5 6.5,6.5 	" } }), this._v(" "), e2("polygon", { staticClass: "st2", attrs: { points: "6.5,17.5 12,23.5 17.5,17.5 	" } })]);
          }, [], false, null, "54c4ffe6", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, swsh: function(t, e) {
        }, tCVW: function(t, e, n) {
        }, u1Al: function(t, e, n) {
        }, uJhq: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Card", status: "ready", release: "1.0.0", type: "Element", props: { id: { type: String, default: "" }, cardUrl: { type: String, default: "" }, cardPixelWidth: { default: "" }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large|full-width)/);
          } }, selected: { type: Boolean, default: false }, edited: { type: Boolean, default: false }, disabled: { type: Boolean, default: false }, cardTitle: { type: String, default: "" } } }, i = (n("X2rl"), n("KHd+")), a = n("CByH"), o = n.n(a), s = Object(i.a)(r, function(t2, e2) {
            return (0, e2._c)("article", e2._g(e2._b({ ref: e2.data.ref, staticClass: "lux-card", class: [e2.props.size, { "lux-card-selected": e2.props.selected }, { "lux-card-edited": e2.props.edited }, { "lux-card-disabled": e2.props.disabled }, e2.data.class, e2.data.staticClass], style: { "max-width": e2.props.cardPixelWidth + "px" }, attrs: { id: e2.props.id } }, "article", e2.data.attrs, false), e2.listeners), [e2._t("default")], 2);
          }, [], true, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, v21v: function(t, e, n) {
          "use strict";
          var r = n("puGq");
          n.n(r).a;
        }, vB0O: function(t, e) {
        }, vW6B: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Spacer", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" } } }, i = (n("ytrk"), n("KHd+")), a = n("leEq"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", staticClass: "lux-spacer" }, [this._t("default")], 2);
          }, [], false, null, "9c95278a", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, vaTQ: function(t, e) {
        }, vnPu: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconFile", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("03rr"), o = n.n(a), s = Object(i.a)(r, function(t2, e2) {
            var n2 = e2._c;
            return n2("g", [n2("g", [n2("path", { attrs: { d: "M20.5,24h-17C3.2,24,3,23.8,3,23.5v-23C3,0.2,3.2,0,3.5,0h11c0.1,0,0.3,0.1,0.4,0.1l6,6C20.9,6.2,21,6.4,21,6.5v17\n      C21,23.8,20.8,24,20.5,24z M4,23h16V6.7L14.3,1H4V23z" } })]), e2._v(" "), n2("g", [n2("path", { attrs: { d: "M20.5,7h-6C14.2,7,14,6.8,14,6.5v-6C14,0.2,14.2,0,14.5,0S15,0.2,15,0.5V6h5.5C20.8,6,21,6.2,21,6.5S20.8,7,20.5,7z" } })])]);
          }, [], true, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, vqxW: function(t, e, n) {
          "use strict";
          var r = n("MEiy");
          n.n(r).a;
        }, w6ll: function(t, e) {
        }, w9WQ: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "GridItem", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" }, columns: { type: String, default: "" }, order: { type: String, default: "" }, offset: { type: Boolean, default: false }, vertical: { type: String, default: "" } } }, i = (n("M0Vt"), n("KHd+")), a = n("3S38"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", class: ["lux-col", this.columns, this.vertical, { push: this.offset }, this.order] }, [this._t("default")], 2);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, wAg7: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Loader", status: "ready", release: "1.0.0", type: "Element", props: { size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(x-small|small|medium|large|x-large)/);
          } }, fullscreen: { type: Boolean, default: false }, wrapper: { type: String, default: "div", validator: function(t2) {
            return t2.match(/(div|span)/);
          } } } }, i = (n("X/We"), n("KHd+")), a = n("vB0O"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2(this.wrapper, { tag: "component", staticClass: "lux-overlay", class: { "lux-fullscreen": this.fullscreen } }, [e2("div", { staticClass: "lux-loader", attrs: { size: this.size } })]);
          }, [], false, null, "04d6ed70", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, wHW2: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LibraryContactInfo", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" } } }, i = (n("/w86"), n("KHd+")), a = n("yDhH"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.type, { tag: "component", staticClass: "lux-library-contact" }, [n2("div", { attrs: { itemscope: "", itemtype: "http://schema.org/Organization" } }, [n2("h2", { attrs: { itemprop: "name" } }, [t2._v("Princeton University Library")]), t2._v(" "), n2("div", { attrs: { itemscope: "", itemtype: "http://schema.org/PostalAddress" } }, [n2("span", { attrs: { itemprop: "streetAddress" } }, [t2._v("One Washington Road")]), t2._v(" "), n2("br"), t2._v(" "), n2("span", { attrs: { itemprop: "addressLocality" } }, [t2._v("Princeton")]), t2._v(", "), n2("span", { attrs: { itemprop: "addressRegion" } }, [t2._v("NJ")]), t2._v(" "), n2("span", { attrs: { itemprop: "postalCode" } }, [t2._v("08544")]), t2._v(" "), n2("span", { attrs: { itemprop: "addressCountry" } }, [t2._v("USA")])]), t2._v(" "), n2("span", { attrs: { itemprop: "telephone" } }, [n2("a", { attrs: { href: "tel:1-609-258-1470" } }, [t2._v("(609) 258-1470")])])]), t2._v(" "), n2("ul", { staticClass: "icons" }, [n2("li", [n2("a", { attrs: { href: "http://www.facebook.com/PULibrary" } }, [n2("logo-facebook")], 1)]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "http://twitter.com/PULibrary" } }, [n2("logo-twitter")], 1)]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://libguides.princeton.edu/usgovdocs" } }, [n2("logo-gov-docs", { attrs: { width: "24", height: "24" } })], 1)]), t2._v(" "), n2("li", [n2("a", { attrs: { href: "https://fpul.princeton.edu/" } }, [n2("logo-friends", { attrs: { width: "87", height: "24" } })], 1)])])]);
          }, [], false, null, "ede1e742", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, wTVA: function(t, e) {
          t.exports = function(t2) {
            if (Array.isArray(t2))
              return t2;
          };
        }, wjTC: function(t, e) {
        }, wkBT: function(t, e) {
          t.exports = function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          };
        }, woMB: function(t, e) {
        }, wzZG: function(t, e) {
        }, xAyx: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconNote", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("JSv+"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2("g", [e2("g", [e2("path", { attrs: { d: "M7.5,22c-0.1,0-0.1,0-0.2,0C7.1,21.9,7,21.7,7,21.5V18H0.5C0.2,18,0,17.8,0,17.5v-16C0,1.2,0.2,1,0.5,1h23\n			C23.8,1,24,1.2,24,1.5v16c0,0.3-0.2,0.5-0.5,0.5H11.7l-3.9,3.9C7.8,21.9,7.6,22,7.5,22z M1,17h6.5C7.8,17,8,17.2,8,17.5v2.8\n			l3.1-3.1c0.1-0.1,0.2-0.1,0.4-0.1H23V2H1V17z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M14.5,7h-9C5.2,7,5,6.8,5,6.5S5.2,6,5.5,6h9C14.8,6,15,6.2,15,6.5S14.8,7,14.5,7z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M18.5,10h-13C5.2,10,5,9.8,5,9.5S5.2,9,5.5,9h13C18.8,9,19,9.2,19,9.5S18.8,10,18.5,10z" } })]), this._v(" "), e2("g", [e2("path", { attrs: { d: "M18.5,13h-13C5.2,13,5,12.8,5,12.5S5.2,12,5.5,12h13c0.3,0,0.5,0.2,0.5,0.5S18.8,13,18.5,13z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, "xMM/": function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "InputText", status: "ready", release: "1.0.0", type: "Element", mixins: [n("+Dcj").mixin], computed: { hasError: function() {
            return this.errormessage.length;
          } }, props: { type: { type: String, default: "text", validator: function(t2) {
            return t2.match(/(text|number|email|textarea)/);
          } }, value: { type: [String, Number], default: "" }, placeholder: { type: String, default: "" }, label: { type: String, default: "" }, hideLabel: { type: Boolean, default: false }, errormessage: { type: String, default: "" }, helper: { type: String, default: "" }, wrapper: { type: String, default: "div", validator: function(t2) {
            return t2.match(/(div|section)/);
          } }, id: { type: String, default: "", required: true }, name: { type: String, default: "", required: true }, width: { type: String, default: "auto", validator: function(t2) {
            return t2.match(/(auto|expand)/);
          } }, size: { type: String, default: "medium", validator: function(t2) {
            return t2.match(/(small|medium|large)/);
          } }, rows: { type: String, default: "5" }, maxlength: { type: Number, default: 256 }, disabled: { type: Boolean, default: false }, readonly: { type: Boolean, default: false }, required: { type: Boolean, default: false }, hover: { type: Boolean, default: false }, focused: { type: Boolean, default: false }, icon: { type: String, default: "" } }, methods: { inputblur: function(t2) {
            this.$emit("inputblur", t2), this.focused = false;
          } } }, i = (n("vqxW"), n("KHd+")), a = n("pCL/"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2(t2.wrapper, { tag: "component", staticClass: "lux-input", class: { "lux-has-icon": t2.icon } }, [t2.label ? n2("label", { class: { "lux-hidden": t2.hideLabel }, attrs: { for: t2.id } }, [t2._v(t2._s(t2.label))]) : t2._e(), t2._v(" "), n2("div", { staticClass: "lux-input-field", class: [{ "lux-input-expand": "expand" === t2.width }, { disabled: t2.disabled }, t2.size] }, ["textarea" !== t2.type ? n2("input", { directives: [{ name: "focus", rawName: "v-focus", value: t2.focused, expression: "focused" }], class: ["lux-input", { "lux-input-error": t2.hasError }], attrs: { autocomplete: "off", name: t2.name, id: t2.id, readonly: t2.readonly, disabled: t2.disabled, required: t2.required, type: t2.type, maxlength: t2.maxlength, hover: t2.hover, placeholder: t2.placeholder, errormessage: t2.errormessage }, domProps: { value: t2.value }, on: { input: function(e3) {
              return t2.$emit("input", e3.target.value);
            }, blur: function(e3) {
              return t2.inputblur(e3);
            }, focus: function(e3) {
              t2.focused = true;
            } } }) : n2("textarea", { directives: [{ name: "focus", rawName: "v-focus", value: t2.focused, expression: "focused" }], class: ["lux-input", { "lux-input-error": t2.hasError }, { "lux-input-expand": "expand" === t2.width }], attrs: { autocomplete: "off", name: t2.name, id: t2.id, disabled: t2.disabled, readonly: t2.readonly, required: t2.required, rows: t2.rows, maxlength: t2.maxlength, hover: t2.hover, placeholder: t2.placeholder, errormessage: t2.errormessage }, domProps: { value: t2.value }, on: { focus: function(e3) {
              t2.focused = true;
            }, input: function(e3) {
              return t2.$emit("input", e3.target.value);
            }, blur: function(e3) {
              return t2.inputblur(e3);
            } } }), t2._v(" "), t2.icon ? n2("div", { staticClass: "append-icon" }, [n2("lux-icon-base", { attrs: { width: "24", height: "24" } }, ["alert" === t2.icon ? n2("lux-icon-alert") : t2._e(), t2._v(" "), "approved" === t2.icon ? n2("lux-icon-approved") : t2._e(), t2._v(" "), "denied" === t2.icon ? n2("lux-icon-denied") : t2._e()], 1)], 1) : t2._e()]), t2._v(" "), t2.errormessage ? n2("div", { staticClass: "lux-error", attrs: { role: "alert" } }, [t2._v(t2._s(t2.errormessage))]) : t2._e(), t2._v(" "), t2.helper ? n2("div", { staticClass: "lux-helper" }, [t2._v(t2._s(t2.helper))]) : t2._e()]);
          }, [], false, null, "92311edc", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, xSCS: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "CardContent", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" } } }, i = (n("Akpa"), n("KHd+")), a = n("kHig"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", staticClass: "lux-card-content" }, [this._t("default")], 2);
          }, [], false, null, "2e0b2b0c", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, y2MN: function(t, e) {
        }, y6ju: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LuxIconConsulting", status: "ready", release: "1.0.0", type: "Element" }, i = n("KHd+"), a = n("Jo1H"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("g", [n2("g", [n2("path", { attrs: { d: "M10.5,13c-0.1,0-0.3-0.1-0.4-0.1L7.3,10H6.5C5.7,10,5,9.3,5,8.5v-7C5,0.7,5.7,0,6.5,0h11C18.3,0,19,0.7,19,1.5v7\n      c0,0.8-0.7,1.5-1.5,1.5H11v2.5c0,0.2-0.1,0.4-0.3,0.5C10.6,13,10.6,13,10.5,13z M6.5,1C6.2,1,6,1.2,6,1.5v7C6,8.8,6.2,9,6.5,9\n      h1C7.6,9,7.8,9,7.9,9.1l2.1,2.1V9.5C10,9.2,10.2,9,10.5,9h7C17.8,9,18,8.8,18,8.5v-7C18,1.2,17.8,1,17.5,1H6.5z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M19.5,17c-1.7,0-3-1.3-3-3s1.3-3,3-3s3,1.3,3,3S21.2,17,19.5,17z M19.5,12c-1.1,0-2,0.9-2,2s0.9,2,2,2s2-0.9,2-2\n      S20.6,12,19.5,12z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M23.5,21h-8c-0.3,0-0.5-0.2-0.5-0.5c0-2.5,2-4.5,4.5-4.5s4.5,2,4.5,4.5C24,20.8,23.8,21,23.5,21z M16,20H23\n      c-0.2-1.7-1.7-3-3.5-3S16.3,18.3,16,20z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M4.5,17c-1.7,0-3-1.3-3-3s1.3-3,3-3s3,1.3,3,3S6.2,17,4.5,17z M4.5,12c-1.1,0-2,0.9-2,2s0.9,2,2,2s2-0.9,2-2\n      S5.6,12,4.5,12z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M8.5,21h-8C0.2,21,0,20.8,0,20.5C0,18,2,16,4.5,16S9,18,9,20.5C9,20.8,8.8,21,8.5,21z M1,20H8c-0.2-1.7-1.7-3-3.5-3\n      S1.3,18.3,1,20z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M12,20c-1.7,0-3-1.3-3-3s1.3-3,3-3s3,1.3,3,3S13.7,20,12,20z M12,15c-1.1,0-2,0.9-2,2s0.9,2,2,2c1.1,0,2-0.9,2-2\n      S13.1,15,12,15z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M16,24H8c-0.3,0-0.5-0.2-0.5-0.5c0-2.5,2-4.5,4.5-4.5s4.5,2,4.5,4.5C16.5,23.8,16.3,24,16,24z M8.5,23h6.9\n      c-0.2-1.7-1.7-3-3.5-3C10.2,20,8.8,21.3,8.5,23z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15.5,3h-7C8.2,3,8,2.8,8,2.5S8.2,2,8.5,2h7C15.7,2,16,2.2,16,2.5S15.7,3,15.5,3z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15.5,5h-7C8.2,5,8,4.8,8,4.5S8.2,4,8.5,4h7C15.7,4,16,4.2,16,4.5S15.7,5,15.5,5z" } })]), t2._v(" "), n2("g", [n2("path", { attrs: { d: "M15.5,7h-7C8.2,7,8,6.8,8,6.5S8.2,6,8.5,6h7C15.7,6,16,6.2,16,6.5S15.7,7,15.5,7z" } })])]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, yDhH: function(t, e) {
        }, yLpj: function(t, e) {
          var n;
          n = function() {
            return this;
          }();
          try {
            n = n || new Function("return this")();
          } catch (t2) {
            "object" == typeof window && (n = window);
          }
          t.exports = n;
        }, yXPU: function(t, e) {
          function n(t2, e2, n2, r, i, a, o) {
            try {
              var s = t2[a](o), c = s.value;
            } catch (t3) {
              return void n2(t3);
            }
            s.done ? e2(c) : Promise.resolve(c).then(r, i);
          }
          t.exports = function(t2) {
            return function() {
              var e2 = this, r = arguments;
              return new Promise(function(i, a) {
                var o = t2.apply(e2, r);
                function s(t3) {
                  n(o, i, a, s, c, "next", t3);
                }
                function c(t3) {
                  n(o, i, a, s, c, "throw", t3);
                }
                s(void 0);
              });
            };
          };
        }, yk1l: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "LibraryLogo", status: "ready", release: "1.0.0", type: "Element", props: { type: { type: String, default: "div" }, theme: { type: String, default: "dark" } } }, i = (n("TA8l"), n("KHd+")), a = n("LX5d"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement, e2 = this._self._c || t2;
            return e2(this.type, { tag: "component", staticClass: "lux-library-logo", attrs: { theme: this.theme } }, [e2("a", { attrs: { href: "https://library.princeton.edu" } }, ["dark" === this.theme ? e2("logo-library", { staticClass: "full-logo", attrs: { width: "155px", height: "34px" } }) : e2("logo-library", { staticClass: "full-logo", attrs: { width: "155px", height: "34px", color: "#000" } }), this._v(" "), e2("logo-library-icon", { staticClass: "icon-only", attrs: { width: "34px", height: "34px" } })], 1)]);
          }, [], false, null, "00d54141", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, ylaU: function(t, e, n) {
        }, ytrk: function(t, e, n) {
          "use strict";
          var r = n("SfqK");
          n.n(r).a;
        }, zXRM: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "SearchBox", status: "ready", release: "1.0.0", type: "Pattern", props: { type: { type: String, default: "div" } } }, i = (n("Je0I"), n("KHd+")), a = n("iNJb"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this.$createElement;
            return (this._self._c || t2)(this.type, { tag: "component", staticClass: "lux-search-box" }, [this._t("default")], 2);
          }, [], false, null, "578175de", null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, zckO: function(t, e) {
        }, zj92: function(t, e, n) {
          "use strict";
          n.r(e);
          var r = { name: "Alert", status: "ready", release: "1.0.0", type: "Element", metaInfo: { title: "Global alert message to user.", htmlAttrs: { lang: "en" } }, data: function() {
            return { alertMessage: "Something happened, but we're not sure what.", show: true };
          }, computed: { isSuccess: function() {
            return "success" === this.status;
          }, isInfo: function() {
            return "info" === this.status;
          }, isWarning: function() {
            return "warning" === this.status;
          }, isError: function() {
            return "error" === this.status;
          }, isFullScreen: function() {
            return "alert" === this.type;
          } }, props: { type: { type: String, default: "indicator", validator: function(t2) {
            return t2.match(/(alert|indicator)/);
          } }, status: { type: String, default: "info", validator: function(t2) {
            return t2.match(/(info|warning|success|error)/);
          } }, autoclear: { type: Boolean, default: false }, dismissible: { type: Boolean, default: false } }, methods: { hideAlert: function() {
            this.show = false;
          } }, mounted: function() {
            var t2 = this;
            this.autoclear && setTimeout(function() {
              t2.show = false;
            }, 2e3);
          } }, i = (n("YXvi"), n("KHd+")), a = n("CtM7"), o = n.n(a), s = Object(i.a)(r, function() {
            var t2 = this, e2 = t2.$createElement, n2 = t2._self._c || e2;
            return n2("transition", { attrs: { name: "fade" } }, [t2.show ? n2("div", { class: ["lux-alert", { "lux-alert-dismissible": t2.dismissible }, { "lux-alert-success": t2.isSuccess }, { "lux-alert-warning": t2.isWarning }, { "lux-alert-error": t2.isError }, { "lux-alert-info": t2.isInfo }, { "lux-alert-fullscreen": t2.isFullScreen }], attrs: { role: "alert" } }, [n2("span", [t2._t("default", function() {
              return [t2._v(t2._s(t2.alertMessage))];
            })], 2), t2._v(" "), t2.dismissible ? n2("button", { staticClass: "lux-close", attrs: { type: "button", "data-dismiss": "alert", "aria-label": "Close" }, on: { click: function(e3) {
              return t2.hideAlert();
            } } }, [n2("span", { attrs: { "aria-hidden": "true" } }, [t2._v("\xD7")])]) : t2._e()]) : t2._e()]);
          }, [], false, null, null, null);
          "function" == typeof o.a && o()(s);
          e.default = s.exports;
        }, zvzC: function(t, e) {
        } });
      });
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports2, module2) {
      var __extends3;
      var __assign3;
      var __rest3;
      var __decorate3;
      var __param3;
      var __metadata3;
      var __awaiter3;
      var __generator3;
      var __exportStar3;
      var __values3;
      var __read3;
      var __spread3;
      var __spreadArrays3;
      var __await3;
      var __asyncGenerator3;
      var __asyncDelegator3;
      var __asyncValues3;
      var __makeTemplateObject3;
      var __importStar3;
      var __importDefault3;
      var __classPrivateFieldGet3;
      var __classPrivateFieldSet3;
      var __createBinding3;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports3) {
            factory(createExporter(root2, createExporter(exports3)));
          });
        } else if (typeof module2 === "object" && typeof module2.exports === "object") {
          factory(createExporter(root2, createExporter(module2.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports3, previous) {
          if (exports3 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports3, "__esModule", { value: true });
            } else {
              exports3.__esModule = true;
            }
          }
          return function(id, v) {
            return exports3[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (b.hasOwnProperty(p))
              d[p] = b[p];
        };
        __extends3 = function(d, b) {
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign3 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest3 = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate3 = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param3 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata3 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter3 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result2) {
              result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator3 = function(thisArg, body) {
          var _2 = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_2)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _2.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _2.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _2.ops.pop();
                    _2.trys.pop();
                    continue;
                  default:
                    if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _2 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _2.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _2.label < t[1]) {
                      _2.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _2.label < t[2]) {
                      _2.label = t[2];
                      _2.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _2.ops.pop();
                    _2.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _2);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __createBinding3 = function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __exportStar3 = function(m, exports3) {
          for (var p in m)
            if (p !== "default" && !exports3.hasOwnProperty(p))
              exports3[p] = m[p];
        };
        __values3 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read3 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread3 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read3(arguments[i]));
          return ar;
        };
        __spreadArrays3 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __await3 = function(v) {
          return this instanceof __await3 ? (this.v = v, this) : new __await3(v);
        };
        __asyncGenerator3 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator3 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await3(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues3 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values3 === "function" ? __values3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject3 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        __importStar3 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result2 = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result2[k] = mod[k];
          }
          result2["default"] = mod;
          return result2;
        };
        __importDefault3 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet3 = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        };
        __classPrivateFieldSet3 = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        };
        exporter("__extends", __extends3);
        exporter("__assign", __assign3);
        exporter("__rest", __rest3);
        exporter("__decorate", __decorate3);
        exporter("__param", __param3);
        exporter("__metadata", __metadata3);
        exporter("__awaiter", __awaiter3);
        exporter("__generator", __generator3);
        exporter("__exportStar", __exportStar3);
        exporter("__createBinding", __createBinding3);
        exporter("__values", __values3);
        exporter("__read", __read3);
        exporter("__spread", __spread3);
        exporter("__spreadArrays", __spreadArrays3);
        exporter("__await", __await3);
        exporter("__asyncGenerator", __asyncGenerator3);
        exporter("__asyncDelegator", __asyncDelegator3);
        exporter("__asyncValues", __asyncValues3);
        exporter("__makeTemplateObject", __makeTemplateObject3);
        exporter("__importStar", __importStar3);
        exporter("__importDefault", __importDefault3);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet3);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet3);
      });
    }
  });

  // node_modules/graphql/language/visitor.js
  var require_visitor = __commonJS({
    "node_modules/graphql/language/visitor.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.visit = visit4;
      exports2.visitInParallel = visitInParallel2;
      exports2.visitWithTypeInfo = visitWithTypeInfo2;
      exports2.getVisitFn = getVisitFn2;
      var QueryDocumentKeys = exports2.QueryDocumentKeys = {
        Name: [],
        Document: ["definitions"],
        OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
        VariableDefinition: ["variable", "type", "defaultValue"],
        Variable: ["name"],
        SelectionSet: ["selections"],
        Field: ["alias", "name", "arguments", "directives", "selectionSet"],
        Argument: ["name", "value"],
        FragmentSpread: ["name", "directives"],
        InlineFragment: ["typeCondition", "directives", "selectionSet"],
        FragmentDefinition: [
          "name",
          "variableDefinitions",
          "typeCondition",
          "directives",
          "selectionSet"
        ],
        IntValue: [],
        FloatValue: [],
        StringValue: [],
        BooleanValue: [],
        NullValue: [],
        EnumValue: [],
        ListValue: ["values"],
        ObjectValue: ["fields"],
        ObjectField: ["name", "value"],
        Directive: ["name", "arguments"],
        NamedType: ["name"],
        ListType: ["type"],
        NonNullType: ["type"],
        SchemaDefinition: ["directives", "operationTypes"],
        OperationTypeDefinition: ["type"],
        ScalarTypeDefinition: ["description", "name", "directives"],
        ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
        FieldDefinition: ["description", "name", "arguments", "type", "directives"],
        InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
        InterfaceTypeDefinition: ["description", "name", "directives", "fields"],
        UnionTypeDefinition: ["description", "name", "directives", "types"],
        EnumTypeDefinition: ["description", "name", "directives", "values"],
        EnumValueDefinition: ["description", "name", "directives"],
        InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
        ScalarTypeExtension: ["name", "directives"],
        ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
        InterfaceTypeExtension: ["name", "directives", "fields"],
        UnionTypeExtension: ["name", "directives", "types"],
        EnumTypeExtension: ["name", "directives", "values"],
        InputObjectTypeExtension: ["name", "directives", "fields"],
        DirectiveDefinition: ["description", "name", "arguments", "locations"]
      };
      var BREAK3 = exports2.BREAK = {};
      function visit4(root2, visitor) {
        var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
        var stack = void 0;
        var inArray = Array.isArray(root2);
        var keys = [root2];
        var index = -1;
        var edits = [];
        var node = void 0;
        var key = void 0;
        var parent = void 0;
        var path = [];
        var ancestors = [];
        var newRoot = root2;
        do {
          index++;
          var isLeaving = index === keys.length;
          var isEdited = isLeaving && edits.length !== 0;
          if (isLeaving) {
            key = ancestors.length === 0 ? void 0 : path[path.length - 1];
            node = parent;
            parent = ancestors.pop();
            if (isEdited) {
              if (inArray) {
                node = node.slice();
              } else {
                var clone = {};
                for (var k in node) {
                  if (node.hasOwnProperty(k)) {
                    clone[k] = node[k];
                  }
                }
                node = clone;
              }
              var editOffset = 0;
              for (var ii = 0; ii < edits.length; ii++) {
                var editKey = edits[ii][0];
                var editValue = edits[ii][1];
                if (inArray) {
                  editKey -= editOffset;
                }
                if (inArray && editValue === null) {
                  node.splice(editKey, 1);
                  editOffset++;
                } else {
                  node[editKey] = editValue;
                }
              }
            }
            index = stack.index;
            keys = stack.keys;
            edits = stack.edits;
            inArray = stack.inArray;
            stack = stack.prev;
          } else {
            key = parent ? inArray ? index : keys[index] : void 0;
            node = parent ? parent[key] : newRoot;
            if (node === null || node === void 0) {
              continue;
            }
            if (parent) {
              path.push(key);
            }
          }
          var result2 = void 0;
          if (!Array.isArray(node)) {
            if (!isNode(node)) {
              throw new Error("Invalid AST Node: " + JSON.stringify(node));
            }
            var visitFn = getVisitFn2(visitor, node.kind, isLeaving);
            if (visitFn) {
              result2 = visitFn.call(visitor, node, key, parent, path, ancestors);
              if (result2 === BREAK3) {
                break;
              }
              if (result2 === false) {
                if (!isLeaving) {
                  path.pop();
                  continue;
                }
              } else if (result2 !== void 0) {
                edits.push([key, result2]);
                if (!isLeaving) {
                  if (isNode(result2)) {
                    node = result2;
                  } else {
                    path.pop();
                    continue;
                  }
                }
              }
            }
          }
          if (result2 === void 0 && isEdited) {
            edits.push([key, node]);
          }
          if (isLeaving) {
            path.pop();
          } else {
            stack = { inArray, index, keys, edits, prev: stack };
            inArray = Array.isArray(node);
            keys = inArray ? node : visitorKeys[node.kind] || [];
            index = -1;
            edits = [];
            if (parent) {
              ancestors.push(parent);
            }
            parent = node;
          }
        } while (stack !== void 0);
        if (edits.length !== 0) {
          newRoot = edits[edits.length - 1][1];
        }
        return newRoot;
      }
      function isNode(maybeNode) {
        return Boolean(maybeNode && typeof maybeNode.kind === "string");
      }
      function visitInParallel2(visitors) {
        var skipping = new Array(visitors.length);
        return {
          enter: function enter(node) {
            for (var i = 0; i < visitors.length; i++) {
              if (!skipping[i]) {
                var fn = getVisitFn2(visitors[i], node.kind, false);
                if (fn) {
                  var result2 = fn.apply(visitors[i], arguments);
                  if (result2 === false) {
                    skipping[i] = node;
                  } else if (result2 === BREAK3) {
                    skipping[i] = BREAK3;
                  } else if (result2 !== void 0) {
                    return result2;
                  }
                }
              }
            }
          },
          leave: function leave(node) {
            for (var i = 0; i < visitors.length; i++) {
              if (!skipping[i]) {
                var fn = getVisitFn2(visitors[i], node.kind, true);
                if (fn) {
                  var result2 = fn.apply(visitors[i], arguments);
                  if (result2 === BREAK3) {
                    skipping[i] = BREAK3;
                  } else if (result2 !== void 0 && result2 !== false) {
                    return result2;
                  }
                }
              } else if (skipping[i] === node) {
                skipping[i] = null;
              }
            }
          }
        };
      }
      function visitWithTypeInfo2(typeInfo, visitor) {
        return {
          enter: function enter(node) {
            typeInfo.enter(node);
            var fn = getVisitFn2(visitor, node.kind, false);
            if (fn) {
              var result2 = fn.apply(visitor, arguments);
              if (result2 !== void 0) {
                typeInfo.leave(node);
                if (isNode(result2)) {
                  typeInfo.enter(result2);
                }
              }
              return result2;
            }
          },
          leave: function leave(node) {
            var fn = getVisitFn2(visitor, node.kind, true);
            var result2 = void 0;
            if (fn) {
              result2 = fn.apply(visitor, arguments);
            }
            typeInfo.leave(node);
            return result2;
          }
        };
      }
      function getVisitFn2(visitor, kind, isLeaving) {
        var kindVisitor = visitor[kind];
        if (kindVisitor) {
          if (!isLeaving && typeof kindVisitor === "function") {
            return kindVisitor;
          }
          var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
          if (typeof kindSpecificVisitor === "function") {
            return kindSpecificVisitor;
          }
        } else {
          var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
          if (specificVisitor) {
            if (typeof specificVisitor === "function") {
              return specificVisitor;
            }
            var specificKindVisitor = specificVisitor[kind];
            if (typeof specificKindVisitor === "function") {
              return specificKindVisitor;
            }
          }
        }
      }
    }
  });

  // node_modules/fast-json-stable-stringify/index.js
  var require_fast_json_stable_stringify = __commonJS({
    "node_modules/fast-json-stable-stringify/index.js"(exports2, module2) {
      "use strict";
      module2.exports = function(data, opts) {
        if (!opts)
          opts = {};
        if (typeof opts === "function")
          opts = { cmp: opts };
        var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
        var cmp = opts.cmp && function(f) {
          return function(node) {
            return function(a, b) {
              var aobj = { key: a, value: node[a] };
              var bobj = { key: b, value: node[b] };
              return f(aobj, bobj);
            };
          };
        }(opts.cmp);
        var seen = [];
        return function stringify2(node) {
          if (node && node.toJSON && typeof node.toJSON === "function") {
            node = node.toJSON();
          }
          if (node === void 0)
            return;
          if (typeof node == "number")
            return isFinite(node) ? "" + node : "null";
          if (typeof node !== "object")
            return JSON.stringify(node);
          var i, out;
          if (Array.isArray(node)) {
            out = "[";
            for (i = 0; i < node.length; i++) {
              if (i)
                out += ",";
              out += stringify2(node[i]) || "null";
            }
            return out + "]";
          }
          if (node === null)
            return "null";
          if (seen.indexOf(node) !== -1) {
            if (cycles)
              return JSON.stringify("__cycle__");
            throw new TypeError("Converting circular structure to JSON");
          }
          var seenIndex = seen.push(node) - 1;
          var keys = Object.keys(node).sort(cmp && cmp(node));
          out = "";
          for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = stringify2(node[key]);
            if (!value)
              continue;
            if (out)
              out += ",";
            out += JSON.stringify(key) + ":" + value;
          }
          seen.splice(seenIndex, 1);
          return "{" + out + "}";
        }(data);
      };
    }
  });

  // node_modules/zen-observable/lib/Observable.js
  var require_Observable = __commonJS({
    "node_modules/zen-observable/lib/Observable.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Observable = void 0;
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      var hasSymbols = function() {
        return typeof Symbol === "function";
      };
      var hasSymbol = function(name) {
        return hasSymbols() && Boolean(Symbol[name]);
      };
      var getSymbol = function(name) {
        return hasSymbol(name) ? Symbol[name] : "@@" + name;
      };
      if (hasSymbols() && !hasSymbol("observable")) {
        Symbol.observable = Symbol("observable");
      }
      var SymbolIterator = getSymbol("iterator");
      var SymbolObservable = getSymbol("observable");
      var SymbolSpecies = getSymbol("species");
      function getMethod(obj, key) {
        var value = obj[key];
        if (value == null)
          return void 0;
        if (typeof value !== "function")
          throw new TypeError(value + " is not a function");
        return value;
      }
      function getSpecies(obj) {
        var ctor = obj.constructor;
        if (ctor !== void 0) {
          ctor = ctor[SymbolSpecies];
          if (ctor === null) {
            ctor = void 0;
          }
        }
        return ctor !== void 0 ? ctor : Observable3;
      }
      function isObservable(x) {
        return x instanceof Observable3;
      }
      function hostReportError(e) {
        if (hostReportError.log) {
          hostReportError.log(e);
        } else {
          setTimeout(function() {
            throw e;
          });
        }
      }
      function enqueue(fn) {
        Promise.resolve().then(function() {
          try {
            fn();
          } catch (e) {
            hostReportError(e);
          }
        });
      }
      function cleanupSubscription(subscription) {
        var cleanup = subscription._cleanup;
        if (cleanup === void 0)
          return;
        subscription._cleanup = void 0;
        if (!cleanup) {
          return;
        }
        try {
          if (typeof cleanup === "function") {
            cleanup();
          } else {
            var unsubscribe = getMethod(cleanup, "unsubscribe");
            if (unsubscribe) {
              unsubscribe.call(cleanup);
            }
          }
        } catch (e) {
          hostReportError(e);
        }
      }
      function closeSubscription(subscription) {
        subscription._observer = void 0;
        subscription._queue = void 0;
        subscription._state = "closed";
      }
      function flushSubscription(subscription) {
        var queue = subscription._queue;
        if (!queue) {
          return;
        }
        subscription._queue = void 0;
        subscription._state = "ready";
        for (var i = 0; i < queue.length; ++i) {
          notifySubscription(subscription, queue[i].type, queue[i].value);
          if (subscription._state === "closed")
            break;
        }
      }
      function notifySubscription(subscription, type, value) {
        subscription._state = "running";
        var observer = subscription._observer;
        try {
          var m = getMethod(observer, type);
          switch (type) {
            case "next":
              if (m)
                m.call(observer, value);
              break;
            case "error":
              closeSubscription(subscription);
              if (m)
                m.call(observer, value);
              else
                throw value;
              break;
            case "complete":
              closeSubscription(subscription);
              if (m)
                m.call(observer);
              break;
          }
        } catch (e) {
          hostReportError(e);
        }
        if (subscription._state === "closed")
          cleanupSubscription(subscription);
        else if (subscription._state === "running")
          subscription._state = "ready";
      }
      function onNotify(subscription, type, value) {
        if (subscription._state === "closed")
          return;
        if (subscription._state === "buffering") {
          subscription._queue.push({
            type,
            value
          });
          return;
        }
        if (subscription._state !== "ready") {
          subscription._state = "buffering";
          subscription._queue = [{
            type,
            value
          }];
          enqueue(function() {
            return flushSubscription(subscription);
          });
          return;
        }
        notifySubscription(subscription, type, value);
      }
      var Subscription = /* @__PURE__ */ function() {
        function Subscription2(observer, subscriber) {
          _classCallCheck(this, Subscription2);
          this._cleanup = void 0;
          this._observer = observer;
          this._queue = void 0;
          this._state = "initializing";
          var subscriptionObserver = new SubscriptionObserver(this);
          try {
            this._cleanup = subscriber.call(void 0, subscriptionObserver);
          } catch (e) {
            subscriptionObserver.error(e);
          }
          if (this._state === "initializing")
            this._state = "ready";
        }
        _createClass(Subscription2, [{
          key: "unsubscribe",
          value: function unsubscribe() {
            if (this._state !== "closed") {
              closeSubscription(this);
              cleanupSubscription(this);
            }
          }
        }, {
          key: "closed",
          get: function() {
            return this._state === "closed";
          }
        }]);
        return Subscription2;
      }();
      var SubscriptionObserver = /* @__PURE__ */ function() {
        function SubscriptionObserver2(subscription) {
          _classCallCheck(this, SubscriptionObserver2);
          this._subscription = subscription;
        }
        _createClass(SubscriptionObserver2, [{
          key: "next",
          value: function next(value) {
            onNotify(this._subscription, "next", value);
          }
        }, {
          key: "error",
          value: function error(value) {
            onNotify(this._subscription, "error", value);
          }
        }, {
          key: "complete",
          value: function complete() {
            onNotify(this._subscription, "complete");
          }
        }, {
          key: "closed",
          get: function() {
            return this._subscription._state === "closed";
          }
        }]);
        return SubscriptionObserver2;
      }();
      var Observable3 = /* @__PURE__ */ function() {
        function Observable4(subscriber) {
          _classCallCheck(this, Observable4);
          if (!(this instanceof Observable4))
            throw new TypeError("Observable cannot be called as a function");
          if (typeof subscriber !== "function")
            throw new TypeError("Observable initializer must be a function");
          this._subscriber = subscriber;
        }
        _createClass(Observable4, [{
          key: "subscribe",
          value: function subscribe3(observer) {
            if (typeof observer !== "object" || observer === null) {
              observer = {
                next: observer,
                error: arguments[1],
                complete: arguments[2]
              };
            }
            return new Subscription(observer, this._subscriber);
          }
        }, {
          key: "forEach",
          value: function forEach(fn) {
            var _this = this;
            return new Promise(function(resolve, reject) {
              if (typeof fn !== "function") {
                reject(new TypeError(fn + " is not a function"));
                return;
              }
              function done() {
                subscription.unsubscribe();
                resolve();
              }
              var subscription = _this.subscribe({
                next: function(value) {
                  try {
                    fn(value, done);
                  } catch (e) {
                    reject(e);
                    subscription.unsubscribe();
                  }
                },
                error: reject,
                complete: resolve
              });
            });
          }
        }, {
          key: "map",
          value: function map(fn) {
            var _this2 = this;
            if (typeof fn !== "function")
              throw new TypeError(fn + " is not a function");
            var C = getSpecies(this);
            return new C(function(observer) {
              return _this2.subscribe({
                next: function(value) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                  observer.next(value);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  observer.complete();
                }
              });
            });
          }
        }, {
          key: "filter",
          value: function filter(fn) {
            var _this3 = this;
            if (typeof fn !== "function")
              throw new TypeError(fn + " is not a function");
            var C = getSpecies(this);
            return new C(function(observer) {
              return _this3.subscribe({
                next: function(value) {
                  try {
                    if (!fn(value))
                      return;
                  } catch (e) {
                    return observer.error(e);
                  }
                  observer.next(value);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  observer.complete();
                }
              });
            });
          }
        }, {
          key: "reduce",
          value: function reduce(fn) {
            var _this4 = this;
            if (typeof fn !== "function")
              throw new TypeError(fn + " is not a function");
            var C = getSpecies(this);
            var hasSeed = arguments.length > 1;
            var hasValue = false;
            var seed = arguments[1];
            var acc = seed;
            return new C(function(observer) {
              return _this4.subscribe({
                next: function(value) {
                  var first = !hasValue;
                  hasValue = true;
                  if (!first || hasSeed) {
                    try {
                      acc = fn(acc, value);
                    } catch (e) {
                      return observer.error(e);
                    }
                  } else {
                    acc = value;
                  }
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  if (!hasValue && !hasSeed)
                    return observer.error(new TypeError("Cannot reduce an empty sequence"));
                  observer.next(acc);
                  observer.complete();
                }
              });
            });
          }
        }, {
          key: "concat",
          value: function concat2() {
            var _this5 = this;
            for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
              sources[_key] = arguments[_key];
            }
            var C = getSpecies(this);
            return new C(function(observer) {
              var subscription;
              var index = 0;
              function startNext(next) {
                subscription = next.subscribe({
                  next: function(v) {
                    observer.next(v);
                  },
                  error: function(e) {
                    observer.error(e);
                  },
                  complete: function() {
                    if (index === sources.length) {
                      subscription = void 0;
                      observer.complete();
                    } else {
                      startNext(C.from(sources[index++]));
                    }
                  }
                });
              }
              startNext(_this5);
              return function() {
                if (subscription) {
                  subscription.unsubscribe();
                  subscription = void 0;
                }
              };
            });
          }
        }, {
          key: "flatMap",
          value: function flatMap(fn) {
            var _this6 = this;
            if (typeof fn !== "function")
              throw new TypeError(fn + " is not a function");
            var C = getSpecies(this);
            return new C(function(observer) {
              var subscriptions = [];
              var outer = _this6.subscribe({
                next: function(value) {
                  if (fn) {
                    try {
                      value = fn(value);
                    } catch (e) {
                      return observer.error(e);
                    }
                  }
                  var inner = C.from(value).subscribe({
                    next: function(value2) {
                      observer.next(value2);
                    },
                    error: function(e) {
                      observer.error(e);
                    },
                    complete: function() {
                      var i = subscriptions.indexOf(inner);
                      if (i >= 0)
                        subscriptions.splice(i, 1);
                      completeIfDone();
                    }
                  });
                  subscriptions.push(inner);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  completeIfDone();
                }
              });
              function completeIfDone() {
                if (outer.closed && subscriptions.length === 0)
                  observer.complete();
              }
              return function() {
                subscriptions.forEach(function(s) {
                  return s.unsubscribe();
                });
                outer.unsubscribe();
              };
            });
          }
        }, {
          key: SymbolObservable,
          value: function() {
            return this;
          }
        }], [{
          key: "from",
          value: function from2(x) {
            var C = typeof this === "function" ? this : Observable4;
            if (x == null)
              throw new TypeError(x + " is not an object");
            var method = getMethod(x, SymbolObservable);
            if (method) {
              var observable = method.call(x);
              if (Object(observable) !== observable)
                throw new TypeError(observable + " is not an object");
              if (isObservable(observable) && observable.constructor === C)
                return observable;
              return new C(function(observer) {
                return observable.subscribe(observer);
              });
            }
            if (hasSymbol("iterator")) {
              method = getMethod(x, SymbolIterator);
              if (method) {
                return new C(function(observer) {
                  enqueue(function() {
                    if (observer.closed)
                      return;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = void 0;
                    try {
                      for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _item = _step.value;
                        observer.next(_item);
                        if (observer.closed)
                          return;
                      }
                    } catch (err) {
                      _didIteratorError = true;
                      _iteratorError = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                          _iterator.return();
                        }
                      } finally {
                        if (_didIteratorError) {
                          throw _iteratorError;
                        }
                      }
                    }
                    observer.complete();
                  });
                });
              }
            }
            if (Array.isArray(x)) {
              return new C(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  for (var i = 0; i < x.length; ++i) {
                    observer.next(x[i]);
                    if (observer.closed)
                      return;
                  }
                  observer.complete();
                });
              });
            }
            throw new TypeError(x + " is not observable");
          }
        }, {
          key: "of",
          value: function of() {
            for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              items[_key2] = arguments[_key2];
            }
            var C = typeof this === "function" ? this : Observable4;
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i = 0; i < items.length; ++i) {
                  observer.next(items[i]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
        }, {
          key: SymbolSpecies,
          get: function() {
            return this;
          }
        }]);
        return Observable4;
      }();
      exports2.Observable = Observable3;
      if (hasSymbols()) {
        Object.defineProperty(Observable3, Symbol("extensions"), {
          value: {
            symbol: SymbolObservable,
            hostReportError
          },
          configurable: true
        });
      }
    }
  });

  // node_modules/zen-observable/index.js
  var require_zen_observable = __commonJS({
    "node_modules/zen-observable/index.js"(exports2, module2) {
      module2.exports = require_Observable().Observable;
    }
  });

  // node_modules/graphql/language/printer.js
  var require_printer = __commonJS({
    "node_modules/graphql/language/printer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.print = print3;
      var _visitor = require_visitor();
      function print3(ast) {
        return (0, _visitor.visit)(ast, { leave: printDocASTReducer });
      }
      var printDocASTReducer = {
        Name: function Name(node) {
          return node.value;
        },
        Variable: function Variable(node) {
          return "$" + node.name;
        },
        Document: function Document(node) {
          return join(node.definitions, "\n\n") + "\n";
        },
        OperationDefinition: function OperationDefinition(node) {
          var op = node.operation;
          var name = node.name;
          var varDefs = wrap2("(", join(node.variableDefinitions, ", "), ")");
          var directives = join(node.directives, " ");
          var selectionSet = node.selectionSet;
          return !name && !directives && !varDefs && op === "query" ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], " ");
        },
        VariableDefinition: function VariableDefinition(_ref) {
          var variable = _ref.variable, type = _ref.type, defaultValue = _ref.defaultValue;
          return variable + ": " + type + wrap2(" = ", defaultValue);
        },
        SelectionSet: function SelectionSet(_ref2) {
          var selections = _ref2.selections;
          return block(selections);
        },
        Field: function Field(_ref3) {
          var alias = _ref3.alias, name = _ref3.name, args = _ref3.arguments, directives = _ref3.directives, selectionSet = _ref3.selectionSet;
          return join([wrap2("", alias, ": ") + name + wrap2("(", join(args, ", "), ")"), join(directives, " "), selectionSet], " ");
        },
        Argument: function Argument(_ref4) {
          var name = _ref4.name, value = _ref4.value;
          return name + ": " + value;
        },
        FragmentSpread: function FragmentSpread(_ref5) {
          var name = _ref5.name, directives = _ref5.directives;
          return "..." + name + wrap2(" ", join(directives, " "));
        },
        InlineFragment: function InlineFragment(_ref6) {
          var typeCondition = _ref6.typeCondition, directives = _ref6.directives, selectionSet = _ref6.selectionSet;
          return join(["...", wrap2("on ", typeCondition), join(directives, " "), selectionSet], " ");
        },
        FragmentDefinition: function FragmentDefinition(_ref7) {
          var name = _ref7.name, typeCondition = _ref7.typeCondition, variableDefinitions = _ref7.variableDefinitions, directives = _ref7.directives, selectionSet = _ref7.selectionSet;
          return "fragment " + name + wrap2("(", join(variableDefinitions, ", "), ")") + " " + ("on " + typeCondition + " " + wrap2("", join(directives, " "), " ")) + selectionSet;
        },
        IntValue: function IntValue(_ref8) {
          var value = _ref8.value;
          return value;
        },
        FloatValue: function FloatValue(_ref9) {
          var value = _ref9.value;
          return value;
        },
        StringValue: function StringValue(_ref10, key) {
          var value = _ref10.value, isBlockString = _ref10.block;
          return isBlockString ? printBlockString(value, key === "description") : JSON.stringify(value);
        },
        BooleanValue: function BooleanValue(_ref11) {
          var value = _ref11.value;
          return value ? "true" : "false";
        },
        NullValue: function NullValue() {
          return "null";
        },
        EnumValue: function EnumValue(_ref12) {
          var value = _ref12.value;
          return value;
        },
        ListValue: function ListValue(_ref13) {
          var values = _ref13.values;
          return "[" + join(values, ", ") + "]";
        },
        ObjectValue: function ObjectValue(_ref14) {
          var fields = _ref14.fields;
          return "{" + join(fields, ", ") + "}";
        },
        ObjectField: function ObjectField(_ref15) {
          var name = _ref15.name, value = _ref15.value;
          return name + ": " + value;
        },
        Directive: function Directive(_ref16) {
          var name = _ref16.name, args = _ref16.arguments;
          return "@" + name + wrap2("(", join(args, ", "), ")");
        },
        NamedType: function NamedType(_ref17) {
          var name = _ref17.name;
          return name;
        },
        ListType: function ListType(_ref18) {
          var type = _ref18.type;
          return "[" + type + "]";
        },
        NonNullType: function NonNullType(_ref19) {
          var type = _ref19.type;
          return type + "!";
        },
        SchemaDefinition: function SchemaDefinition(_ref20) {
          var directives = _ref20.directives, operationTypes = _ref20.operationTypes;
          return join(["schema", join(directives, " "), block(operationTypes)], " ");
        },
        OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
          var operation = _ref21.operation, type = _ref21.type;
          return operation + ": " + type;
        },
        ScalarTypeDefinition: addDescription(function(_ref22) {
          var name = _ref22.name, directives = _ref22.directives;
          return join(["scalar", name, join(directives, " ")], " ");
        }),
        ObjectTypeDefinition: addDescription(function(_ref23) {
          var name = _ref23.name, interfaces = _ref23.interfaces, directives = _ref23.directives, fields = _ref23.fields;
          return join(["type", name, wrap2("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
        }),
        FieldDefinition: addDescription(function(_ref24) {
          var name = _ref24.name, args = _ref24.arguments, type = _ref24.type, directives = _ref24.directives;
          return name + wrap2("(", join(args, ", "), ")") + ": " + type + wrap2(" ", join(directives, " "));
        }),
        InputValueDefinition: addDescription(function(_ref25) {
          var name = _ref25.name, type = _ref25.type, defaultValue = _ref25.defaultValue, directives = _ref25.directives;
          return join([name + ": " + type, wrap2("= ", defaultValue), join(directives, " ")], " ");
        }),
        InterfaceTypeDefinition: addDescription(function(_ref26) {
          var name = _ref26.name, directives = _ref26.directives, fields = _ref26.fields;
          return join(["interface", name, join(directives, " "), block(fields)], " ");
        }),
        UnionTypeDefinition: addDescription(function(_ref27) {
          var name = _ref27.name, directives = _ref27.directives, types = _ref27.types;
          return join(["union", name, join(directives, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
        }),
        EnumTypeDefinition: addDescription(function(_ref28) {
          var name = _ref28.name, directives = _ref28.directives, values = _ref28.values;
          return join(["enum", name, join(directives, " "), block(values)], " ");
        }),
        EnumValueDefinition: addDescription(function(_ref29) {
          var name = _ref29.name, directives = _ref29.directives;
          return join([name, join(directives, " ")], " ");
        }),
        InputObjectTypeDefinition: addDescription(function(_ref30) {
          var name = _ref30.name, directives = _ref30.directives, fields = _ref30.fields;
          return join(["input", name, join(directives, " "), block(fields)], " ");
        }),
        ScalarTypeExtension: function ScalarTypeExtension(_ref31) {
          var name = _ref31.name, directives = _ref31.directives;
          return join(["extend scalar", name, join(directives, " ")], " ");
        },
        ObjectTypeExtension: function ObjectTypeExtension(_ref32) {
          var name = _ref32.name, interfaces = _ref32.interfaces, directives = _ref32.directives, fields = _ref32.fields;
          return join(["extend type", name, wrap2("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
        },
        InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {
          var name = _ref33.name, directives = _ref33.directives, fields = _ref33.fields;
          return join(["extend interface", name, join(directives, " "), block(fields)], " ");
        },
        UnionTypeExtension: function UnionTypeExtension(_ref34) {
          var name = _ref34.name, directives = _ref34.directives, types = _ref34.types;
          return join(["extend union", name, join(directives, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
        },
        EnumTypeExtension: function EnumTypeExtension(_ref35) {
          var name = _ref35.name, directives = _ref35.directives, values = _ref35.values;
          return join(["extend enum", name, join(directives, " "), block(values)], " ");
        },
        InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {
          var name = _ref36.name, directives = _ref36.directives, fields = _ref36.fields;
          return join(["extend input", name, join(directives, " "), block(fields)], " ");
        },
        DirectiveDefinition: addDescription(function(_ref37) {
          var name = _ref37.name, args = _ref37.arguments, locations = _ref37.locations;
          return "directive @" + name + wrap2("(", join(args, ", "), ")") + " on " + join(locations, " | ");
        })
      };
      function addDescription(cb) {
        return function(node) {
          return join([node.description, cb(node)], "\n");
        };
      }
      function join(maybeArray, separator) {
        return maybeArray ? maybeArray.filter(function(x) {
          return x;
        }).join(separator || "") : "";
      }
      function block(array) {
        return array && array.length !== 0 ? "{\n" + indent(join(array, "\n")) + "\n}" : "";
      }
      function wrap2(start, maybeString, end) {
        return maybeString ? start + maybeString + (end || "") : "";
      }
      function indent(maybeString) {
        return maybeString && "  " + maybeString.replace(/\n/g, "\n  ");
      }
      function printBlockString(value, isDescription) {
        var escaped = value.replace(/"""/g, '\\"""');
        return (value[0] === " " || value[0] === "	") && value.indexOf("\n") === -1 ? '"""' + escaped.replace(/"$/, '"\n') + '"""' : '"""\n' + (isDescription ? escaped : indent(escaped)) + '\n"""';
      }
    }
  });

  // node_modules/graphql-tag/node_modules/tslib/tslib.js
  var require_tslib2 = __commonJS({
    "node_modules/graphql-tag/node_modules/tslib/tslib.js"(exports2, module2) {
      var __extends3;
      var __assign3;
      var __rest3;
      var __decorate3;
      var __param3;
      var __metadata3;
      var __awaiter3;
      var __generator3;
      var __exportStar3;
      var __values3;
      var __read3;
      var __spread3;
      var __spreadArrays3;
      var __spreadArray2;
      var __await3;
      var __asyncGenerator3;
      var __asyncDelegator3;
      var __asyncValues3;
      var __makeTemplateObject3;
      var __importStar3;
      var __importDefault3;
      var __classPrivateFieldGet3;
      var __classPrivateFieldSet3;
      var __classPrivateFieldIn2;
      var __createBinding3;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports3) {
            factory(createExporter(root2, createExporter(exports3)));
          });
        } else if (typeof module2 === "object" && typeof module2.exports === "object") {
          factory(createExporter(root2, createExporter(module2.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports3, previous) {
          if (exports3 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports3, "__esModule", { value: true });
            } else {
              exports3.__esModule = true;
            }
          }
          return function(id, v) {
            return exports3[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends3 = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign3 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest3 = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate3 = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param3 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata3 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter3 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result2) {
              result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator3 = function(thisArg, body) {
          var _2 = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_2)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _2.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _2.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _2.ops.pop();
                    _2.trys.pop();
                    continue;
                  default:
                    if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _2 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _2.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _2.label < t[1]) {
                      _2.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _2.label < t[2]) {
                      _2.label = t[2];
                      _2.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _2.ops.pop();
                    _2.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _2);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar3 = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding3(o, m, p);
        };
        __createBinding3 = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m[k];
            } };
          }
          Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values3 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read3 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread3 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read3(arguments[i]));
          return ar;
        };
        __spreadArrays3 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray2 = function(to, from2, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from2.length, ar; i < l; i++) {
              if (ar || !(i in from2)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from2, 0, i);
                ar[i] = from2[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from2));
        };
        __await3 = function(v) {
          return this instanceof __await3 ? (this.v = v, this) : new __await3(v);
        };
        __asyncGenerator3 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator3 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await3(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues3 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values3 === "function" ? __values3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject3 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar3 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result2 = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding3(result2, mod, k);
          }
          __setModuleDefault(result2, mod);
          return result2;
        };
        __importDefault3 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet3 = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        };
        __classPrivateFieldSet3 = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn2 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends3);
        exporter("__assign", __assign3);
        exporter("__rest", __rest3);
        exporter("__decorate", __decorate3);
        exporter("__param", __param3);
        exporter("__metadata", __metadata3);
        exporter("__awaiter", __awaiter3);
        exporter("__generator", __generator3);
        exporter("__exportStar", __exportStar3);
        exporter("__createBinding", __createBinding3);
        exporter("__values", __values3);
        exporter("__read", __read3);
        exporter("__spread", __spread3);
        exporter("__spreadArrays", __spreadArrays3);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await3);
        exporter("__asyncGenerator", __asyncGenerator3);
        exporter("__asyncDelegator", __asyncDelegator3);
        exporter("__asyncValues", __asyncValues3);
        exporter("__makeTemplateObject", __makeTemplateObject3);
        exporter("__importStar", __importStar3);
        exporter("__importDefault", __importDefault3);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet3);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet3);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
      });
    }
  });

  // node_modules/graphql/jsutils/instanceOf.js
  var require_instanceOf = __commonJS({
    "node_modules/graphql/jsutils/instanceOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = process && true ? function instanceOf(value, constructor) {
        if (value instanceof constructor) {
          return true;
        }
        if (value) {
          var valueClass = value.constructor;
          var className = constructor.name;
          if (valueClass && valueClass.name === className) {
            throw new Error("Cannot use " + className + ' "' + value + '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.');
          }
        }
        return false;
      } : function instanceOf(value, constructor) {
        return value instanceof constructor;
      };
    }
  });

  // node_modules/graphql/jsutils/invariant.js
  var require_invariant = __commonJS({
    "node_modules/graphql/jsutils/invariant.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = invariant2;
      function invariant2(condition, message) {
        if (!condition) {
          throw new Error(message);
        }
      }
    }
  });

  // node_modules/graphql/jsutils/isInvalid.js
  var require_isInvalid = __commonJS({
    "node_modules/graphql/jsutils/isInvalid.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = isInvalid;
      function isInvalid(value) {
        return value === void 0 || value !== value;
      }
    }
  });

  // node_modules/graphql/language/kinds.js
  var require_kinds = __commonJS({
    "node_modules/graphql/language/kinds.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var Kind2 = exports2.Kind = Object.freeze({
        NAME: "Name",
        DOCUMENT: "Document",
        OPERATION_DEFINITION: "OperationDefinition",
        VARIABLE_DEFINITION: "VariableDefinition",
        VARIABLE: "Variable",
        SELECTION_SET: "SelectionSet",
        FIELD: "Field",
        ARGUMENT: "Argument",
        FRAGMENT_SPREAD: "FragmentSpread",
        INLINE_FRAGMENT: "InlineFragment",
        FRAGMENT_DEFINITION: "FragmentDefinition",
        INT: "IntValue",
        FLOAT: "FloatValue",
        STRING: "StringValue",
        BOOLEAN: "BooleanValue",
        NULL: "NullValue",
        ENUM: "EnumValue",
        LIST: "ListValue",
        OBJECT: "ObjectValue",
        OBJECT_FIELD: "ObjectField",
        DIRECTIVE: "Directive",
        NAMED_TYPE: "NamedType",
        LIST_TYPE: "ListType",
        NON_NULL_TYPE: "NonNullType",
        SCHEMA_DEFINITION: "SchemaDefinition",
        OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
        SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
        OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
        FIELD_DEFINITION: "FieldDefinition",
        INPUT_VALUE_DEFINITION: "InputValueDefinition",
        INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
        UNION_TYPE_DEFINITION: "UnionTypeDefinition",
        ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
        ENUM_VALUE_DEFINITION: "EnumValueDefinition",
        INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
        SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
        OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
        INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
        UNION_TYPE_EXTENSION: "UnionTypeExtension",
        ENUM_TYPE_EXTENSION: "EnumTypeExtension",
        INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension",
        DIRECTIVE_DEFINITION: "DirectiveDefinition"
      });
    }
  });

  // node_modules/graphql/jsutils/keyValMap.js
  var require_keyValMap = __commonJS({
    "node_modules/graphql/jsutils/keyValMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = keyValMap;
      function keyValMap(list, keyFn, valFn) {
        return list.reduce(function(map, item) {
          return map[keyFn(item)] = valFn(item), map;
        }, /* @__PURE__ */ Object.create(null));
      }
    }
  });

  // node_modules/graphql/utilities/valueFromASTUntyped.js
  var require_valueFromASTUntyped = __commonJS({
    "node_modules/graphql/utilities/valueFromASTUntyped.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.valueFromASTUntyped = valueFromASTUntyped2;
      var _keyValMap = require_keyValMap();
      var _keyValMap2 = _interopRequireDefault(_keyValMap);
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _kinds = require_kinds();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function valueFromASTUntyped2(valueNode, variables) {
        switch (valueNode.kind) {
          case _kinds.Kind.NULL:
            return null;
          case _kinds.Kind.INT:
            return parseInt(valueNode.value, 10);
          case _kinds.Kind.FLOAT:
            return parseFloat(valueNode.value);
          case _kinds.Kind.STRING:
          case _kinds.Kind.ENUM:
          case _kinds.Kind.BOOLEAN:
            return valueNode.value;
          case _kinds.Kind.LIST:
            return valueNode.values.map(function(node) {
              return valueFromASTUntyped2(node, variables);
            });
          case _kinds.Kind.OBJECT:
            return (0, _keyValMap2.default)(valueNode.fields, function(field) {
              return field.name.value;
            }, function(field) {
              return valueFromASTUntyped2(field.value, variables);
            });
          case _kinds.Kind.VARIABLE:
            var variableName = valueNode.name.value;
            return variables && !(0, _isInvalid2.default)(variables[variableName]) ? variables[variableName] : void 0;
        }
        throw new Error("Unexpected value kind: " + valueNode.kind);
      }
    }
  });

  // node_modules/graphql/type/definition.js
  var require_definition = __commonJS({
    "node_modules/graphql/type/definition.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.GraphQLInputObjectType = exports2.GraphQLEnumType = exports2.GraphQLUnionType = exports2.GraphQLInterfaceType = exports2.GraphQLObjectType = exports2.GraphQLScalarType = void 0;
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      exports2.isType = isType2;
      exports2.assertType = assertType2;
      exports2.isScalarType = isScalarType2;
      exports2.assertScalarType = assertScalarType2;
      exports2.isObjectType = isObjectType2;
      exports2.assertObjectType = assertObjectType2;
      exports2.isInterfaceType = isInterfaceType2;
      exports2.assertInterfaceType = assertInterfaceType2;
      exports2.isUnionType = isUnionType2;
      exports2.assertUnionType = assertUnionType2;
      exports2.isEnumType = isEnumType2;
      exports2.assertEnumType = assertEnumType2;
      exports2.isInputObjectType = isInputObjectType2;
      exports2.assertInputObjectType = assertInputObjectType2;
      exports2.isListType = isListType2;
      exports2.assertListType = assertListType2;
      exports2.isNonNullType = isNonNullType2;
      exports2.assertNonNullType = assertNonNullType2;
      exports2.isInputType = isInputType2;
      exports2.assertInputType = assertInputType2;
      exports2.isOutputType = isOutputType2;
      exports2.assertOutputType = assertOutputType2;
      exports2.isLeafType = isLeafType2;
      exports2.assertLeafType = assertLeafType2;
      exports2.isCompositeType = isCompositeType2;
      exports2.assertCompositeType = assertCompositeType2;
      exports2.isAbstractType = isAbstractType2;
      exports2.assertAbstractType = assertAbstractType2;
      exports2.GraphQLList = GraphQLList2;
      exports2.GraphQLNonNull = GraphQLNonNull2;
      exports2.isWrappingType = isWrappingType2;
      exports2.assertWrappingType = assertWrappingType2;
      exports2.isNullableType = isNullableType2;
      exports2.assertNullableType = assertNullableType2;
      exports2.getNullableType = getNullableType2;
      exports2.isNamedType = isNamedType2;
      exports2.assertNamedType = assertNamedType2;
      exports2.getNamedType = getNamedType2;
      var _instanceOf = require_instanceOf();
      var _instanceOf2 = _interopRequireDefault(_instanceOf);
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _kinds = require_kinds();
      var _valueFromASTUntyped = require_valueFromASTUntyped();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function isType2(type) {
        return isScalarType2(type) || isObjectType2(type) || isInterfaceType2(type) || isUnionType2(type) || isEnumType2(type) || isInputObjectType2(type) || isListType2(type) || isNonNullType2(type);
      }
      function assertType2(type) {
        !isType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL type.") : void 0;
        return type;
      }
      function isScalarType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLScalarType2);
      }
      function assertScalarType2(type) {
        !isScalarType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL Scalar type.") : void 0;
        return type;
      }
      function isObjectType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLObjectType2);
      }
      function assertObjectType2(type) {
        !isObjectType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL Object type.") : void 0;
        return type;
      }
      function isInterfaceType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLInterfaceType2);
      }
      function assertInterfaceType2(type) {
        !isInterfaceType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL Interface type.") : void 0;
        return type;
      }
      function isUnionType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLUnionType2);
      }
      function assertUnionType2(type) {
        !isUnionType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL Union type.") : void 0;
        return type;
      }
      function isEnumType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLEnumType2);
      }
      function assertEnumType2(type) {
        !isEnumType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL Enum type.") : void 0;
        return type;
      }
      function isInputObjectType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLInputObjectType2);
      }
      function assertInputObjectType2(type) {
        !isInputObjectType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL Input Object type.") : void 0;
        return type;
      }
      function isListType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLList2);
      }
      function assertListType2(type) {
        !isListType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL List type.") : void 0;
        return type;
      }
      function isNonNullType2(type) {
        return (0, _instanceOf2.default)(type, GraphQLNonNull2);
      }
      function assertNonNullType2(type) {
        !isNonNullType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL Non-Null type.") : void 0;
        return type;
      }
      function isInputType2(type) {
        return isScalarType2(type) || isEnumType2(type) || isInputObjectType2(type) || isWrappingType2(type) && isInputType2(type.ofType);
      }
      function assertInputType2(type) {
        !isInputType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL input type.") : void 0;
        return type;
      }
      function isOutputType2(type) {
        return isScalarType2(type) || isObjectType2(type) || isInterfaceType2(type) || isUnionType2(type) || isEnumType2(type) || isWrappingType2(type) && isOutputType2(type.ofType);
      }
      function assertOutputType2(type) {
        !isOutputType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL output type.") : void 0;
        return type;
      }
      function isLeafType2(type) {
        return isScalarType2(type) || isEnumType2(type);
      }
      function assertLeafType2(type) {
        !isLeafType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL leaf type.") : void 0;
        return type;
      }
      function isCompositeType2(type) {
        return isObjectType2(type) || isInterfaceType2(type) || isUnionType2(type);
      }
      function assertCompositeType2(type) {
        !isCompositeType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL composite type.") : void 0;
        return type;
      }
      function isAbstractType2(type) {
        return isInterfaceType2(type) || isUnionType2(type);
      }
      function assertAbstractType2(type) {
        !isAbstractType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL abstract type.") : void 0;
        return type;
      }
      function GraphQLList2(ofType) {
        if (this instanceof GraphQLList2) {
          this.ofType = assertType2(ofType);
        } else {
          return new GraphQLList2(ofType);
        }
      }
      var listProto = GraphQLList2.prototype;
      listProto.toString = listProto.toJSON = listProto.inspect = function toString3() {
        return "[" + String(this.ofType) + "]";
      };
      function GraphQLNonNull2(ofType) {
        if (this instanceof GraphQLNonNull2) {
          this.ofType = assertNullableType2(ofType);
        } else {
          return new GraphQLNonNull2(ofType);
        }
      }
      var nonNullProto = GraphQLNonNull2.prototype;
      nonNullProto.toString = nonNullProto.toJSON = nonNullProto.inspect = function toString3() {
        return String(this.ofType) + "!";
      };
      function isWrappingType2(type) {
        return isListType2(type) || isNonNullType2(type);
      }
      function assertWrappingType2(type) {
        !isWrappingType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL wrapping type.") : void 0;
        return type;
      }
      function isNullableType2(type) {
        return isType2(type) && !isNonNullType2(type);
      }
      function assertNullableType2(type) {
        !isNullableType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL nullable type.") : void 0;
        return type;
      }
      function getNullableType2(type) {
        if (type) {
          return isNonNullType2(type) ? type.ofType : type;
        }
      }
      function isNamedType2(type) {
        return isScalarType2(type) || isObjectType2(type) || isInterfaceType2(type) || isUnionType2(type) || isEnumType2(type) || isInputObjectType2(type);
      }
      function assertNamedType2(type) {
        !isNamedType2(type) ? (0, _invariant2.default)(0, "Expected " + String(type) + " to be a GraphQL named type.") : void 0;
        return type;
      }
      function getNamedType2(type) {
        if (type) {
          var unwrappedType = type;
          while (isWrappingType2(unwrappedType)) {
            unwrappedType = unwrappedType.ofType;
          }
          return unwrappedType;
        }
      }
      function resolveThunk(thunk) {
        return typeof thunk === "function" ? thunk() : thunk;
      }
      var GraphQLScalarType2 = exports2.GraphQLScalarType = function() {
        function GraphQLScalarType3(config) {
          _classCallCheck(this, GraphQLScalarType3);
          this.name = config.name;
          this.description = config.description;
          this.astNode = config.astNode;
          this._scalarConfig = config;
          !(typeof config.name === "string") ? (0, _invariant2.default)(0, "Must provide name.") : void 0;
          !(typeof config.serialize === "function") ? (0, _invariant2.default)(0, this.name + ' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.') : void 0;
          if (config.parseValue || config.parseLiteral) {
            !(typeof config.parseValue === "function" && typeof config.parseLiteral === "function") ? (0, _invariant2.default)(0, this.name + ' must provide both "parseValue" and "parseLiteral" functions.') : void 0;
          }
        }
        GraphQLScalarType3.prototype.serialize = function serialize(value) {
          var serializer = this._scalarConfig.serialize;
          return serializer(value);
        };
        GraphQLScalarType3.prototype.parseValue = function parseValue2(value) {
          var parser = this._scalarConfig.parseValue;
          if ((0, _isInvalid2.default)(value)) {
            return void 0;
          }
          return parser ? parser(value) : value;
        };
        GraphQLScalarType3.prototype.parseLiteral = function parseLiteral(valueNode, variables) {
          var parser = this._scalarConfig.parseLiteral;
          return parser ? parser(valueNode, variables) : (0, _valueFromASTUntyped.valueFromASTUntyped)(valueNode, variables);
        };
        GraphQLScalarType3.prototype.toString = function toString3() {
          return this.name;
        };
        return GraphQLScalarType3;
      }();
      GraphQLScalarType2.prototype.toJSON = GraphQLScalarType2.prototype.inspect = GraphQLScalarType2.prototype.toString;
      var GraphQLObjectType2 = exports2.GraphQLObjectType = function() {
        function GraphQLObjectType3(config) {
          _classCallCheck(this, GraphQLObjectType3);
          this.name = config.name;
          this.description = config.description;
          this.astNode = config.astNode;
          this.extensionASTNodes = config.extensionASTNodes;
          this.isTypeOf = config.isTypeOf;
          this._typeConfig = config;
          !(typeof config.name === "string") ? (0, _invariant2.default)(0, "Must provide name.") : void 0;
          if (config.isTypeOf) {
            !(typeof config.isTypeOf === "function") ? (0, _invariant2.default)(0, this.name + ' must provide "isTypeOf" as a function.') : void 0;
          }
        }
        GraphQLObjectType3.prototype.getFields = function getFields() {
          return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));
        };
        GraphQLObjectType3.prototype.getInterfaces = function getInterfaces() {
          return this._interfaces || (this._interfaces = defineInterfaces(this, this._typeConfig.interfaces));
        };
        GraphQLObjectType3.prototype.toString = function toString3() {
          return this.name;
        };
        return GraphQLObjectType3;
      }();
      GraphQLObjectType2.prototype.toJSON = GraphQLObjectType2.prototype.inspect = GraphQLObjectType2.prototype.toString;
      function defineInterfaces(type, interfacesThunk) {
        var interfaces = resolveThunk(interfacesThunk) || [];
        !Array.isArray(interfaces) ? (0, _invariant2.default)(0, type.name + " interfaces must be an Array or a function which returns an Array.") : void 0;
        return interfaces;
      }
      function defineFieldMap(type, fieldsThunk) {
        var fieldMap = resolveThunk(fieldsThunk) || {};
        !isPlainObj(fieldMap) ? (0, _invariant2.default)(0, type.name + " fields must be an object with field names as keys or a function which returns such an object.") : void 0;
        var resultFieldMap = /* @__PURE__ */ Object.create(null);
        Object.keys(fieldMap).forEach(function(fieldName) {
          var fieldConfig = fieldMap[fieldName];
          !isPlainObj(fieldConfig) ? (0, _invariant2.default)(0, type.name + "." + fieldName + " field config must be an object") : void 0;
          !!fieldConfig.hasOwnProperty("isDeprecated") ? (0, _invariant2.default)(0, type.name + "." + fieldName + ' should provide "deprecationReason" instead of "isDeprecated".') : void 0;
          var field = _extends({}, fieldConfig, {
            isDeprecated: Boolean(fieldConfig.deprecationReason),
            name: fieldName
          });
          !isValidResolver(field.resolve) ? (0, _invariant2.default)(0, type.name + "." + fieldName + " field resolver must be a function if " + ("provided, but got: " + String(field.resolve) + ".")) : void 0;
          var argsConfig = fieldConfig.args;
          if (!argsConfig) {
            field.args = [];
          } else {
            !isPlainObj(argsConfig) ? (0, _invariant2.default)(0, type.name + "." + fieldName + " args must be an object with argument names as keys.") : void 0;
            field.args = Object.keys(argsConfig).map(function(argName) {
              var arg = argsConfig[argName];
              return {
                name: argName,
                description: arg.description === void 0 ? null : arg.description,
                type: arg.type,
                defaultValue: arg.defaultValue,
                astNode: arg.astNode
              };
            });
          }
          resultFieldMap[fieldName] = field;
        });
        return resultFieldMap;
      }
      function isPlainObj(obj) {
        return obj && (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && !Array.isArray(obj);
      }
      function isValidResolver(resolver) {
        return resolver == null || typeof resolver === "function";
      }
      var GraphQLInterfaceType2 = exports2.GraphQLInterfaceType = function() {
        function GraphQLInterfaceType3(config) {
          _classCallCheck(this, GraphQLInterfaceType3);
          this.name = config.name;
          this.description = config.description;
          this.astNode = config.astNode;
          this.extensionASTNodes = config.extensionASTNodes;
          this.resolveType = config.resolveType;
          this._typeConfig = config;
          !(typeof config.name === "string") ? (0, _invariant2.default)(0, "Must provide name.") : void 0;
          if (config.resolveType) {
            !(typeof config.resolveType === "function") ? (0, _invariant2.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0;
          }
        }
        GraphQLInterfaceType3.prototype.getFields = function getFields() {
          return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));
        };
        GraphQLInterfaceType3.prototype.toString = function toString3() {
          return this.name;
        };
        return GraphQLInterfaceType3;
      }();
      GraphQLInterfaceType2.prototype.toJSON = GraphQLInterfaceType2.prototype.inspect = GraphQLInterfaceType2.prototype.toString;
      var GraphQLUnionType2 = exports2.GraphQLUnionType = function() {
        function GraphQLUnionType3(config) {
          _classCallCheck(this, GraphQLUnionType3);
          this.name = config.name;
          this.description = config.description;
          this.astNode = config.astNode;
          this.resolveType = config.resolveType;
          this._typeConfig = config;
          !(typeof config.name === "string") ? (0, _invariant2.default)(0, "Must provide name.") : void 0;
          if (config.resolveType) {
            !(typeof config.resolveType === "function") ? (0, _invariant2.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0;
          }
        }
        GraphQLUnionType3.prototype.getTypes = function getTypes() {
          return this._types || (this._types = defineTypes(this, this._typeConfig.types));
        };
        GraphQLUnionType3.prototype.toString = function toString3() {
          return this.name;
        };
        return GraphQLUnionType3;
      }();
      GraphQLUnionType2.prototype.toJSON = GraphQLUnionType2.prototype.inspect = GraphQLUnionType2.prototype.toString;
      function defineTypes(unionType, typesThunk) {
        var types = resolveThunk(typesThunk) || [];
        !Array.isArray(types) ? (0, _invariant2.default)(0, "Must provide Array of types or a function which returns " + ("such an array for Union " + unionType.name + ".")) : void 0;
        return types;
      }
      var GraphQLEnumType2 = exports2.GraphQLEnumType = function() {
        function GraphQLEnumType3(config) {
          _classCallCheck(this, GraphQLEnumType3);
          this.name = config.name;
          this.description = config.description;
          this.astNode = config.astNode;
          this._enumConfig = config;
          !(typeof config.name === "string") ? (0, _invariant2.default)(0, "Must provide name.") : void 0;
        }
        GraphQLEnumType3.prototype.getValues = function getValues() {
          return this._values || (this._values = defineEnumValues(this, this._enumConfig.values));
        };
        GraphQLEnumType3.prototype.getValue = function getValue(name) {
          return this._getNameLookup()[name];
        };
        GraphQLEnumType3.prototype.serialize = function serialize(value) {
          var enumValue = this._getValueLookup().get(value);
          if (enumValue) {
            return enumValue.name;
          }
        };
        GraphQLEnumType3.prototype.parseValue = function parseValue2(value) {
          if (typeof value === "string") {
            var enumValue = this._getNameLookup()[value];
            if (enumValue) {
              return enumValue.value;
            }
          }
        };
        GraphQLEnumType3.prototype.parseLiteral = function parseLiteral(valueNode, _variables) {
          if (valueNode.kind === _kinds.Kind.ENUM) {
            var enumValue = this._getNameLookup()[valueNode.value];
            if (enumValue) {
              return enumValue.value;
            }
          }
        };
        GraphQLEnumType3.prototype._getValueLookup = function _getValueLookup() {
          if (!this._valueLookup) {
            var lookup = /* @__PURE__ */ new Map();
            this.getValues().forEach(function(value) {
              lookup.set(value.value, value);
            });
            this._valueLookup = lookup;
          }
          return this._valueLookup;
        };
        GraphQLEnumType3.prototype._getNameLookup = function _getNameLookup() {
          if (!this._nameLookup) {
            var lookup = /* @__PURE__ */ Object.create(null);
            this.getValues().forEach(function(value) {
              lookup[value.name] = value;
            });
            this._nameLookup = lookup;
          }
          return this._nameLookup;
        };
        GraphQLEnumType3.prototype.toString = function toString3() {
          return this.name;
        };
        return GraphQLEnumType3;
      }();
      GraphQLEnumType2.prototype.toJSON = GraphQLEnumType2.prototype.inspect = GraphQLEnumType2.prototype.toString;
      function defineEnumValues(type, valueMap) {
        !isPlainObj(valueMap) ? (0, _invariant2.default)(0, type.name + " values must be an object with value names as keys.") : void 0;
        return Object.keys(valueMap).map(function(valueName) {
          var value = valueMap[valueName];
          !isPlainObj(value) ? (0, _invariant2.default)(0, type.name + "." + valueName + ' must refer to an object with a "value" key ' + ("representing an internal value but got: " + String(value) + ".")) : void 0;
          !!value.hasOwnProperty("isDeprecated") ? (0, _invariant2.default)(0, type.name + "." + valueName + ' should provide "deprecationReason" instead of "isDeprecated".') : void 0;
          return {
            name: valueName,
            description: value.description,
            isDeprecated: Boolean(value.deprecationReason),
            deprecationReason: value.deprecationReason,
            astNode: value.astNode,
            value: value.hasOwnProperty("value") ? value.value : valueName
          };
        });
      }
      var GraphQLInputObjectType2 = exports2.GraphQLInputObjectType = function() {
        function GraphQLInputObjectType3(config) {
          _classCallCheck(this, GraphQLInputObjectType3);
          this.name = config.name;
          this.description = config.description;
          this.astNode = config.astNode;
          this._typeConfig = config;
          !(typeof config.name === "string") ? (0, _invariant2.default)(0, "Must provide name.") : void 0;
        }
        GraphQLInputObjectType3.prototype.getFields = function getFields() {
          return this._fields || (this._fields = this._defineFieldMap());
        };
        GraphQLInputObjectType3.prototype._defineFieldMap = function _defineFieldMap() {
          var _this = this;
          var fieldMap = resolveThunk(this._typeConfig.fields) || {};
          !isPlainObj(fieldMap) ? (0, _invariant2.default)(0, this.name + " fields must be an object with field names as keys or a function which returns such an object.") : void 0;
          var resultFieldMap = /* @__PURE__ */ Object.create(null);
          Object.keys(fieldMap).forEach(function(fieldName) {
            var field = _extends({}, fieldMap[fieldName], {
              name: fieldName
            });
            !!field.hasOwnProperty("resolve") ? (0, _invariant2.default)(0, _this.name + "." + fieldName + " field type has a resolve property, but Input Types cannot define resolvers.") : void 0;
            resultFieldMap[fieldName] = field;
          });
          return resultFieldMap;
        };
        GraphQLInputObjectType3.prototype.toString = function toString3() {
          return this.name;
        };
        return GraphQLInputObjectType3;
      }();
      GraphQLInputObjectType2.prototype.toJSON = GraphQLInputObjectType2.prototype.toString;
      GraphQLInputObjectType2.prototype.inspect = GraphQLInputObjectType2.prototype.toString;
    }
  });

  // node_modules/graphql/type/scalars.js
  var require_scalars = __commonJS({
    "node_modules/graphql/type/scalars.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.specifiedScalarTypes = exports2.GraphQLID = exports2.GraphQLBoolean = exports2.GraphQLString = exports2.GraphQLFloat = exports2.GraphQLInt = void 0;
      exports2.isSpecifiedScalarType = isSpecifiedScalarType2;
      var _definition = require_definition();
      var _kinds = require_kinds();
      var MAX_INT = 2147483647;
      var MIN_INT = -2147483648;
      function coerceInt(value) {
        if (value === "") {
          throw new TypeError("Int cannot represent non 32-bit signed integer value: (empty string)");
        }
        var num = Number(value);
        if (num !== num || num > MAX_INT || num < MIN_INT) {
          throw new TypeError("Int cannot represent non 32-bit signed integer value: " + String(value));
        }
        var int = Math.floor(num);
        if (int !== num) {
          throw new TypeError("Int cannot represent non-integer value: " + String(value));
        }
        return int;
      }
      var GraphQLInt2 = exports2.GraphQLInt = new _definition.GraphQLScalarType({
        name: "Int",
        description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
        serialize: coerceInt,
        parseValue: coerceInt,
        parseLiteral: function parseLiteral(ast) {
          if (ast.kind === _kinds.Kind.INT) {
            var num = parseInt(ast.value, 10);
            if (num <= MAX_INT && num >= MIN_INT) {
              return num;
            }
          }
          return void 0;
        }
      });
      function coerceFloat(value) {
        if (value === "") {
          throw new TypeError("Float cannot represent non numeric value: (empty string)");
        }
        var num = Number(value);
        if (num === num) {
          return num;
        }
        throw new TypeError("Float cannot represent non numeric value: " + String(value));
      }
      var GraphQLFloat2 = exports2.GraphQLFloat = new _definition.GraphQLScalarType({
        name: "Float",
        description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ",
        serialize: coerceFloat,
        parseValue: coerceFloat,
        parseLiteral: function parseLiteral(ast) {
          return ast.kind === _kinds.Kind.FLOAT || ast.kind === _kinds.Kind.INT ? parseFloat(ast.value) : void 0;
        }
      });
      function coerceString(value) {
        if (Array.isArray(value)) {
          throw new TypeError("String cannot represent an array value: [" + String(value) + "]");
        }
        return String(value);
      }
      var GraphQLString2 = exports2.GraphQLString = new _definition.GraphQLScalarType({
        name: "String",
        description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
        serialize: coerceString,
        parseValue: coerceString,
        parseLiteral: function parseLiteral(ast) {
          return ast.kind === _kinds.Kind.STRING ? ast.value : void 0;
        }
      });
      var GraphQLBoolean2 = exports2.GraphQLBoolean = new _definition.GraphQLScalarType({
        name: "Boolean",
        description: "The `Boolean` scalar type represents `true` or `false`.",
        serialize: Boolean,
        parseValue: Boolean,
        parseLiteral: function parseLiteral(ast) {
          return ast.kind === _kinds.Kind.BOOLEAN ? ast.value : void 0;
        }
      });
      var GraphQLID2 = exports2.GraphQLID = new _definition.GraphQLScalarType({
        name: "ID",
        description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
        serialize: String,
        parseValue: String,
        parseLiteral: function parseLiteral(ast) {
          return ast.kind === _kinds.Kind.STRING || ast.kind === _kinds.Kind.INT ? ast.value : void 0;
        }
      });
      var specifiedScalarTypes2 = exports2.specifiedScalarTypes = [GraphQLString2, GraphQLInt2, GraphQLFloat2, GraphQLBoolean2, GraphQLID2];
      function isSpecifiedScalarType2(type) {
        return (0, _definition.isNamedType)(type) && (type.name === GraphQLString2.name || type.name === GraphQLInt2.name || type.name === GraphQLFloat2.name || type.name === GraphQLBoolean2.name || type.name === GraphQLID2.name);
      }
    }
  });

  // node_modules/graphql/language/directiveLocation.js
  var require_directiveLocation = __commonJS({
    "node_modules/graphql/language/directiveLocation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var DirectiveLocation2 = exports2.DirectiveLocation = Object.freeze({
        QUERY: "QUERY",
        MUTATION: "MUTATION",
        SUBSCRIPTION: "SUBSCRIPTION",
        FIELD: "FIELD",
        FRAGMENT_DEFINITION: "FRAGMENT_DEFINITION",
        FRAGMENT_SPREAD: "FRAGMENT_SPREAD",
        INLINE_FRAGMENT: "INLINE_FRAGMENT",
        SCHEMA: "SCHEMA",
        SCALAR: "SCALAR",
        OBJECT: "OBJECT",
        FIELD_DEFINITION: "FIELD_DEFINITION",
        ARGUMENT_DEFINITION: "ARGUMENT_DEFINITION",
        INTERFACE: "INTERFACE",
        UNION: "UNION",
        ENUM: "ENUM",
        ENUM_VALUE: "ENUM_VALUE",
        INPUT_OBJECT: "INPUT_OBJECT",
        INPUT_FIELD_DEFINITION: "INPUT_FIELD_DEFINITION"
      });
    }
  });

  // node_modules/graphql/type/directives.js
  var require_directives = __commonJS({
    "node_modules/graphql/type/directives.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.specifiedDirectives = exports2.GraphQLDeprecatedDirective = exports2.DEFAULT_DEPRECATION_REASON = exports2.GraphQLSkipDirective = exports2.GraphQLIncludeDirective = exports2.GraphQLDirective = void 0;
      exports2.isDirective = isDirective2;
      exports2.isSpecifiedDirective = isSpecifiedDirective2;
      var _definition = require_definition();
      var _scalars = require_scalars();
      var _instanceOf = require_instanceOf();
      var _instanceOf2 = _interopRequireDefault(_instanceOf);
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _directiveLocation = require_directiveLocation();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function isDirective2(directive) {
        return (0, _instanceOf2.default)(directive, GraphQLDirective2);
      }
      var GraphQLDirective2 = exports2.GraphQLDirective = function GraphQLDirective3(config) {
        _classCallCheck(this, GraphQLDirective3);
        this.name = config.name;
        this.description = config.description;
        this.locations = config.locations;
        this.astNode = config.astNode;
        !config.name ? (0, _invariant2.default)(0, "Directive must be named.") : void 0;
        !Array.isArray(config.locations) ? (0, _invariant2.default)(0, "Must provide locations for directive.") : void 0;
        var args = config.args;
        if (!args) {
          this.args = [];
        } else {
          !!Array.isArray(args) ? (0, _invariant2.default)(0, "@" + config.name + " args must be an object with argument names as keys.") : void 0;
          this.args = Object.keys(args).map(function(argName) {
            var arg = args[argName];
            return {
              name: argName,
              description: arg.description === void 0 ? null : arg.description,
              type: arg.type,
              defaultValue: arg.defaultValue,
              astNode: arg.astNode
            };
          });
        }
      };
      var GraphQLIncludeDirective2 = exports2.GraphQLIncludeDirective = new GraphQLDirective2({
        name: "include",
        description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
        locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
        args: {
          if: {
            type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
            description: "Included when true."
          }
        }
      });
      var GraphQLSkipDirective2 = exports2.GraphQLSkipDirective = new GraphQLDirective2({
        name: "skip",
        description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
        locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
        args: {
          if: {
            type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
            description: "Skipped when true."
          }
        }
      });
      var DEFAULT_DEPRECATION_REASON2 = exports2.DEFAULT_DEPRECATION_REASON = "No longer supported";
      var GraphQLDeprecatedDirective2 = exports2.GraphQLDeprecatedDirective = new GraphQLDirective2({
        name: "deprecated",
        description: "Marks an element of a GraphQL schema as no longer supported.",
        locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],
        args: {
          reason: {
            type: _scalars.GraphQLString,
            description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).",
            defaultValue: DEFAULT_DEPRECATION_REASON2
          }
        }
      });
      var specifiedDirectives2 = exports2.specifiedDirectives = [GraphQLIncludeDirective2, GraphQLSkipDirective2, GraphQLDeprecatedDirective2];
      function isSpecifiedDirective2(directive) {
        return specifiedDirectives2.some(function(specifiedDirective) {
          return specifiedDirective.name === directive.name;
        });
      }
    }
  });

  // node_modules/graphql/jsutils/objectValues.js
  var require_objectValues = __commonJS({
    "node_modules/graphql/jsutils/objectValues.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var objectValues = Object.values || function(obj) {
        return Object.keys(obj).map(function(key) {
          return obj[key];
        });
      };
      exports2.default = objectValues;
    }
  });

  // node_modules/iterall/index.js
  var require_iterall = __commonJS({
    "node_modules/iterall/index.js"(exports2) {
      "use strict";
      exports2.isIterable = isIterable;
      exports2.isArrayLike = isArrayLike;
      exports2.isCollection = isCollection;
      exports2.getIterator = getIterator;
      exports2.getIteratorMethod = getIteratorMethod;
      exports2.createIterator = createIterator;
      exports2.forEach = forEach;
      exports2.isAsyncIterable = isAsyncIterable;
      exports2.getAsyncIterator = getAsyncIterator;
      exports2.getAsyncIteratorMethod = getAsyncIteratorMethod;
      exports2.createAsyncIterator = createAsyncIterator;
      exports2.forAwaitEach = forAwaitEach;
      var SYMBOL = typeof Symbol === "function" ? Symbol : void 0;
      var SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator;
      var $$iterator = exports2.$$iterator = SYMBOL_ITERATOR || "@@iterator";
      function isIterable(obj) {
        return !!getIteratorMethod(obj);
      }
      function isArrayLike(obj) {
        var length = obj != null && obj.length;
        return typeof length === "number" && length >= 0 && length % 1 === 0;
      }
      function isCollection(obj) {
        return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj));
      }
      function getIterator(iterable) {
        var method = getIteratorMethod(iterable);
        if (method) {
          return method.call(iterable);
        }
      }
      function getIteratorMethod(iterable) {
        if (iterable != null) {
          var method = SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR] || iterable["@@iterator"];
          if (typeof method === "function") {
            return method;
          }
        }
      }
      function createIterator(collection) {
        if (collection != null) {
          var iterator = getIterator(collection);
          if (iterator) {
            return iterator;
          }
          if (isArrayLike(collection)) {
            return new ArrayLikeIterator(collection);
          }
        }
      }
      function ArrayLikeIterator(obj) {
        this._o = obj;
        this._i = 0;
      }
      ArrayLikeIterator.prototype[$$iterator] = function() {
        return this;
      };
      ArrayLikeIterator.prototype.next = function() {
        if (this._o === void 0 || this._i >= this._o.length) {
          this._o = void 0;
          return { value: void 0, done: true };
        }
        return { value: this._o[this._i++], done: false };
      };
      function forEach(collection, callback, thisArg) {
        if (collection != null) {
          if (typeof collection.forEach === "function") {
            return collection.forEach(callback, thisArg);
          }
          var i = 0;
          var iterator = getIterator(collection);
          if (iterator) {
            var step;
            while (!(step = iterator.next()).done) {
              callback.call(thisArg, step.value, i++, collection);
              if (i > 9999999) {
                throw new TypeError("Near-infinite iteration.");
              }
            }
          } else if (isArrayLike(collection)) {
            for (; i < collection.length; i++) {
              if (collection.hasOwnProperty(i)) {
                callback.call(thisArg, collection[i], i, collection);
              }
            }
          }
        }
      }
      var SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator;
      var $$asyncIterator = exports2.$$asyncIterator = SYMBOL_ASYNC_ITERATOR || "@@asyncIterator";
      function isAsyncIterable(obj) {
        return !!getAsyncIteratorMethod(obj);
      }
      function getAsyncIterator(asyncIterable) {
        var method = getAsyncIteratorMethod(asyncIterable);
        if (method) {
          return method.call(asyncIterable);
        }
      }
      function getAsyncIteratorMethod(asyncIterable) {
        if (asyncIterable != null) {
          var method = SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR] || asyncIterable["@@asyncIterator"];
          if (typeof method === "function") {
            return method;
          }
        }
      }
      function createAsyncIterator(source) {
        if (source != null) {
          var asyncIterator = getAsyncIterator(source);
          if (asyncIterator) {
            return asyncIterator;
          }
          var iterator = createIterator(source);
          if (iterator) {
            return new AsyncFromSyncIterator(iterator);
          }
        }
      }
      function AsyncFromSyncIterator(iterator) {
        this._i = iterator;
      }
      AsyncFromSyncIterator.prototype[$$asyncIterator] = function() {
        return this;
      };
      AsyncFromSyncIterator.prototype.next = function(value) {
        return unwrapAsyncFromSync(this._i, "next", value);
      };
      AsyncFromSyncIterator.prototype.return = function(value) {
        return this._i.return ? unwrapAsyncFromSync(this._i, "return", value) : Promise.resolve({ value, done: true });
      };
      AsyncFromSyncIterator.prototype.throw = function(value) {
        return this._i.throw ? unwrapAsyncFromSync(this._i, "throw", value) : Promise.reject(value);
      };
      function unwrapAsyncFromSync(iterator, fn, value) {
        var step;
        return new Promise(function(resolve) {
          step = iterator[fn](value);
          resolve(step.value);
        }).then(function(value2) {
          return { value: value2, done: step.done };
        });
      }
      function forAwaitEach(source, callback, thisArg) {
        var asyncIterator = createAsyncIterator(source);
        if (asyncIterator) {
          var i = 0;
          return new Promise(function(resolve, reject) {
            function next() {
              asyncIterator.next().then(function(step) {
                if (!step.done) {
                  Promise.resolve(callback.call(thisArg, step.value, i++, source)).then(next).catch(reject);
                } else {
                  resolve();
                }
                return null;
              }).catch(reject);
              return null;
            }
            next();
          });
        }
      }
    }
  });

  // node_modules/graphql/jsutils/isNullish.js
  var require_isNullish = __commonJS({
    "node_modules/graphql/jsutils/isNullish.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = isNullish;
      function isNullish(value) {
        return value === null || value === void 0 || value !== value;
      }
    }
  });

  // node_modules/graphql/utilities/astFromValue.js
  var require_astFromValue = __commonJS({
    "node_modules/graphql/utilities/astFromValue.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      exports2.astFromValue = astFromValue2;
      var _iterall = require_iterall();
      var _isNullish = require_isNullish();
      var _isNullish2 = _interopRequireDefault(_isNullish);
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      var _kinds = require_kinds();
      var _definition = require_definition();
      var _scalars = require_scalars();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function astFromValue2(value, type) {
        if ((0, _definition.isNonNullType)(type)) {
          var astValue = astFromValue2(value, type.ofType);
          if (astValue && astValue.kind === _kinds.Kind.NULL) {
            return null;
          }
          return astValue;
        }
        if (value === null) {
          return { kind: _kinds.Kind.NULL };
        }
        if ((0, _isInvalid2.default)(value)) {
          return null;
        }
        if ((0, _definition.isListType)(type)) {
          var itemType = type.ofType;
          if ((0, _iterall.isCollection)(value)) {
            var valuesNodes = [];
            (0, _iterall.forEach)(value, function(item) {
              var itemNode = astFromValue2(item, itemType);
              if (itemNode) {
                valuesNodes.push(itemNode);
              }
            });
            return { kind: _kinds.Kind.LIST, values: valuesNodes };
          }
          return astFromValue2(value, itemType);
        }
        if ((0, _definition.isInputObjectType)(type)) {
          if (value === null || (typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") {
            return null;
          }
          var fields = (0, _objectValues2.default)(type.getFields());
          var fieldNodes = [];
          fields.forEach(function(field) {
            var fieldValue = astFromValue2(value[field.name], field.type);
            if (fieldValue) {
              fieldNodes.push({
                kind: _kinds.Kind.OBJECT_FIELD,
                name: { kind: _kinds.Kind.NAME, value: field.name },
                value: fieldValue
              });
            }
          });
          return { kind: _kinds.Kind.OBJECT, fields: fieldNodes };
        }
        if ((0, _definition.isScalarType)(type) || (0, _definition.isEnumType)(type)) {
          var serialized = type.serialize(value);
          if ((0, _isNullish2.default)(serialized)) {
            return null;
          }
          if (typeof serialized === "boolean") {
            return { kind: _kinds.Kind.BOOLEAN, value: serialized };
          }
          if (typeof serialized === "number") {
            var stringNum = String(serialized);
            return integerStringRegExp.test(stringNum) ? { kind: _kinds.Kind.INT, value: stringNum } : { kind: _kinds.Kind.FLOAT, value: stringNum };
          }
          if (typeof serialized === "string") {
            if ((0, _definition.isEnumType)(type)) {
              return { kind: _kinds.Kind.ENUM, value: serialized };
            }
            if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
              return { kind: _kinds.Kind.INT, value: serialized };
            }
            return {
              kind: _kinds.Kind.STRING,
              value: serialized
            };
          }
          throw new TypeError("Cannot convert value to AST: " + String(serialized));
        }
        throw new Error("Unknown type: " + type + ".");
      }
      var integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;
    }
  });

  // node_modules/graphql/type/introspection.js
  var require_introspection = __commonJS({
    "node_modules/graphql/type/introspection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.introspectionTypes = exports2.TypeNameMetaFieldDef = exports2.TypeMetaFieldDef = exports2.SchemaMetaFieldDef = exports2.__TypeKind = exports2.TypeKind = exports2.__EnumValue = exports2.__InputValue = exports2.__Field = exports2.__Type = exports2.__DirectiveLocation = exports2.__Directive = exports2.__Schema = void 0;
      exports2.isIntrospectionType = isIntrospectionType2;
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      var _astFromValue = require_astFromValue();
      var _printer = require_printer();
      var _definition = require_definition();
      var _scalars = require_scalars();
      var _directiveLocation = require_directiveLocation();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var __Schema2 = exports2.__Schema = new _definition.GraphQLObjectType({
        name: "__Schema",
        isIntrospection: true,
        description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
        fields: function fields() {
          return {
            types: {
              description: "A list of all types supported by this server.",
              type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type2))),
              resolve: function resolve(schema) {
                return (0, _objectValues2.default)(schema.getTypeMap());
              }
            },
            queryType: {
              description: "The type that query operations will be rooted at.",
              type: (0, _definition.GraphQLNonNull)(__Type2),
              resolve: function resolve(schema) {
                return schema.getQueryType();
              }
            },
            mutationType: {
              description: "If this server supports mutation, the type that mutation operations will be rooted at.",
              type: __Type2,
              resolve: function resolve(schema) {
                return schema.getMutationType();
              }
            },
            subscriptionType: {
              description: "If this server support subscription, the type that subscription operations will be rooted at.",
              type: __Type2,
              resolve: function resolve(schema) {
                return schema.getSubscriptionType();
              }
            },
            directives: {
              description: "A list of all directives supported by this server.",
              type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Directive2))),
              resolve: function resolve(schema) {
                return schema.getDirectives();
              }
            }
          };
        }
      });
      var __Directive2 = exports2.__Directive = new _definition.GraphQLObjectType({
        name: "__Directive",
        isIntrospection: true,
        description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
        fields: function fields() {
          return {
            name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
            description: { type: _scalars.GraphQLString },
            locations: {
              type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__DirectiveLocation2)))
            },
            args: {
              type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue2))),
              resolve: function resolve(directive) {
                return directive.args || [];
              }
            },
            onOperation: {
              deprecationReason: "Use `locations`.",
              type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
              resolve: function resolve(d) {
                return d.locations.indexOf(_directiveLocation.DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.SUBSCRIPTION) !== -1;
              }
            },
            onFragment: {
              deprecationReason: "Use `locations`.",
              type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
              resolve: function resolve(d) {
                return d.locations.indexOf(_directiveLocation.DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION) !== -1;
              }
            },
            onField: {
              deprecationReason: "Use `locations`.",
              type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
              resolve: function resolve(d) {
                return d.locations.indexOf(_directiveLocation.DirectiveLocation.FIELD) !== -1;
              }
            }
          };
        }
      });
      var __DirectiveLocation2 = exports2.__DirectiveLocation = new _definition.GraphQLEnumType({
        name: "__DirectiveLocation",
        isIntrospection: true,
        description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
        values: {
          QUERY: {
            value: _directiveLocation.DirectiveLocation.QUERY,
            description: "Location adjacent to a query operation."
          },
          MUTATION: {
            value: _directiveLocation.DirectiveLocation.MUTATION,
            description: "Location adjacent to a mutation operation."
          },
          SUBSCRIPTION: {
            value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
            description: "Location adjacent to a subscription operation."
          },
          FIELD: {
            value: _directiveLocation.DirectiveLocation.FIELD,
            description: "Location adjacent to a field."
          },
          FRAGMENT_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
            description: "Location adjacent to a fragment definition."
          },
          FRAGMENT_SPREAD: {
            value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
            description: "Location adjacent to a fragment spread."
          },
          INLINE_FRAGMENT: {
            value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
            description: "Location adjacent to an inline fragment."
          },
          SCHEMA: {
            value: _directiveLocation.DirectiveLocation.SCHEMA,
            description: "Location adjacent to a schema definition."
          },
          SCALAR: {
            value: _directiveLocation.DirectiveLocation.SCALAR,
            description: "Location adjacent to a scalar definition."
          },
          OBJECT: {
            value: _directiveLocation.DirectiveLocation.OBJECT,
            description: "Location adjacent to an object type definition."
          },
          FIELD_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
            description: "Location adjacent to a field definition."
          },
          ARGUMENT_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
            description: "Location adjacent to an argument definition."
          },
          INTERFACE: {
            value: _directiveLocation.DirectiveLocation.INTERFACE,
            description: "Location adjacent to an interface definition."
          },
          UNION: {
            value: _directiveLocation.DirectiveLocation.UNION,
            description: "Location adjacent to a union definition."
          },
          ENUM: {
            value: _directiveLocation.DirectiveLocation.ENUM,
            description: "Location adjacent to an enum definition."
          },
          ENUM_VALUE: {
            value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
            description: "Location adjacent to an enum value definition."
          },
          INPUT_OBJECT: {
            value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
            description: "Location adjacent to an input object type definition."
          },
          INPUT_FIELD_DEFINITION: {
            value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
            description: "Location adjacent to an input object field definition."
          }
        }
      });
      var __Type2 = exports2.__Type = new _definition.GraphQLObjectType({
        name: "__Type",
        isIntrospection: true,
        description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
        fields: function fields() {
          return {
            kind: {
              type: (0, _definition.GraphQLNonNull)(__TypeKind2),
              resolve: function resolve(type) {
                if ((0, _definition.isScalarType)(type)) {
                  return TypeKind2.SCALAR;
                } else if ((0, _definition.isObjectType)(type)) {
                  return TypeKind2.OBJECT;
                } else if ((0, _definition.isInterfaceType)(type)) {
                  return TypeKind2.INTERFACE;
                } else if ((0, _definition.isUnionType)(type)) {
                  return TypeKind2.UNION;
                } else if ((0, _definition.isEnumType)(type)) {
                  return TypeKind2.ENUM;
                } else if ((0, _definition.isInputObjectType)(type)) {
                  return TypeKind2.INPUT_OBJECT;
                } else if ((0, _definition.isListType)(type)) {
                  return TypeKind2.LIST;
                } else if ((0, _definition.isNonNullType)(type)) {
                  return TypeKind2.NON_NULL;
                }
                throw new Error("Unknown kind of type: " + type);
              }
            },
            name: { type: _scalars.GraphQLString },
            description: { type: _scalars.GraphQLString },
            fields: {
              type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Field2)),
              args: {
                includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }
              },
              resolve: function resolve(type, _ref) {
                var includeDeprecated = _ref.includeDeprecated;
                if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
                  var fields2 = (0, _objectValues2.default)(type.getFields());
                  if (!includeDeprecated) {
                    fields2 = fields2.filter(function(field) {
                      return !field.deprecationReason;
                    });
                  }
                  return fields2;
                }
                return null;
              }
            },
            interfaces: {
              type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type2)),
              resolve: function resolve(type) {
                if ((0, _definition.isObjectType)(type)) {
                  return type.getInterfaces();
                }
              }
            },
            possibleTypes: {
              type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type2)),
              resolve: function resolve(type, args, context, _ref2) {
                var schema = _ref2.schema;
                if ((0, _definition.isAbstractType)(type)) {
                  return schema.getPossibleTypes(type);
                }
              }
            },
            enumValues: {
              type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__EnumValue2)),
              args: {
                includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }
              },
              resolve: function resolve(type, _ref3) {
                var includeDeprecated = _ref3.includeDeprecated;
                if ((0, _definition.isEnumType)(type)) {
                  var values = type.getValues();
                  if (!includeDeprecated) {
                    values = values.filter(function(value) {
                      return !value.deprecationReason;
                    });
                  }
                  return values;
                }
              }
            },
            inputFields: {
              type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue2)),
              resolve: function resolve(type) {
                if ((0, _definition.isInputObjectType)(type)) {
                  return (0, _objectValues2.default)(type.getFields());
                }
              }
            },
            ofType: { type: __Type2 }
          };
        }
      });
      var __Field2 = exports2.__Field = new _definition.GraphQLObjectType({
        name: "__Field",
        isIntrospection: true,
        description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
        fields: function fields() {
          return {
            name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
            description: { type: _scalars.GraphQLString },
            args: {
              type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue2))),
              resolve: function resolve(field) {
                return field.args || [];
              }
            },
            type: { type: (0, _definition.GraphQLNonNull)(__Type2) },
            isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },
            deprecationReason: {
              type: _scalars.GraphQLString
            }
          };
        }
      });
      var __InputValue2 = exports2.__InputValue = new _definition.GraphQLObjectType({
        name: "__InputValue",
        isIntrospection: true,
        description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
        fields: function fields() {
          return {
            name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
            description: { type: _scalars.GraphQLString },
            type: { type: (0, _definition.GraphQLNonNull)(__Type2) },
            defaultValue: {
              type: _scalars.GraphQLString,
              description: "A GraphQL-formatted string representing the default value for this input value.",
              resolve: function resolve(inputVal) {
                return (0, _isInvalid2.default)(inputVal.defaultValue) ? null : (0, _printer.print)((0, _astFromValue.astFromValue)(inputVal.defaultValue, inputVal.type));
              }
            }
          };
        }
      });
      var __EnumValue2 = exports2.__EnumValue = new _definition.GraphQLObjectType({
        name: "__EnumValue",
        isIntrospection: true,
        description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
        fields: function fields() {
          return {
            name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
            description: { type: _scalars.GraphQLString },
            isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },
            deprecationReason: {
              type: _scalars.GraphQLString
            }
          };
        }
      });
      var TypeKind2 = exports2.TypeKind = {
        SCALAR: "SCALAR",
        OBJECT: "OBJECT",
        INTERFACE: "INTERFACE",
        UNION: "UNION",
        ENUM: "ENUM",
        INPUT_OBJECT: "INPUT_OBJECT",
        LIST: "LIST",
        NON_NULL: "NON_NULL"
      };
      var __TypeKind2 = exports2.__TypeKind = new _definition.GraphQLEnumType({
        name: "__TypeKind",
        isIntrospection: true,
        description: "An enum describing what kind of type a given `__Type` is.",
        values: {
          SCALAR: {
            value: TypeKind2.SCALAR,
            description: "Indicates this type is a scalar."
          },
          OBJECT: {
            value: TypeKind2.OBJECT,
            description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
          },
          INTERFACE: {
            value: TypeKind2.INTERFACE,
            description: "Indicates this type is an interface. `fields` and `possibleTypes` are valid fields."
          },
          UNION: {
            value: TypeKind2.UNION,
            description: "Indicates this type is a union. `possibleTypes` is a valid field."
          },
          ENUM: {
            value: TypeKind2.ENUM,
            description: "Indicates this type is an enum. `enumValues` is a valid field."
          },
          INPUT_OBJECT: {
            value: TypeKind2.INPUT_OBJECT,
            description: "Indicates this type is an input object. `inputFields` is a valid field."
          },
          LIST: {
            value: TypeKind2.LIST,
            description: "Indicates this type is a list. `ofType` is a valid field."
          },
          NON_NULL: {
            value: TypeKind2.NON_NULL,
            description: "Indicates this type is a non-null. `ofType` is a valid field."
          }
        }
      });
      var SchemaMetaFieldDef2 = exports2.SchemaMetaFieldDef = {
        name: "__schema",
        type: (0, _definition.GraphQLNonNull)(__Schema2),
        description: "Access the current type schema of this server.",
        args: [],
        resolve: function resolve(source, args, context, _ref4) {
          var schema = _ref4.schema;
          return schema;
        }
      };
      var TypeMetaFieldDef2 = exports2.TypeMetaFieldDef = {
        name: "__type",
        type: __Type2,
        description: "Request the type information of a single type.",
        args: [{ name: "name", type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) }],
        resolve: function resolve(source, _ref5, context, _ref6) {
          var name = _ref5.name;
          var schema = _ref6.schema;
          return schema.getType(name);
        }
      };
      var TypeNameMetaFieldDef2 = exports2.TypeNameMetaFieldDef = {
        name: "__typename",
        type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString),
        description: "The name of the current Object type at runtime.",
        args: [],
        resolve: function resolve(source, args, context, _ref7) {
          var parentType = _ref7.parentType;
          return parentType.name;
        }
      };
      var introspectionTypes2 = exports2.introspectionTypes = [__Schema2, __Directive2, __DirectiveLocation2, __Type2, __Field2, __InputValue2, __EnumValue2, __TypeKind2];
      function isIntrospectionType2(type) {
        return (0, _definition.isNamedType)(type) && (type.name === __Schema2.name || type.name === __Directive2.name || type.name === __DirectiveLocation2.name || type.name === __Type2.name || type.name === __Field2.name || type.name === __InputValue2.name || type.name === __EnumValue2.name || type.name === __TypeKind2.name);
      }
    }
  });

  // node_modules/graphql/jsutils/find.js
  var require_find = __commonJS({
    "node_modules/graphql/jsutils/find.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = find;
      function find(list, predicate) {
        for (var i = 0; i < list.length; i++) {
          if (predicate(list[i])) {
            return list[i];
          }
        }
      }
    }
  });

  // node_modules/graphql/type/schema.js
  var require_schema = __commonJS({
    "node_modules/graphql/type/schema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.GraphQLSchema = void 0;
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      exports2.isSchema = isSchema2;
      var _definition = require_definition();
      var _directives = require_directives();
      var _introspection = require_introspection();
      var _find = require_find();
      var _find2 = _interopRequireDefault(_find);
      var _instanceOf = require_instanceOf();
      var _instanceOf2 = _interopRequireDefault(_instanceOf);
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function isSchema2(schema) {
        return (0, _instanceOf2.default)(schema, GraphQLSchema2);
      }
      var GraphQLSchema2 = exports2.GraphQLSchema = function() {
        function GraphQLSchema3(config) {
          var _this = this;
          _classCallCheck(this, GraphQLSchema3);
          if (config && config.assumeValid) {
            this.__validationErrors = [];
          } else {
            !((typeof config === "undefined" ? "undefined" : _typeof(config)) === "object") ? (0, _invariant2.default)(0, "Must provide configuration object.") : void 0;
            !(!config.types || Array.isArray(config.types)) ? (0, _invariant2.default)(0, '"types" must be Array if provided but got: ' + String(config.types) + ".") : void 0;
            !(!config.directives || Array.isArray(config.directives)) ? (0, _invariant2.default)(0, '"directives" must be Array if provided but got: ' + (String(config.directives) + ".")) : void 0;
            !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? (0, _invariant2.default)(0, '"allowedLegacyNames" must be Array if provided but got: ' + (String(config.allowedLegacyNames) + ".")) : void 0;
          }
          this.__allowedLegacyNames = config.allowedLegacyNames;
          this._queryType = config.query;
          this._mutationType = config.mutation;
          this._subscriptionType = config.subscription;
          this._directives = config.directives || _directives.specifiedDirectives;
          this.astNode = config.astNode;
          var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), _introspection.__Schema];
          var types = config.types;
          if (types) {
            initialTypes = initialTypes.concat(types);
          }
          var typeMap = /* @__PURE__ */ Object.create(null);
          typeMap = initialTypes.reduce(typeMapReducer, typeMap);
          typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap);
          this._typeMap = typeMap;
          this._implementations = /* @__PURE__ */ Object.create(null);
          Object.keys(this._typeMap).forEach(function(typeName) {
            var type = _this._typeMap[typeName];
            if ((0, _definition.isObjectType)(type)) {
              type.getInterfaces().forEach(function(iface) {
                if ((0, _definition.isInterfaceType)(iface)) {
                  var impls = _this._implementations[iface.name];
                  if (impls) {
                    impls.push(type);
                  } else {
                    _this._implementations[iface.name] = [type];
                  }
                }
              });
            }
          });
        }
        GraphQLSchema3.prototype.getQueryType = function getQueryType() {
          return this._queryType;
        };
        GraphQLSchema3.prototype.getMutationType = function getMutationType() {
          return this._mutationType;
        };
        GraphQLSchema3.prototype.getSubscriptionType = function getSubscriptionType() {
          return this._subscriptionType;
        };
        GraphQLSchema3.prototype.getTypeMap = function getTypeMap() {
          return this._typeMap;
        };
        GraphQLSchema3.prototype.getType = function getType(name) {
          return this.getTypeMap()[name];
        };
        GraphQLSchema3.prototype.getPossibleTypes = function getPossibleTypes(abstractType) {
          if ((0, _definition.isUnionType)(abstractType)) {
            return abstractType.getTypes();
          }
          return this._implementations[abstractType.name];
        };
        GraphQLSchema3.prototype.isPossibleType = function isPossibleType(abstractType, possibleType) {
          var possibleTypeMap = this._possibleTypeMap;
          if (!possibleTypeMap) {
            this._possibleTypeMap = possibleTypeMap = /* @__PURE__ */ Object.create(null);
          }
          if (!possibleTypeMap[abstractType.name]) {
            var possibleTypes = this.getPossibleTypes(abstractType);
            !Array.isArray(possibleTypes) ? (0, _invariant2.default)(0, "Could not find possible implementing types for " + abstractType.name + " in schema. Check that schema.types is defined and is an array of all possible types in the schema.") : void 0;
            possibleTypeMap[abstractType.name] = possibleTypes.reduce(function(map, type) {
              return map[type.name] = true, map;
            }, /* @__PURE__ */ Object.create(null));
          }
          return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);
        };
        GraphQLSchema3.prototype.getDirectives = function getDirectives() {
          return this._directives;
        };
        GraphQLSchema3.prototype.getDirective = function getDirective(name) {
          return (0, _find2.default)(this.getDirectives(), function(directive) {
            return directive.name === name;
          });
        };
        return GraphQLSchema3;
      }();
      function typeMapReducer(map, type) {
        if (!type) {
          return map;
        }
        if ((0, _definition.isWrappingType)(type)) {
          return typeMapReducer(map, type.ofType);
        }
        if (map[type.name]) {
          !(map[type.name] === type) ? (0, _invariant2.default)(0, "Schema must contain unique named types but contains multiple " + ('types named "' + type.name + '".')) : void 0;
          return map;
        }
        map[type.name] = type;
        var reducedMap = map;
        if ((0, _definition.isUnionType)(type)) {
          reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);
        }
        if ((0, _definition.isObjectType)(type)) {
          reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);
        }
        if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
          (0, _objectValues2.default)(type.getFields()).forEach(function(field) {
            if (field.args) {
              var fieldArgTypes = field.args.map(function(arg) {
                return arg.type;
              });
              reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);
            }
            reducedMap = typeMapReducer(reducedMap, field.type);
          });
        }
        if ((0, _definition.isInputObjectType)(type)) {
          (0, _objectValues2.default)(type.getFields()).forEach(function(field) {
            reducedMap = typeMapReducer(reducedMap, field.type);
          });
        }
        return reducedMap;
      }
      function typeMapDirectiveReducer(map, directive) {
        if (!(0, _directives.isDirective)(directive)) {
          return map;
        }
        return directive.args.reduce(function(_map, arg) {
          return typeMapReducer(_map, arg.type);
        }, map);
      }
    }
  });

  // node_modules/graphql/language/location.js
  var require_location = __commonJS({
    "node_modules/graphql/language/location.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.getLocation = getLocation2;
      function getLocation2(source, position) {
        var lineRegexp = /\r\n|[\n\r]/g;
        var line = 1;
        var column = position + 1;
        var match = void 0;
        while ((match = lineRegexp.exec(source.body)) && match.index < position) {
          line += 1;
          column = position + 1 - (match.index + match[0].length);
        }
        return { line, column };
      }
    }
  });

  // node_modules/graphql/error/printError.js
  var require_printError = __commonJS({
    "node_modules/graphql/error/printError.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.printError = printError2;
      var _location = require_location();
      function printError2(error) {
        var printedLocations = [];
        if (error.nodes) {
          error.nodes.forEach(function(node) {
            if (node.loc) {
              printedLocations.push(highlightSourceAtLocation(node.loc.source, (0, _location.getLocation)(node.loc.source, node.loc.start)));
            }
          });
        } else if (error.source && error.locations) {
          var source = error.source;
          error.locations.forEach(function(location) {
            printedLocations.push(highlightSourceAtLocation(source, location));
          });
        }
        return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join("\n\n") + "\n";
      }
      function highlightSourceAtLocation(source, location) {
        var line = location.line;
        var lineOffset = source.locationOffset.line - 1;
        var columnOffset = getColumnOffset(source, location);
        var contextLine = line + lineOffset;
        var contextColumn = location.column + columnOffset;
        var prevLineNum = (contextLine - 1).toString();
        var lineNum = contextLine.toString();
        var nextLineNum = (contextLine + 1).toString();
        var padLen = nextLineNum.length;
        var lines = source.body.split(/\r\n|[\n\r]/g);
        lines[0] = whitespace(source.locationOffset.column - 1) + lines[0];
        var outputLines = [source.name + " (" + contextLine + ":" + contextColumn + ")", line >= 2 && lpad(padLen, prevLineNum) + ": " + lines[line - 2], lpad(padLen, lineNum) + ": " + lines[line - 1], whitespace(2 + padLen + contextColumn - 1) + "^", line < lines.length && lpad(padLen, nextLineNum) + ": " + lines[line]];
        return outputLines.filter(Boolean).join("\n");
      }
      function getColumnOffset(source, location) {
        return location.line === 1 ? source.locationOffset.column - 1 : 0;
      }
      function whitespace(len) {
        return Array(len + 1).join(" ");
      }
      function lpad(len, str) {
        return whitespace(len - str.length) + str;
      }
    }
  });

  // node_modules/graphql/error/GraphQLError.js
  var require_GraphQLError = __commonJS({
    "node_modules/graphql/error/GraphQLError.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.GraphQLError = GraphQLError2;
      var _printError = require_printError();
      var _location = require_location();
      function GraphQLError2(message, nodes, source, positions, path, originalError, extensions) {
        var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : void 0 : nodes ? [nodes] : void 0;
        var _source = source;
        if (!_source && _nodes) {
          var node = _nodes[0];
          _source = node && node.loc && node.loc.source;
        }
        var _positions = positions;
        if (!_positions && _nodes) {
          _positions = _nodes.reduce(function(list, node2) {
            if (node2.loc) {
              list.push(node2.loc.start);
            }
            return list;
          }, []);
        }
        if (_positions && _positions.length === 0) {
          _positions = void 0;
        }
        var _locations = void 0;
        if (positions && source) {
          _locations = positions.map(function(pos) {
            return (0, _location.getLocation)(source, pos);
          });
        } else if (_nodes) {
          _locations = _nodes.reduce(function(list, node2) {
            if (node2.loc) {
              list.push((0, _location.getLocation)(node2.loc.source, node2.loc.start));
            }
            return list;
          }, []);
        }
        Object.defineProperties(this, {
          message: {
            value: message,
            enumerable: true,
            writable: true
          },
          locations: {
            value: _locations || void 0,
            enumerable: true
          },
          path: {
            value: path || void 0,
            enumerable: true
          },
          nodes: {
            value: _nodes || void 0
          },
          source: {
            value: _source || void 0
          },
          positions: {
            value: _positions || void 0
          },
          originalError: {
            value: originalError
          },
          extensions: {
            value: extensions || originalError && originalError.extensions
          }
        });
        if (originalError && originalError.stack) {
          Object.defineProperty(this, "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
        } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, GraphQLError2);
        } else {
          Object.defineProperty(this, "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
      }
      GraphQLError2.prototype = Object.create(Error.prototype, {
        constructor: { value: GraphQLError2 },
        name: { value: "GraphQLError" },
        toString: {
          value: function toString3() {
            return (0, _printError.printError)(this);
          }
        }
      });
    }
  });

  // node_modules/graphql/utilities/assertValidName.js
  var require_assertValidName = __commonJS({
    "node_modules/graphql/utilities/assertValidName.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.assertValidName = assertValidName2;
      exports2.isValidNameError = isValidNameError2;
      var _GraphQLError = require_GraphQLError();
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
      function assertValidName2(name) {
        var error = isValidNameError2(name);
        if (error) {
          throw error;
        }
        return name;
      }
      function isValidNameError2(name, node) {
        !(typeof name === "string") ? (0, _invariant2.default)(0, "Expected string") : void 0;
        if (name.length > 1 && name[0] === "_" && name[1] === "_") {
          return new _GraphQLError.GraphQLError('Name "' + name + '" must not begin with "__", which is reserved by GraphQL introspection.', node);
        }
        if (!NAME_RX.test(name)) {
          return new _GraphQLError.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "' + name + '" does not.', node);
        }
      }
    }
  });

  // node_modules/graphql/utilities/typeComparators.js
  var require_typeComparators = __commonJS({
    "node_modules/graphql/utilities/typeComparators.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.isEqualType = isEqualType2;
      exports2.isTypeSubTypeOf = isTypeSubTypeOf2;
      exports2.doTypesOverlap = doTypesOverlap2;
      var _definition = require_definition();
      function isEqualType2(typeA, typeB) {
        if (typeA === typeB) {
          return true;
        }
        if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
          return isEqualType2(typeA.ofType, typeB.ofType);
        }
        if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
          return isEqualType2(typeA.ofType, typeB.ofType);
        }
        return false;
      }
      function isTypeSubTypeOf2(schema, maybeSubType, superType) {
        if (maybeSubType === superType) {
          return true;
        }
        if ((0, _definition.isNonNullType)(superType)) {
          if ((0, _definition.isNonNullType)(maybeSubType)) {
            return isTypeSubTypeOf2(schema, maybeSubType.ofType, superType.ofType);
          }
          return false;
        }
        if ((0, _definition.isNonNullType)(maybeSubType)) {
          return isTypeSubTypeOf2(schema, maybeSubType.ofType, superType);
        }
        if ((0, _definition.isListType)(superType)) {
          if ((0, _definition.isListType)(maybeSubType)) {
            return isTypeSubTypeOf2(schema, maybeSubType.ofType, superType.ofType);
          }
          return false;
        }
        if ((0, _definition.isListType)(maybeSubType)) {
          return false;
        }
        if ((0, _definition.isAbstractType)(superType) && (0, _definition.isObjectType)(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {
          return true;
        }
        return false;
      }
      function doTypesOverlap2(schema, typeA, typeB) {
        if (typeA === typeB) {
          return true;
        }
        if ((0, _definition.isAbstractType)(typeA)) {
          if ((0, _definition.isAbstractType)(typeB)) {
            return schema.getPossibleTypes(typeA).some(function(type) {
              return schema.isPossibleType(typeB, type);
            });
          }
          return schema.isPossibleType(typeA, typeB);
        }
        if ((0, _definition.isAbstractType)(typeB)) {
          return schema.isPossibleType(typeB, typeA);
        }
        return false;
      }
    }
  });

  // node_modules/graphql/type/validate.js
  var require_validate = __commonJS({
    "node_modules/graphql/type/validate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.validateSchema = validateSchema2;
      exports2.assertValidSchema = assertValidSchema2;
      var _definition = require_definition();
      var _directives = require_directives();
      var _introspection = require_introspection();
      var _schema = require_schema();
      var _find = require_find();
      var _find2 = _interopRequireDefault(_find);
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      var _GraphQLError = require_GraphQLError();
      var _assertValidName = require_assertValidName();
      var _typeComparators = require_typeComparators();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function validateSchema2(schema) {
        !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, "Expected " + String(schema) + " to be a GraphQL schema.") : void 0;
        if (schema.__validationErrors) {
          return schema.__validationErrors;
        }
        var context = new SchemaValidationContext(schema);
        validateRootTypes(context);
        validateDirectives(context);
        validateTypes(context);
        var errors = context.getErrors();
        schema.__validationErrors = errors;
        return errors;
      }
      function assertValidSchema2(schema) {
        var errors = validateSchema2(schema);
        if (errors.length !== 0) {
          throw new Error(errors.map(function(error) {
            return error.message;
          }).join("\n\n"));
        }
      }
      var SchemaValidationContext = function() {
        function SchemaValidationContext2(schema) {
          _classCallCheck(this, SchemaValidationContext2);
          this._errors = [];
          this.schema = schema;
        }
        SchemaValidationContext2.prototype.reportError = function reportError(message, nodes) {
          var _nodes = (Array.isArray(nodes) ? nodes : [nodes]).filter(Boolean);
          this.addError(new _GraphQLError.GraphQLError(message, _nodes));
        };
        SchemaValidationContext2.prototype.addError = function addError(error) {
          this._errors.push(error);
        };
        SchemaValidationContext2.prototype.getErrors = function getErrors() {
          return this._errors;
        };
        return SchemaValidationContext2;
      }();
      function validateRootTypes(context) {
        var schema = context.schema;
        var queryType = schema.getQueryType();
        if (!queryType) {
          context.reportError("Query root type must be provided.", schema.astNode);
        } else if (!(0, _definition.isObjectType)(queryType)) {
          context.reportError("Query root type must be Object type, it cannot be " + String(queryType) + ".", getOperationTypeNode(schema, queryType, "query"));
        }
        var mutationType = schema.getMutationType();
        if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
          context.reportError("Mutation root type must be Object type if provided, it cannot be " + (String(mutationType) + "."), getOperationTypeNode(schema, mutationType, "mutation"));
        }
        var subscriptionType = schema.getSubscriptionType();
        if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
          context.reportError("Subscription root type must be Object type if provided, it cannot be " + (String(subscriptionType) + "."), getOperationTypeNode(schema, subscriptionType, "subscription"));
        }
      }
      function getOperationTypeNode(schema, type, operation) {
        var astNode = schema.astNode;
        var operationTypeNode = astNode && astNode.operationTypes.find(function(operationType) {
          return operationType.operation === operation;
        });
        return operationTypeNode ? operationTypeNode.type : type && type.astNode;
      }
      function validateDirectives(context) {
        var directives = context.schema.getDirectives();
        directives.forEach(function(directive) {
          if (!(0, _directives.isDirective)(directive)) {
            context.reportError("Expected directive but got: " + String(directive) + ".", directive && directive.astNode);
            return;
          }
          validateName(context, directive);
          var argNames = /* @__PURE__ */ Object.create(null);
          directive.args.forEach(function(arg) {
            var argName = arg.name;
            validateName(context, arg);
            if (argNames[argName]) {
              context.reportError("Argument @" + directive.name + "(" + argName + ":) can only be defined once.", getAllDirectiveArgNodes(directive, argName));
              return;
            }
            argNames[argName] = true;
            if (!(0, _definition.isInputType)(arg.type)) {
              context.reportError("The type of @" + directive.name + "(" + argName + ":) must be Input Type " + ("but got: " + String(arg.type) + "."), getDirectiveArgTypeNode(directive, argName));
            }
          });
        });
      }
      function validateName(context, node) {
        if (context.schema.__allowedLegacyNames && context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {
          return;
        }
        var error = (0, _assertValidName.isValidNameError)(node.name, node.astNode || void 0);
        if (error) {
          context.addError(error);
        }
      }
      function validateTypes(context) {
        var typeMap = context.schema.getTypeMap();
        (0, _objectValues2.default)(typeMap).forEach(function(type) {
          if (!(0, _definition.isNamedType)(type)) {
            context.reportError("Expected GraphQL named type but got: " + String(type) + ".", type && type.astNode);
            return;
          }
          if (!(0, _introspection.isIntrospectionType)(type)) {
            validateName(context, type);
          }
          if ((0, _definition.isObjectType)(type)) {
            validateFields(context, type);
            validateObjectInterfaces(context, type);
          } else if ((0, _definition.isInterfaceType)(type)) {
            validateFields(context, type);
          } else if ((0, _definition.isUnionType)(type)) {
            validateUnionMembers(context, type);
          } else if ((0, _definition.isEnumType)(type)) {
            validateEnumValues(context, type);
          } else if ((0, _definition.isInputObjectType)(type)) {
            validateInputFields(context, type);
          }
        });
      }
      function validateFields(context, type) {
        var fields = (0, _objectValues2.default)(type.getFields());
        if (fields.length === 0) {
          context.reportError("Type " + type.name + " must define one or more fields.", getAllObjectOrInterfaceNodes(type));
        }
        fields.forEach(function(field) {
          validateName(context, field);
          var fieldNodes = getAllFieldNodes(type, field.name);
          if (fieldNodes.length > 1) {
            context.reportError("Field " + type.name + "." + field.name + " can only be defined once.", fieldNodes);
            return;
          }
          if (!(0, _definition.isOutputType)(field.type)) {
            context.reportError("The type of " + type.name + "." + field.name + " must be Output Type " + ("but got: " + String(field.type) + "."), getFieldTypeNode(type, field.name));
          }
          var argNames = /* @__PURE__ */ Object.create(null);
          field.args.forEach(function(arg) {
            var argName = arg.name;
            validateName(context, arg);
            if (argNames[argName]) {
              context.reportError("Field argument " + type.name + "." + field.name + "(" + argName + ":) can only be defined once.", getAllFieldArgNodes(type, field.name, argName));
            }
            argNames[argName] = true;
            if (!(0, _definition.isInputType)(arg.type)) {
              context.reportError("The type of " + type.name + "." + field.name + "(" + argName + ":) must be Input " + ("Type but got: " + String(arg.type) + "."), getFieldArgTypeNode(type, field.name, argName));
            }
          });
        });
      }
      function validateObjectInterfaces(context, object) {
        var implementedTypeNames = /* @__PURE__ */ Object.create(null);
        object.getInterfaces().forEach(function(iface) {
          if (!(0, _definition.isInterfaceType)(iface)) {
            context.reportError("Type " + String(object) + " must only implement Interface types, " + ("it cannot implement " + String(iface) + "."), getImplementsInterfaceNode(object, iface));
            return;
          }
          if (implementedTypeNames[iface.name]) {
            context.reportError("Type " + object.name + " can only implement " + iface.name + " once.", getAllImplementsInterfaceNodes(object, iface));
            return;
          }
          implementedTypeNames[iface.name] = true;
          validateObjectImplementsInterface(context, object, iface);
        });
      }
      function validateObjectImplementsInterface(context, object, iface) {
        var objectFieldMap = object.getFields();
        var ifaceFieldMap = iface.getFields();
        Object.keys(ifaceFieldMap).forEach(function(fieldName) {
          var objectField = objectFieldMap[fieldName];
          var ifaceField = ifaceFieldMap[fieldName];
          if (!objectField) {
            context.reportError("Interface field " + iface.name + "." + fieldName + " expected but " + (object.name + " does not provide it."), [getFieldNode(iface, fieldName), object.astNode]);
            return;
          }
          if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, objectField.type, ifaceField.type)) {
            context.reportError("Interface field " + iface.name + "." + fieldName + " expects type " + (String(ifaceField.type) + " but " + object.name + "." + fieldName + " ") + ("is type " + String(objectField.type) + "."), [getFieldTypeNode(iface, fieldName), getFieldTypeNode(object, fieldName)]);
          }
          ifaceField.args.forEach(function(ifaceArg) {
            var argName = ifaceArg.name;
            var objectArg = (0, _find2.default)(objectField.args, function(arg) {
              return arg.name === argName;
            });
            if (!objectArg) {
              context.reportError("Interface field argument " + iface.name + "." + fieldName + "(" + argName + ":) " + ("expected but " + object.name + "." + fieldName + " does not provide it."), [getFieldArgNode(iface, fieldName, argName), getFieldNode(object, fieldName)]);
              return;
            }
            if (!(0, _typeComparators.isEqualType)(ifaceArg.type, objectArg.type)) {
              context.reportError("Interface field argument " + iface.name + "." + fieldName + "(" + argName + ":) " + ("expects type " + String(ifaceArg.type) + " but ") + (object.name + "." + fieldName + "(" + argName + ":) is type ") + (String(objectArg.type) + "."), [getFieldArgTypeNode(iface, fieldName, argName), getFieldArgTypeNode(object, fieldName, argName)]);
            }
          });
          objectField.args.forEach(function(objectArg) {
            var argName = objectArg.name;
            var ifaceArg = (0, _find2.default)(ifaceField.args, function(arg) {
              return arg.name === argName;
            });
            if (!ifaceArg && (0, _definition.isNonNullType)(objectArg.type)) {
              context.reportError("Object field argument " + object.name + "." + fieldName + "(" + argName + ":) " + ("is of required type " + String(objectArg.type) + " but is not also ") + ("provided by the Interface field " + iface.name + "." + fieldName + "."), [getFieldArgTypeNode(object, fieldName, argName), getFieldNode(iface, fieldName)]);
            }
          });
        });
      }
      function validateUnionMembers(context, union) {
        var memberTypes = union.getTypes();
        if (memberTypes.length === 0) {
          context.reportError("Union type " + union.name + " must define one or more member types.", union.astNode);
        }
        var includedTypeNames = /* @__PURE__ */ Object.create(null);
        memberTypes.forEach(function(memberType) {
          if (includedTypeNames[memberType.name]) {
            context.reportError("Union type " + union.name + " can only include type " + (memberType.name + " once."), getUnionMemberTypeNodes(union, memberType.name));
            return;
          }
          includedTypeNames[memberType.name] = true;
          if (!(0, _definition.isObjectType)(memberType)) {
            context.reportError("Union type " + union.name + " can only include Object types, " + ("it cannot include " + String(memberType) + "."), getUnionMemberTypeNodes(union, String(memberType)));
          }
        });
      }
      function validateEnumValues(context, enumType) {
        var enumValues = enumType.getValues();
        if (enumValues.length === 0) {
          context.reportError("Enum type " + enumType.name + " must define one or more values.", enumType.astNode);
        }
        enumValues.forEach(function(enumValue) {
          var valueName = enumValue.name;
          var allNodes = getEnumValueNodes(enumType, valueName);
          if (allNodes && allNodes.length > 1) {
            context.reportError("Enum type " + enumType.name + " can include value " + valueName + " only once.", allNodes);
          }
          validateName(context, enumValue);
          if (valueName === "true" || valueName === "false" || valueName === "null") {
            context.reportError("Enum type " + enumType.name + " cannot include value: " + valueName + ".", enumValue.astNode);
          }
        });
      }
      function validateInputFields(context, inputObj) {
        var fields = (0, _objectValues2.default)(inputObj.getFields());
        if (fields.length === 0) {
          context.reportError("Input Object type " + inputObj.name + " must define one or more fields.", inputObj.astNode);
        }
        fields.forEach(function(field) {
          validateName(context, field);
          if (!(0, _definition.isInputType)(field.type)) {
            context.reportError("The type of " + inputObj.name + "." + field.name + " must be Input Type " + ("but got: " + String(field.type) + "."), field.astNode && field.astNode.type);
          }
        });
      }
      function getAllObjectNodes(type) {
        return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];
      }
      function getAllObjectOrInterfaceNodes(type) {
        return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];
      }
      function getImplementsInterfaceNode(type, iface) {
        return getAllImplementsInterfaceNodes(type, iface)[0];
      }
      function getAllImplementsInterfaceNodes(type, iface) {
        var implementsNodes = [];
        var astNodes = getAllObjectNodes(type);
        for (var i = 0; i < astNodes.length; i++) {
          var _astNode = astNodes[i];
          if (_astNode && _astNode.interfaces) {
            _astNode.interfaces.forEach(function(node) {
              if (node.name.value === iface.name) {
                implementsNodes.push(node);
              }
            });
          }
        }
        return implementsNodes;
      }
      function getFieldNode(type, fieldName) {
        return getAllFieldNodes(type, fieldName)[0];
      }
      function getAllFieldNodes(type, fieldName) {
        var fieldNodes = [];
        var astNodes = getAllObjectOrInterfaceNodes(type);
        for (var i = 0; i < astNodes.length; i++) {
          var _astNode2 = astNodes[i];
          if (_astNode2 && _astNode2.fields) {
            _astNode2.fields.forEach(function(node) {
              if (node.name.value === fieldName) {
                fieldNodes.push(node);
              }
            });
          }
        }
        return fieldNodes;
      }
      function getFieldTypeNode(type, fieldName) {
        var fieldNode = getFieldNode(type, fieldName);
        return fieldNode && fieldNode.type;
      }
      function getFieldArgNode(type, fieldName, argName) {
        return getAllFieldArgNodes(type, fieldName, argName)[0];
      }
      function getAllFieldArgNodes(type, fieldName, argName) {
        var argNodes = [];
        var fieldNode = getFieldNode(type, fieldName);
        if (fieldNode && fieldNode.arguments) {
          fieldNode.arguments.forEach(function(node) {
            if (node.name.value === argName) {
              argNodes.push(node);
            }
          });
        }
        return argNodes;
      }
      function getFieldArgTypeNode(type, fieldName, argName) {
        var fieldArgNode = getFieldArgNode(type, fieldName, argName);
        return fieldArgNode && fieldArgNode.type;
      }
      function getAllDirectiveArgNodes(directive, argName) {
        var argNodes = [];
        var directiveNode = directive.astNode;
        if (directiveNode && directiveNode.arguments) {
          directiveNode.arguments.forEach(function(node) {
            if (node.name.value === argName) {
              argNodes.push(node);
            }
          });
        }
        return argNodes;
      }
      function getDirectiveArgTypeNode(directive, argName) {
        var argNode = getAllDirectiveArgNodes(directive, argName)[0];
        return argNode && argNode.type;
      }
      function getUnionMemberTypeNodes(union, typeName) {
        return union.astNode && union.astNode.types && union.astNode.types.filter(function(type) {
          return type.name.value === typeName;
        });
      }
      function getEnumValueNodes(enumType, valueName) {
        return enumType.astNode && enumType.astNode.values && enumType.astNode.values.filter(function(value) {
          return value.name.value === valueName;
        });
      }
    }
  });

  // node_modules/graphql/language/source.js
  var require_source = __commonJS({
    "node_modules/graphql/language/source.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Source = void 0;
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var Source2 = exports2.Source = function Source3(body, name, locationOffset) {
        _classCallCheck(this, Source3);
        this.body = body;
        this.name = name || "GraphQL request";
        this.locationOffset = locationOffset || { line: 1, column: 1 };
        !(this.locationOffset.line > 0) ? (0, _invariant2.default)(0, "line in locationOffset is 1-indexed and must be positive") : void 0;
        !(this.locationOffset.column > 0) ? (0, _invariant2.default)(0, "column in locationOffset is 1-indexed and must be positive") : void 0;
      };
    }
  });

  // node_modules/graphql/error/syntaxError.js
  var require_syntaxError = __commonJS({
    "node_modules/graphql/error/syntaxError.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.syntaxError = syntaxError;
      var _GraphQLError = require_GraphQLError();
      function syntaxError(source, position, description) {
        return new _GraphQLError.GraphQLError("Syntax Error: " + description, void 0, source, [position]);
      }
    }
  });

  // node_modules/graphql/error/locatedError.js
  var require_locatedError = __commonJS({
    "node_modules/graphql/error/locatedError.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.locatedError = locatedError;
      var _GraphQLError = require_GraphQLError();
      function locatedError(originalError, nodes, path) {
        if (originalError && Array.isArray(originalError.path)) {
          return originalError;
        }
        return new _GraphQLError.GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);
      }
    }
  });

  // node_modules/graphql/error/formatError.js
  var require_formatError = __commonJS({
    "node_modules/graphql/error/formatError.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      exports2.formatError = formatError2;
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function formatError2(error) {
        !error ? (0, _invariant2.default)(0, "Received null or undefined error.") : void 0;
        return _extends({}, error.extensions, {
          message: error.message || "An unknown error occurred.",
          locations: error.locations,
          path: error.path
        });
      }
    }
  });

  // node_modules/graphql/error/index.js
  var require_error = __commonJS({
    "node_modules/graphql/error/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _GraphQLError = require_GraphQLError();
      Object.defineProperty(exports2, "GraphQLError", {
        enumerable: true,
        get: function get2() {
          return _GraphQLError.GraphQLError;
        }
      });
      var _syntaxError = require_syntaxError();
      Object.defineProperty(exports2, "syntaxError", {
        enumerable: true,
        get: function get2() {
          return _syntaxError.syntaxError;
        }
      });
      var _locatedError = require_locatedError();
      Object.defineProperty(exports2, "locatedError", {
        enumerable: true,
        get: function get2() {
          return _locatedError.locatedError;
        }
      });
      var _printError = require_printError();
      Object.defineProperty(exports2, "printError", {
        enumerable: true,
        get: function get2() {
          return _printError.printError;
        }
      });
      var _formatError = require_formatError();
      Object.defineProperty(exports2, "formatError", {
        enumerable: true,
        get: function get2() {
          return _formatError.formatError;
        }
      });
    }
  });

  // node_modules/graphql/language/blockStringValue.js
  var require_blockStringValue = __commonJS({
    "node_modules/graphql/language/blockStringValue.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = blockStringValue;
      function blockStringValue(rawString) {
        var lines = rawString.split(/\r\n|[\n\r]/g);
        var commonIndent = null;
        for (var i = 1; i < lines.length; i++) {
          var line = lines[i];
          var indent = leadingWhitespace(line);
          if (indent < line.length && (commonIndent === null || indent < commonIndent)) {
            commonIndent = indent;
            if (commonIndent === 0) {
              break;
            }
          }
        }
        if (commonIndent) {
          for (var _i = 1; _i < lines.length; _i++) {
            lines[_i] = lines[_i].slice(commonIndent);
          }
        }
        while (lines.length > 0 && isBlank(lines[0])) {
          lines.shift();
        }
        while (lines.length > 0 && isBlank(lines[lines.length - 1])) {
          lines.pop();
        }
        return lines.join("\n");
      }
      function leadingWhitespace(str) {
        var i = 0;
        while (i < str.length && (str[i] === " " || str[i] === "	")) {
          i++;
        }
        return i;
      }
      function isBlank(str) {
        return leadingWhitespace(str) === str.length;
      }
    }
  });

  // node_modules/graphql/language/lexer.js
  var require_lexer = __commonJS({
    "node_modules/graphql/language/lexer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.TokenKind = void 0;
      exports2.createLexer = createLexer;
      exports2.getTokenDesc = getTokenDesc;
      var _error = require_error();
      var _blockStringValue = require_blockStringValue();
      var _blockStringValue2 = _interopRequireDefault(_blockStringValue);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function createLexer(source, options) {
        var startOfFileToken = new Tok(TokenKind2.SOF, 0, 0, 0, 0, null);
        var lexer = {
          source,
          options,
          lastToken: startOfFileToken,
          token: startOfFileToken,
          line: 1,
          lineStart: 0,
          advance: advanceLexer,
          lookahead
        };
        return lexer;
      }
      function advanceLexer() {
        this.lastToken = this.token;
        var token = this.token = this.lookahead();
        return token;
      }
      function lookahead() {
        var token = this.token;
        if (token.kind !== TokenKind2.EOF) {
          do {
            token = token.next || (token.next = readToken(this, token));
          } while (token.kind === TokenKind2.COMMENT);
        }
        return token;
      }
      var TokenKind2 = exports2.TokenKind = Object.freeze({
        SOF: "<SOF>",
        EOF: "<EOF>",
        BANG: "!",
        DOLLAR: "$",
        AMP: "&",
        PAREN_L: "(",
        PAREN_R: ")",
        SPREAD: "...",
        COLON: ":",
        EQUALS: "=",
        AT: "@",
        BRACKET_L: "[",
        BRACKET_R: "]",
        BRACE_L: "{",
        PIPE: "|",
        BRACE_R: "}",
        NAME: "Name",
        INT: "Int",
        FLOAT: "Float",
        STRING: "String",
        BLOCK_STRING: "BlockString",
        COMMENT: "Comment"
      });
      function getTokenDesc(token) {
        var value = token.value;
        return value ? token.kind + ' "' + value + '"' : token.kind;
      }
      var charCodeAt = String.prototype.charCodeAt;
      var slice = String.prototype.slice;
      function Tok(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }
      Tok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };
      function printCharCode(code) {
        return isNaN(code) ? TokenKind2.EOF : code < 127 ? JSON.stringify(String.fromCharCode(code)) : '"\\u' + ("00" + code.toString(16).toUpperCase()).slice(-4) + '"';
      }
      function readToken(lexer, prev) {
        var source = lexer.source;
        var body = source.body;
        var bodyLength = body.length;
        var pos = positionAfterWhitespace(body, prev.end, lexer);
        var line = lexer.line;
        var col = 1 + pos - lexer.lineStart;
        if (pos >= bodyLength) {
          return new Tok(TokenKind2.EOF, bodyLength, bodyLength, line, col, prev);
        }
        var code = charCodeAt.call(body, pos);
        if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
          throw (0, _error.syntaxError)(source, pos, "Cannot contain the invalid character " + printCharCode(code) + ".");
        }
        switch (code) {
          case 33:
            return new Tok(TokenKind2.BANG, pos, pos + 1, line, col, prev);
          case 35:
            return readComment(source, pos, line, col, prev);
          case 36:
            return new Tok(TokenKind2.DOLLAR, pos, pos + 1, line, col, prev);
          case 38:
            return new Tok(TokenKind2.AMP, pos, pos + 1, line, col, prev);
          case 40:
            return new Tok(TokenKind2.PAREN_L, pos, pos + 1, line, col, prev);
          case 41:
            return new Tok(TokenKind2.PAREN_R, pos, pos + 1, line, col, prev);
          case 46:
            if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {
              return new Tok(TokenKind2.SPREAD, pos, pos + 3, line, col, prev);
            }
            break;
          case 58:
            return new Tok(TokenKind2.COLON, pos, pos + 1, line, col, prev);
          case 61:
            return new Tok(TokenKind2.EQUALS, pos, pos + 1, line, col, prev);
          case 64:
            return new Tok(TokenKind2.AT, pos, pos + 1, line, col, prev);
          case 91:
            return new Tok(TokenKind2.BRACKET_L, pos, pos + 1, line, col, prev);
          case 93:
            return new Tok(TokenKind2.BRACKET_R, pos, pos + 1, line, col, prev);
          case 123:
            return new Tok(TokenKind2.BRACE_L, pos, pos + 1, line, col, prev);
          case 124:
            return new Tok(TokenKind2.PIPE, pos, pos + 1, line, col, prev);
          case 125:
            return new Tok(TokenKind2.BRACE_R, pos, pos + 1, line, col, prev);
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 95:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
            return readName(source, pos, line, col, prev);
          case 45:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return readNumber(source, pos, code, line, col, prev);
          case 34:
            if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {
              return readBlockString(source, pos, line, col, prev);
            }
            return readString(source, pos, line, col, prev);
        }
        throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));
      }
      function unexpectedCharacterMessage(code) {
        if (code === 39) {
          return `Unexpected single quote character ('), did you mean to use a double quote (")?`;
        }
        return "Cannot parse the unexpected character " + printCharCode(code) + ".";
      }
      function positionAfterWhitespace(body, startPosition, lexer) {
        var bodyLength = body.length;
        var position = startPosition;
        while (position < bodyLength) {
          var code = charCodeAt.call(body, position);
          if (code === 9 || code === 32 || code === 44 || code === 65279) {
            ++position;
          } else if (code === 10) {
            ++position;
            ++lexer.line;
            lexer.lineStart = position;
          } else if (code === 13) {
            if (charCodeAt.call(body, position + 1) === 10) {
              position += 2;
            } else {
              ++position;
            }
            ++lexer.line;
            lexer.lineStart = position;
          } else {
            break;
          }
        }
        return position;
      }
      function readComment(source, start, line, col, prev) {
        var body = source.body;
        var code = void 0;
        var position = start;
        do {
          code = charCodeAt.call(body, ++position);
        } while (code !== null && (code > 31 || code === 9));
        return new Tok(TokenKind2.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));
      }
      function readNumber(source, start, firstCode, line, col, prev) {
        var body = source.body;
        var code = firstCode;
        var position = start;
        var isFloat = false;
        if (code === 45) {
          code = charCodeAt.call(body, ++position);
        }
        if (code === 48) {
          code = charCodeAt.call(body, ++position);
          if (code >= 48 && code <= 57) {
            throw (0, _error.syntaxError)(source, position, "Invalid number, unexpected digit after 0: " + printCharCode(code) + ".");
          }
        } else {
          position = readDigits(source, position, code);
          code = charCodeAt.call(body, position);
        }
        if (code === 46) {
          isFloat = true;
          code = charCodeAt.call(body, ++position);
          position = readDigits(source, position, code);
          code = charCodeAt.call(body, position);
        }
        if (code === 69 || code === 101) {
          isFloat = true;
          code = charCodeAt.call(body, ++position);
          if (code === 43 || code === 45) {
            code = charCodeAt.call(body, ++position);
          }
          position = readDigits(source, position, code);
        }
        return new Tok(isFloat ? TokenKind2.FLOAT : TokenKind2.INT, start, position, line, col, prev, slice.call(body, start, position));
      }
      function readDigits(source, start, firstCode) {
        var body = source.body;
        var position = start;
        var code = firstCode;
        if (code >= 48 && code <= 57) {
          do {
            code = charCodeAt.call(body, ++position);
          } while (code >= 48 && code <= 57);
          return position;
        }
        throw (0, _error.syntaxError)(source, position, "Invalid number, expected digit but got: " + printCharCode(code) + ".");
      }
      function readString(source, start, line, col, prev) {
        var body = source.body;
        var position = start + 1;
        var chunkStart = position;
        var code = 0;
        var value = "";
        while (position < body.length && (code = charCodeAt.call(body, position)) !== null && code !== 10 && code !== 13) {
          if (code === 34) {
            value += slice.call(body, chunkStart, position);
            return new Tok(TokenKind2.STRING, start, position + 1, line, col, prev, value);
          }
          if (code < 32 && code !== 9) {
            throw (0, _error.syntaxError)(source, position, "Invalid character within String: " + printCharCode(code) + ".");
          }
          ++position;
          if (code === 92) {
            value += slice.call(body, chunkStart, position - 1);
            code = charCodeAt.call(body, position);
            switch (code) {
              case 34:
                value += '"';
                break;
              case 47:
                value += "/";
                break;
              case 92:
                value += "\\";
                break;
              case 98:
                value += "\b";
                break;
              case 102:
                value += "\f";
                break;
              case 110:
                value += "\n";
                break;
              case 114:
                value += "\r";
                break;
              case 116:
                value += "	";
                break;
              case 117:
                var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));
                if (charCode < 0) {
                  throw (0, _error.syntaxError)(source, position, "Invalid character escape sequence: " + ("\\u" + body.slice(position + 1, position + 5) + "."));
                }
                value += String.fromCharCode(charCode);
                position += 4;
                break;
              default:
                throw (0, _error.syntaxError)(source, position, "Invalid character escape sequence: \\" + String.fromCharCode(code) + ".");
            }
            ++position;
            chunkStart = position;
          }
        }
        throw (0, _error.syntaxError)(source, position, "Unterminated string.");
      }
      function readBlockString(source, start, line, col, prev) {
        var body = source.body;
        var position = start + 3;
        var chunkStart = position;
        var code = 0;
        var rawValue = "";
        while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {
          if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {
            rawValue += slice.call(body, chunkStart, position);
            return new Tok(TokenKind2.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue2.default)(rawValue));
          }
          if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
            throw (0, _error.syntaxError)(source, position, "Invalid character within String: " + printCharCode(code) + ".");
          }
          if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {
            rawValue += slice.call(body, chunkStart, position) + '"""';
            position += 4;
            chunkStart = position;
          } else {
            ++position;
          }
        }
        throw (0, _error.syntaxError)(source, position, "Unterminated string.");
      }
      function uniCharCode(a, b, c, d) {
        return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
      }
      function char2hex(a) {
        return a >= 48 && a <= 57 ? a - 48 : a >= 65 && a <= 70 ? a - 55 : a >= 97 && a <= 102 ? a - 87 : -1;
      }
      function readName(source, start, line, col, prev) {
        var body = source.body;
        var bodyLength = body.length;
        var position = start + 1;
        var code = 0;
        while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122)) {
          ++position;
        }
        return new Tok(TokenKind2.NAME, start, position, line, col, prev, slice.call(body, start, position));
      }
    }
  });

  // node_modules/graphql/language/parser.js
  var require_parser = __commonJS({
    "node_modules/graphql/language/parser.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.parse = parse2;
      exports2.parseValue = parseValue2;
      exports2.parseType = parseType2;
      exports2.parseConstValue = parseConstValue;
      exports2.parseTypeReference = parseTypeReference;
      exports2.parseNamedType = parseNamedType;
      var _source = require_source();
      var _error = require_error();
      var _lexer = require_lexer();
      var _kinds = require_kinds();
      var _directiveLocation = require_directiveLocation();
      function parse2(source, options) {
        var sourceObj = typeof source === "string" ? new _source.Source(source) : source;
        if (!(sourceObj instanceof _source.Source)) {
          throw new TypeError("Must provide Source. Received: " + String(sourceObj));
        }
        var lexer = (0, _lexer.createLexer)(sourceObj, options || {});
        return parseDocument2(lexer);
      }
      function parseValue2(source, options) {
        var sourceObj = typeof source === "string" ? new _source.Source(source) : source;
        var lexer = (0, _lexer.createLexer)(sourceObj, options || {});
        expect(lexer, _lexer.TokenKind.SOF);
        var value = parseValueLiteral(lexer, false);
        expect(lexer, _lexer.TokenKind.EOF);
        return value;
      }
      function parseType2(source, options) {
        var sourceObj = typeof source === "string" ? new _source.Source(source) : source;
        var lexer = (0, _lexer.createLexer)(sourceObj, options || {});
        expect(lexer, _lexer.TokenKind.SOF);
        var type = parseTypeReference(lexer);
        expect(lexer, _lexer.TokenKind.EOF);
        return type;
      }
      function parseName(lexer) {
        var token = expect(lexer, _lexer.TokenKind.NAME);
        return {
          kind: _kinds.Kind.NAME,
          value: token.value,
          loc: loc(lexer, token)
        };
      }
      function parseDocument2(lexer) {
        var start = lexer.token;
        expect(lexer, _lexer.TokenKind.SOF);
        var definitions = [];
        do {
          definitions.push(parseDefinition(lexer));
        } while (!skip(lexer, _lexer.TokenKind.EOF));
        return {
          kind: _kinds.Kind.DOCUMENT,
          definitions,
          loc: loc(lexer, start)
        };
      }
      function parseDefinition(lexer) {
        if (peek(lexer, _lexer.TokenKind.NAME)) {
          switch (lexer.token.value) {
            case "query":
            case "mutation":
            case "subscription":
            case "fragment":
              return parseExecutableDefinition(lexer);
            case "schema":
            case "scalar":
            case "type":
            case "interface":
            case "union":
            case "enum":
            case "input":
            case "extend":
            case "directive":
              return parseTypeSystemDefinition(lexer);
          }
        } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {
          return parseExecutableDefinition(lexer);
        } else if (peekDescription(lexer)) {
          return parseTypeSystemDefinition(lexer);
        }
        throw unexpected(lexer);
      }
      function parseExecutableDefinition(lexer) {
        if (peek(lexer, _lexer.TokenKind.NAME)) {
          switch (lexer.token.value) {
            case "query":
            case "mutation":
            case "subscription":
              return parseOperationDefinition(lexer);
            case "fragment":
              return parseFragmentDefinition(lexer);
          }
        } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {
          return parseOperationDefinition(lexer);
        }
        throw unexpected(lexer);
      }
      function parseOperationDefinition(lexer) {
        var start = lexer.token;
        if (peek(lexer, _lexer.TokenKind.BRACE_L)) {
          return {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: "query",
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: parseSelectionSet(lexer),
            loc: loc(lexer, start)
          };
        }
        var operation = parseOperationType(lexer);
        var name = void 0;
        if (peek(lexer, _lexer.TokenKind.NAME)) {
          name = parseName(lexer);
        }
        return {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: parseVariableDefinitions(lexer),
          directives: parseDirectives(lexer, false),
          selectionSet: parseSelectionSet(lexer),
          loc: loc(lexer, start)
        };
      }
      function parseOperationType(lexer) {
        var operationToken = expect(lexer, _lexer.TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return "query";
          case "mutation":
            return "mutation";
          case "subscription":
            return "subscription";
        }
        throw unexpected(lexer, operationToken);
      }
      function parseVariableDefinitions(lexer) {
        return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];
      }
      function parseVariableDefinition(lexer) {
        var start = lexer.token;
        return {
          kind: _kinds.Kind.VARIABLE_DEFINITION,
          variable: parseVariable(lexer),
          type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),
          defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : void 0,
          loc: loc(lexer, start)
        };
      }
      function parseVariable(lexer) {
        var start = lexer.token;
        expect(lexer, _lexer.TokenKind.DOLLAR);
        return {
          kind: _kinds.Kind.VARIABLE,
          name: parseName(lexer),
          loc: loc(lexer, start)
        };
      }
      function parseSelectionSet(lexer) {
        var start = lexer.token;
        return {
          kind: _kinds.Kind.SELECTION_SET,
          selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),
          loc: loc(lexer, start)
        };
      }
      function parseSelection(lexer) {
        return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);
      }
      function parseField(lexer) {
        var start = lexer.token;
        var nameOrAlias = parseName(lexer);
        var alias = void 0;
        var name = void 0;
        if (skip(lexer, _lexer.TokenKind.COLON)) {
          alias = nameOrAlias;
          name = parseName(lexer);
        } else {
          name = nameOrAlias;
        }
        return {
          kind: _kinds.Kind.FIELD,
          alias,
          name,
          arguments: parseArguments(lexer, false),
          directives: parseDirectives(lexer, false),
          selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : void 0,
          loc: loc(lexer, start)
        };
      }
      function parseArguments(lexer, isConst) {
        var item = isConst ? parseConstArgument : parseArgument;
        return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];
      }
      function parseArgument(lexer) {
        var start = lexer.token;
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: parseName(lexer),
          value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),
          loc: loc(lexer, start)
        };
      }
      function parseConstArgument(lexer) {
        var start = lexer.token;
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: parseName(lexer),
          value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),
          loc: loc(lexer, start)
        };
      }
      function parseFragment(lexer) {
        var start = lexer.token;
        expect(lexer, _lexer.TokenKind.SPREAD);
        if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== "on") {
          return {
            kind: _kinds.Kind.FRAGMENT_SPREAD,
            name: parseFragmentName(lexer),
            directives: parseDirectives(lexer, false),
            loc: loc(lexer, start)
          };
        }
        var typeCondition = void 0;
        if (lexer.token.value === "on") {
          lexer.advance();
          typeCondition = parseNamedType(lexer);
        }
        return {
          kind: _kinds.Kind.INLINE_FRAGMENT,
          typeCondition,
          directives: parseDirectives(lexer, false),
          selectionSet: parseSelectionSet(lexer),
          loc: loc(lexer, start)
        };
      }
      function parseFragmentDefinition(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "fragment");
        if (lexer.options.experimentalFragmentVariables) {
          return {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: parseFragmentName(lexer),
            variableDefinitions: parseVariableDefinitions(lexer),
            typeCondition: (expectKeyword(lexer, "on"), parseNamedType(lexer)),
            directives: parseDirectives(lexer, false),
            selectionSet: parseSelectionSet(lexer),
            loc: loc(lexer, start)
          };
        }
        return {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: parseFragmentName(lexer),
          typeCondition: (expectKeyword(lexer, "on"), parseNamedType(lexer)),
          directives: parseDirectives(lexer, false),
          selectionSet: parseSelectionSet(lexer),
          loc: loc(lexer, start)
        };
      }
      function parseFragmentName(lexer) {
        if (lexer.token.value === "on") {
          throw unexpected(lexer);
        }
        return parseName(lexer);
      }
      function parseValueLiteral(lexer, isConst) {
        var token = lexer.token;
        switch (token.kind) {
          case _lexer.TokenKind.BRACKET_L:
            return parseList(lexer, isConst);
          case _lexer.TokenKind.BRACE_L:
            return parseObject(lexer, isConst);
          case _lexer.TokenKind.INT:
            lexer.advance();
            return {
              kind: _kinds.Kind.INT,
              value: token.value,
              loc: loc(lexer, token)
            };
          case _lexer.TokenKind.FLOAT:
            lexer.advance();
            return {
              kind: _kinds.Kind.FLOAT,
              value: token.value,
              loc: loc(lexer, token)
            };
          case _lexer.TokenKind.STRING:
          case _lexer.TokenKind.BLOCK_STRING:
            return parseStringLiteral(lexer);
          case _lexer.TokenKind.NAME:
            if (token.value === "true" || token.value === "false") {
              lexer.advance();
              return {
                kind: _kinds.Kind.BOOLEAN,
                value: token.value === "true",
                loc: loc(lexer, token)
              };
            } else if (token.value === "null") {
              lexer.advance();
              return {
                kind: _kinds.Kind.NULL,
                loc: loc(lexer, token)
              };
            }
            lexer.advance();
            return {
              kind: _kinds.Kind.ENUM,
              value: token.value,
              loc: loc(lexer, token)
            };
          case _lexer.TokenKind.DOLLAR:
            if (!isConst) {
              return parseVariable(lexer);
            }
            break;
        }
        throw unexpected(lexer);
      }
      function parseStringLiteral(lexer) {
        var token = lexer.token;
        lexer.advance();
        return {
          kind: _kinds.Kind.STRING,
          value: token.value,
          block: token.kind === _lexer.TokenKind.BLOCK_STRING,
          loc: loc(lexer, token)
        };
      }
      function parseConstValue(lexer) {
        return parseValueLiteral(lexer, true);
      }
      function parseValueValue(lexer) {
        return parseValueLiteral(lexer, false);
      }
      function parseList(lexer, isConst) {
        var start = lexer.token;
        var item = isConst ? parseConstValue : parseValueValue;
        return {
          kind: _kinds.Kind.LIST,
          values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),
          loc: loc(lexer, start)
        };
      }
      function parseObject(lexer, isConst) {
        var start = lexer.token;
        expect(lexer, _lexer.TokenKind.BRACE_L);
        var fields = [];
        while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {
          fields.push(parseObjectField(lexer, isConst));
        }
        return {
          kind: _kinds.Kind.OBJECT,
          fields,
          loc: loc(lexer, start)
        };
      }
      function parseObjectField(lexer, isConst) {
        var start = lexer.token;
        return {
          kind: _kinds.Kind.OBJECT_FIELD,
          name: parseName(lexer),
          value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),
          loc: loc(lexer, start)
        };
      }
      function parseDirectives(lexer, isConst) {
        var directives = [];
        while (peek(lexer, _lexer.TokenKind.AT)) {
          directives.push(parseDirective(lexer, isConst));
        }
        return directives;
      }
      function parseDirective(lexer, isConst) {
        var start = lexer.token;
        expect(lexer, _lexer.TokenKind.AT);
        return {
          kind: _kinds.Kind.DIRECTIVE,
          name: parseName(lexer),
          arguments: parseArguments(lexer, isConst),
          loc: loc(lexer, start)
        };
      }
      function parseTypeReference(lexer) {
        var start = lexer.token;
        var type = void 0;
        if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {
          type = parseTypeReference(lexer);
          expect(lexer, _lexer.TokenKind.BRACKET_R);
          type = {
            kind: _kinds.Kind.LIST_TYPE,
            type,
            loc: loc(lexer, start)
          };
        } else {
          type = parseNamedType(lexer);
        }
        if (skip(lexer, _lexer.TokenKind.BANG)) {
          return {
            kind: _kinds.Kind.NON_NULL_TYPE,
            type,
            loc: loc(lexer, start)
          };
        }
        return type;
      }
      function parseNamedType(lexer) {
        var start = lexer.token;
        return {
          kind: _kinds.Kind.NAMED_TYPE,
          name: parseName(lexer),
          loc: loc(lexer, start)
        };
      }
      function parseTypeSystemDefinition(lexer) {
        var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;
        if (keywordToken.kind === _lexer.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return parseSchemaDefinition(lexer);
            case "scalar":
              return parseScalarTypeDefinition(lexer);
            case "type":
              return parseObjectTypeDefinition(lexer);
            case "interface":
              return parseInterfaceTypeDefinition(lexer);
            case "union":
              return parseUnionTypeDefinition(lexer);
            case "enum":
              return parseEnumTypeDefinition(lexer);
            case "input":
              return parseInputObjectTypeDefinition(lexer);
            case "extend":
              return parseTypeExtension(lexer);
            case "directive":
              return parseDirectiveDefinition(lexer);
          }
        }
        throw unexpected(lexer, keywordToken);
      }
      function peekDescription(lexer) {
        return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);
      }
      function parseDescription(lexer) {
        if (peekDescription(lexer)) {
          return parseStringLiteral(lexer);
        }
      }
      function parseSchemaDefinition(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "schema");
        var directives = parseDirectives(lexer, true);
        var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);
        return {
          kind: _kinds.Kind.SCHEMA_DEFINITION,
          directives,
          operationTypes,
          loc: loc(lexer, start)
        };
      }
      function parseOperationTypeDefinition(lexer) {
        var start = lexer.token;
        var operation = parseOperationType(lexer);
        expect(lexer, _lexer.TokenKind.COLON);
        var type = parseNamedType(lexer);
        return {
          kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type,
          loc: loc(lexer, start)
        };
      }
      function parseScalarTypeDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        expectKeyword(lexer, "scalar");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        return {
          kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives,
          loc: loc(lexer, start)
        };
      }
      function parseObjectTypeDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        expectKeyword(lexer, "type");
        var name = parseName(lexer);
        var interfaces = parseImplementsInterfaces(lexer);
        var directives = parseDirectives(lexer, true);
        var fields = parseFieldsDefinition(lexer);
        return {
          kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields,
          loc: loc(lexer, start)
        };
      }
      function parseImplementsInterfaces(lexer) {
        var types = [];
        if (lexer.token.value === "implements") {
          lexer.advance();
          skip(lexer, _lexer.TokenKind.AMP);
          do {
            types.push(parseNamedType(lexer));
          } while (skip(lexer, _lexer.TokenKind.AMP) || lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));
        }
        return types;
      }
      function parseFieldsDefinition(lexer) {
        if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {
          lexer.advance();
          lexer.advance();
          return [];
        }
        return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];
      }
      function parseFieldDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        var name = parseName(lexer);
        var args = parseArgumentDefs(lexer);
        expect(lexer, _lexer.TokenKind.COLON);
        var type = parseTypeReference(lexer);
        var directives = parseDirectives(lexer, true);
        return {
          kind: _kinds.Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives,
          loc: loc(lexer, start)
        };
      }
      function parseArgumentDefs(lexer) {
        if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {
          return [];
        }
        return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);
      }
      function parseInputValueDef(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        var name = parseName(lexer);
        expect(lexer, _lexer.TokenKind.COLON);
        var type = parseTypeReference(lexer);
        var defaultValue = void 0;
        if (skip(lexer, _lexer.TokenKind.EQUALS)) {
          defaultValue = parseConstValue(lexer);
        }
        var directives = parseDirectives(lexer, true);
        return {
          kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives,
          loc: loc(lexer, start)
        };
      }
      function parseInterfaceTypeDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        expectKeyword(lexer, "interface");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var fields = parseFieldsDefinition(lexer);
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields,
          loc: loc(lexer, start)
        };
      }
      function parseUnionTypeDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        expectKeyword(lexer, "union");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var types = parseUnionMemberTypes(lexer);
        return {
          kind: _kinds.Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types,
          loc: loc(lexer, start)
        };
      }
      function parseUnionMemberTypes(lexer) {
        var types = [];
        if (skip(lexer, _lexer.TokenKind.EQUALS)) {
          skip(lexer, _lexer.TokenKind.PIPE);
          do {
            types.push(parseNamedType(lexer));
          } while (skip(lexer, _lexer.TokenKind.PIPE));
        }
        return types;
      }
      function parseEnumTypeDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        expectKeyword(lexer, "enum");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var values = parseEnumValuesDefinition(lexer);
        return {
          kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values,
          loc: loc(lexer, start)
        };
      }
      function parseEnumValuesDefinition(lexer) {
        return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];
      }
      function parseEnumValueDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        return {
          kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives,
          loc: loc(lexer, start)
        };
      }
      function parseInputObjectTypeDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        expectKeyword(lexer, "input");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var fields = parseInputFieldsDefinition(lexer);
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields,
          loc: loc(lexer, start)
        };
      }
      function parseInputFieldsDefinition(lexer) {
        return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];
      }
      function parseTypeExtension(lexer) {
        var keywordToken = lexer.lookahead();
        if (keywordToken.kind === _lexer.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "scalar":
              return parseScalarTypeExtension(lexer);
            case "type":
              return parseObjectTypeExtension(lexer);
            case "interface":
              return parseInterfaceTypeExtension(lexer);
            case "union":
              return parseUnionTypeExtension(lexer);
            case "enum":
              return parseEnumTypeExtension(lexer);
            case "input":
              return parseInputObjectTypeExtension(lexer);
          }
        }
        throw unexpected(lexer, keywordToken);
      }
      function parseScalarTypeExtension(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "extend");
        expectKeyword(lexer, "scalar");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        if (directives.length === 0) {
          throw unexpected(lexer);
        }
        return {
          kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives,
          loc: loc(lexer, start)
        };
      }
      function parseObjectTypeExtension(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "extend");
        expectKeyword(lexer, "type");
        var name = parseName(lexer);
        var interfaces = parseImplementsInterfaces(lexer);
        var directives = parseDirectives(lexer, true);
        var fields = parseFieldsDefinition(lexer);
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw unexpected(lexer);
        }
        return {
          kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields,
          loc: loc(lexer, start)
        };
      }
      function parseInterfaceTypeExtension(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "extend");
        expectKeyword(lexer, "interface");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var fields = parseFieldsDefinition(lexer);
        if (directives.length === 0 && fields.length === 0) {
          throw unexpected(lexer);
        }
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          name,
          directives,
          fields,
          loc: loc(lexer, start)
        };
      }
      function parseUnionTypeExtension(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "extend");
        expectKeyword(lexer, "union");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var types = parseUnionMemberTypes(lexer);
        if (directives.length === 0 && types.length === 0) {
          throw unexpected(lexer);
        }
        return {
          kind: _kinds.Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types,
          loc: loc(lexer, start)
        };
      }
      function parseEnumTypeExtension(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "extend");
        expectKeyword(lexer, "enum");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var values = parseEnumValuesDefinition(lexer);
        if (directives.length === 0 && values.length === 0) {
          throw unexpected(lexer);
        }
        return {
          kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values,
          loc: loc(lexer, start)
        };
      }
      function parseInputObjectTypeExtension(lexer) {
        var start = lexer.token;
        expectKeyword(lexer, "extend");
        expectKeyword(lexer, "input");
        var name = parseName(lexer);
        var directives = parseDirectives(lexer, true);
        var fields = parseInputFieldsDefinition(lexer);
        if (directives.length === 0 && fields.length === 0) {
          throw unexpected(lexer);
        }
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields,
          loc: loc(lexer, start)
        };
      }
      function parseDirectiveDefinition(lexer) {
        var start = lexer.token;
        var description = parseDescription(lexer);
        expectKeyword(lexer, "directive");
        expect(lexer, _lexer.TokenKind.AT);
        var name = parseName(lexer);
        var args = parseArgumentDefs(lexer);
        expectKeyword(lexer, "on");
        var locations = parseDirectiveLocations(lexer);
        return {
          kind: _kinds.Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          locations,
          loc: loc(lexer, start)
        };
      }
      function parseDirectiveLocations(lexer) {
        skip(lexer, _lexer.TokenKind.PIPE);
        var locations = [];
        do {
          locations.push(parseDirectiveLocation(lexer));
        } while (skip(lexer, _lexer.TokenKind.PIPE));
        return locations;
      }
      function parseDirectiveLocation(lexer) {
        var start = lexer.token;
        var name = parseName(lexer);
        if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {
          return name;
        }
        throw unexpected(lexer, start);
      }
      function loc(lexer, startToken) {
        if (!lexer.options.noLocation) {
          return new Loc(startToken, lexer.lastToken, lexer.source);
        }
      }
      function Loc(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      Loc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {
        return { start: this.start, end: this.end };
      };
      function peek(lexer, kind) {
        return lexer.token.kind === kind;
      }
      function skip(lexer, kind) {
        var match = lexer.token.kind === kind;
        if (match) {
          lexer.advance();
        }
        return match;
      }
      function expect(lexer, kind) {
        var token = lexer.token;
        if (token.kind === kind) {
          lexer.advance();
          return token;
        }
        throw (0, _error.syntaxError)(lexer.source, token.start, "Expected " + kind + ", found " + (0, _lexer.getTokenDesc)(token));
      }
      function expectKeyword(lexer, value) {
        var token = lexer.token;
        if (token.kind === _lexer.TokenKind.NAME && token.value === value) {
          lexer.advance();
          return token;
        }
        throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected "' + value + '", found ' + (0, _lexer.getTokenDesc)(token));
      }
      function unexpected(lexer, atToken) {
        var token = atToken || lexer.token;
        return (0, _error.syntaxError)(lexer.source, token.start, "Unexpected " + (0, _lexer.getTokenDesc)(token));
      }
      function any(lexer, openKind, parseFn, closeKind) {
        expect(lexer, openKind);
        var nodes = [];
        while (!skip(lexer, closeKind)) {
          nodes.push(parseFn(lexer));
        }
        return nodes;
      }
      function many(lexer, openKind, parseFn, closeKind) {
        expect(lexer, openKind);
        var nodes = [parseFn(lexer)];
        while (!skip(lexer, closeKind)) {
          nodes.push(parseFn(lexer));
        }
        return nodes;
      }
    }
  });

  // node_modules/graphql/utilities/typeFromAST.js
  var require_typeFromAST = __commonJS({
    "node_modules/graphql/utilities/typeFromAST.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.typeFromAST = typeFromAST2;
      var _kinds = require_kinds();
      var _definition = require_definition();
      function typeFromAST2(schema, typeNode) {
        var innerType = void 0;
        if (typeNode.kind === _kinds.Kind.LIST_TYPE) {
          innerType = typeFromAST2(schema, typeNode.type);
          return innerType && (0, _definition.GraphQLList)(innerType);
        }
        if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
          innerType = typeFromAST2(schema, typeNode.type);
          return innerType && (0, _definition.GraphQLNonNull)(innerType);
        }
        if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {
          return schema.getType(typeNode.name.value);
        }
        throw new Error("Unexpected type kind: " + typeNode.kind + ".");
      }
    }
  });

  // node_modules/graphql/utilities/TypeInfo.js
  var require_TypeInfo = __commonJS({
    "node_modules/graphql/utilities/TypeInfo.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.TypeInfo = void 0;
      var _kinds = require_kinds();
      var _definition = require_definition();
      var _introspection = require_introspection();
      var _typeFromAST = require_typeFromAST();
      var _find = require_find();
      var _find2 = _interopRequireDefault(_find);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var TypeInfo2 = exports2.TypeInfo = function() {
        function TypeInfo3(schema, getFieldDefFn, initialType) {
          _classCallCheck(this, TypeInfo3);
          this._schema = schema;
          this._typeStack = [];
          this._parentTypeStack = [];
          this._inputTypeStack = [];
          this._fieldDefStack = [];
          this._directive = null;
          this._argument = null;
          this._enumValue = null;
          this._getFieldDef = getFieldDefFn || getFieldDef;
          if (initialType) {
            if ((0, _definition.isInputType)(initialType)) {
              this._inputTypeStack.push(initialType);
            }
            if ((0, _definition.isCompositeType)(initialType)) {
              this._parentTypeStack.push(initialType);
            }
            if ((0, _definition.isOutputType)(initialType)) {
              this._typeStack.push(initialType);
            }
          }
        }
        TypeInfo3.prototype.getType = function getType() {
          if (this._typeStack.length > 0) {
            return this._typeStack[this._typeStack.length - 1];
          }
        };
        TypeInfo3.prototype.getParentType = function getParentType() {
          if (this._parentTypeStack.length > 0) {
            return this._parentTypeStack[this._parentTypeStack.length - 1];
          }
        };
        TypeInfo3.prototype.getInputType = function getInputType() {
          if (this._inputTypeStack.length > 0) {
            return this._inputTypeStack[this._inputTypeStack.length - 1];
          }
        };
        TypeInfo3.prototype.getParentInputType = function getParentInputType() {
          if (this._inputTypeStack.length > 1) {
            return this._inputTypeStack[this._inputTypeStack.length - 2];
          }
        };
        TypeInfo3.prototype.getFieldDef = function getFieldDef2() {
          if (this._fieldDefStack.length > 0) {
            return this._fieldDefStack[this._fieldDefStack.length - 1];
          }
        };
        TypeInfo3.prototype.getDirective = function getDirective() {
          return this._directive;
        };
        TypeInfo3.prototype.getArgument = function getArgument() {
          return this._argument;
        };
        TypeInfo3.prototype.getEnumValue = function getEnumValue() {
          return this._enumValue;
        };
        TypeInfo3.prototype.enter = function enter(node) {
          var schema = this._schema;
          switch (node.kind) {
            case _kinds.Kind.SELECTION_SET:
              var namedType = (0, _definition.getNamedType)(this.getType());
              this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : void 0);
              break;
            case _kinds.Kind.FIELD:
              var parentType = this.getParentType();
              var fieldDef = void 0;
              var fieldType = void 0;
              if (parentType) {
                fieldDef = this._getFieldDef(schema, parentType, node);
                if (fieldDef) {
                  fieldType = fieldDef.type;
                }
              }
              this._fieldDefStack.push(fieldDef);
              this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : void 0);
              break;
            case _kinds.Kind.DIRECTIVE:
              this._directive = schema.getDirective(node.name.value);
              break;
            case _kinds.Kind.OPERATION_DEFINITION:
              var type = void 0;
              if (node.operation === "query") {
                type = schema.getQueryType();
              } else if (node.operation === "mutation") {
                type = schema.getMutationType();
              } else if (node.operation === "subscription") {
                type = schema.getSubscriptionType();
              }
              this._typeStack.push((0, _definition.isObjectType)(type) ? type : void 0);
              break;
            case _kinds.Kind.INLINE_FRAGMENT:
            case _kinds.Kind.FRAGMENT_DEFINITION:
              var typeConditionAST = node.typeCondition;
              var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
              this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : void 0);
              break;
            case _kinds.Kind.VARIABLE_DEFINITION:
              var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);
              this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : void 0);
              break;
            case _kinds.Kind.ARGUMENT:
              var argDef = void 0;
              var argType = void 0;
              var fieldOrDirective = this.getDirective() || this.getFieldDef();
              if (fieldOrDirective) {
                argDef = (0, _find2.default)(fieldOrDirective.args, function(arg) {
                  return arg.name === node.name.value;
                });
                if (argDef) {
                  argType = argDef.type;
                }
              }
              this._argument = argDef;
              this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : void 0);
              break;
            case _kinds.Kind.LIST:
              var listType = (0, _definition.getNullableType)(this.getInputType());
              var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType;
              this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : void 0);
              break;
            case _kinds.Kind.OBJECT_FIELD:
              var objectType = (0, _definition.getNamedType)(this.getInputType());
              var inputFieldType = void 0;
              if ((0, _definition.isInputObjectType)(objectType)) {
                var inputField = objectType.getFields()[node.name.value];
                if (inputField) {
                  inputFieldType = inputField.type;
                }
              }
              this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : void 0);
              break;
            case _kinds.Kind.ENUM:
              var enumType = (0, _definition.getNamedType)(this.getInputType());
              var enumValue = void 0;
              if ((0, _definition.isEnumType)(enumType)) {
                enumValue = enumType.getValue(node.value);
              }
              this._enumValue = enumValue;
              break;
          }
        };
        TypeInfo3.prototype.leave = function leave(node) {
          switch (node.kind) {
            case _kinds.Kind.SELECTION_SET:
              this._parentTypeStack.pop();
              break;
            case _kinds.Kind.FIELD:
              this._fieldDefStack.pop();
              this._typeStack.pop();
              break;
            case _kinds.Kind.DIRECTIVE:
              this._directive = null;
              break;
            case _kinds.Kind.OPERATION_DEFINITION:
            case _kinds.Kind.INLINE_FRAGMENT:
            case _kinds.Kind.FRAGMENT_DEFINITION:
              this._typeStack.pop();
              break;
            case _kinds.Kind.VARIABLE_DEFINITION:
              this._inputTypeStack.pop();
              break;
            case _kinds.Kind.ARGUMENT:
              this._argument = null;
              this._inputTypeStack.pop();
              break;
            case _kinds.Kind.LIST:
            case _kinds.Kind.OBJECT_FIELD:
              this._inputTypeStack.pop();
              break;
            case _kinds.Kind.ENUM:
              this._enumValue = null;
              break;
          }
        };
        return TypeInfo3;
      }();
      function getFieldDef(schema, parentType, fieldNode) {
        var name = fieldNode.name.value;
        if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
          return _introspection.SchemaMetaFieldDef;
        }
        if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
          return _introspection.TypeMetaFieldDef;
        }
        if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
          return _introspection.TypeNameMetaFieldDef;
        }
        if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
          return parentType.getFields()[name];
        }
      }
    }
  });

  // node_modules/graphql/validation/rules/ExecutableDefinitions.js
  var require_ExecutableDefinitions = __commonJS({
    "node_modules/graphql/validation/rules/ExecutableDefinitions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.nonExecutableDefinitionMessage = nonExecutableDefinitionMessage;
      exports2.ExecutableDefinitions = ExecutableDefinitions;
      var _error = require_error();
      var _kinds = require_kinds();
      function nonExecutableDefinitionMessage(defName) {
        return "The " + defName + " definition is not executable.";
      }
      function ExecutableDefinitions(context) {
        return {
          Document: function Document(node) {
            node.definitions.forEach(function(definition) {
              if (definition.kind !== _kinds.Kind.OPERATION_DEFINITION && definition.kind !== _kinds.Kind.FRAGMENT_DEFINITION) {
                context.reportError(new _error.GraphQLError(nonExecutableDefinitionMessage(definition.kind === _kinds.Kind.SCHEMA_DEFINITION ? "schema" : definition.name.value), [definition]));
              }
            });
            return false;
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/UniqueOperationNames.js
  var require_UniqueOperationNames = __commonJS({
    "node_modules/graphql/validation/rules/UniqueOperationNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.duplicateOperationNameMessage = duplicateOperationNameMessage;
      exports2.UniqueOperationNames = UniqueOperationNames;
      var _error = require_error();
      function duplicateOperationNameMessage(operationName) {
        return 'There can be only one operation named "' + operationName + '".';
      }
      function UniqueOperationNames(context) {
        var knownOperationNames = /* @__PURE__ */ Object.create(null);
        return {
          OperationDefinition: function OperationDefinition(node) {
            var operationName = node.name;
            if (operationName) {
              if (knownOperationNames[operationName.value]) {
                context.reportError(new _error.GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));
              } else {
                knownOperationNames[operationName.value] = operationName;
              }
            }
            return false;
          },
          FragmentDefinition: function FragmentDefinition() {
            return false;
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/LoneAnonymousOperation.js
  var require_LoneAnonymousOperation = __commonJS({
    "node_modules/graphql/validation/rules/LoneAnonymousOperation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.anonOperationNotAloneMessage = anonOperationNotAloneMessage;
      exports2.LoneAnonymousOperation = LoneAnonymousOperation;
      var _error = require_error();
      var _kinds = require_kinds();
      function anonOperationNotAloneMessage() {
        return "This anonymous operation must be the only defined operation.";
      }
      function LoneAnonymousOperation(context) {
        var operationCount = 0;
        return {
          Document: function Document(node) {
            operationCount = node.definitions.filter(function(definition) {
              return definition.kind === _kinds.Kind.OPERATION_DEFINITION;
            }).length;
          },
          OperationDefinition: function OperationDefinition(node) {
            if (!node.name && operationCount > 1) {
              context.reportError(new _error.GraphQLError(anonOperationNotAloneMessage(), [node]));
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/SingleFieldSubscriptions.js
  var require_SingleFieldSubscriptions = __commonJS({
    "node_modules/graphql/validation/rules/SingleFieldSubscriptions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.singleFieldOnlyMessage = singleFieldOnlyMessage;
      exports2.SingleFieldSubscriptions = SingleFieldSubscriptions;
      var _error = require_error();
      function singleFieldOnlyMessage(name) {
        return (name ? 'Subscription "' + name + '" ' : "Anonymous Subscription ") + "must select only one top level field.";
      }
      function SingleFieldSubscriptions(context) {
        return {
          OperationDefinition: function OperationDefinition(node) {
            if (node.operation === "subscription") {
              if (node.selectionSet.selections.length !== 1) {
                context.reportError(new _error.GraphQLError(singleFieldOnlyMessage(node.name && node.name.value), node.selectionSet.selections.slice(1)));
              }
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/jsutils/suggestionList.js
  var require_suggestionList = __commonJS({
    "node_modules/graphql/jsutils/suggestionList.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = suggestionList;
      function suggestionList(input, options) {
        var optionsByDistance = /* @__PURE__ */ Object.create(null);
        var oLength = options.length;
        var inputThreshold = input.length / 2;
        for (var i = 0; i < oLength; i++) {
          var distance = lexicalDistance(input, options[i]);
          var threshold = Math.max(inputThreshold, options[i].length / 2, 1);
          if (distance <= threshold) {
            optionsByDistance[options[i]] = distance;
          }
        }
        return Object.keys(optionsByDistance).sort(function(a, b) {
          return optionsByDistance[a] - optionsByDistance[b];
        });
      }
      function lexicalDistance(aStr, bStr) {
        if (aStr === bStr) {
          return 0;
        }
        var i = void 0;
        var j = void 0;
        var d = [];
        var a = aStr.toLowerCase();
        var b = bStr.toLowerCase();
        var aLength = a.length;
        var bLength = b.length;
        if (a === b) {
          return 1;
        }
        for (i = 0; i <= aLength; i++) {
          d[i] = [i];
        }
        for (j = 1; j <= bLength; j++) {
          d[0][j] = j;
        }
        for (i = 1; i <= aLength; i++) {
          for (j = 1; j <= bLength; j++) {
            var cost = a[i - 1] === b[j - 1] ? 0 : 1;
            d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);
            if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
              d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
            }
          }
        }
        return d[aLength][bLength];
      }
    }
  });

  // node_modules/graphql/jsutils/orList.js
  var require_orList = __commonJS({
    "node_modules/graphql/jsutils/orList.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = orList;
      var MAX_LENGTH = 5;
      function orList(items) {
        var selected = items.slice(0, MAX_LENGTH);
        return selected.reduce(function(list, quoted, index) {
          return list + (selected.length > 2 ? ", " : " ") + (index === selected.length - 1 ? "or " : "") + quoted;
        });
      }
    }
  });

  // node_modules/graphql/jsutils/quotedOrList.js
  var require_quotedOrList = __commonJS({
    "node_modules/graphql/jsutils/quotedOrList.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = quotedOrList;
      var _orList = require_orList();
      var _orList2 = _interopRequireDefault(_orList);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function quotedOrList(items) {
        return (0, _orList2.default)(items.map(function(item) {
          return '"' + item + '"';
        }));
      }
    }
  });

  // node_modules/graphql/validation/rules/KnownTypeNames.js
  var require_KnownTypeNames = __commonJS({
    "node_modules/graphql/validation/rules/KnownTypeNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.unknownTypeMessage = unknownTypeMessage;
      exports2.KnownTypeNames = KnownTypeNames;
      var _error = require_error();
      var _suggestionList = require_suggestionList();
      var _suggestionList2 = _interopRequireDefault(_suggestionList);
      var _quotedOrList = require_quotedOrList();
      var _quotedOrList2 = _interopRequireDefault(_quotedOrList);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function unknownTypeMessage(typeName, suggestedTypes) {
        var message = 'Unknown type "' + typeName + '".';
        if (suggestedTypes.length) {
          message += " Did you mean " + (0, _quotedOrList2.default)(suggestedTypes) + "?";
        }
        return message;
      }
      function KnownTypeNames(context) {
        return {
          ObjectTypeDefinition: function ObjectTypeDefinition() {
            return false;
          },
          InterfaceTypeDefinition: function InterfaceTypeDefinition() {
            return false;
          },
          UnionTypeDefinition: function UnionTypeDefinition() {
            return false;
          },
          InputObjectTypeDefinition: function InputObjectTypeDefinition() {
            return false;
          },
          NamedType: function NamedType(node) {
            var schema = context.getSchema();
            var typeName = node.name.value;
            var type = schema.getType(typeName);
            if (!type) {
              context.reportError(new _error.GraphQLError(unknownTypeMessage(typeName, (0, _suggestionList2.default)(typeName, Object.keys(schema.getTypeMap()))), [node]));
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js
  var require_FragmentsOnCompositeTypes = __commonJS({
    "node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;
      exports2.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;
      exports2.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;
      var _error = require_error();
      var _printer = require_printer();
      var _definition = require_definition();
      var _typeFromAST = require_typeFromAST();
      function inlineFragmentOnNonCompositeErrorMessage(type) {
        return 'Fragment cannot condition on non composite type "' + String(type) + '".';
      }
      function fragmentOnNonCompositeErrorMessage(fragName, type) {
        return 'Fragment "' + fragName + '" cannot condition on non composite ' + ('type "' + String(type) + '".');
      }
      function FragmentsOnCompositeTypes(context) {
        return {
          InlineFragment: function InlineFragment(node) {
            var typeCondition = node.typeCondition;
            if (typeCondition) {
              var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);
              if (type && !(0, _definition.isCompositeType)(type)) {
                context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(typeCondition)), [typeCondition]));
              }
            }
          },
          FragmentDefinition: function FragmentDefinition(node) {
            var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);
            if (type && !(0, _definition.isCompositeType)(type)) {
              context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/VariablesAreInputTypes.js
  var require_VariablesAreInputTypes = __commonJS({
    "node_modules/graphql/validation/rules/VariablesAreInputTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;
      exports2.VariablesAreInputTypes = VariablesAreInputTypes;
      var _error = require_error();
      var _printer = require_printer();
      var _definition = require_definition();
      var _typeFromAST = require_typeFromAST();
      function nonInputTypeOnVarMessage(variableName, typeName) {
        return 'Variable "$' + variableName + '" cannot be non-input type "' + typeName + '".';
      }
      function VariablesAreInputTypes(context) {
        return {
          VariableDefinition: function VariableDefinition(node) {
            var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);
            if (type && !(0, _definition.isInputType)(type)) {
              var variableName = node.variable.name.value;
              context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/ScalarLeafs.js
  var require_ScalarLeafs = __commonJS({
    "node_modules/graphql/validation/rules/ScalarLeafs.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.noSubselectionAllowedMessage = noSubselectionAllowedMessage;
      exports2.requiredSubselectionMessage = requiredSubselectionMessage;
      exports2.ScalarLeafs = ScalarLeafs;
      var _error = require_error();
      var _definition = require_definition();
      function noSubselectionAllowedMessage(fieldName, type) {
        return 'Field "' + fieldName + '" must not have a selection since ' + ('type "' + String(type) + '" has no subfields.');
      }
      function requiredSubselectionMessage(fieldName, type) {
        return 'Field "' + fieldName + '" of type "' + String(type) + '" must have a ' + ('selection of subfields. Did you mean "' + fieldName + ' { ... }"?');
      }
      function ScalarLeafs(context) {
        return {
          Field: function Field(node) {
            var type = context.getType();
            var selectionSet = node.selectionSet;
            if (type) {
              if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
                if (selectionSet) {
                  context.reportError(new _error.GraphQLError(noSubselectionAllowedMessage(node.name.value, type), [selectionSet]));
                }
              } else if (!selectionSet) {
                context.reportError(new _error.GraphQLError(requiredSubselectionMessage(node.name.value, type), [node]));
              }
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/FieldsOnCorrectType.js
  var require_FieldsOnCorrectType = __commonJS({
    "node_modules/graphql/validation/rules/FieldsOnCorrectType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.undefinedFieldMessage = undefinedFieldMessage;
      exports2.FieldsOnCorrectType = FieldsOnCorrectType;
      var _error = require_error();
      var _suggestionList = require_suggestionList();
      var _suggestionList2 = _interopRequireDefault(_suggestionList);
      var _quotedOrList = require_quotedOrList();
      var _quotedOrList2 = _interopRequireDefault(_quotedOrList);
      var _definition = require_definition();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {
        var message = 'Cannot query field "' + fieldName + '" on type "' + type + '".';
        if (suggestedTypeNames.length !== 0) {
          var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);
          message += " Did you mean to use an inline fragment on " + suggestions + "?";
        } else if (suggestedFieldNames.length !== 0) {
          message += " Did you mean " + (0, _quotedOrList2.default)(suggestedFieldNames) + "?";
        }
        return message;
      }
      function FieldsOnCorrectType(context) {
        return {
          Field: function Field(node) {
            var type = context.getParentType();
            if (type) {
              var fieldDef = context.getFieldDef();
              if (!fieldDef) {
                var schema = context.getSchema();
                var fieldName = node.name.value;
                var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);
                var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);
                context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));
              }
            }
          }
        };
      }
      function getSuggestedTypeNames(schema, type, fieldName) {
        if ((0, _definition.isAbstractType)(type)) {
          var suggestedObjectTypes = [];
          var interfaceUsageCount = /* @__PURE__ */ Object.create(null);
          schema.getPossibleTypes(type).forEach(function(possibleType) {
            if (!possibleType.getFields()[fieldName]) {
              return;
            }
            suggestedObjectTypes.push(possibleType.name);
            possibleType.getInterfaces().forEach(function(possibleInterface) {
              if (!possibleInterface.getFields()[fieldName]) {
                return;
              }
              interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;
            });
          });
          var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function(a, b) {
            return interfaceUsageCount[b] - interfaceUsageCount[a];
          });
          return suggestedInterfaceTypes.concat(suggestedObjectTypes);
        }
        return [];
      }
      function getSuggestedFieldNames(schema, type, fieldName) {
        if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
          var possibleFieldNames = Object.keys(type.getFields());
          return (0, _suggestionList2.default)(fieldName, possibleFieldNames);
        }
        return [];
      }
    }
  });

  // node_modules/graphql/validation/rules/UniqueFragmentNames.js
  var require_UniqueFragmentNames = __commonJS({
    "node_modules/graphql/validation/rules/UniqueFragmentNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.duplicateFragmentNameMessage = duplicateFragmentNameMessage;
      exports2.UniqueFragmentNames = UniqueFragmentNames;
      var _error = require_error();
      function duplicateFragmentNameMessage(fragName) {
        return 'There can be only one fragment named "' + fragName + '".';
      }
      function UniqueFragmentNames(context) {
        var knownFragmentNames = /* @__PURE__ */ Object.create(null);
        return {
          OperationDefinition: function OperationDefinition() {
            return false;
          },
          FragmentDefinition: function FragmentDefinition(node) {
            var fragmentName = node.name.value;
            if (knownFragmentNames[fragmentName]) {
              context.reportError(new _error.GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));
            } else {
              knownFragmentNames[fragmentName] = node.name;
            }
            return false;
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/KnownFragmentNames.js
  var require_KnownFragmentNames = __commonJS({
    "node_modules/graphql/validation/rules/KnownFragmentNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.unknownFragmentMessage = unknownFragmentMessage;
      exports2.KnownFragmentNames = KnownFragmentNames;
      var _error = require_error();
      function unknownFragmentMessage(fragName) {
        return 'Unknown fragment "' + fragName + '".';
      }
      function KnownFragmentNames(context) {
        return {
          FragmentSpread: function FragmentSpread(node) {
            var fragmentName = node.name.value;
            var fragment = context.getFragment(fragmentName);
            if (!fragment) {
              context.reportError(new _error.GraphQLError(unknownFragmentMessage(fragmentName), [node.name]));
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/NoUnusedFragments.js
  var require_NoUnusedFragments = __commonJS({
    "node_modules/graphql/validation/rules/NoUnusedFragments.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.unusedFragMessage = unusedFragMessage;
      exports2.NoUnusedFragments = NoUnusedFragments;
      var _error = require_error();
      function unusedFragMessage(fragName) {
        return 'Fragment "' + fragName + '" is never used.';
      }
      function NoUnusedFragments(context) {
        var operationDefs = [];
        var fragmentDefs = [];
        return {
          OperationDefinition: function OperationDefinition(node) {
            operationDefs.push(node);
            return false;
          },
          FragmentDefinition: function FragmentDefinition(node) {
            fragmentDefs.push(node);
            return false;
          },
          Document: {
            leave: function leave() {
              var fragmentNameUsed = /* @__PURE__ */ Object.create(null);
              operationDefs.forEach(function(operation) {
                context.getRecursivelyReferencedFragments(operation).forEach(function(fragment) {
                  fragmentNameUsed[fragment.name.value] = true;
                });
              });
              fragmentDefs.forEach(function(fragmentDef) {
                var fragName = fragmentDef.name.value;
                if (fragmentNameUsed[fragName] !== true) {
                  context.reportError(new _error.GraphQLError(unusedFragMessage(fragName), [fragmentDef]));
                }
              });
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/PossibleFragmentSpreads.js
  var require_PossibleFragmentSpreads = __commonJS({
    "node_modules/graphql/validation/rules/PossibleFragmentSpreads.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.typeIncompatibleSpreadMessage = typeIncompatibleSpreadMessage;
      exports2.typeIncompatibleAnonSpreadMessage = typeIncompatibleAnonSpreadMessage;
      exports2.PossibleFragmentSpreads = PossibleFragmentSpreads;
      var _error = require_error();
      var _typeComparators = require_typeComparators();
      var _typeFromAST = require_typeFromAST();
      var _definition = require_definition();
      function typeIncompatibleSpreadMessage(fragName, parentType, fragType) {
        return 'Fragment "' + fragName + '" cannot be spread here as objects of ' + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
      }
      function typeIncompatibleAnonSpreadMessage(parentType, fragType) {
        return "Fragment cannot be spread here as objects of " + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
      }
      function PossibleFragmentSpreads(context) {
        return {
          InlineFragment: function InlineFragment(node) {
            var fragType = context.getType();
            var parentType = context.getParentType();
            if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
              context.reportError(new _error.GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));
            }
          },
          FragmentSpread: function FragmentSpread(node) {
            var fragName = node.name.value;
            var fragType = getFragmentType(context, fragName);
            var parentType = context.getParentType();
            if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
              context.reportError(new _error.GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));
            }
          }
        };
      }
      function getFragmentType(context, name) {
        var frag = context.getFragment(name);
        if (frag) {
          var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);
          if ((0, _definition.isCompositeType)(type)) {
            return type;
          }
        }
      }
    }
  });

  // node_modules/graphql/validation/rules/NoFragmentCycles.js
  var require_NoFragmentCycles = __commonJS({
    "node_modules/graphql/validation/rules/NoFragmentCycles.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.cycleErrorMessage = cycleErrorMessage;
      exports2.NoFragmentCycles = NoFragmentCycles;
      var _error = require_error();
      function cycleErrorMessage(fragName, spreadNames) {
        var via = spreadNames.length ? " via " + spreadNames.join(", ") : "";
        return 'Cannot spread fragment "' + fragName + '" within itself' + via + ".";
      }
      function NoFragmentCycles(context) {
        var visitedFrags = /* @__PURE__ */ Object.create(null);
        var spreadPath = [];
        var spreadPathIndexByName = /* @__PURE__ */ Object.create(null);
        return {
          OperationDefinition: function OperationDefinition() {
            return false;
          },
          FragmentDefinition: function FragmentDefinition(node) {
            if (!visitedFrags[node.name.value]) {
              detectCycleRecursive(node);
            }
            return false;
          }
        };
        function detectCycleRecursive(fragment) {
          var fragmentName = fragment.name.value;
          visitedFrags[fragmentName] = true;
          var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
          if (spreadNodes.length === 0) {
            return;
          }
          spreadPathIndexByName[fragmentName] = spreadPath.length;
          for (var i = 0; i < spreadNodes.length; i++) {
            var spreadNode = spreadNodes[i];
            var spreadName = spreadNode.name.value;
            var cycleIndex = spreadPathIndexByName[spreadName];
            if (cycleIndex === void 0) {
              spreadPath.push(spreadNode);
              if (!visitedFrags[spreadName]) {
                var spreadFragment = context.getFragment(spreadName);
                if (spreadFragment) {
                  detectCycleRecursive(spreadFragment);
                }
              }
              spreadPath.pop();
            } else {
              var cyclePath = spreadPath.slice(cycleIndex);
              context.reportError(new _error.GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function(s) {
                return s.name.value;
              })), cyclePath.concat(spreadNode)));
            }
          }
          spreadPathIndexByName[fragmentName] = void 0;
        }
      }
    }
  });

  // node_modules/graphql/validation/rules/UniqueVariableNames.js
  var require_UniqueVariableNames = __commonJS({
    "node_modules/graphql/validation/rules/UniqueVariableNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.duplicateVariableMessage = duplicateVariableMessage;
      exports2.UniqueVariableNames = UniqueVariableNames;
      var _error = require_error();
      function duplicateVariableMessage(variableName) {
        return 'There can be only one variable named "' + variableName + '".';
      }
      function UniqueVariableNames(context) {
        var knownVariableNames = /* @__PURE__ */ Object.create(null);
        return {
          OperationDefinition: function OperationDefinition() {
            knownVariableNames = /* @__PURE__ */ Object.create(null);
          },
          VariableDefinition: function VariableDefinition(node) {
            var variableName = node.variable.name.value;
            if (knownVariableNames[variableName]) {
              context.reportError(new _error.GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));
            } else {
              knownVariableNames[variableName] = node.variable.name;
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/NoUndefinedVariables.js
  var require_NoUndefinedVariables = __commonJS({
    "node_modules/graphql/validation/rules/NoUndefinedVariables.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.undefinedVarMessage = undefinedVarMessage;
      exports2.NoUndefinedVariables = NoUndefinedVariables;
      var _error = require_error();
      function undefinedVarMessage(varName, opName) {
        return opName ? 'Variable "$' + varName + '" is not defined by operation "' + opName + '".' : 'Variable "$' + varName + '" is not defined.';
      }
      function NoUndefinedVariables(context) {
        var variableNameDefined = /* @__PURE__ */ Object.create(null);
        return {
          OperationDefinition: {
            enter: function enter() {
              variableNameDefined = /* @__PURE__ */ Object.create(null);
            },
            leave: function leave(operation) {
              var usages = context.getRecursiveVariableUsages(operation);
              usages.forEach(function(_ref) {
                var node = _ref.node;
                var varName = node.name.value;
                if (variableNameDefined[varName] !== true) {
                  context.reportError(new _error.GraphQLError(undefinedVarMessage(varName, operation.name && operation.name.value), [node, operation]));
                }
              });
            }
          },
          VariableDefinition: function VariableDefinition(node) {
            variableNameDefined[node.variable.name.value] = true;
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/NoUnusedVariables.js
  var require_NoUnusedVariables = __commonJS({
    "node_modules/graphql/validation/rules/NoUnusedVariables.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.unusedVariableMessage = unusedVariableMessage;
      exports2.NoUnusedVariables = NoUnusedVariables;
      var _error = require_error();
      function unusedVariableMessage(varName, opName) {
        return opName ? 'Variable "$' + varName + '" is never used in operation "' + opName + '".' : 'Variable "$' + varName + '" is never used.';
      }
      function NoUnusedVariables(context) {
        var variableDefs = [];
        return {
          OperationDefinition: {
            enter: function enter() {
              variableDefs = [];
            },
            leave: function leave(operation) {
              var variableNameUsed = /* @__PURE__ */ Object.create(null);
              var usages = context.getRecursiveVariableUsages(operation);
              var opName = operation.name ? operation.name.value : null;
              usages.forEach(function(_ref) {
                var node = _ref.node;
                variableNameUsed[node.name.value] = true;
              });
              variableDefs.forEach(function(variableDef) {
                var variableName = variableDef.variable.name.value;
                if (variableNameUsed[variableName] !== true) {
                  context.reportError(new _error.GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));
                }
              });
            }
          },
          VariableDefinition: function VariableDefinition(def) {
            variableDefs.push(def);
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/KnownDirectives.js
  var require_KnownDirectives = __commonJS({
    "node_modules/graphql/validation/rules/KnownDirectives.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.unknownDirectiveMessage = unknownDirectiveMessage;
      exports2.misplacedDirectiveMessage = misplacedDirectiveMessage;
      exports2.KnownDirectives = KnownDirectives;
      var _error = require_error();
      var _find = require_find();
      var _find2 = _interopRequireDefault(_find);
      var _kinds = require_kinds();
      var _directiveLocation = require_directiveLocation();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function unknownDirectiveMessage(directiveName) {
        return 'Unknown directive "' + directiveName + '".';
      }
      function misplacedDirectiveMessage(directiveName, location) {
        return 'Directive "' + directiveName + '" may not be used on ' + location + ".";
      }
      function KnownDirectives(context) {
        return {
          Directive: function Directive(node, key, parent, path, ancestors) {
            var directiveDef = (0, _find2.default)(context.getSchema().getDirectives(), function(def) {
              return def.name === node.name.value;
            });
            if (!directiveDef) {
              context.reportError(new _error.GraphQLError(unknownDirectiveMessage(node.name.value), [node]));
              return;
            }
            var candidateLocation = getDirectiveLocationForASTPath(ancestors);
            if (candidateLocation && directiveDef.locations.indexOf(candidateLocation) === -1) {
              context.reportError(new _error.GraphQLError(misplacedDirectiveMessage(node.name.value, candidateLocation), [node]));
            }
          }
        };
      }
      function getDirectiveLocationForASTPath(ancestors) {
        var appliedTo = ancestors[ancestors.length - 1];
        if (!Array.isArray(appliedTo)) {
          switch (appliedTo.kind) {
            case _kinds.Kind.OPERATION_DEFINITION:
              switch (appliedTo.operation) {
                case "query":
                  return _directiveLocation.DirectiveLocation.QUERY;
                case "mutation":
                  return _directiveLocation.DirectiveLocation.MUTATION;
                case "subscription":
                  return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
              }
              break;
            case _kinds.Kind.FIELD:
              return _directiveLocation.DirectiveLocation.FIELD;
            case _kinds.Kind.FRAGMENT_SPREAD:
              return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;
            case _kinds.Kind.INLINE_FRAGMENT:
              return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;
            case _kinds.Kind.FRAGMENT_DEFINITION:
              return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
            case _kinds.Kind.SCHEMA_DEFINITION:
              return _directiveLocation.DirectiveLocation.SCHEMA;
            case _kinds.Kind.SCALAR_TYPE_DEFINITION:
            case _kinds.Kind.SCALAR_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.SCALAR;
            case _kinds.Kind.OBJECT_TYPE_DEFINITION:
            case _kinds.Kind.OBJECT_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.OBJECT;
            case _kinds.Kind.FIELD_DEFINITION:
              return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
            case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
            case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.INTERFACE;
            case _kinds.Kind.UNION_TYPE_DEFINITION:
            case _kinds.Kind.UNION_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.UNION;
            case _kinds.Kind.ENUM_TYPE_DEFINITION:
            case _kinds.Kind.ENUM_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.ENUM;
            case _kinds.Kind.ENUM_VALUE_DEFINITION:
              return _directiveLocation.DirectiveLocation.ENUM_VALUE;
            case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
            case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
              return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
            case _kinds.Kind.INPUT_VALUE_DEFINITION:
              var parentNode = ancestors[ancestors.length - 3];
              return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
          }
        }
      }
    }
  });

  // node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js
  var require_UniqueDirectivesPerLocation = __commonJS({
    "node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.duplicateDirectiveMessage = duplicateDirectiveMessage;
      exports2.UniqueDirectivesPerLocation = UniqueDirectivesPerLocation;
      var _error = require_error();
      function duplicateDirectiveMessage(directiveName) {
        return 'The directive "' + directiveName + '" can only be used once at this location.';
      }
      function UniqueDirectivesPerLocation(context) {
        return {
          enter: function enter(node) {
            var directives = node.directives;
            if (directives) {
              var knownDirectives = /* @__PURE__ */ Object.create(null);
              directives.forEach(function(directive) {
                var directiveName = directive.name.value;
                if (knownDirectives[directiveName]) {
                  context.reportError(new _error.GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));
                } else {
                  knownDirectives[directiveName] = directive;
                }
              });
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/KnownArgumentNames.js
  var require_KnownArgumentNames = __commonJS({
    "node_modules/graphql/validation/rules/KnownArgumentNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.unknownArgMessage = unknownArgMessage;
      exports2.unknownDirectiveArgMessage = unknownDirectiveArgMessage;
      exports2.KnownArgumentNames = KnownArgumentNames;
      var _error = require_error();
      var _suggestionList = require_suggestionList();
      var _suggestionList2 = _interopRequireDefault(_suggestionList);
      var _quotedOrList = require_quotedOrList();
      var _quotedOrList2 = _interopRequireDefault(_quotedOrList);
      var _kinds = require_kinds();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {
        var message = 'Unknown argument "' + argName + '" on field "' + fieldName + '" of ' + ('type "' + typeName + '".');
        if (suggestedArgs.length) {
          message += " Did you mean " + (0, _quotedOrList2.default)(suggestedArgs) + "?";
        }
        return message;
      }
      function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {
        var message = 'Unknown argument "' + argName + '" on directive "@' + directiveName + '".';
        if (suggestedArgs.length) {
          message += " Did you mean " + (0, _quotedOrList2.default)(suggestedArgs) + "?";
        }
        return message;
      }
      function KnownArgumentNames(context) {
        return {
          Argument: function Argument(node, key, parent, path, ancestors) {
            var argDef = context.getArgument();
            if (!argDef) {
              var argumentOf = ancestors[ancestors.length - 1];
              if (argumentOf.kind === _kinds.Kind.FIELD) {
                var fieldDef = context.getFieldDef();
                var parentType = context.getParentType();
                if (fieldDef && parentType) {
                  context.reportError(new _error.GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, (0, _suggestionList2.default)(node.name.value, fieldDef.args.map(function(arg) {
                    return arg.name;
                  }))), [node]));
                }
              } else if (argumentOf.kind === _kinds.Kind.DIRECTIVE) {
                var directive = context.getDirective();
                if (directive) {
                  context.reportError(new _error.GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, (0, _suggestionList2.default)(node.name.value, directive.args.map(function(arg) {
                    return arg.name;
                  }))), [node]));
                }
              }
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/UniqueArgumentNames.js
  var require_UniqueArgumentNames = __commonJS({
    "node_modules/graphql/validation/rules/UniqueArgumentNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.duplicateArgMessage = duplicateArgMessage;
      exports2.UniqueArgumentNames = UniqueArgumentNames;
      var _error = require_error();
      function duplicateArgMessage(argName) {
        return 'There can be only one argument named "' + argName + '".';
      }
      function UniqueArgumentNames(context) {
        var knownArgNames = /* @__PURE__ */ Object.create(null);
        return {
          Field: function Field() {
            knownArgNames = /* @__PURE__ */ Object.create(null);
          },
          Directive: function Directive() {
            knownArgNames = /* @__PURE__ */ Object.create(null);
          },
          Argument: function Argument(node) {
            var argName = node.name.value;
            if (knownArgNames[argName]) {
              context.reportError(new _error.GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));
            } else {
              knownArgNames[argName] = node.name;
            }
            return false;
          }
        };
      }
    }
  });

  // node_modules/graphql/jsutils/keyMap.js
  var require_keyMap = __commonJS({
    "node_modules/graphql/jsutils/keyMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = keyMap;
      function keyMap(list, keyFn) {
        return list.reduce(function(map, item) {
          return map[keyFn(item)] = item, map;
        }, /* @__PURE__ */ Object.create(null));
      }
    }
  });

  // node_modules/graphql/validation/rules/ValuesOfCorrectType.js
  var require_ValuesOfCorrectType = __commonJS({
    "node_modules/graphql/validation/rules/ValuesOfCorrectType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.badValueMessage = badValueMessage;
      exports2.requiredFieldMessage = requiredFieldMessage;
      exports2.unknownFieldMessage = unknownFieldMessage;
      exports2.ValuesOfCorrectType = ValuesOfCorrectType;
      var _error = require_error();
      var _printer = require_printer();
      var _definition = require_definition();
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      var _orList = require_orList();
      var _orList2 = _interopRequireDefault(_orList);
      var _suggestionList = require_suggestionList();
      var _suggestionList2 = _interopRequireDefault(_suggestionList);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function badValueMessage(typeName, valueName, message) {
        return "Expected type " + typeName + ", found " + valueName + (message ? "; " + message : ".");
      }
      function requiredFieldMessage(typeName, fieldName, fieldTypeName) {
        return "Field " + typeName + "." + fieldName + " of required type " + (fieldTypeName + " was not provided.");
      }
      function unknownFieldMessage(typeName, fieldName, message) {
        return 'Field "' + fieldName + '" is not defined by type ' + typeName + (message ? "; " + message : ".");
      }
      function ValuesOfCorrectType(context) {
        return {
          NullValue: function NullValue(node) {
            var type = context.getInputType();
            if ((0, _definition.isNonNullType)(type)) {
              context.reportError(new _error.GraphQLError(badValueMessage(String(type), (0, _printer.print)(node)), node));
            }
          },
          ListValue: function ListValue(node) {
            var type = (0, _definition.getNullableType)(context.getParentInputType());
            if (!(0, _definition.isListType)(type)) {
              isValidScalar(context, node);
              return false;
            }
          },
          ObjectValue: function ObjectValue(node) {
            var type = (0, _definition.getNamedType)(context.getInputType());
            if (!(0, _definition.isInputObjectType)(type)) {
              isValidScalar(context, node);
              return false;
            }
            var inputFields = type.getFields();
            var fieldNodeMap = (0, _keyMap2.default)(node.fields, function(field) {
              return field.name.value;
            });
            Object.keys(inputFields).forEach(function(fieldName) {
              var fieldType = inputFields[fieldName].type;
              var fieldNode = fieldNodeMap[fieldName];
              if (!fieldNode && (0, _definition.isNonNullType)(fieldType)) {
                context.reportError(new _error.GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));
              }
            });
          },
          ObjectField: function ObjectField(node) {
            var parentType = (0, _definition.getNamedType)(context.getParentInputType());
            var fieldType = context.getInputType();
            if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
              var suggestions = (0, _suggestionList2.default)(node.name.value, Object.keys(parentType.getFields()));
              var didYouMean = suggestions.length !== 0 ? "Did you mean " + (0, _orList2.default)(suggestions) + "?" : void 0;
              context.reportError(new _error.GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));
            }
          },
          EnumValue: function EnumValue(node) {
            var type = (0, _definition.getNamedType)(context.getInputType());
            if (!(0, _definition.isEnumType)(type)) {
              isValidScalar(context, node);
            } else if (!type.getValue(node.value)) {
              context.reportError(new _error.GraphQLError(badValueMessage(type.name, (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));
            }
          },
          IntValue: function IntValue(node) {
            return isValidScalar(context, node);
          },
          FloatValue: function FloatValue(node) {
            return isValidScalar(context, node);
          },
          StringValue: function StringValue(node) {
            return isValidScalar(context, node);
          },
          BooleanValue: function BooleanValue(node) {
            return isValidScalar(context, node);
          }
        };
      }
      function isValidScalar(context, node) {
        var locationType = context.getInputType();
        if (!locationType) {
          return;
        }
        var type = (0, _definition.getNamedType)(locationType);
        if (!(0, _definition.isScalarType)(type)) {
          context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));
          return;
        }
        try {
          var parseResult = type.parseLiteral(node, void 0);
          if ((0, _isInvalid2.default)(parseResult)) {
            context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node)), node));
          }
        } catch (error) {
          context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), error.message), node, void 0, void 0, void 0, error));
        }
      }
      function enumTypeSuggestion(type, node) {
        if ((0, _definition.isEnumType)(type)) {
          var suggestions = (0, _suggestionList2.default)((0, _printer.print)(node), type.getValues().map(function(value) {
            return value.name;
          }));
          if (suggestions.length !== 0) {
            return "Did you mean the enum value " + (0, _orList2.default)(suggestions) + "?";
          }
        }
      }
    }
  });

  // node_modules/graphql/validation/rules/ProvidedNonNullArguments.js
  var require_ProvidedNonNullArguments = __commonJS({
    "node_modules/graphql/validation/rules/ProvidedNonNullArguments.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.missingFieldArgMessage = missingFieldArgMessage;
      exports2.missingDirectiveArgMessage = missingDirectiveArgMessage;
      exports2.ProvidedNonNullArguments = ProvidedNonNullArguments;
      var _error = require_error();
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      var _definition = require_definition();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function missingFieldArgMessage(fieldName, argName, type) {
        return 'Field "' + fieldName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
      }
      function missingDirectiveArgMessage(directiveName, argName, type) {
        return 'Directive "@' + directiveName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
      }
      function ProvidedNonNullArguments(context) {
        return {
          Field: {
            leave: function leave(node) {
              var fieldDef = context.getFieldDef();
              if (!fieldDef) {
                return false;
              }
              var argNodes = node.arguments || [];
              var argNodeMap = (0, _keyMap2.default)(argNodes, function(arg) {
                return arg.name.value;
              });
              fieldDef.args.forEach(function(argDef) {
                var argNode = argNodeMap[argDef.name];
                if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {
                  context.reportError(new _error.GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));
                }
              });
            }
          },
          Directive: {
            leave: function leave(node) {
              var directiveDef = context.getDirective();
              if (!directiveDef) {
                return false;
              }
              var argNodes = node.arguments || [];
              var argNodeMap = (0, _keyMap2.default)(argNodes, function(arg) {
                return arg.name.value;
              });
              directiveDef.args.forEach(function(argDef) {
                var argNode = argNodeMap[argDef.name];
                if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {
                  context.reportError(new _error.GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));
                }
              });
            }
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/VariablesDefaultValueAllowed.js
  var require_VariablesDefaultValueAllowed = __commonJS({
    "node_modules/graphql/validation/rules/VariablesDefaultValueAllowed.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.defaultForRequiredVarMessage = defaultForRequiredVarMessage;
      exports2.VariablesDefaultValueAllowed = VariablesDefaultValueAllowed;
      var _error = require_error();
      var _definition = require_definition();
      function defaultForRequiredVarMessage(varName, type, guessType) {
        return 'Variable "$' + varName + '" of type "' + String(type) + '" is required and will not use the default value. ' + ('Perhaps you meant to use type "' + String(guessType) + '".');
      }
      function VariablesDefaultValueAllowed(context) {
        return {
          VariableDefinition: function VariableDefinition(node) {
            var name = node.variable.name.value;
            var defaultValue = node.defaultValue;
            var type = context.getInputType();
            if ((0, _definition.isNonNullType)(type) && defaultValue) {
              context.reportError(new _error.GraphQLError(defaultForRequiredVarMessage(name, type, type.ofType), [defaultValue]));
            }
            return false;
          },
          SelectionSet: function SelectionSet() {
            return false;
          },
          FragmentDefinition: function FragmentDefinition() {
            return false;
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/rules/VariablesInAllowedPosition.js
  var require_VariablesInAllowedPosition = __commonJS({
    "node_modules/graphql/validation/rules/VariablesInAllowedPosition.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.badVarPosMessage = badVarPosMessage;
      exports2.VariablesInAllowedPosition = VariablesInAllowedPosition;
      var _error = require_error();
      var _definition = require_definition();
      var _typeComparators = require_typeComparators();
      var _typeFromAST = require_typeFromAST();
      function badVarPosMessage(varName, varType, expectedType) {
        return 'Variable "$' + varName + '" of type "' + String(varType) + '" used in ' + ('position expecting type "' + String(expectedType) + '".');
      }
      function VariablesInAllowedPosition(context) {
        var varDefMap = /* @__PURE__ */ Object.create(null);
        return {
          OperationDefinition: {
            enter: function enter() {
              varDefMap = /* @__PURE__ */ Object.create(null);
            },
            leave: function leave(operation) {
              var usages = context.getRecursiveVariableUsages(operation);
              usages.forEach(function(_ref) {
                var node = _ref.node, type = _ref.type;
                var varName = node.name.value;
                var varDef = varDefMap[varName];
                if (varDef && type) {
                  var schema = context.getSchema();
                  var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);
                  if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {
                    context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));
                  }
                }
              });
            }
          },
          VariableDefinition: function VariableDefinition(node) {
            varDefMap[node.variable.name.value] = node;
          }
        };
      }
      function effectiveType(varType, varDef) {
        return !varDef.defaultValue || (0, _definition.isNonNullType)(varType) ? varType : (0, _definition.GraphQLNonNull)(varType);
      }
    }
  });

  // node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js
  var require_OverlappingFieldsCanBeMerged = __commonJS({
    "node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.fieldsConflictMessage = fieldsConflictMessage;
      exports2.OverlappingFieldsCanBeMerged = OverlappingFieldsCanBeMerged;
      var _error = require_error();
      var _find = require_find();
      var _find2 = _interopRequireDefault(_find);
      var _kinds = require_kinds();
      var _printer = require_printer();
      var _definition = require_definition();
      var _typeFromAST = require_typeFromAST();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function fieldsConflictMessage(responseName, reason) {
        return 'Fields "' + responseName + '" conflict because ' + reasonMessage(reason) + ". Use different aliases on the fields to fetch both if this was intentional.";
      }
      function reasonMessage(reason) {
        if (Array.isArray(reason)) {
          return reason.map(function(_ref) {
            var responseName = _ref[0], subreason = _ref[1];
            return 'subfields "' + responseName + '" conflict because ' + reasonMessage(subreason);
          }).join(" and ");
        }
        return reason;
      }
      function OverlappingFieldsCanBeMerged(context) {
        var comparedFragmentPairs = new PairSet();
        var cachedFieldsAndFragmentNames = /* @__PURE__ */ new Map();
        return {
          SelectionSet: function SelectionSet(selectionSet) {
            var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
            conflicts.forEach(function(_ref2) {
              var _ref2$ = _ref2[0], responseName = _ref2$[0], reason = _ref2$[1], fields1 = _ref2[1], fields2 = _ref2[2];
              return context.reportError(new _error.GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));
            });
          }
        };
      }
      function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
        var conflicts = [];
        var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet), fieldMap = _getFieldsAndFragment[0], fragmentNames = _getFieldsAndFragment[1];
        collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);
        if (fragmentNames.length !== 0) {
          var comparedFragments = /* @__PURE__ */ Object.create(null);
          for (var i = 0; i < fragmentNames.length; i++) {
            collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]);
            for (var j = i + 1; j < fragmentNames.length; j++) {
              collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
            }
          }
        }
        return conflicts;
      }
      function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
        if (comparedFragments[fragmentName]) {
          return;
        }
        comparedFragments[fragmentName] = true;
        var fragment = context.getFragment(fragmentName);
        if (!fragment) {
          return;
        }
        var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment), fieldMap2 = _getReferencedFieldsA[0], fragmentNames2 = _getReferencedFieldsA[1];
        if (fieldMap === fieldMap2) {
          return;
        }
        collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2);
        for (var i = 0; i < fragmentNames2.length; i++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);
        }
      }
      function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
        if (fragmentName1 === fragmentName2) {
          return;
        }
        if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
          return;
        }
        comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
        var fragment1 = context.getFragment(fragmentName1);
        var fragment2 = context.getFragment(fragmentName2);
        if (!fragment1 || !fragment2) {
          return;
        }
        var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1), fieldMap1 = _getReferencedFieldsA2[0], fragmentNames1 = _getReferencedFieldsA2[1];
        var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2), fieldMap2 = _getReferencedFieldsA3[0], fragmentNames2 = _getReferencedFieldsA3[1];
        collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
        for (var j = 0; j < fragmentNames2.length; j++) {
          collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
        }
        for (var i = 0; i < fragmentNames1.length; i++) {
          collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);
        }
      }
      function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
        var conflicts = [];
        var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1), fieldMap1 = _getFieldsAndFragment2[0], fragmentNames1 = _getFieldsAndFragment2[1];
        var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2), fieldMap2 = _getFieldsAndFragment3[0], fragmentNames2 = _getFieldsAndFragment3[1];
        collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
        if (fragmentNames2.length !== 0) {
          var comparedFragments = /* @__PURE__ */ Object.create(null);
          for (var j = 0; j < fragmentNames2.length; j++) {
            collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
          }
        }
        if (fragmentNames1.length !== 0) {
          var _comparedFragments = /* @__PURE__ */ Object.create(null);
          for (var i = 0; i < fragmentNames1.length; i++) {
            collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);
          }
        }
        for (var _i = 0; _i < fragmentNames1.length; _i++) {
          for (var _j = 0; _j < fragmentNames2.length; _j++) {
            collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);
          }
        }
        return conflicts;
      }
      function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
        Object.keys(fieldMap).forEach(function(responseName) {
          var fields = fieldMap[responseName];
          if (fields.length > 1) {
            for (var i = 0; i < fields.length; i++) {
              for (var j = i + 1; j < fields.length; j++) {
                var conflict = findConflict(
                  context,
                  cachedFieldsAndFragmentNames,
                  comparedFragmentPairs,
                  false,
                  responseName,
                  fields[i],
                  fields[j]
                );
                if (conflict) {
                  conflicts.push(conflict);
                }
              }
            }
          }
        });
      }
      function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
        Object.keys(fieldMap1).forEach(function(responseName) {
          var fields2 = fieldMap2[responseName];
          if (fields2) {
            var fields1 = fieldMap1[responseName];
            for (var i = 0; i < fields1.length; i++) {
              for (var j = 0; j < fields2.length; j++) {
                var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);
                if (conflict) {
                  conflicts.push(conflict);
                }
              }
            }
          }
        });
      }
      function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
        var parentType1 = field1[0], node1 = field1[1], def1 = field1[2];
        var parentType2 = field2[0], node2 = field2[1], def2 = field2[2];
        var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);
        var type1 = def1 && def1.type;
        var type2 = def2 && def2.type;
        if (!areMutuallyExclusive) {
          var name1 = node1.name.value;
          var name2 = node2.name.value;
          if (name1 !== name2) {
            return [[responseName, name1 + " and " + name2 + " are different fields"], [node1], [node2]];
          }
          if (!sameArguments(node1.arguments || [], node2.arguments || [])) {
            return [[responseName, "they have differing arguments"], [node1], [node2]];
          }
        }
        if (type1 && type2 && doTypesConflict(type1, type2)) {
          return [[responseName, "they return conflicting types " + String(type1) + " and " + String(type2)], [node1], [node2]];
        }
        var selectionSet1 = node1.selectionSet;
        var selectionSet2 = node2.selectionSet;
        if (selectionSet1 && selectionSet2) {
          var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);
          return subfieldConflicts(conflicts, responseName, node1, node2);
        }
      }
      function sameArguments(arguments1, arguments2) {
        if (arguments1.length !== arguments2.length) {
          return false;
        }
        return arguments1.every(function(argument1) {
          var argument2 = (0, _find2.default)(arguments2, function(argument) {
            return argument.name.value === argument1.name.value;
          });
          if (!argument2) {
            return false;
          }
          return sameValue(argument1.value, argument2.value);
        });
      }
      function sameValue(value1, value2) {
        return !value1 && !value2 || (0, _printer.print)(value1) === (0, _printer.print)(value2);
      }
      function doTypesConflict(type1, type2) {
        if ((0, _definition.isListType)(type1)) {
          return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
        }
        if ((0, _definition.isListType)(type2)) {
          return true;
        }
        if ((0, _definition.isNonNullType)(type1)) {
          return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
        }
        if ((0, _definition.isNonNullType)(type2)) {
          return true;
        }
        if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
          return type1 !== type2;
        }
        return false;
      }
      function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
        var cached = cachedFieldsAndFragmentNames.get(selectionSet);
        if (!cached) {
          var nodeAndDefs = /* @__PURE__ */ Object.create(null);
          var fragmentNames = /* @__PURE__ */ Object.create(null);
          _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
          cached = [nodeAndDefs, Object.keys(fragmentNames)];
          cachedFieldsAndFragmentNames.set(selectionSet, cached);
        }
        return cached;
      }
      function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
        var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
        if (cached) {
          return cached;
        }
        var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);
        return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
      }
      function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
        for (var i = 0; i < selectionSet.selections.length; i++) {
          var selection = selectionSet.selections[i];
          switch (selection.kind) {
            case _kinds.Kind.FIELD:
              var fieldName = selection.name.value;
              var fieldDef = void 0;
              if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
                fieldDef = parentType.getFields()[fieldName];
              }
              var responseName = selection.alias ? selection.alias.value : fieldName;
              if (!nodeAndDefs[responseName]) {
                nodeAndDefs[responseName] = [];
              }
              nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
              break;
            case _kinds.Kind.FRAGMENT_SPREAD:
              fragmentNames[selection.name.value] = true;
              break;
            case _kinds.Kind.INLINE_FRAGMENT:
              var typeCondition = selection.typeCondition;
              var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;
              _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
              break;
          }
        }
      }
      function subfieldConflicts(conflicts, responseName, node1, node2) {
        if (conflicts.length > 0) {
          return [[responseName, conflicts.map(function(_ref3) {
            var reason = _ref3[0];
            return reason;
          })], conflicts.reduce(function(allFields, _ref4) {
            var fields1 = _ref4[1];
            return allFields.concat(fields1);
          }, [node1]), conflicts.reduce(function(allFields, _ref5) {
            var fields2 = _ref5[2];
            return allFields.concat(fields2);
          }, [node2])];
        }
      }
      var PairSet = function() {
        function PairSet2() {
          _classCallCheck(this, PairSet2);
          this._data = /* @__PURE__ */ Object.create(null);
        }
        PairSet2.prototype.has = function has(a, b, areMutuallyExclusive) {
          var first = this._data[a];
          var result2 = first && first[b];
          if (result2 === void 0) {
            return false;
          }
          if (areMutuallyExclusive === false) {
            return result2 === false;
          }
          return true;
        };
        PairSet2.prototype.add = function add(a, b, areMutuallyExclusive) {
          _pairSetAdd(this._data, a, b, areMutuallyExclusive);
          _pairSetAdd(this._data, b, a, areMutuallyExclusive);
        };
        return PairSet2;
      }();
      function _pairSetAdd(data, a, b, areMutuallyExclusive) {
        var map = data[a];
        if (!map) {
          map = /* @__PURE__ */ Object.create(null);
          data[a] = map;
        }
        map[b] = areMutuallyExclusive;
      }
    }
  });

  // node_modules/graphql/validation/rules/UniqueInputFieldNames.js
  var require_UniqueInputFieldNames = __commonJS({
    "node_modules/graphql/validation/rules/UniqueInputFieldNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.duplicateInputFieldMessage = duplicateInputFieldMessage;
      exports2.UniqueInputFieldNames = UniqueInputFieldNames;
      var _error = require_error();
      function duplicateInputFieldMessage(fieldName) {
        return 'There can be only one input field named "' + fieldName + '".';
      }
      function UniqueInputFieldNames(context) {
        var knownNameStack = [];
        var knownNames = /* @__PURE__ */ Object.create(null);
        return {
          ObjectValue: {
            enter: function enter() {
              knownNameStack.push(knownNames);
              knownNames = /* @__PURE__ */ Object.create(null);
            },
            leave: function leave() {
              knownNames = knownNameStack.pop();
            }
          },
          ObjectField: function ObjectField(node) {
            var fieldName = node.name.value;
            if (knownNames[fieldName]) {
              context.reportError(new _error.GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));
            } else {
              knownNames[fieldName] = node.name;
            }
            return false;
          }
        };
      }
    }
  });

  // node_modules/graphql/validation/specifiedRules.js
  var require_specifiedRules = __commonJS({
    "node_modules/graphql/validation/specifiedRules.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.specifiedRules = void 0;
      var _ExecutableDefinitions = require_ExecutableDefinitions();
      var _UniqueOperationNames = require_UniqueOperationNames();
      var _LoneAnonymousOperation = require_LoneAnonymousOperation();
      var _SingleFieldSubscriptions = require_SingleFieldSubscriptions();
      var _KnownTypeNames = require_KnownTypeNames();
      var _FragmentsOnCompositeTypes = require_FragmentsOnCompositeTypes();
      var _VariablesAreInputTypes = require_VariablesAreInputTypes();
      var _ScalarLeafs = require_ScalarLeafs();
      var _FieldsOnCorrectType = require_FieldsOnCorrectType();
      var _UniqueFragmentNames = require_UniqueFragmentNames();
      var _KnownFragmentNames = require_KnownFragmentNames();
      var _NoUnusedFragments = require_NoUnusedFragments();
      var _PossibleFragmentSpreads = require_PossibleFragmentSpreads();
      var _NoFragmentCycles = require_NoFragmentCycles();
      var _UniqueVariableNames = require_UniqueVariableNames();
      var _NoUndefinedVariables = require_NoUndefinedVariables();
      var _NoUnusedVariables = require_NoUnusedVariables();
      var _KnownDirectives = require_KnownDirectives();
      var _UniqueDirectivesPerLocation = require_UniqueDirectivesPerLocation();
      var _KnownArgumentNames = require_KnownArgumentNames();
      var _UniqueArgumentNames = require_UniqueArgumentNames();
      var _ValuesOfCorrectType = require_ValuesOfCorrectType();
      var _ProvidedNonNullArguments = require_ProvidedNonNullArguments();
      var _VariablesDefaultValueAllowed = require_VariablesDefaultValueAllowed();
      var _VariablesInAllowedPosition = require_VariablesInAllowedPosition();
      var _OverlappingFieldsCanBeMerged = require_OverlappingFieldsCanBeMerged();
      var _UniqueInputFieldNames = require_UniqueInputFieldNames();
      var specifiedRules2 = exports2.specifiedRules = [_ExecutableDefinitions.ExecutableDefinitions, _UniqueOperationNames.UniqueOperationNames, _LoneAnonymousOperation.LoneAnonymousOperation, _SingleFieldSubscriptions.SingleFieldSubscriptions, _KnownTypeNames.KnownTypeNames, _FragmentsOnCompositeTypes.FragmentsOnCompositeTypes, _VariablesAreInputTypes.VariablesAreInputTypes, _ScalarLeafs.ScalarLeafs, _FieldsOnCorrectType.FieldsOnCorrectType, _UniqueFragmentNames.UniqueFragmentNames, _KnownFragmentNames.KnownFragmentNames, _NoUnusedFragments.NoUnusedFragments, _PossibleFragmentSpreads.PossibleFragmentSpreads, _NoFragmentCycles.NoFragmentCycles, _UniqueVariableNames.UniqueVariableNames, _NoUndefinedVariables.NoUndefinedVariables, _NoUnusedVariables.NoUnusedVariables, _KnownDirectives.KnownDirectives, _UniqueDirectivesPerLocation.UniqueDirectivesPerLocation, _KnownArgumentNames.KnownArgumentNames, _UniqueArgumentNames.UniqueArgumentNames, _ValuesOfCorrectType.ValuesOfCorrectType, _ProvidedNonNullArguments.ProvidedNonNullArguments, _VariablesDefaultValueAllowed.VariablesDefaultValueAllowed, _VariablesInAllowedPosition.VariablesInAllowedPosition, _OverlappingFieldsCanBeMerged.OverlappingFieldsCanBeMerged, _UniqueInputFieldNames.UniqueInputFieldNames];
    }
  });

  // node_modules/graphql/validation/ValidationContext.js
  var require_ValidationContext = __commonJS({
    "node_modules/graphql/validation/ValidationContext.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _error = require_error();
      var _visitor = require_visitor();
      var _kinds = require_kinds();
      var _schema = require_schema();
      var _TypeInfo = require_TypeInfo();
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var ValidationContext2 = function() {
        function ValidationContext3(schema, ast, typeInfo) {
          _classCallCheck(this, ValidationContext3);
          this._schema = schema;
          this._ast = ast;
          this._typeInfo = typeInfo;
          this._errors = [];
          this._fragmentSpreads = /* @__PURE__ */ new Map();
          this._recursivelyReferencedFragments = /* @__PURE__ */ new Map();
          this._variableUsages = /* @__PURE__ */ new Map();
          this._recursiveVariableUsages = /* @__PURE__ */ new Map();
        }
        ValidationContext3.prototype.reportError = function reportError(error) {
          this._errors.push(error);
        };
        ValidationContext3.prototype.getErrors = function getErrors() {
          return this._errors;
        };
        ValidationContext3.prototype.getSchema = function getSchema() {
          return this._schema;
        };
        ValidationContext3.prototype.getDocument = function getDocument() {
          return this._ast;
        };
        ValidationContext3.prototype.getFragment = function getFragment(name) {
          var fragments = this._fragments;
          if (!fragments) {
            this._fragments = fragments = this.getDocument().definitions.reduce(function(frags, statement) {
              if (statement.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
                frags[statement.name.value] = statement;
              }
              return frags;
            }, /* @__PURE__ */ Object.create(null));
          }
          return fragments[name];
        };
        ValidationContext3.prototype.getFragmentSpreads = function getFragmentSpreads(node) {
          var spreads = this._fragmentSpreads.get(node);
          if (!spreads) {
            spreads = [];
            var setsToVisit = [node];
            while (setsToVisit.length !== 0) {
              var set = setsToVisit.pop();
              for (var i = 0; i < set.selections.length; i++) {
                var selection = set.selections[i];
                if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
                  spreads.push(selection);
                } else if (selection.selectionSet) {
                  setsToVisit.push(selection.selectionSet);
                }
              }
            }
            this._fragmentSpreads.set(node, spreads);
          }
          return spreads;
        };
        ValidationContext3.prototype.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
          var fragments = this._recursivelyReferencedFragments.get(operation);
          if (!fragments) {
            fragments = [];
            var collectedNames = /* @__PURE__ */ Object.create(null);
            var nodesToVisit = [operation.selectionSet];
            while (nodesToVisit.length !== 0) {
              var _node = nodesToVisit.pop();
              var spreads = this.getFragmentSpreads(_node);
              for (var i = 0; i < spreads.length; i++) {
                var fragName = spreads[i].name.value;
                if (collectedNames[fragName] !== true) {
                  collectedNames[fragName] = true;
                  var fragment = this.getFragment(fragName);
                  if (fragment) {
                    fragments.push(fragment);
                    nodesToVisit.push(fragment.selectionSet);
                  }
                }
              }
            }
            this._recursivelyReferencedFragments.set(operation, fragments);
          }
          return fragments;
        };
        ValidationContext3.prototype.getVariableUsages = function getVariableUsages(node) {
          var usages = this._variableUsages.get(node);
          if (!usages) {
            var newUsages = [];
            var typeInfo = new _TypeInfo.TypeInfo(this._schema);
            (0, _visitor.visit)(node, (0, _visitor.visitWithTypeInfo)(typeInfo, {
              VariableDefinition: function VariableDefinition() {
                return false;
              },
              Variable: function Variable(variable) {
                newUsages.push({ node: variable, type: typeInfo.getInputType() });
              }
            }));
            usages = newUsages;
            this._variableUsages.set(node, usages);
          }
          return usages;
        };
        ValidationContext3.prototype.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
          var usages = this._recursiveVariableUsages.get(operation);
          if (!usages) {
            usages = this.getVariableUsages(operation);
            var fragments = this.getRecursivelyReferencedFragments(operation);
            for (var i = 0; i < fragments.length; i++) {
              Array.prototype.push.apply(usages, this.getVariableUsages(fragments[i]));
            }
            this._recursiveVariableUsages.set(operation, usages);
          }
          return usages;
        };
        ValidationContext3.prototype.getType = function getType() {
          return this._typeInfo.getType();
        };
        ValidationContext3.prototype.getParentType = function getParentType() {
          return this._typeInfo.getParentType();
        };
        ValidationContext3.prototype.getInputType = function getInputType() {
          return this._typeInfo.getInputType();
        };
        ValidationContext3.prototype.getParentInputType = function getParentInputType() {
          return this._typeInfo.getParentInputType();
        };
        ValidationContext3.prototype.getFieldDef = function getFieldDef() {
          return this._typeInfo.getFieldDef();
        };
        ValidationContext3.prototype.getDirective = function getDirective() {
          return this._typeInfo.getDirective();
        };
        ValidationContext3.prototype.getArgument = function getArgument() {
          return this._typeInfo.getArgument();
        };
        return ValidationContext3;
      }();
      exports2.default = ValidationContext2;
    }
  });

  // node_modules/graphql/validation/validate.js
  var require_validate2 = __commonJS({
    "node_modules/graphql/validation/validate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.validate = validate2;
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _error = require_error();
      var _visitor = require_visitor();
      var _schema = require_schema();
      var _validate = require_validate();
      var _TypeInfo = require_TypeInfo();
      var _specifiedRules = require_specifiedRules();
      var _ValidationContext = require_ValidationContext();
      var _ValidationContext2 = _interopRequireDefault(_ValidationContext);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function validate2(schema, ast, rules, typeInfo) {
        !ast ? (0, _invariant2.default)(0, "Must provide document") : void 0;
        (0, _validate.assertValidSchema)(schema);
        return visitUsingRules(schema, typeInfo || new _TypeInfo.TypeInfo(schema), ast, rules || _specifiedRules.specifiedRules);
      }
      function visitUsingRules(schema, typeInfo, documentAST, rules) {
        var context = new _ValidationContext2.default(schema, documentAST, typeInfo);
        var visitors = rules.map(function(rule) {
          return rule(context);
        });
        (0, _visitor.visit)(documentAST, (0, _visitor.visitWithTypeInfo)(typeInfo, (0, _visitor.visitInParallel)(visitors)));
        return context.getErrors();
      }
    }
  });

  // node_modules/graphql/jsutils/isPromise.js
  var require_isPromise = __commonJS({
    "node_modules/graphql/jsutils/isPromise.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = isPromise2;
      function isPromise2(value) {
        return Boolean(value && typeof value.then === "function");
      }
    }
  });

  // node_modules/graphql/jsutils/memoize3.js
  var require_memoize3 = __commonJS({
    "node_modules/graphql/jsutils/memoize3.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = memoize3;
      function memoize3(fn) {
        var cache0 = void 0;
        function memoized(a1, a2, a3) {
          if (!cache0) {
            cache0 = /* @__PURE__ */ new WeakMap();
          }
          var cache1 = cache0.get(a1);
          var cache2 = void 0;
          if (cache1) {
            cache2 = cache1.get(a2);
            if (cache2) {
              var cachedValue = cache2.get(a3);
              if (cachedValue !== void 0) {
                return cachedValue;
              }
            }
          } else {
            cache1 = /* @__PURE__ */ new WeakMap();
            cache0.set(a1, cache1);
          }
          if (!cache2) {
            cache2 = /* @__PURE__ */ new WeakMap();
            cache1.set(a2, cache2);
          }
          var newValue = fn.apply(this, arguments);
          cache2.set(a3, newValue);
          return newValue;
        }
        return memoized;
      }
    }
  });

  // node_modules/graphql/jsutils/promiseForObject.js
  var require_promiseForObject = __commonJS({
    "node_modules/graphql/jsutils/promiseForObject.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = promiseForObject;
      function promiseForObject(object) {
        var keys = Object.keys(object);
        var valuesAndPromises = keys.map(function(name) {
          return object[name];
        });
        return Promise.all(valuesAndPromises).then(function(values) {
          return values.reduce(function(resolvedObject, value, i) {
            resolvedObject[keys[i]] = value;
            return resolvedObject;
          }, /* @__PURE__ */ Object.create(null));
        });
      }
    }
  });

  // node_modules/graphql/jsutils/promiseReduce.js
  var require_promiseReduce = __commonJS({
    "node_modules/graphql/jsutils/promiseReduce.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = promiseReduce;
      var _isPromise = require_isPromise();
      var _isPromise2 = _interopRequireDefault(_isPromise);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function promiseReduce(values, callback, initialValue) {
        return values.reduce(function(previous, value) {
          return (0, _isPromise2.default)(previous) ? previous.then(function(resolved) {
            return callback(resolved, value);
          }) : callback(previous, value);
        }, initialValue);
      }
    }
  });

  // node_modules/graphql/utilities/coerceValue.js
  var require_coerceValue = __commonJS({
    "node_modules/graphql/utilities/coerceValue.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      exports2.coerceValue = coerceValue2;
      var _iterall = require_iterall();
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _isNullish = require_isNullish();
      var _isNullish2 = _interopRequireDefault(_isNullish);
      var _orList = require_orList();
      var _orList2 = _interopRequireDefault(_orList);
      var _suggestionList = require_suggestionList();
      var _suggestionList2 = _interopRequireDefault(_suggestionList);
      var _error = require_error();
      var _definition = require_definition();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function coerceValue2(value, type, blameNode, path) {
        if ((0, _definition.isNonNullType)(type)) {
          if ((0, _isNullish2.default)(value)) {
            return ofErrors([coercionError("Expected non-nullable type " + String(type) + " not to be null", blameNode, path)]);
          }
          return coerceValue2(value, type.ofType, blameNode, path);
        }
        if ((0, _isNullish2.default)(value)) {
          return ofValue(null);
        }
        if ((0, _definition.isScalarType)(type)) {
          try {
            var parseResult = type.parseValue(value);
            if ((0, _isInvalid2.default)(parseResult)) {
              return ofErrors([coercionError("Expected type " + type.name, blameNode, path)]);
            }
            return ofValue(parseResult);
          } catch (error) {
            return ofErrors([coercionError("Expected type " + type.name, blameNode, path, error.message, error)]);
          }
        }
        if ((0, _definition.isEnumType)(type)) {
          if (typeof value === "string") {
            var enumValue = type.getValue(value);
            if (enumValue) {
              return ofValue(enumValue.value);
            }
          }
          var suggestions = (0, _suggestionList2.default)(String(value), type.getValues().map(function(enumValue2) {
            return enumValue2.name;
          }));
          var didYouMean = suggestions.length !== 0 ? "did you mean " + (0, _orList2.default)(suggestions) + "?" : void 0;
          return ofErrors([coercionError("Expected type " + type.name, blameNode, path, didYouMean)]);
        }
        if ((0, _definition.isListType)(type)) {
          var itemType = type.ofType;
          if ((0, _iterall.isCollection)(value)) {
            var _errors = void 0;
            var coercedValue = [];
            (0, _iterall.forEach)(value, function(itemValue, index) {
              var coercedItem2 = coerceValue2(itemValue, itemType, blameNode, atPath(path, index));
              if (coercedItem2.errors) {
                _errors = add(_errors, coercedItem2.errors);
              } else if (!_errors) {
                coercedValue.push(coercedItem2.value);
              }
            });
            return _errors ? ofErrors(_errors) : ofValue(coercedValue);
          }
          var coercedItem = coerceValue2(value, itemType, blameNode);
          return coercedItem.errors ? coercedItem : ofValue([coercedItem.value]);
        }
        if ((0, _definition.isInputObjectType)(type)) {
          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") {
            return ofErrors([coercionError("Expected type " + type.name + " to be an object", blameNode, path)]);
          }
          var _errors2 = void 0;
          var _coercedValue = {};
          var fields = type.getFields();
          for (var fieldName in fields) {
            if (hasOwnProperty4.call(fields, fieldName)) {
              var field = fields[fieldName];
              var fieldValue = value[fieldName];
              if ((0, _isInvalid2.default)(fieldValue)) {
                if (!(0, _isInvalid2.default)(field.defaultValue)) {
                  _coercedValue[fieldName] = field.defaultValue;
                } else if ((0, _definition.isNonNullType)(field.type)) {
                  _errors2 = add(_errors2, coercionError("Field " + printPath(atPath(path, fieldName)) + " of required " + ("type " + String(field.type) + " was not provided"), blameNode));
                }
              } else {
                var coercedField = coerceValue2(fieldValue, field.type, blameNode, atPath(path, fieldName));
                if (coercedField.errors) {
                  _errors2 = add(_errors2, coercedField.errors);
                } else if (!_errors2) {
                  _coercedValue[fieldName] = coercedField.value;
                }
              }
            }
          }
          for (var _fieldName in value) {
            if (hasOwnProperty4.call(value, _fieldName)) {
              if (!fields[_fieldName]) {
                var _suggestions = (0, _suggestionList2.default)(_fieldName, Object.keys(fields));
                var _didYouMean = _suggestions.length !== 0 ? "did you mean " + (0, _orList2.default)(_suggestions) + "?" : void 0;
                _errors2 = add(_errors2, coercionError('Field "' + _fieldName + '" is not defined by type ' + type.name, blameNode, path, _didYouMean));
              }
            }
          }
          return _errors2 ? ofErrors(_errors2) : ofValue(_coercedValue);
        }
        throw new Error("Unexpected type: " + type + ".");
      }
      function ofValue(value) {
        return { errors: void 0, value };
      }
      function ofErrors(errors) {
        return { errors, value: void 0 };
      }
      function add(errors, moreErrors) {
        return (errors || []).concat(moreErrors);
      }
      function atPath(prev, key) {
        return { prev, key };
      }
      function coercionError(message, blameNode, path, subMessage, originalError) {
        var pathStr = printPath(path);
        return new _error.GraphQLError(message + (pathStr ? " at " + pathStr : "") + (subMessage ? "; " + subMessage : "."), blameNode, void 0, void 0, void 0, originalError);
      }
      function printPath(path) {
        var pathStr = "";
        var currentPath = path;
        while (currentPath) {
          pathStr = (typeof currentPath.key === "string" ? "." + currentPath.key : "[" + String(currentPath.key) + "]") + pathStr;
          currentPath = currentPath.prev;
        }
        return pathStr ? "value" + pathStr : "";
      }
      var hasOwnProperty4 = Object.prototype.hasOwnProperty;
    }
  });

  // node_modules/graphql/utilities/valueFromAST.js
  var require_valueFromAST = __commonJS({
    "node_modules/graphql/utilities/valueFromAST.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.valueFromAST = valueFromAST2;
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      var _kinds = require_kinds();
      var _definition = require_definition();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function valueFromAST2(valueNode, type, variables) {
        if (!valueNode) {
          return;
        }
        if ((0, _definition.isNonNullType)(type)) {
          if (valueNode.kind === _kinds.Kind.NULL) {
            return;
          }
          return valueFromAST2(valueNode, type.ofType, variables);
        }
        if (valueNode.kind === _kinds.Kind.NULL) {
          return null;
        }
        if (valueNode.kind === _kinds.Kind.VARIABLE) {
          var variableName = valueNode.name.value;
          if (!variables || (0, _isInvalid2.default)(variables[variableName])) {
            return;
          }
          return variables[variableName];
        }
        if ((0, _definition.isListType)(type)) {
          var itemType = type.ofType;
          if (valueNode.kind === _kinds.Kind.LIST) {
            var coercedValues = [];
            var itemNodes = valueNode.values;
            for (var i = 0; i < itemNodes.length; i++) {
              if (isMissingVariable(itemNodes[i], variables)) {
                if ((0, _definition.isNonNullType)(itemType)) {
                  return;
                }
                coercedValues.push(null);
              } else {
                var itemValue = valueFromAST2(itemNodes[i], itemType, variables);
                if ((0, _isInvalid2.default)(itemValue)) {
                  return;
                }
                coercedValues.push(itemValue);
              }
            }
            return coercedValues;
          }
          var coercedValue = valueFromAST2(valueNode, itemType, variables);
          if ((0, _isInvalid2.default)(coercedValue)) {
            return;
          }
          return [coercedValue];
        }
        if ((0, _definition.isInputObjectType)(type)) {
          if (valueNode.kind !== _kinds.Kind.OBJECT) {
            return;
          }
          var coercedObj = /* @__PURE__ */ Object.create(null);
          var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function(field2) {
            return field2.name.value;
          });
          var fields = (0, _objectValues2.default)(type.getFields());
          for (var _i = 0; _i < fields.length; _i++) {
            var field = fields[_i];
            var fieldNode = fieldNodes[field.name];
            if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
              if (!(0, _isInvalid2.default)(field.defaultValue)) {
                coercedObj[field.name] = field.defaultValue;
              } else if ((0, _definition.isNonNullType)(field.type)) {
                return;
              }
              continue;
            }
            var fieldValue = valueFromAST2(fieldNode.value, field.type, variables);
            if ((0, _isInvalid2.default)(fieldValue)) {
              return;
            }
            coercedObj[field.name] = fieldValue;
          }
          return coercedObj;
        }
        if ((0, _definition.isEnumType)(type)) {
          if (valueNode.kind !== _kinds.Kind.ENUM) {
            return;
          }
          var enumValue = type.getValue(valueNode.value);
          if (!enumValue) {
            return;
          }
          return enumValue.value;
        }
        if ((0, _definition.isScalarType)(type)) {
          var result2 = void 0;
          try {
            result2 = type.parseLiteral(valueNode, variables);
          } catch (_error) {
            return;
          }
          if ((0, _isInvalid2.default)(result2)) {
            return;
          }
          return result2;
        }
        throw new Error("Unknown type: " + type + ".");
      }
      function isMissingVariable(valueNode, variables) {
        return valueNode.kind === _kinds.Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));
      }
    }
  });

  // node_modules/graphql/execution/values.js
  var require_values = __commonJS({
    "node_modules/graphql/execution/values.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.getVariableValues = getVariableValues;
      exports2.getArgumentValues = getArgumentValues;
      exports2.getDirectiveValues = getDirectiveValues2;
      var _error = require_error();
      var _find = require_find();
      var _find2 = _interopRequireDefault(_find);
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      var _coerceValue = require_coerceValue();
      var _typeFromAST = require_typeFromAST();
      var _valueFromAST = require_valueFromAST();
      var _kinds = require_kinds();
      var _printer = require_printer();
      var _definition = require_definition();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function getVariableValues(schema, varDefNodes, inputs) {
        var errors = [];
        var coercedValues = {};
        for (var i = 0; i < varDefNodes.length; i++) {
          var varDefNode = varDefNodes[i];
          var varName = varDefNode.variable.name.value;
          var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);
          if (!(0, _definition.isInputType)(varType)) {
            errors.push(new _error.GraphQLError('Variable "$' + varName + '" expected value of type ' + ('"' + (0, _printer.print)(varDefNode.type) + '" which cannot be used as an input type.'), [varDefNode.type]));
          } else {
            var value = inputs[varName];
            if ((0, _isInvalid2.default)(value)) {
              if ((0, _definition.isNonNullType)(varType)) {
                errors.push(new _error.GraphQLError('Variable "$' + varName + '" of required type ' + ('"' + String(varType) + '" was not provided.'), [varDefNode]));
              } else if (varDefNode.defaultValue) {
                coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);
              }
            } else {
              var _coerced = (0, _coerceValue.coerceValue)(value, varType, varDefNode);
              var coercionErrors = _coerced.errors;
              if (coercionErrors) {
                (function() {
                  var messagePrelude = 'Variable "$' + varName + '" got invalid value ' + JSON.stringify(value) + "; ";
                  coercionErrors.forEach(function(error) {
                    error.message = messagePrelude + error.message;
                  });
                  errors.push.apply(errors, coercionErrors);
                })();
              } else {
                coercedValues[varName] = _coerced.value;
              }
            }
          }
        }
        return errors.length === 0 ? { errors: void 0, coerced: coercedValues } : { errors, coerced: void 0 };
      }
      function getArgumentValues(def, node, variableValues) {
        var coercedValues = {};
        var argDefs = def.args;
        var argNodes = node.arguments;
        if (!argDefs || !argNodes) {
          return coercedValues;
        }
        var argNodeMap = (0, _keyMap2.default)(argNodes, function(arg) {
          return arg.name.value;
        });
        for (var i = 0; i < argDefs.length; i++) {
          var argDef = argDefs[i];
          var name = argDef.name;
          var argType = argDef.type;
          var argumentNode = argNodeMap[name];
          var defaultValue = argDef.defaultValue;
          if (!argumentNode) {
            if (!(0, _isInvalid2.default)(defaultValue)) {
              coercedValues[name] = defaultValue;
            } else if ((0, _definition.isNonNullType)(argType)) {
              throw new _error.GraphQLError('Argument "' + name + '" of required type ' + ('"' + String(argType) + '" was not provided.'), [node]);
            }
          } else if (argumentNode.value.kind === _kinds.Kind.VARIABLE) {
            var variableName = argumentNode.value.name.value;
            if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !(0, _isInvalid2.default)(variableValues[variableName])) {
              coercedValues[name] = variableValues[variableName];
            } else if (!(0, _isInvalid2.default)(defaultValue)) {
              coercedValues[name] = defaultValue;
            } else if ((0, _definition.isNonNullType)(argType)) {
              throw new _error.GraphQLError('Argument "' + name + '" of required type "' + String(argType) + '" was ' + ('provided the variable "$' + variableName + '" which was not provided ') + "a runtime value.", [argumentNode.value]);
            }
          } else {
            var valueNode = argumentNode.value;
            var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);
            if ((0, _isInvalid2.default)(coercedValue)) {
              throw new _error.GraphQLError('Argument "' + name + '" has invalid value ' + (0, _printer.print)(valueNode) + ".", [argumentNode.value]);
            }
            coercedValues[name] = coercedValue;
          }
        }
        return coercedValues;
      }
      function getDirectiveValues2(directiveDef, node, variableValues) {
        var directiveNode = node.directives && (0, _find2.default)(node.directives, function(directive) {
          return directive.name.value === directiveDef.name;
        });
        if (directiveNode) {
          return getArgumentValues(directiveDef, directiveNode, variableValues);
        }
      }
    }
  });

  // node_modules/graphql/execution/execute.js
  var require_execute = __commonJS({
    "node_modules/graphql/execution/execute.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.defaultFieldResolver = void 0;
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      exports2.execute = execute3;
      exports2.responsePathAsArray = responsePathAsArray2;
      exports2.addPath = addPath;
      exports2.assertValidExecutionArguments = assertValidExecutionArguments;
      exports2.buildExecutionContext = buildExecutionContext;
      exports2.getOperationRootType = getOperationRootType;
      exports2.collectFields = collectFields;
      exports2.buildResolveInfo = buildResolveInfo;
      exports2.resolveFieldValueOrError = resolveFieldValueOrError;
      exports2.getFieldDef = getFieldDef;
      var _iterall = require_iterall();
      var _error = require_error();
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _isNullish = require_isNullish();
      var _isNullish2 = _interopRequireDefault(_isNullish);
      var _isPromise = require_isPromise();
      var _isPromise2 = _interopRequireDefault(_isPromise);
      var _memoize = require_memoize3();
      var _memoize2 = _interopRequireDefault(_memoize);
      var _promiseForObject = require_promiseForObject();
      var _promiseForObject2 = _interopRequireDefault(_promiseForObject);
      var _promiseReduce = require_promiseReduce();
      var _promiseReduce2 = _interopRequireDefault(_promiseReduce);
      var _typeFromAST = require_typeFromAST();
      var _kinds = require_kinds();
      var _values = require_values();
      var _definition = require_definition();
      var _schema = require_schema();
      var _introspection = require_introspection();
      var _directives = require_directives();
      var _validate = require_validate();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function execute3(argsOrSchema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver);
      }
      function executeImpl(schema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        assertValidExecutionArguments(schema, document2, variableValues);
        var context = buildExecutionContext(schema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver);
        if (Array.isArray(context)) {
          return { errors: context };
        }
        var data = executeOperation(context, context.operation, rootValue);
        return buildResponse(context, data);
      }
      function buildResponse(context, data) {
        if ((0, _isPromise2.default)(data)) {
          return data.then(function(resolved) {
            return buildResponse(context, resolved);
          });
        }
        return context.errors.length === 0 ? { data } : { errors: context.errors, data };
      }
      function responsePathAsArray2(path) {
        var flattened = [];
        var curr = path;
        while (curr) {
          flattened.push(curr.key);
          curr = curr.prev;
        }
        return flattened.reverse();
      }
      function addPath(prev, key) {
        return { prev, key };
      }
      function assertValidExecutionArguments(schema, document2, rawVariableValues) {
        !document2 ? (0, _invariant2.default)(0, "Must provide document") : void 0;
        (0, _validate.assertValidSchema)(schema);
        !(!rawVariableValues || (typeof rawVariableValues === "undefined" ? "undefined" : _typeof(rawVariableValues)) === "object") ? (0, _invariant2.default)(0, "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.") : void 0;
      }
      function buildExecutionContext(schema, document2, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {
        var errors = [];
        var operation = void 0;
        var hasMultipleAssumedOperations = false;
        var fragments = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < document2.definitions.length; i++) {
          var definition = document2.definitions[i];
          switch (definition.kind) {
            case _kinds.Kind.OPERATION_DEFINITION:
              if (!operationName && operation) {
                hasMultipleAssumedOperations = true;
              } else if (!operationName || definition.name && definition.name.value === operationName) {
                operation = definition;
              }
              break;
            case _kinds.Kind.FRAGMENT_DEFINITION:
              fragments[definition.name.value] = definition;
              break;
          }
        }
        if (!operation) {
          if (operationName) {
            errors.push(new _error.GraphQLError('Unknown operation named "' + operationName + '".'));
          } else {
            errors.push(new _error.GraphQLError("Must provide an operation."));
          }
        } else if (hasMultipleAssumedOperations) {
          errors.push(new _error.GraphQLError("Must provide operation name if query contains multiple operations."));
        }
        var variableValues = void 0;
        if (operation) {
          var coercedVariableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});
          if (coercedVariableValues.errors) {
            errors.push.apply(errors, coercedVariableValues.errors);
          } else {
            variableValues = coercedVariableValues.coerced;
          }
        }
        if (errors.length !== 0) {
          return errors;
        }
        !operation ? (0, _invariant2.default)(0, "Has operation if no errors.") : void 0;
        !variableValues ? (0, _invariant2.default)(0, "Has variables if no errors.") : void 0;
        return {
          schema,
          fragments,
          rootValue,
          contextValue,
          operation,
          variableValues,
          fieldResolver: fieldResolver || defaultFieldResolver2,
          errors
        };
      }
      function executeOperation(exeContext, operation, rootValue) {
        var type = getOperationRootType(exeContext.schema, operation);
        var fields = collectFields(exeContext, type, operation.selectionSet, /* @__PURE__ */ Object.create(null), /* @__PURE__ */ Object.create(null));
        var path = void 0;
        try {
          var result2 = operation.operation === "mutation" ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);
          if ((0, _isPromise2.default)(result2)) {
            return result2.then(void 0, function(error) {
              exeContext.errors.push(error);
              return Promise.resolve(null);
            });
          }
          return result2;
        } catch (error) {
          exeContext.errors.push(error);
          return null;
        }
      }
      function getOperationRootType(schema, operation) {
        switch (operation.operation) {
          case "query":
            var queryType = schema.getQueryType();
            if (!queryType) {
              throw new _error.GraphQLError("Schema does not define the required query root type.", [operation]);
            }
            return queryType;
          case "mutation":
            var mutationType = schema.getMutationType();
            if (!mutationType) {
              throw new _error.GraphQLError("Schema is not configured for mutations.", [operation]);
            }
            return mutationType;
          case "subscription":
            var subscriptionType = schema.getSubscriptionType();
            if (!subscriptionType) {
              throw new _error.GraphQLError("Schema is not configured for subscriptions.", [operation]);
            }
            return subscriptionType;
          default:
            throw new _error.GraphQLError("Can only execute queries, mutations and subscriptions.", [operation]);
        }
      }
      function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
        return (0, _promiseReduce2.default)(Object.keys(fields), function(results, responseName) {
          var fieldNodes = fields[responseName];
          var fieldPath = addPath(path, responseName);
          var result2 = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
          if (result2 === void 0) {
            return results;
          }
          if ((0, _isPromise2.default)(result2)) {
            return result2.then(function(resolvedResult) {
              results[responseName] = resolvedResult;
              return results;
            });
          }
          results[responseName] = result2;
          return results;
        }, /* @__PURE__ */ Object.create(null));
      }
      function executeFields(exeContext, parentType, sourceValue, path, fields) {
        var containsPromise = false;
        var finalResults = Object.keys(fields).reduce(function(results, responseName) {
          var fieldNodes = fields[responseName];
          var fieldPath = addPath(path, responseName);
          var result2 = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
          if (result2 === void 0) {
            return results;
          }
          results[responseName] = result2;
          if (!containsPromise && (0, _isPromise2.default)(result2)) {
            containsPromise = true;
          }
          return results;
        }, /* @__PURE__ */ Object.create(null));
        if (!containsPromise) {
          return finalResults;
        }
        return (0, _promiseForObject2.default)(finalResults);
      }
      function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
        for (var i = 0; i < selectionSet.selections.length; i++) {
          var selection = selectionSet.selections[i];
          switch (selection.kind) {
            case _kinds.Kind.FIELD:
              if (!shouldIncludeNode(exeContext, selection)) {
                continue;
              }
              var name = getFieldEntryKey(selection);
              if (!fields[name]) {
                fields[name] = [];
              }
              fields[name].push(selection);
              break;
            case _kinds.Kind.INLINE_FRAGMENT:
              if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
                continue;
              }
              collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
              break;
            case _kinds.Kind.FRAGMENT_SPREAD:
              var fragName = selection.name.value;
              if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
                continue;
              }
              visitedFragmentNames[fragName] = true;
              var fragment = exeContext.fragments[fragName];
              if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
                continue;
              }
              collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
              break;
          }
        }
        return fields;
      }
      function shouldIncludeNode(exeContext, node) {
        var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);
        if (skip && skip.if === true) {
          return false;
        }
        var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);
        if (include && include.if === false) {
          return false;
        }
        return true;
      }
      function doesFragmentConditionMatch(exeContext, fragment, type) {
        var typeConditionNode = fragment.typeCondition;
        if (!typeConditionNode) {
          return true;
        }
        var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);
        if (conditionalType === type) {
          return true;
        }
        if ((0, _definition.isAbstractType)(conditionalType)) {
          return exeContext.schema.isPossibleType(conditionalType, type);
        }
        return false;
      }
      function getFieldEntryKey(node) {
        return node.alias ? node.alias.value : node.name.value;
      }
      function resolveField(exeContext, parentType, source, fieldNodes, path) {
        var fieldNode = fieldNodes[0];
        var fieldName = fieldNode.name.value;
        var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);
        if (!fieldDef) {
          return;
        }
        var resolveFn = fieldDef.resolve || exeContext.fieldResolver;
        var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);
        var result2 = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);
        return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result2);
      }
      function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
        return {
          fieldName: fieldNodes[0].name.value,
          fieldNodes,
          returnType: fieldDef.type,
          parentType,
          path,
          schema: exeContext.schema,
          fragments: exeContext.fragments,
          rootValue: exeContext.rootValue,
          operation: exeContext.operation,
          variableValues: exeContext.variableValues
        };
      }
      function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {
        try {
          var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);
          var context = exeContext.contextValue;
          var result2 = resolveFn(source, args, context, info);
          return (0, _isPromise2.default)(result2) ? result2.then(void 0, asErrorInstance) : result2;
        } catch (error) {
          return asErrorInstance(error);
        }
      }
      function asErrorInstance(error) {
        return error instanceof Error ? error : new Error(error || void 0);
      }
      function completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result2) {
        if ((0, _definition.isNonNullType)(returnType)) {
          return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result2);
        }
        try {
          var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result2);
          if ((0, _isPromise2.default)(completed)) {
            return completed.then(void 0, function(error) {
              exeContext.errors.push(error);
              return Promise.resolve(null);
            });
          }
          return completed;
        } catch (error) {
          exeContext.errors.push(error);
          return null;
        }
      }
      function completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result2) {
        try {
          var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result2);
          if ((0, _isPromise2.default)(completed)) {
            return completed.then(void 0, function(error) {
              return Promise.reject((0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray2(path)));
            });
          }
          return completed;
        } catch (error) {
          throw (0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray2(path));
        }
      }
      function completeValue(exeContext, returnType, fieldNodes, info, path, result2) {
        if ((0, _isPromise2.default)(result2)) {
          return result2.then(function(resolved) {
            return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
          });
        }
        if (result2 instanceof Error) {
          throw result2;
        }
        if ((0, _definition.isNonNullType)(returnType)) {
          var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result2);
          if (completed === null) {
            throw new Error("Cannot return null for non-nullable field " + info.parentType.name + "." + info.fieldName + ".");
          }
          return completed;
        }
        if ((0, _isNullish2.default)(result2)) {
          return null;
        }
        if ((0, _definition.isListType)(returnType)) {
          return completeListValue(exeContext, returnType, fieldNodes, info, path, result2);
        }
        if ((0, _definition.isLeafType)(returnType)) {
          return completeLeafValue(returnType, result2);
        }
        if ((0, _definition.isAbstractType)(returnType)) {
          return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result2);
        }
        if ((0, _definition.isObjectType)(returnType)) {
          return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result2);
        }
        throw new Error('Cannot complete value of unexpected type "' + String(returnType) + '".');
      }
      function completeListValue(exeContext, returnType, fieldNodes, info, path, result2) {
        !(0, _iterall.isCollection)(result2) ? (0, _invariant2.default)(0, "Expected Iterable, but did not find one for field " + info.parentType.name + "." + info.fieldName + ".") : void 0;
        var itemType = returnType.ofType;
        var containsPromise = false;
        var completedResults = [];
        (0, _iterall.forEach)(result2, function(item, index) {
          var fieldPath = addPath(path, index);
          var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);
          if (!containsPromise && (0, _isPromise2.default)(completedItem)) {
            containsPromise = true;
          }
          completedResults.push(completedItem);
        });
        return containsPromise ? Promise.all(completedResults) : completedResults;
      }
      function completeLeafValue(returnType, result2) {
        !returnType.serialize ? (0, _invariant2.default)(0, "Missing serialize method on type") : void 0;
        var serializedResult = returnType.serialize(result2);
        if ((0, _isInvalid2.default)(serializedResult)) {
          throw new Error('Expected a value of type "' + String(returnType) + '" but ' + ("received: " + String(result2)));
        }
        return serializedResult;
      }
      function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result2) {
        var runtimeType = returnType.resolveType ? returnType.resolveType(result2, exeContext.contextValue, info) : defaultResolveTypeFn(result2, exeContext.contextValue, info, returnType);
        if ((0, _isPromise2.default)(runtimeType)) {
          return runtimeType.then(function(resolvedRuntimeType) {
            return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result2), fieldNodes, info, path, result2);
          });
        }
        return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result2), fieldNodes, info, path, result2);
      }
      function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result2) {
        var runtimeType = typeof runtimeTypeOrName === "string" ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;
        if (!(0, _definition.isObjectType)(runtimeType)) {
          throw new _error.GraphQLError("Abstract type " + returnType.name + " must resolve to an Object type at " + ("runtime for field " + info.parentType.name + "." + info.fieldName + " with ") + ('value "' + String(result2) + '", received "' + String(runtimeType) + '". ') + ("Either the " + returnType.name + ' type should provide a "resolveType" ') + 'function or each possible types should provide an "isTypeOf" function.', fieldNodes);
        }
        if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {
          throw new _error.GraphQLError('Runtime Object type "' + runtimeType.name + '" is not a possible type ' + ('for "' + returnType.name + '".'), fieldNodes);
        }
        return runtimeType;
      }
      function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result2) {
        if (returnType.isTypeOf) {
          var isTypeOf = returnType.isTypeOf(result2, exeContext.contextValue, info);
          if ((0, _isPromise2.default)(isTypeOf)) {
            return isTypeOf.then(function(resolvedIsTypeOf) {
              if (!resolvedIsTypeOf) {
                throw invalidReturnTypeError(returnType, result2, fieldNodes);
              }
              return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result2);
            });
          }
          if (!isTypeOf) {
            throw invalidReturnTypeError(returnType, result2, fieldNodes);
          }
        }
        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result2);
      }
      function invalidReturnTypeError(returnType, result2, fieldNodes) {
        return new _error.GraphQLError('Expected value of type "' + returnType.name + '" but got: ' + String(result2) + ".", fieldNodes);
      }
      function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result2) {
        var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
        return executeFields(exeContext, returnType, result2, path, subFieldNodes);
      }
      var collectSubfields = (0, _memoize2.default)(_collectSubfields);
      function _collectSubfields(exeContext, returnType, fieldNodes) {
        var subFieldNodes = /* @__PURE__ */ Object.create(null);
        var visitedFragmentNames = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < fieldNodes.length; i++) {
          var selectionSet = fieldNodes[i].selectionSet;
          if (selectionSet) {
            subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);
          }
        }
        return subFieldNodes;
      }
      function defaultResolveTypeFn(value, context, info, abstractType) {
        if (value !== null && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && typeof value.__typename === "string") {
          return value.__typename;
        }
        var possibleTypes = info.schema.getPossibleTypes(abstractType);
        var promisedIsTypeOfResults = [];
        for (var i = 0; i < possibleTypes.length; i++) {
          var type = possibleTypes[i];
          if (type.isTypeOf) {
            var isTypeOfResult = type.isTypeOf(value, context, info);
            if ((0, _isPromise2.default)(isTypeOfResult)) {
              promisedIsTypeOfResults[i] = isTypeOfResult;
            } else if (isTypeOfResult) {
              return type;
            }
          }
        }
        if (promisedIsTypeOfResults.length) {
          return Promise.all(promisedIsTypeOfResults).then(function(isTypeOfResults) {
            for (var _i = 0; _i < isTypeOfResults.length; _i++) {
              if (isTypeOfResults[_i]) {
                return possibleTypes[_i];
              }
            }
          });
        }
      }
      var defaultFieldResolver2 = exports2.defaultFieldResolver = function defaultFieldResolver3(source, args, context, info) {
        if ((typeof source === "undefined" ? "undefined" : _typeof(source)) === "object" || typeof source === "function") {
          var property = source[info.fieldName];
          if (typeof property === "function") {
            return source[info.fieldName](args, context, info);
          }
          return property;
        }
      };
      function getFieldDef(schema, parentType, fieldName) {
        if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
          return _introspection.SchemaMetaFieldDef;
        } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
          return _introspection.TypeMetaFieldDef;
        } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
          return _introspection.TypeNameMetaFieldDef;
        }
        return parentType.getFields()[fieldName];
      }
    }
  });

  // node_modules/graphql/graphql.js
  var require_graphql = __commonJS({
    "node_modules/graphql/graphql.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.graphql = graphql2;
      exports2.graphqlSync = graphqlSync2;
      var _validate = require_validate();
      var _parser = require_parser();
      var _validate2 = require_validate2();
      var _execute = require_execute();
      function graphql2(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        var _arguments = arguments;
        return new Promise(function(resolve) {
          return resolve(
            _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver)
          );
        });
      }
      function graphqlSync2(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        var result2 = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);
        if (result2.then) {
          throw new Error("GraphQL execution failed to complete synchronously.");
        }
        return result2;
      }
      function graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        var schemaValidationErrors = (0, _validate.validateSchema)(schema);
        if (schemaValidationErrors.length > 0) {
          return { errors: schemaValidationErrors };
        }
        var document2 = void 0;
        try {
          document2 = (0, _parser.parse)(source);
        } catch (syntaxError) {
          return { errors: [syntaxError] };
        }
        var validationErrors = (0, _validate2.validate)(schema, document2);
        if (validationErrors.length > 0) {
          return { errors: validationErrors };
        }
        return (0, _execute.execute)(schema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver);
      }
    }
  });

  // node_modules/graphql/type/index.js
  var require_type = __commonJS({
    "node_modules/graphql/type/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _schema = require_schema();
      Object.defineProperty(exports2, "isSchema", {
        enumerable: true,
        get: function get2() {
          return _schema.isSchema;
        }
      });
      Object.defineProperty(exports2, "GraphQLSchema", {
        enumerable: true,
        get: function get2() {
          return _schema.GraphQLSchema;
        }
      });
      var _definition = require_definition();
      Object.defineProperty(exports2, "isType", {
        enumerable: true,
        get: function get2() {
          return _definition.isType;
        }
      });
      Object.defineProperty(exports2, "isScalarType", {
        enumerable: true,
        get: function get2() {
          return _definition.isScalarType;
        }
      });
      Object.defineProperty(exports2, "isObjectType", {
        enumerable: true,
        get: function get2() {
          return _definition.isObjectType;
        }
      });
      Object.defineProperty(exports2, "isInterfaceType", {
        enumerable: true,
        get: function get2() {
          return _definition.isInterfaceType;
        }
      });
      Object.defineProperty(exports2, "isUnionType", {
        enumerable: true,
        get: function get2() {
          return _definition.isUnionType;
        }
      });
      Object.defineProperty(exports2, "isEnumType", {
        enumerable: true,
        get: function get2() {
          return _definition.isEnumType;
        }
      });
      Object.defineProperty(exports2, "isInputObjectType", {
        enumerable: true,
        get: function get2() {
          return _definition.isInputObjectType;
        }
      });
      Object.defineProperty(exports2, "isListType", {
        enumerable: true,
        get: function get2() {
          return _definition.isListType;
        }
      });
      Object.defineProperty(exports2, "isNonNullType", {
        enumerable: true,
        get: function get2() {
          return _definition.isNonNullType;
        }
      });
      Object.defineProperty(exports2, "isInputType", {
        enumerable: true,
        get: function get2() {
          return _definition.isInputType;
        }
      });
      Object.defineProperty(exports2, "isOutputType", {
        enumerable: true,
        get: function get2() {
          return _definition.isOutputType;
        }
      });
      Object.defineProperty(exports2, "isLeafType", {
        enumerable: true,
        get: function get2() {
          return _definition.isLeafType;
        }
      });
      Object.defineProperty(exports2, "isCompositeType", {
        enumerable: true,
        get: function get2() {
          return _definition.isCompositeType;
        }
      });
      Object.defineProperty(exports2, "isAbstractType", {
        enumerable: true,
        get: function get2() {
          return _definition.isAbstractType;
        }
      });
      Object.defineProperty(exports2, "isWrappingType", {
        enumerable: true,
        get: function get2() {
          return _definition.isWrappingType;
        }
      });
      Object.defineProperty(exports2, "isNullableType", {
        enumerable: true,
        get: function get2() {
          return _definition.isNullableType;
        }
      });
      Object.defineProperty(exports2, "isNamedType", {
        enumerable: true,
        get: function get2() {
          return _definition.isNamedType;
        }
      });
      Object.defineProperty(exports2, "assertType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertType;
        }
      });
      Object.defineProperty(exports2, "assertScalarType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertScalarType;
        }
      });
      Object.defineProperty(exports2, "assertObjectType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertObjectType;
        }
      });
      Object.defineProperty(exports2, "assertInterfaceType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertInterfaceType;
        }
      });
      Object.defineProperty(exports2, "assertUnionType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertUnionType;
        }
      });
      Object.defineProperty(exports2, "assertEnumType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertEnumType;
        }
      });
      Object.defineProperty(exports2, "assertInputObjectType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertInputObjectType;
        }
      });
      Object.defineProperty(exports2, "assertListType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertListType;
        }
      });
      Object.defineProperty(exports2, "assertNonNullType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertNonNullType;
        }
      });
      Object.defineProperty(exports2, "assertInputType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertInputType;
        }
      });
      Object.defineProperty(exports2, "assertOutputType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertOutputType;
        }
      });
      Object.defineProperty(exports2, "assertLeafType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertLeafType;
        }
      });
      Object.defineProperty(exports2, "assertCompositeType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertCompositeType;
        }
      });
      Object.defineProperty(exports2, "assertAbstractType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertAbstractType;
        }
      });
      Object.defineProperty(exports2, "assertWrappingType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertWrappingType;
        }
      });
      Object.defineProperty(exports2, "assertNullableType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertNullableType;
        }
      });
      Object.defineProperty(exports2, "assertNamedType", {
        enumerable: true,
        get: function get2() {
          return _definition.assertNamedType;
        }
      });
      Object.defineProperty(exports2, "getNullableType", {
        enumerable: true,
        get: function get2() {
          return _definition.getNullableType;
        }
      });
      Object.defineProperty(exports2, "getNamedType", {
        enumerable: true,
        get: function get2() {
          return _definition.getNamedType;
        }
      });
      Object.defineProperty(exports2, "GraphQLScalarType", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLScalarType;
        }
      });
      Object.defineProperty(exports2, "GraphQLObjectType", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLObjectType;
        }
      });
      Object.defineProperty(exports2, "GraphQLInterfaceType", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLInterfaceType;
        }
      });
      Object.defineProperty(exports2, "GraphQLUnionType", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLUnionType;
        }
      });
      Object.defineProperty(exports2, "GraphQLEnumType", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLEnumType;
        }
      });
      Object.defineProperty(exports2, "GraphQLInputObjectType", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLInputObjectType;
        }
      });
      Object.defineProperty(exports2, "GraphQLList", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLList;
        }
      });
      Object.defineProperty(exports2, "GraphQLNonNull", {
        enumerable: true,
        get: function get2() {
          return _definition.GraphQLNonNull;
        }
      });
      var _directives = require_directives();
      Object.defineProperty(exports2, "isDirective", {
        enumerable: true,
        get: function get2() {
          return _directives.isDirective;
        }
      });
      Object.defineProperty(exports2, "GraphQLDirective", {
        enumerable: true,
        get: function get2() {
          return _directives.GraphQLDirective;
        }
      });
      Object.defineProperty(exports2, "isSpecifiedDirective", {
        enumerable: true,
        get: function get2() {
          return _directives.isSpecifiedDirective;
        }
      });
      Object.defineProperty(exports2, "specifiedDirectives", {
        enumerable: true,
        get: function get2() {
          return _directives.specifiedDirectives;
        }
      });
      Object.defineProperty(exports2, "GraphQLIncludeDirective", {
        enumerable: true,
        get: function get2() {
          return _directives.GraphQLIncludeDirective;
        }
      });
      Object.defineProperty(exports2, "GraphQLSkipDirective", {
        enumerable: true,
        get: function get2() {
          return _directives.GraphQLSkipDirective;
        }
      });
      Object.defineProperty(exports2, "GraphQLDeprecatedDirective", {
        enumerable: true,
        get: function get2() {
          return _directives.GraphQLDeprecatedDirective;
        }
      });
      Object.defineProperty(exports2, "DEFAULT_DEPRECATION_REASON", {
        enumerable: true,
        get: function get2() {
          return _directives.DEFAULT_DEPRECATION_REASON;
        }
      });
      var _scalars = require_scalars();
      Object.defineProperty(exports2, "isSpecifiedScalarType", {
        enumerable: true,
        get: function get2() {
          return _scalars.isSpecifiedScalarType;
        }
      });
      Object.defineProperty(exports2, "specifiedScalarTypes", {
        enumerable: true,
        get: function get2() {
          return _scalars.specifiedScalarTypes;
        }
      });
      Object.defineProperty(exports2, "GraphQLInt", {
        enumerable: true,
        get: function get2() {
          return _scalars.GraphQLInt;
        }
      });
      Object.defineProperty(exports2, "GraphQLFloat", {
        enumerable: true,
        get: function get2() {
          return _scalars.GraphQLFloat;
        }
      });
      Object.defineProperty(exports2, "GraphQLString", {
        enumerable: true,
        get: function get2() {
          return _scalars.GraphQLString;
        }
      });
      Object.defineProperty(exports2, "GraphQLBoolean", {
        enumerable: true,
        get: function get2() {
          return _scalars.GraphQLBoolean;
        }
      });
      Object.defineProperty(exports2, "GraphQLID", {
        enumerable: true,
        get: function get2() {
          return _scalars.GraphQLID;
        }
      });
      var _introspection = require_introspection();
      Object.defineProperty(exports2, "TypeKind", {
        enumerable: true,
        get: function get2() {
          return _introspection.TypeKind;
        }
      });
      Object.defineProperty(exports2, "isIntrospectionType", {
        enumerable: true,
        get: function get2() {
          return _introspection.isIntrospectionType;
        }
      });
      Object.defineProperty(exports2, "introspectionTypes", {
        enumerable: true,
        get: function get2() {
          return _introspection.introspectionTypes;
        }
      });
      Object.defineProperty(exports2, "__Schema", {
        enumerable: true,
        get: function get2() {
          return _introspection.__Schema;
        }
      });
      Object.defineProperty(exports2, "__Directive", {
        enumerable: true,
        get: function get2() {
          return _introspection.__Directive;
        }
      });
      Object.defineProperty(exports2, "__DirectiveLocation", {
        enumerable: true,
        get: function get2() {
          return _introspection.__DirectiveLocation;
        }
      });
      Object.defineProperty(exports2, "__Type", {
        enumerable: true,
        get: function get2() {
          return _introspection.__Type;
        }
      });
      Object.defineProperty(exports2, "__Field", {
        enumerable: true,
        get: function get2() {
          return _introspection.__Field;
        }
      });
      Object.defineProperty(exports2, "__InputValue", {
        enumerable: true,
        get: function get2() {
          return _introspection.__InputValue;
        }
      });
      Object.defineProperty(exports2, "__EnumValue", {
        enumerable: true,
        get: function get2() {
          return _introspection.__EnumValue;
        }
      });
      Object.defineProperty(exports2, "__TypeKind", {
        enumerable: true,
        get: function get2() {
          return _introspection.__TypeKind;
        }
      });
      Object.defineProperty(exports2, "SchemaMetaFieldDef", {
        enumerable: true,
        get: function get2() {
          return _introspection.SchemaMetaFieldDef;
        }
      });
      Object.defineProperty(exports2, "TypeMetaFieldDef", {
        enumerable: true,
        get: function get2() {
          return _introspection.TypeMetaFieldDef;
        }
      });
      Object.defineProperty(exports2, "TypeNameMetaFieldDef", {
        enumerable: true,
        get: function get2() {
          return _introspection.TypeNameMetaFieldDef;
        }
      });
      var _validate = require_validate();
      Object.defineProperty(exports2, "validateSchema", {
        enumerable: true,
        get: function get2() {
          return _validate.validateSchema;
        }
      });
      Object.defineProperty(exports2, "assertValidSchema", {
        enumerable: true,
        get: function get2() {
          return _validate.assertValidSchema;
        }
      });
    }
  });

  // node_modules/graphql/language/index.js
  var require_language = __commonJS({
    "node_modules/graphql/language/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _location = require_location();
      Object.defineProperty(exports2, "getLocation", {
        enumerable: true,
        get: function get2() {
          return _location.getLocation;
        }
      });
      var _kinds = require_kinds();
      Object.defineProperty(exports2, "Kind", {
        enumerable: true,
        get: function get2() {
          return _kinds.Kind;
        }
      });
      var _lexer = require_lexer();
      Object.defineProperty(exports2, "createLexer", {
        enumerable: true,
        get: function get2() {
          return _lexer.createLexer;
        }
      });
      Object.defineProperty(exports2, "TokenKind", {
        enumerable: true,
        get: function get2() {
          return _lexer.TokenKind;
        }
      });
      var _parser = require_parser();
      Object.defineProperty(exports2, "parse", {
        enumerable: true,
        get: function get2() {
          return _parser.parse;
        }
      });
      Object.defineProperty(exports2, "parseValue", {
        enumerable: true,
        get: function get2() {
          return _parser.parseValue;
        }
      });
      Object.defineProperty(exports2, "parseType", {
        enumerable: true,
        get: function get2() {
          return _parser.parseType;
        }
      });
      var _printer = require_printer();
      Object.defineProperty(exports2, "print", {
        enumerable: true,
        get: function get2() {
          return _printer.print;
        }
      });
      var _source = require_source();
      Object.defineProperty(exports2, "Source", {
        enumerable: true,
        get: function get2() {
          return _source.Source;
        }
      });
      var _visitor = require_visitor();
      Object.defineProperty(exports2, "visit", {
        enumerable: true,
        get: function get2() {
          return _visitor.visit;
        }
      });
      Object.defineProperty(exports2, "visitInParallel", {
        enumerable: true,
        get: function get2() {
          return _visitor.visitInParallel;
        }
      });
      Object.defineProperty(exports2, "visitWithTypeInfo", {
        enumerable: true,
        get: function get2() {
          return _visitor.visitWithTypeInfo;
        }
      });
      Object.defineProperty(exports2, "getVisitFn", {
        enumerable: true,
        get: function get2() {
          return _visitor.getVisitFn;
        }
      });
      Object.defineProperty(exports2, "BREAK", {
        enumerable: true,
        get: function get2() {
          return _visitor.BREAK;
        }
      });
      var _directiveLocation = require_directiveLocation();
      Object.defineProperty(exports2, "DirectiveLocation", {
        enumerable: true,
        get: function get2() {
          return _directiveLocation.DirectiveLocation;
        }
      });
    }
  });

  // node_modules/graphql/execution/index.js
  var require_execution = __commonJS({
    "node_modules/graphql/execution/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _execute = require_execute();
      Object.defineProperty(exports2, "execute", {
        enumerable: true,
        get: function get2() {
          return _execute.execute;
        }
      });
      Object.defineProperty(exports2, "defaultFieldResolver", {
        enumerable: true,
        get: function get2() {
          return _execute.defaultFieldResolver;
        }
      });
      Object.defineProperty(exports2, "responsePathAsArray", {
        enumerable: true,
        get: function get2() {
          return _execute.responsePathAsArray;
        }
      });
      var _values = require_values();
      Object.defineProperty(exports2, "getDirectiveValues", {
        enumerable: true,
        get: function get2() {
          return _values.getDirectiveValues;
        }
      });
    }
  });

  // node_modules/graphql/subscription/mapAsyncIterator.js
  var require_mapAsyncIterator = __commonJS({
    "node_modules/graphql/subscription/mapAsyncIterator.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = mapAsyncIterator;
      var _iterall = require_iterall();
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function mapAsyncIterator(iterable, callback, rejectCallback) {
        var iterator = (0, _iterall.getAsyncIterator)(iterable);
        var $return = void 0;
        var abruptClose = void 0;
        if (typeof iterator.return === "function") {
          $return = iterator.return;
          abruptClose = function abruptClose2(error) {
            var rethrow = function rethrow2() {
              return Promise.reject(error);
            };
            return $return.call(iterator).then(rethrow, rethrow);
          };
        }
        function mapResult(result2) {
          return result2.done ? result2 : asyncMapValue(result2.value, callback).then(iteratorResult, abruptClose);
        }
        var mapReject = void 0;
        if (rejectCallback) {
          var reject = rejectCallback;
          mapReject = function mapReject2(error) {
            return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
          };
        }
        return _defineProperty({
          next: function next() {
            return iterator.next().then(mapResult, mapReject);
          },
          return: function _return() {
            return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({ value: void 0, done: true });
          },
          throw: function _throw(error) {
            if (typeof iterator.throw === "function") {
              return iterator.throw(error).then(mapResult, mapReject);
            }
            return Promise.reject(error).catch(abruptClose);
          }
        }, _iterall.$$asyncIterator, function() {
          return this;
        });
      }
      function asyncMapValue(value, callback) {
        return new Promise(function(resolve) {
          return resolve(callback(value));
        });
      }
      function iteratorResult(value) {
        return { value, done: false };
      }
    }
  });

  // node_modules/graphql/subscription/subscribe.js
  var require_subscribe = __commonJS({
    "node_modules/graphql/subscription/subscribe.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.subscribe = subscribe3;
      exports2.createSourceEventStream = createSourceEventStream2;
      var _iterall = require_iterall();
      var _GraphQLError = require_GraphQLError();
      var _locatedError = require_locatedError();
      var _execute = require_execute();
      var _schema = require_schema();
      var _mapAsyncIterator = require_mapAsyncIterator();
      var _mapAsyncIterator2 = _interopRequireDefault(_mapAsyncIterator);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function subscribe3(argsOrSchema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
        return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);
      }
      function reportGraphQLError(error) {
        if (error instanceof _GraphQLError.GraphQLError) {
          return { errors: [error] };
        }
        throw error;
      }
      function subscribeImpl(schema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
        var sourcePromise = createSourceEventStream2(schema, document2, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);
        var mapSourceToResponse = function mapSourceToResponse2(payload) {
          return (0, _execute.execute)(schema, document2, payload, contextValue, variableValues, operationName, fieldResolver);
        };
        return sourcePromise.then(function(resultOrStream) {
          return (0, _iterall.isAsyncIterable)(resultOrStream) ? (0, _mapAsyncIterator2.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream;
        }, reportGraphQLError);
      }
      function createSourceEventStream2(schema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        (0, _execute.assertValidExecutionArguments)(schema, document2, variableValues);
        try {
          var exeContext = (0, _execute.buildExecutionContext)(schema, document2, rootValue, contextValue, variableValues, operationName, fieldResolver);
          if (Array.isArray(exeContext)) {
            return Promise.resolve({ errors: exeContext });
          }
          var type = (0, _execute.getOperationRootType)(schema, exeContext.operation);
          var fields = (0, _execute.collectFields)(exeContext, type, exeContext.operation.selectionSet, /* @__PURE__ */ Object.create(null), /* @__PURE__ */ Object.create(null));
          var responseNames = Object.keys(fields);
          var responseName = responseNames[0];
          var fieldNodes = fields[responseName];
          var fieldNode = fieldNodes[0];
          var fieldName = fieldNode.name.value;
          var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);
          if (!fieldDef) {
            throw new _GraphQLError.GraphQLError('The subscription field "' + fieldName + '" is not defined.', fieldNodes);
          }
          var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;
          var path = (0, _execute.addPath)(void 0, responseName);
          var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path);
          var result2 = (0, _execute.resolveFieldValueOrError)(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info);
          return Promise.resolve(result2).then(function(eventStream) {
            if (eventStream instanceof Error) {
              throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _execute.responsePathAsArray)(path));
            }
            if ((0, _iterall.isAsyncIterable)(eventStream)) {
              return eventStream;
            }
            throw new Error("Subscription field must return Async Iterable. Received: " + String(eventStream));
          });
        } catch (error) {
          return Promise.reject(error);
        }
      }
    }
  });

  // node_modules/graphql/subscription/index.js
  var require_subscription = __commonJS({
    "node_modules/graphql/subscription/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _subscribe = require_subscribe();
      Object.defineProperty(exports2, "subscribe", {
        enumerable: true,
        get: function get2() {
          return _subscribe.subscribe;
        }
      });
      Object.defineProperty(exports2, "createSourceEventStream", {
        enumerable: true,
        get: function get2() {
          return _subscribe.createSourceEventStream;
        }
      });
    }
  });

  // node_modules/graphql/validation/index.js
  var require_validation = __commonJS({
    "node_modules/graphql/validation/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.VariablesInAllowedPositionRule = exports2.VariablesDefaultValueAllowedRule = exports2.VariablesAreInputTypesRule = exports2.ValuesOfCorrectTypeRule = exports2.UniqueVariableNamesRule = exports2.UniqueOperationNamesRule = exports2.UniqueInputFieldNamesRule = exports2.UniqueFragmentNamesRule = exports2.UniqueDirectivesPerLocationRule = exports2.UniqueArgumentNamesRule = exports2.SingleFieldSubscriptionsRule = exports2.ScalarLeafsRule = exports2.ProvidedNonNullArgumentsRule = exports2.PossibleFragmentSpreadsRule = exports2.OverlappingFieldsCanBeMergedRule = exports2.NoUnusedVariablesRule = exports2.NoUnusedFragmentsRule = exports2.NoUndefinedVariablesRule = exports2.NoFragmentCyclesRule = exports2.LoneAnonymousOperationRule = exports2.KnownTypeNamesRule = exports2.KnownFragmentNamesRule = exports2.KnownDirectivesRule = exports2.KnownArgumentNamesRule = exports2.FragmentsOnCompositeTypesRule = exports2.FieldsOnCorrectTypeRule = exports2.specifiedRules = exports2.ValidationContext = exports2.validate = void 0;
      var _validate = require_validate2();
      Object.defineProperty(exports2, "validate", {
        enumerable: true,
        get: function get2() {
          return _validate.validate;
        }
      });
      var _specifiedRules = require_specifiedRules();
      Object.defineProperty(exports2, "specifiedRules", {
        enumerable: true,
        get: function get2() {
          return _specifiedRules.specifiedRules;
        }
      });
      var _FieldsOnCorrectType = require_FieldsOnCorrectType();
      Object.defineProperty(exports2, "FieldsOnCorrectTypeRule", {
        enumerable: true,
        get: function get2() {
          return _FieldsOnCorrectType.FieldsOnCorrectType;
        }
      });
      var _FragmentsOnCompositeTypes = require_FragmentsOnCompositeTypes();
      Object.defineProperty(exports2, "FragmentsOnCompositeTypesRule", {
        enumerable: true,
        get: function get2() {
          return _FragmentsOnCompositeTypes.FragmentsOnCompositeTypes;
        }
      });
      var _KnownArgumentNames = require_KnownArgumentNames();
      Object.defineProperty(exports2, "KnownArgumentNamesRule", {
        enumerable: true,
        get: function get2() {
          return _KnownArgumentNames.KnownArgumentNames;
        }
      });
      var _KnownDirectives = require_KnownDirectives();
      Object.defineProperty(exports2, "KnownDirectivesRule", {
        enumerable: true,
        get: function get2() {
          return _KnownDirectives.KnownDirectives;
        }
      });
      var _KnownFragmentNames = require_KnownFragmentNames();
      Object.defineProperty(exports2, "KnownFragmentNamesRule", {
        enumerable: true,
        get: function get2() {
          return _KnownFragmentNames.KnownFragmentNames;
        }
      });
      var _KnownTypeNames = require_KnownTypeNames();
      Object.defineProperty(exports2, "KnownTypeNamesRule", {
        enumerable: true,
        get: function get2() {
          return _KnownTypeNames.KnownTypeNames;
        }
      });
      var _LoneAnonymousOperation = require_LoneAnonymousOperation();
      Object.defineProperty(exports2, "LoneAnonymousOperationRule", {
        enumerable: true,
        get: function get2() {
          return _LoneAnonymousOperation.LoneAnonymousOperation;
        }
      });
      var _NoFragmentCycles = require_NoFragmentCycles();
      Object.defineProperty(exports2, "NoFragmentCyclesRule", {
        enumerable: true,
        get: function get2() {
          return _NoFragmentCycles.NoFragmentCycles;
        }
      });
      var _NoUndefinedVariables = require_NoUndefinedVariables();
      Object.defineProperty(exports2, "NoUndefinedVariablesRule", {
        enumerable: true,
        get: function get2() {
          return _NoUndefinedVariables.NoUndefinedVariables;
        }
      });
      var _NoUnusedFragments = require_NoUnusedFragments();
      Object.defineProperty(exports2, "NoUnusedFragmentsRule", {
        enumerable: true,
        get: function get2() {
          return _NoUnusedFragments.NoUnusedFragments;
        }
      });
      var _NoUnusedVariables = require_NoUnusedVariables();
      Object.defineProperty(exports2, "NoUnusedVariablesRule", {
        enumerable: true,
        get: function get2() {
          return _NoUnusedVariables.NoUnusedVariables;
        }
      });
      var _OverlappingFieldsCanBeMerged = require_OverlappingFieldsCanBeMerged();
      Object.defineProperty(exports2, "OverlappingFieldsCanBeMergedRule", {
        enumerable: true,
        get: function get2() {
          return _OverlappingFieldsCanBeMerged.OverlappingFieldsCanBeMerged;
        }
      });
      var _PossibleFragmentSpreads = require_PossibleFragmentSpreads();
      Object.defineProperty(exports2, "PossibleFragmentSpreadsRule", {
        enumerable: true,
        get: function get2() {
          return _PossibleFragmentSpreads.PossibleFragmentSpreads;
        }
      });
      var _ProvidedNonNullArguments = require_ProvidedNonNullArguments();
      Object.defineProperty(exports2, "ProvidedNonNullArgumentsRule", {
        enumerable: true,
        get: function get2() {
          return _ProvidedNonNullArguments.ProvidedNonNullArguments;
        }
      });
      var _ScalarLeafs = require_ScalarLeafs();
      Object.defineProperty(exports2, "ScalarLeafsRule", {
        enumerable: true,
        get: function get2() {
          return _ScalarLeafs.ScalarLeafs;
        }
      });
      var _SingleFieldSubscriptions = require_SingleFieldSubscriptions();
      Object.defineProperty(exports2, "SingleFieldSubscriptionsRule", {
        enumerable: true,
        get: function get2() {
          return _SingleFieldSubscriptions.SingleFieldSubscriptions;
        }
      });
      var _UniqueArgumentNames = require_UniqueArgumentNames();
      Object.defineProperty(exports2, "UniqueArgumentNamesRule", {
        enumerable: true,
        get: function get2() {
          return _UniqueArgumentNames.UniqueArgumentNames;
        }
      });
      var _UniqueDirectivesPerLocation = require_UniqueDirectivesPerLocation();
      Object.defineProperty(exports2, "UniqueDirectivesPerLocationRule", {
        enumerable: true,
        get: function get2() {
          return _UniqueDirectivesPerLocation.UniqueDirectivesPerLocation;
        }
      });
      var _UniqueFragmentNames = require_UniqueFragmentNames();
      Object.defineProperty(exports2, "UniqueFragmentNamesRule", {
        enumerable: true,
        get: function get2() {
          return _UniqueFragmentNames.UniqueFragmentNames;
        }
      });
      var _UniqueInputFieldNames = require_UniqueInputFieldNames();
      Object.defineProperty(exports2, "UniqueInputFieldNamesRule", {
        enumerable: true,
        get: function get2() {
          return _UniqueInputFieldNames.UniqueInputFieldNames;
        }
      });
      var _UniqueOperationNames = require_UniqueOperationNames();
      Object.defineProperty(exports2, "UniqueOperationNamesRule", {
        enumerable: true,
        get: function get2() {
          return _UniqueOperationNames.UniqueOperationNames;
        }
      });
      var _UniqueVariableNames = require_UniqueVariableNames();
      Object.defineProperty(exports2, "UniqueVariableNamesRule", {
        enumerable: true,
        get: function get2() {
          return _UniqueVariableNames.UniqueVariableNames;
        }
      });
      var _ValuesOfCorrectType = require_ValuesOfCorrectType();
      Object.defineProperty(exports2, "ValuesOfCorrectTypeRule", {
        enumerable: true,
        get: function get2() {
          return _ValuesOfCorrectType.ValuesOfCorrectType;
        }
      });
      var _VariablesAreInputTypes = require_VariablesAreInputTypes();
      Object.defineProperty(exports2, "VariablesAreInputTypesRule", {
        enumerable: true,
        get: function get2() {
          return _VariablesAreInputTypes.VariablesAreInputTypes;
        }
      });
      var _VariablesDefaultValueAllowed = require_VariablesDefaultValueAllowed();
      Object.defineProperty(exports2, "VariablesDefaultValueAllowedRule", {
        enumerable: true,
        get: function get2() {
          return _VariablesDefaultValueAllowed.VariablesDefaultValueAllowed;
        }
      });
      var _VariablesInAllowedPosition = require_VariablesInAllowedPosition();
      Object.defineProperty(exports2, "VariablesInAllowedPositionRule", {
        enumerable: true,
        get: function get2() {
          return _VariablesInAllowedPosition.VariablesInAllowedPosition;
        }
      });
      var _ValidationContext = require_ValidationContext();
      var _ValidationContext2 = _interopRequireDefault(_ValidationContext);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports2.ValidationContext = _ValidationContext2.default;
    }
  });

  // node_modules/graphql/utilities/introspectionQuery.js
  var require_introspectionQuery = __commonJS({
    "node_modules/graphql/utilities/introspectionQuery.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.getIntrospectionQuery = getIntrospectionQuery2;
      function getIntrospectionQuery2(options) {
        var descriptions = !(options && options.descriptions === false);
        return "\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          " + (descriptions ? "description" : "") + "\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      " + (descriptions ? "description" : "") + "\n      fields(includeDeprecated: true) {\n        name\n        " + (descriptions ? "description" : "") + "\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        " + (descriptions ? "description" : "") + "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      " + (descriptions ? "description" : "") + "\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ";
      }
      var introspectionQuery2 = exports2.introspectionQuery = getIntrospectionQuery2();
    }
  });

  // node_modules/graphql/utilities/getOperationAST.js
  var require_getOperationAST = __commonJS({
    "node_modules/graphql/utilities/getOperationAST.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.getOperationAST = getOperationAST2;
      var _kinds = require_kinds();
      function getOperationAST2(documentAST, operationName) {
        var operation = null;
        for (var i = 0; i < documentAST.definitions.length; i++) {
          var definition = documentAST.definitions[i];
          if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
            if (!operationName) {
              if (operation) {
                return null;
              }
              operation = definition;
            } else if (definition.name && definition.name.value === operationName) {
              return definition;
            }
          }
        }
        return operation;
      }
    }
  });

  // node_modules/graphql/utilities/introspectionFromSchema.js
  var require_introspectionFromSchema = __commonJS({
    "node_modules/graphql/utilities/introspectionFromSchema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.introspectionFromSchema = introspectionFromSchema2;
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _introspectionQuery = require_introspectionQuery();
      var _schema = require_schema();
      var _execute = require_execute();
      var _parser = require_parser();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function introspectionFromSchema2(schema, options) {
        var queryAST = (0, _parser.parse)((0, _introspectionQuery.getIntrospectionQuery)(options));
        var result2 = (0, _execute.execute)(schema, queryAST);
        !(!result2.then && !result2.errors && result2.data) ? (0, _invariant2.default)(0) : void 0;
        return result2.data;
      }
    }
  });

  // node_modules/graphql/utilities/buildClientSchema.js
  var require_buildClientSchema = __commonJS({
    "node_modules/graphql/utilities/buildClientSchema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.buildClientSchema = buildClientSchema2;
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      var _keyValMap = require_keyValMap();
      var _keyValMap2 = _interopRequireDefault(_keyValMap);
      var _valueFromAST = require_valueFromAST();
      var _parser = require_parser();
      var _schema = require_schema();
      var _directiveLocation = require_directiveLocation();
      var _definition = require_definition();
      var _directives = require_directives();
      var _introspection = require_introspection();
      var _scalars = require_scalars();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function buildClientSchema2(introspection, options) {
        var schemaIntrospection = introspection.__schema;
        var typeIntrospectionMap = (0, _keyMap2.default)(schemaIntrospection.types, function(type) {
          return type.name;
        });
        var typeDefCache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function(type) {
          return type.name;
        });
        function getType(typeRef) {
          if (typeRef.kind === _introspection.TypeKind.LIST) {
            var itemRef = typeRef.ofType;
            if (!itemRef) {
              throw new Error("Decorated type deeper than introspection query.");
            }
            return (0, _definition.GraphQLList)(getType(itemRef));
          }
          if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
            var nullableRef = typeRef.ofType;
            if (!nullableRef) {
              throw new Error("Decorated type deeper than introspection query.");
            }
            var nullableType = getType(nullableRef);
            return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(nullableType));
          }
          if (!typeRef.name) {
            throw new Error("Unknown type reference: " + JSON.stringify(typeRef));
          }
          return getNamedType2(typeRef.name);
        }
        function getNamedType2(typeName) {
          if (typeDefCache[typeName]) {
            return typeDefCache[typeName];
          }
          var typeIntrospection = typeIntrospectionMap[typeName];
          if (!typeIntrospection) {
            throw new Error("Invalid or incomplete schema, unknown type: " + typeName + ". Ensure that a full introspection query is used in order to build a client schema.");
          }
          var typeDef = buildType(typeIntrospection);
          typeDefCache[typeName] = typeDef;
          return typeDef;
        }
        function getInputType(typeRef) {
          var type = getType(typeRef);
          !(0, _definition.isInputType)(type) ? (0, _invariant2.default)(0, "Introspection must provide input type for arguments.") : void 0;
          return type;
        }
        function getOutputType(typeRef) {
          var type = getType(typeRef);
          !(0, _definition.isOutputType)(type) ? (0, _invariant2.default)(0, "Introspection must provide output type for fields.") : void 0;
          return type;
        }
        function getObjectType(typeRef) {
          var type = getType(typeRef);
          return (0, _definition.assertObjectType)(type);
        }
        function getInterfaceType(typeRef) {
          var type = getType(typeRef);
          return (0, _definition.assertInterfaceType)(type);
        }
        function buildType(type) {
          if (type && type.name && type.kind) {
            switch (type.kind) {
              case _introspection.TypeKind.SCALAR:
                return buildScalarDef(type);
              case _introspection.TypeKind.OBJECT:
                return buildObjectDef(type);
              case _introspection.TypeKind.INTERFACE:
                return buildInterfaceDef(type);
              case _introspection.TypeKind.UNION:
                return buildUnionDef(type);
              case _introspection.TypeKind.ENUM:
                return buildEnumDef(type);
              case _introspection.TypeKind.INPUT_OBJECT:
                return buildInputObjectDef(type);
            }
          }
          throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema:" + JSON.stringify(type));
        }
        function buildScalarDef(scalarIntrospection) {
          return new _definition.GraphQLScalarType({
            name: scalarIntrospection.name,
            description: scalarIntrospection.description,
            serialize: function serialize(value) {
              return value;
            }
          });
        }
        function buildObjectDef(objectIntrospection) {
          if (!objectIntrospection.interfaces) {
            throw new Error("Introspection result missing interfaces: " + JSON.stringify(objectIntrospection));
          }
          return new _definition.GraphQLObjectType({
            name: objectIntrospection.name,
            description: objectIntrospection.description,
            interfaces: objectIntrospection.interfaces.map(getInterfaceType),
            fields: function fields() {
              return buildFieldDefMap(objectIntrospection);
            }
          });
        }
        function buildInterfaceDef(interfaceIntrospection) {
          return new _definition.GraphQLInterfaceType({
            name: interfaceIntrospection.name,
            description: interfaceIntrospection.description,
            fields: function fields() {
              return buildFieldDefMap(interfaceIntrospection);
            }
          });
        }
        function buildUnionDef(unionIntrospection) {
          if (!unionIntrospection.possibleTypes) {
            throw new Error("Introspection result missing possibleTypes: " + JSON.stringify(unionIntrospection));
          }
          return new _definition.GraphQLUnionType({
            name: unionIntrospection.name,
            description: unionIntrospection.description,
            types: unionIntrospection.possibleTypes.map(getObjectType)
          });
        }
        function buildEnumDef(enumIntrospection) {
          if (!enumIntrospection.enumValues) {
            throw new Error("Introspection result missing enumValues: " + JSON.stringify(enumIntrospection));
          }
          return new _definition.GraphQLEnumType({
            name: enumIntrospection.name,
            description: enumIntrospection.description,
            values: (0, _keyValMap2.default)(enumIntrospection.enumValues, function(valueIntrospection) {
              return valueIntrospection.name;
            }, function(valueIntrospection) {
              return {
                description: valueIntrospection.description,
                deprecationReason: valueIntrospection.deprecationReason
              };
            })
          });
        }
        function buildInputObjectDef(inputObjectIntrospection) {
          if (!inputObjectIntrospection.inputFields) {
            throw new Error("Introspection result missing inputFields: " + JSON.stringify(inputObjectIntrospection));
          }
          return new _definition.GraphQLInputObjectType({
            name: inputObjectIntrospection.name,
            description: inputObjectIntrospection.description,
            fields: function fields() {
              return buildInputValueDefMap(inputObjectIntrospection.inputFields);
            }
          });
        }
        function buildFieldDefMap(typeIntrospection) {
          if (!typeIntrospection.fields) {
            throw new Error("Introspection result missing fields: " + JSON.stringify(typeIntrospection));
          }
          return (0, _keyValMap2.default)(typeIntrospection.fields, function(fieldIntrospection) {
            return fieldIntrospection.name;
          }, function(fieldIntrospection) {
            if (!fieldIntrospection.args) {
              throw new Error("Introspection result missing field args: " + JSON.stringify(fieldIntrospection));
            }
            return {
              description: fieldIntrospection.description,
              deprecationReason: fieldIntrospection.deprecationReason,
              type: getOutputType(fieldIntrospection.type),
              args: buildInputValueDefMap(fieldIntrospection.args)
            };
          });
        }
        function buildInputValueDefMap(inputValueIntrospections) {
          return (0, _keyValMap2.default)(inputValueIntrospections, function(inputValue) {
            return inputValue.name;
          }, buildInputValue);
        }
        function buildInputValue(inputValueIntrospection) {
          var type = getInputType(inputValueIntrospection.type);
          var defaultValue = inputValueIntrospection.defaultValue ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : void 0;
          return {
            name: inputValueIntrospection.name,
            description: inputValueIntrospection.description,
            type,
            defaultValue
          };
        }
        function buildDirective(directiveIntrospection) {
          var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [_directiveLocation.DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [_directiveLocation.DirectiveLocation.QUERY, _directiveLocation.DirectiveLocation.MUTATION, _directiveLocation.DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT]);
          if (!directiveIntrospection.args) {
            throw new Error("Introspection result missing directive args: " + JSON.stringify(directiveIntrospection));
          }
          return new _directives.GraphQLDirective({
            name: directiveIntrospection.name,
            description: directiveIntrospection.description,
            locations,
            args: buildInputValueDefMap(directiveIntrospection.args)
          });
        }
        var types = schemaIntrospection.types.map(function(typeIntrospection) {
          return getNamedType2(typeIntrospection.name);
        });
        var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
        var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
        var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;
        var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];
        return new _schema.GraphQLSchema({
          query: queryType,
          mutation: mutationType,
          subscription: subscriptionType,
          types,
          directives,
          assumeValid: options && options.assumeValid,
          allowedLegacyNames: options && options.allowedLegacyNames
        });
      }
    }
  });

  // node_modules/graphql/utilities/buildASTSchema.js
  var require_buildASTSchema = __commonJS({
    "node_modules/graphql/utilities/buildASTSchema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.ASTDefinitionBuilder = void 0;
      exports2.buildASTSchema = buildASTSchema2;
      exports2.getDescription = getDescription2;
      exports2.buildSchema = buildSchema2;
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      var _keyValMap = require_keyValMap();
      var _keyValMap2 = _interopRequireDefault(_keyValMap);
      var _valueFromAST = require_valueFromAST();
      var _blockStringValue = require_blockStringValue();
      var _blockStringValue2 = _interopRequireDefault(_blockStringValue);
      var _lexer = require_lexer();
      var _parser = require_parser();
      var _values = require_values();
      var _kinds = require_kinds();
      var _definition = require_definition();
      var _directives = require_directives();
      var _introspection = require_introspection();
      var _scalars = require_scalars();
      var _schema = require_schema();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function buildWrappedType(innerType, inputTypeNode) {
        if (inputTypeNode.kind === _kinds.Kind.LIST_TYPE) {
          return (0, _definition.GraphQLList)(buildWrappedType(innerType, inputTypeNode.type));
        }
        if (inputTypeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
          var wrappedType = buildWrappedType(innerType, inputTypeNode.type);
          return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(wrappedType));
        }
        return innerType;
      }
      function getNamedTypeNode(typeNode) {
        var namedType = typeNode;
        while (namedType.kind === _kinds.Kind.LIST_TYPE || namedType.kind === _kinds.Kind.NON_NULL_TYPE) {
          namedType = namedType.type;
        }
        return namedType;
      }
      function buildASTSchema2(ast, options) {
        if (!ast || ast.kind !== _kinds.Kind.DOCUMENT) {
          throw new Error("Must provide a document ast.");
        }
        var schemaDef = void 0;
        var typeDefs = [];
        var nodeMap = /* @__PURE__ */ Object.create(null);
        var directiveDefs = [];
        for (var i = 0; i < ast.definitions.length; i++) {
          var d = ast.definitions[i];
          switch (d.kind) {
            case _kinds.Kind.SCHEMA_DEFINITION:
              if (schemaDef) {
                throw new Error("Must provide only one schema definition.");
              }
              schemaDef = d;
              break;
            case _kinds.Kind.SCALAR_TYPE_DEFINITION:
            case _kinds.Kind.OBJECT_TYPE_DEFINITION:
            case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
            case _kinds.Kind.ENUM_TYPE_DEFINITION:
            case _kinds.Kind.UNION_TYPE_DEFINITION:
            case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
              var typeName = d.name.value;
              if (nodeMap[typeName]) {
                throw new Error('Type "' + typeName + '" was defined more than once.');
              }
              typeDefs.push(d);
              nodeMap[typeName] = d;
              break;
            case _kinds.Kind.DIRECTIVE_DEFINITION:
              directiveDefs.push(d);
              break;
          }
        }
        var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {
          query: nodeMap.Query,
          mutation: nodeMap.Mutation,
          subscription: nodeMap.Subscription
        };
        var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function(typeRef) {
          throw new Error('Type "' + typeRef.name.value + '" not found in document.');
        });
        var types = definitionBuilder.buildTypes(typeDefs);
        var directives = directiveDefs.map(function(def) {
          return definitionBuilder.buildDirective(def);
        });
        if (!directives.some(function(directive) {
          return directive.name === "skip";
        })) {
          directives.push(_directives.GraphQLSkipDirective);
        }
        if (!directives.some(function(directive) {
          return directive.name === "include";
        })) {
          directives.push(_directives.GraphQLIncludeDirective);
        }
        if (!directives.some(function(directive) {
          return directive.name === "deprecated";
        })) {
          directives.push(_directives.GraphQLDeprecatedDirective);
        }
        return new _schema.GraphQLSchema({
          query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,
          mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,
          subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,
          types,
          directives,
          astNode: schemaDef,
          assumeValid: options && options.assumeValid,
          allowedLegacyNames: options && options.allowedLegacyNames
        });
        function getOperationTypes(schema) {
          var opTypes = {};
          schema.operationTypes.forEach(function(operationType) {
            var typeName2 = operationType.type.name.value;
            var operation = operationType.operation;
            if (opTypes[operation]) {
              throw new Error("Must provide only one " + operation + " type in schema.");
            }
            if (!nodeMap[typeName2]) {
              throw new Error("Specified " + operation + ' type "' + typeName2 + '" not found in document.');
            }
            opTypes[operation] = operationType.type;
          });
          return opTypes;
        }
      }
      var ASTDefinitionBuilder = exports2.ASTDefinitionBuilder = function() {
        function ASTDefinitionBuilder2(typeDefinitionsMap, options, resolveType) {
          _classCallCheck(this, ASTDefinitionBuilder2);
          this._typeDefinitionsMap = typeDefinitionsMap;
          this._options = options;
          this._resolveType = resolveType;
          this._cache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function(type) {
            return type.name;
          });
        }
        ASTDefinitionBuilder2.prototype.buildTypes = function buildTypes(nodes) {
          var _this = this;
          return nodes.map(function(node) {
            return _this.buildType(node);
          });
        };
        ASTDefinitionBuilder2.prototype.buildType = function buildType(node) {
          var typeName = node.name.value;
          if (!this._cache[typeName]) {
            if (node.kind === _kinds.Kind.NAMED_TYPE) {
              var defNode = this._typeDefinitionsMap[typeName];
              this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);
            } else {
              this._cache[typeName] = this._makeSchemaDef(node);
            }
          }
          return this._cache[typeName];
        };
        ASTDefinitionBuilder2.prototype._buildWrappedType = function _buildWrappedType(typeNode) {
          var typeDef = this.buildType(getNamedTypeNode(typeNode));
          return buildWrappedType(typeDef, typeNode);
        };
        ASTDefinitionBuilder2.prototype.buildDirective = function buildDirective(directiveNode) {
          return new _directives.GraphQLDirective({
            name: directiveNode.name.value,
            description: getDescription2(directiveNode, this._options),
            locations: directiveNode.locations.map(function(node) {
              return node.value;
            }),
            args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),
            astNode: directiveNode
          });
        };
        ASTDefinitionBuilder2.prototype.buildField = function buildField(field) {
          return {
            type: this._buildWrappedType(field.type),
            description: getDescription2(field, this._options),
            args: field.arguments && this._makeInputValues(field.arguments),
            deprecationReason: getDeprecationReason(field),
            astNode: field
          };
        };
        ASTDefinitionBuilder2.prototype._makeSchemaDef = function _makeSchemaDef(def) {
          switch (def.kind) {
            case _kinds.Kind.OBJECT_TYPE_DEFINITION:
              return this._makeTypeDef(def);
            case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
              return this._makeInterfaceDef(def);
            case _kinds.Kind.ENUM_TYPE_DEFINITION:
              return this._makeEnumDef(def);
            case _kinds.Kind.UNION_TYPE_DEFINITION:
              return this._makeUnionDef(def);
            case _kinds.Kind.SCALAR_TYPE_DEFINITION:
              return this._makeScalarDef(def);
            case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
              return this._makeInputObjectDef(def);
            default:
              throw new Error('Type kind "' + def.kind + '" not supported.');
          }
        };
        ASTDefinitionBuilder2.prototype._makeTypeDef = function _makeTypeDef(def) {
          var _this2 = this;
          var typeName = def.name.value;
          var interfaces = def.interfaces;
          return new _definition.GraphQLObjectType({
            name: typeName,
            description: getDescription2(def, this._options),
            fields: function fields() {
              return _this2._makeFieldDefMap(def);
            },
            interfaces: interfaces ? function() {
              return _this2.buildTypes(interfaces);
            } : [],
            astNode: def
          });
        };
        ASTDefinitionBuilder2.prototype._makeFieldDefMap = function _makeFieldDefMap(def) {
          var _this3 = this;
          return def.fields ? (0, _keyValMap2.default)(def.fields, function(field) {
            return field.name.value;
          }, function(field) {
            return _this3.buildField(field);
          }) : {};
        };
        ASTDefinitionBuilder2.prototype._makeInputValues = function _makeInputValues(values) {
          var _this4 = this;
          return (0, _keyValMap2.default)(values, function(value) {
            return value.name.value;
          }, function(value) {
            var type = _this4._buildWrappedType(value.type);
            return {
              type,
              description: getDescription2(value, _this4._options),
              defaultValue: (0, _valueFromAST.valueFromAST)(value.defaultValue, type),
              astNode: value
            };
          });
        };
        ASTDefinitionBuilder2.prototype._makeInterfaceDef = function _makeInterfaceDef(def) {
          var _this5 = this;
          return new _definition.GraphQLInterfaceType({
            name: def.name.value,
            description: getDescription2(def, this._options),
            fields: function fields() {
              return _this5._makeFieldDefMap(def);
            },
            astNode: def
          });
        };
        ASTDefinitionBuilder2.prototype._makeEnumDef = function _makeEnumDef(def) {
          var _this6 = this;
          return new _definition.GraphQLEnumType({
            name: def.name.value,
            description: getDescription2(def, this._options),
            values: def.values ? (0, _keyValMap2.default)(def.values, function(enumValue) {
              return enumValue.name.value;
            }, function(enumValue) {
              return {
                description: getDescription2(enumValue, _this6._options),
                deprecationReason: getDeprecationReason(enumValue),
                astNode: enumValue
              };
            }) : {},
            astNode: def
          });
        };
        ASTDefinitionBuilder2.prototype._makeUnionDef = function _makeUnionDef(def) {
          return new _definition.GraphQLUnionType({
            name: def.name.value,
            description: getDescription2(def, this._options),
            types: def.types ? this.buildTypes(def.types) : [],
            astNode: def
          });
        };
        ASTDefinitionBuilder2.prototype._makeScalarDef = function _makeScalarDef(def) {
          return new _definition.GraphQLScalarType({
            name: def.name.value,
            description: getDescription2(def, this._options),
            astNode: def,
            serialize: function serialize(value) {
              return value;
            }
          });
        };
        ASTDefinitionBuilder2.prototype._makeInputObjectDef = function _makeInputObjectDef(def) {
          var _this7 = this;
          return new _definition.GraphQLInputObjectType({
            name: def.name.value,
            description: getDescription2(def, this._options),
            fields: function fields() {
              return def.fields ? _this7._makeInputValues(def.fields) : {};
            },
            astNode: def
          });
        };
        return ASTDefinitionBuilder2;
      }();
      function getDeprecationReason(node) {
        var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);
        return deprecated && deprecated.reason;
      }
      function getDescription2(node, options) {
        if (node.description) {
          return node.description.value;
        }
        if (options && options.commentDescriptions) {
          var rawValue = getLeadingCommentBlock(node);
          if (rawValue !== void 0) {
            return (0, _blockStringValue2.default)("\n" + rawValue);
          }
        }
      }
      function getLeadingCommentBlock(node) {
        var loc = node.loc;
        if (!loc) {
          return;
        }
        var comments = [];
        var token = loc.startToken.prev;
        while (token && token.kind === _lexer.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
          var value = String(token.value);
          comments.push(value);
          token = token.prev;
        }
        return comments.reverse().join("\n");
      }
      function buildSchema2(source, options) {
        return buildASTSchema2((0, _parser.parse)(source, options), options);
      }
    }
  });

  // node_modules/graphql/utilities/extendSchema.js
  var require_extendSchema = __commonJS({
    "node_modules/graphql/utilities/extendSchema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.extendSchema = extendSchema2;
      var _invariant = require_invariant();
      var _invariant2 = _interopRequireDefault(_invariant);
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      var _buildASTSchema = require_buildASTSchema();
      var _GraphQLError = require_GraphQLError();
      var _schema = require_schema();
      var _introspection = require_introspection();
      var _definition = require_definition();
      var _directives = require_directives();
      var _kinds = require_kinds();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function extendSchema2(schema, documentAST, options) {
        !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, "Must provide valid GraphQLSchema") : void 0;
        !(documentAST && documentAST.kind === _kinds.Kind.DOCUMENT) ? (0, _invariant2.default)(0, "Must provide valid Document AST") : void 0;
        var typeDefinitionMap = /* @__PURE__ */ Object.create(null);
        var typeExtensionsMap = /* @__PURE__ */ Object.create(null);
        var directiveDefinitions = [];
        for (var i = 0; i < documentAST.definitions.length; i++) {
          var def = documentAST.definitions[i];
          switch (def.kind) {
            case _kinds.Kind.OBJECT_TYPE_DEFINITION:
            case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
            case _kinds.Kind.ENUM_TYPE_DEFINITION:
            case _kinds.Kind.UNION_TYPE_DEFINITION:
            case _kinds.Kind.SCALAR_TYPE_DEFINITION:
            case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
              var typeName = def.name.value;
              if (schema.getType(typeName)) {
                throw new _GraphQLError.GraphQLError('Type "' + typeName + '" already exists in the schema. It cannot also be defined in this type definition.', [def]);
              }
              typeDefinitionMap[typeName] = def;
              break;
            case _kinds.Kind.OBJECT_TYPE_EXTENSION:
            case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
              var extendedTypeName = def.name.value;
              var existingType = schema.getType(extendedTypeName);
              if (!existingType) {
                throw new _GraphQLError.GraphQLError('Cannot extend type "' + extendedTypeName + '" because it does not exist in the existing schema.', [def]);
              }
              checkExtensionNode(existingType, def);
              var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
              typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
              break;
            case _kinds.Kind.DIRECTIVE_DEFINITION:
              var directiveName = def.name.value;
              var existingDirective = schema.getDirective(directiveName);
              if (existingDirective) {
                throw new _GraphQLError.GraphQLError('Directive "' + directiveName + '" already exists in the schema. It cannot be redefined.', [def]);
              }
              directiveDefinitions.push(def);
              break;
            case _kinds.Kind.SCALAR_TYPE_EXTENSION:
            case _kinds.Kind.UNION_TYPE_EXTENSION:
            case _kinds.Kind.ENUM_TYPE_EXTENSION:
            case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
              throw new Error("The " + def.kind + " kind is not yet supported by extendSchema().");
          }
        }
        if (Object.keys(typeExtensionsMap).length === 0 && Object.keys(typeDefinitionMap).length === 0 && directiveDefinitions.length === 0) {
          return schema;
        }
        var astBuilder = new _buildASTSchema.ASTDefinitionBuilder(typeDefinitionMap, options, function(typeRef) {
          var typeName2 = typeRef.name.value;
          var existingType2 = schema.getType(typeName2);
          if (existingType2) {
            return getExtendedType(existingType2);
          }
          throw new _GraphQLError.GraphQLError('Unknown type: "' + typeName2 + '". Ensure that this type exists either in the original schema, or is added in a type definition.', [typeRef]);
        });
        var extendTypeCache = /* @__PURE__ */ Object.create(null);
        var existingQueryType = schema.getQueryType();
        var queryType = existingQueryType ? getExtendedType(existingQueryType) : null;
        var existingMutationType = schema.getMutationType();
        var mutationType = existingMutationType ? getExtendedType(existingMutationType) : null;
        var existingSubscriptionType = schema.getSubscriptionType();
        var subscriptionType = existingSubscriptionType ? getExtendedType(existingSubscriptionType) : null;
        var types = [].concat((0, _objectValues2.default)(schema.getTypeMap()).map(function(type) {
          return getExtendedType(type);
        }), astBuilder.buildTypes((0, _objectValues2.default)(typeDefinitionMap)));
        var schemaAllowedLegacyNames = schema.__allowedLegacyNames;
        var extendAllowedLegacyNames = options && options.allowedLegacyNames;
        var allowedLegacyNames = schemaAllowedLegacyNames && extendAllowedLegacyNames ? schemaAllowedLegacyNames.concat(extendAllowedLegacyNames) : schemaAllowedLegacyNames || extendAllowedLegacyNames;
        return new _schema.GraphQLSchema({
          query: queryType,
          mutation: mutationType,
          subscription: subscriptionType,
          types,
          directives: getMergedDirectives(),
          astNode: schema.astNode,
          allowedLegacyNames
        });
        function getMergedDirectives() {
          var existingDirectives = schema.getDirectives();
          !existingDirectives ? (0, _invariant2.default)(0, "schema must have default directives") : void 0;
          return existingDirectives.concat(directiveDefinitions.map(function(node) {
            return astBuilder.buildDirective(node);
          }));
        }
        function getExtendedType(type) {
          if (!extendTypeCache[type.name]) {
            extendTypeCache[type.name] = extendType(type);
          }
          return extendTypeCache[type.name];
        }
        function extendType(type) {
          if ((0, _introspection.isIntrospectionType)(type)) {
            return type;
          }
          if ((0, _definition.isObjectType)(type)) {
            return extendObjectType(type);
          }
          if ((0, _definition.isInterfaceType)(type)) {
            return extendInterfaceType(type);
          }
          if ((0, _definition.isUnionType)(type)) {
            return extendUnionType(type);
          }
          return type;
        }
        function extendObjectType(type) {
          var name = type.name;
          var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;
          return new _definition.GraphQLObjectType({
            name,
            description: type.description,
            interfaces: function interfaces() {
              return extendImplementedInterfaces(type);
            },
            fields: function fields() {
              return extendFieldMap(type);
            },
            astNode: type.astNode,
            extensionASTNodes,
            isTypeOf: type.isTypeOf
          });
        }
        function extendInterfaceType(type) {
          var name = type.name;
          var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;
          return new _definition.GraphQLInterfaceType({
            name: type.name,
            description: type.description,
            fields: function fields() {
              return extendFieldMap(type);
            },
            astNode: type.astNode,
            extensionASTNodes,
            resolveType: type.resolveType
          });
        }
        function extendUnionType(type) {
          return new _definition.GraphQLUnionType({
            name: type.name,
            description: type.description,
            types: type.getTypes().map(getExtendedType),
            astNode: type.astNode,
            resolveType: type.resolveType
          });
        }
        function extendImplementedInterfaces(type) {
          var interfaces = type.getInterfaces().map(getExtendedType);
          var extensions = typeExtensionsMap[type.name];
          if (extensions) {
            extensions.forEach(function(extension) {
              extension.interfaces.forEach(function(namedType) {
                interfaces.push(astBuilder.buildType(namedType));
              });
            });
          }
          return interfaces;
        }
        function extendFieldMap(type) {
          var newFieldMap = /* @__PURE__ */ Object.create(null);
          var oldFieldMap = type.getFields();
          Object.keys(oldFieldMap).forEach(function(fieldName) {
            var field = oldFieldMap[fieldName];
            newFieldMap[fieldName] = {
              description: field.description,
              deprecationReason: field.deprecationReason,
              type: extendFieldType(field.type),
              args: (0, _keyMap2.default)(field.args, function(arg) {
                return arg.name;
              }),
              astNode: field.astNode,
              resolve: field.resolve
            };
          });
          var extensions = typeExtensionsMap[type.name];
          if (extensions) {
            extensions.forEach(function(extension) {
              extension.fields.forEach(function(field) {
                var fieldName = field.name.value;
                if (oldFieldMap[fieldName]) {
                  throw new _GraphQLError.GraphQLError('Field "' + type.name + "." + fieldName + '" already exists in the schema. It cannot also be defined in this type extension.', [field]);
                }
                newFieldMap[fieldName] = astBuilder.buildField(field);
              });
            });
          }
          return newFieldMap;
        }
        function extendFieldType(typeDef) {
          if ((0, _definition.isListType)(typeDef)) {
            return (0, _definition.GraphQLList)(extendFieldType(typeDef.ofType));
          }
          if ((0, _definition.isNonNullType)(typeDef)) {
            return (0, _definition.GraphQLNonNull)(extendFieldType(typeDef.ofType));
          }
          return getExtendedType(typeDef);
        }
      }
      function checkExtensionNode(type, node) {
        switch (node.kind) {
          case _kinds.Kind.OBJECT_TYPE_EXTENSION:
            if (!(0, _definition.isObjectType)(type)) {
              throw new _GraphQLError.GraphQLError('Cannot extend non-object type "' + type.name + '".', [node]);
            }
            break;
          case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
            if (!(0, _definition.isInterfaceType)(type)) {
              throw new _GraphQLError.GraphQLError('Cannot extend non-interface type "' + type.name + '".', [node]);
            }
            break;
        }
      }
    }
  });

  // node_modules/graphql/utilities/lexicographicSortSchema.js
  var require_lexicographicSortSchema = __commonJS({
    "node_modules/graphql/utilities/lexicographicSortSchema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      exports2.lexicographicSortSchema = lexicographicSortSchema2;
      var _keyValMap = require_keyValMap();
      var _keyValMap2 = _interopRequireDefault(_keyValMap);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      var _schema = require_schema();
      var _directives = require_directives();
      var _definition = require_definition();
      var _scalars = require_scalars();
      var _introspection = require_introspection();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function lexicographicSortSchema2(schema) {
        var cache = /* @__PURE__ */ Object.create(null);
        var sortMaybeType = function sortMaybeType2(maybeType) {
          return maybeType && sortNamedType(maybeType);
        };
        return new _schema.GraphQLSchema({
          types: sortTypes((0, _objectValues2.default)(schema.getTypeMap())),
          directives: sortByName(schema.getDirectives()).map(sortDirective),
          query: sortMaybeType(schema.getQueryType()),
          mutation: sortMaybeType(schema.getMutationType()),
          subscription: sortMaybeType(schema.getSubscriptionType()),
          astNode: schema.astNode
        });
        function sortDirective(directive) {
          return new _directives.GraphQLDirective({
            name: directive.name,
            description: directive.description,
            locations: sortBy(directive.locations, function(x) {
              return x;
            }),
            args: sortArgs(directive.args),
            astNode: directive.astNode
          });
        }
        function sortArgs(args) {
          return (0, _keyValMap2.default)(sortByName(args), function(arg) {
            return arg.name;
          }, function(arg) {
            return _extends({}, arg, {
              type: sortType(arg.type)
            });
          });
        }
        function sortFields(fieldsMap) {
          return sortObjMap(fieldsMap, function(field) {
            return {
              type: sortType(field.type),
              args: sortArgs(field.args),
              resolve: field.resolve,
              subscribe: field.subscribe,
              deprecationReason: field.deprecationReason,
              description: field.description,
              astNode: field.astNode
            };
          });
        }
        function sortInputFields(fieldsMap) {
          return sortObjMap(fieldsMap, function(field) {
            return {
              type: sortType(field.type),
              defaultValue: field.defaultValue,
              description: field.description,
              astNode: field.astNode
            };
          });
        }
        function sortType(type) {
          if ((0, _definition.isListType)(type)) {
            return new _definition.GraphQLList(sortType(type.ofType));
          } else if ((0, _definition.isNonNullType)(type)) {
            return new _definition.GraphQLNonNull(sortType(type.ofType));
          }
          return sortNamedType(type);
        }
        function sortTypes(arr) {
          return sortByName(arr).map(sortNamedType);
        }
        function sortNamedType(type) {
          if ((0, _scalars.isSpecifiedScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
            return type;
          }
          var sortedType = cache[type.name];
          if (!sortedType) {
            sortedType = sortNamedTypeImpl(type);
            cache[type.name] = sortedType;
          }
          return sortedType;
        }
        function sortNamedTypeImpl(type) {
          if ((0, _definition.isScalarType)(type)) {
            return type;
          } else if ((0, _definition.isObjectType)(type)) {
            return new _definition.GraphQLObjectType({
              name: type.name,
              interfaces: function interfaces() {
                return sortTypes(type.getInterfaces());
              },
              fields: function fields() {
                return sortFields(type.getFields());
              },
              isTypeOf: type.isTypeOf,
              description: type.description,
              astNode: type.astNode,
              extensionASTNodes: type.extensionASTNodes
            });
          } else if ((0, _definition.isInterfaceType)(type)) {
            return new _definition.GraphQLInterfaceType({
              name: type.name,
              fields: function fields() {
                return sortFields(type.getFields());
              },
              resolveType: type.resolveType,
              description: type.description,
              astNode: type.astNode,
              extensionASTNodes: type.extensionASTNodes
            });
          } else if ((0, _definition.isUnionType)(type)) {
            return new _definition.GraphQLUnionType({
              name: type.name,
              types: function types() {
                return sortTypes(type.getTypes());
              },
              resolveType: type.resolveType,
              description: type.description,
              astNode: type.astNode
            });
          } else if ((0, _definition.isEnumType)(type)) {
            return new _definition.GraphQLEnumType({
              name: type.name,
              values: (0, _keyValMap2.default)(sortByName(type.getValues()), function(val) {
                return val.name;
              }, function(val) {
                return {
                  value: val.value,
                  deprecationReason: val.deprecationReason,
                  description: val.description,
                  astNode: val.astNode
                };
              }),
              description: type.description,
              astNode: type.astNode
            });
          } else if ((0, _definition.isInputObjectType)(type)) {
            return new _definition.GraphQLInputObjectType({
              name: type.name,
              fields: function fields() {
                return sortInputFields(type.getFields());
              },
              description: type.description,
              astNode: type.astNode
            });
          }
          throw new Error('Unknown type: "' + type + '"');
        }
      }
      function sortObjMap(map, sortValueFn) {
        var sortedMap = /* @__PURE__ */ Object.create(null);
        var sortedKeys = sortBy(Object.keys(map), function(x) {
          return x;
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;
            var value = map[key];
            sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return sortedMap;
      }
      function sortByName(array) {
        return sortBy(array, function(obj) {
          return obj.name;
        });
      }
      function sortBy(array, mapToKey) {
        return array.slice().sort(function(obj1, obj2) {
          var key1 = mapToKey(obj1);
          var key2 = mapToKey(obj2);
          return key1.localeCompare(key2);
        });
      }
    }
  });

  // node_modules/graphql/utilities/schemaPrinter.js
  var require_schemaPrinter = __commonJS({
    "node_modules/graphql/utilities/schemaPrinter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.printSchema = printSchema2;
      exports2.printIntrospectionSchema = printIntrospectionSchema2;
      exports2.printType = printType2;
      var _isNullish = require_isNullish();
      var _isNullish2 = _interopRequireDefault(_isNullish);
      var _isInvalid = require_isInvalid();
      var _isInvalid2 = _interopRequireDefault(_isInvalid);
      var _objectValues = require_objectValues();
      var _objectValues2 = _interopRequireDefault(_objectValues);
      var _astFromValue = require_astFromValue();
      var _printer = require_printer();
      var _definition = require_definition();
      var _scalars = require_scalars();
      var _directives = require_directives();
      var _introspection = require_introspection();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function printSchema2(schema, options) {
        return printFilteredSchema(schema, function(n) {
          return !(0, _directives.isSpecifiedDirective)(n);
        }, isDefinedType, options);
      }
      function printIntrospectionSchema2(schema, options) {
        return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);
      }
      function isDefinedType(type) {
        return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
      }
      function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
        var directives = schema.getDirectives().filter(directiveFilter);
        var typeMap = schema.getTypeMap();
        var types = (0, _objectValues2.default)(typeMap).sort(function(type1, type2) {
          return type1.name.localeCompare(type2.name);
        }).filter(typeFilter);
        return [printSchemaDefinition(schema)].concat(directives.map(function(directive) {
          return printDirective(directive, options);
        }), types.map(function(type) {
          return printType2(type, options);
        })).filter(Boolean).join("\n\n") + "\n";
      }
      function printSchemaDefinition(schema) {
        if (isSchemaOfCommonNames(schema)) {
          return;
        }
        var operationTypes = [];
        var queryType = schema.getQueryType();
        if (queryType) {
          operationTypes.push("  query: " + queryType.name);
        }
        var mutationType = schema.getMutationType();
        if (mutationType) {
          operationTypes.push("  mutation: " + mutationType.name);
        }
        var subscriptionType = schema.getSubscriptionType();
        if (subscriptionType) {
          operationTypes.push("  subscription: " + subscriptionType.name);
        }
        return "schema {\n" + operationTypes.join("\n") + "\n}";
      }
      function isSchemaOfCommonNames(schema) {
        var queryType = schema.getQueryType();
        if (queryType && queryType.name !== "Query") {
          return false;
        }
        var mutationType = schema.getMutationType();
        if (mutationType && mutationType.name !== "Mutation") {
          return false;
        }
        var subscriptionType = schema.getSubscriptionType();
        if (subscriptionType && subscriptionType.name !== "Subscription") {
          return false;
        }
        return true;
      }
      function printType2(type, options) {
        if ((0, _definition.isScalarType)(type)) {
          return printScalar(type, options);
        } else if ((0, _definition.isObjectType)(type)) {
          return printObject(type, options);
        } else if ((0, _definition.isInterfaceType)(type)) {
          return printInterface(type, options);
        } else if ((0, _definition.isUnionType)(type)) {
          return printUnion(type, options);
        } else if ((0, _definition.isEnumType)(type)) {
          return printEnum(type, options);
        } else if ((0, _definition.isInputObjectType)(type)) {
          return printInputObject(type, options);
        }
        throw new Error("Unknown type: " + type + ".");
      }
      function printScalar(type, options) {
        return printDescription(options, type) + ("scalar " + type.name);
      }
      function printObject(type, options) {
        var interfaces = type.getInterfaces();
        var implementedInterfaces = interfaces.length ? " implements " + interfaces.map(function(i) {
          return i.name;
        }).join(" & ") : "";
        return printDescription(options, type) + ("type " + type.name + implementedInterfaces + " {\n") + printFields(options, type) + "\n}";
      }
      function printInterface(type, options) {
        return printDescription(options, type) + ("interface " + type.name + " {\n") + printFields(options, type) + "\n}";
      }
      function printUnion(type, options) {
        return printDescription(options, type) + ("union " + type.name + " = " + type.getTypes().join(" | "));
      }
      function printEnum(type, options) {
        return printDescription(options, type) + ("enum " + type.name + " {\n") + printEnumValues(type.getValues(), options) + "\n}";
      }
      function printEnumValues(values, options) {
        return values.map(function(value, i) {
          return printDescription(options, value, "  ", !i) + "  " + value.name + printDeprecated(value);
        }).join("\n");
      }
      function printInputObject(type, options) {
        var fields = (0, _objectValues2.default)(type.getFields());
        return printDescription(options, type) + ("input " + type.name + " {\n") + fields.map(function(f, i) {
          return printDescription(options, f, "  ", !i) + "  " + printInputValue(f);
        }).join("\n") + "\n}";
      }
      function printFields(options, type) {
        var fields = (0, _objectValues2.default)(type.getFields());
        return fields.map(function(f, i) {
          return printDescription(options, f, "  ", !i) + "  " + f.name + printArgs(options, f.args, "  ") + ": " + String(f.type) + printDeprecated(f);
        }).join("\n");
      }
      function printArgs(options, args) {
        var indentation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
        if (args.length === 0) {
          return "";
        }
        if (args.every(function(arg) {
          return !arg.description;
        })) {
          return "(" + args.map(printInputValue).join(", ") + ")";
        }
        return "(\n" + args.map(function(arg, i) {
          return printDescription(options, arg, "  " + indentation, !i) + "  " + indentation + printInputValue(arg);
        }).join("\n") + "\n" + indentation + ")";
      }
      function printInputValue(arg) {
        var argDecl = arg.name + ": " + String(arg.type);
        if (!(0, _isInvalid2.default)(arg.defaultValue)) {
          argDecl += " = " + (0, _printer.print)((0, _astFromValue.astFromValue)(arg.defaultValue, arg.type));
        }
        return argDecl;
      }
      function printDirective(directive, options) {
        return printDescription(options, directive) + "directive @" + directive.name + printArgs(options, directive.args) + " on " + directive.locations.join(" | ");
      }
      function printDeprecated(fieldOrEnumVal) {
        if (!fieldOrEnumVal.isDeprecated) {
          return "";
        }
        var reason = fieldOrEnumVal.deprecationReason;
        if ((0, _isNullish2.default)(reason) || reason === "" || reason === _directives.DEFAULT_DEPRECATION_REASON) {
          return " @deprecated";
        }
        return " @deprecated(reason: " + (0, _printer.print)((0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString)) + ")";
      }
      function printDescription(options, def) {
        var indentation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
        var firstInBlock = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
        if (!def.description) {
          return "";
        }
        var lines = descriptionLines(def.description, 120 - indentation.length);
        if (options && options.commentDescriptions) {
          return printDescriptionWithComments(lines, indentation, firstInBlock);
        }
        var description = indentation && !firstInBlock ? "\n" + indentation + '"""' : indentation + '"""';
        if (lines.length === 1 && lines[0].length < 70 && lines[0][lines[0].length - 1] !== '"') {
          return description + escapeQuote(lines[0]) + '"""\n';
        }
        var hasLeadingSpace = lines[0][0] === " " || lines[0][0] === "	";
        if (!hasLeadingSpace) {
          description += "\n";
        }
        for (var i = 0; i < lines.length; i++) {
          if (i !== 0 || !hasLeadingSpace) {
            description += indentation;
          }
          description += escapeQuote(lines[i]) + "\n";
        }
        description += indentation + '"""\n';
        return description;
      }
      function escapeQuote(line) {
        return line.replace(/"""/g, '\\"""');
      }
      function printDescriptionWithComments(lines, indentation, firstInBlock) {
        var description = indentation && !firstInBlock ? "\n" : "";
        for (var i = 0; i < lines.length; i++) {
          if (lines[i] === "") {
            description += indentation + "#\n";
          } else {
            description += indentation + "# " + lines[i] + "\n";
          }
        }
        return description;
      }
      function descriptionLines(description, maxLen) {
        var lines = [];
        var rawLines = description.split("\n");
        for (var i = 0; i < rawLines.length; i++) {
          if (rawLines[i] === "") {
            lines.push(rawLines[i]);
          } else {
            var sublines = breakLine(rawLines[i], maxLen);
            for (var j = 0; j < sublines.length; j++) {
              lines.push(sublines[j]);
            }
          }
        }
        return lines;
      }
      function breakLine(line, maxLen) {
        if (line.length < maxLen + 5) {
          return [line];
        }
        var parts = line.split(new RegExp("((?: |^).{15," + (maxLen - 40) + "}(?= |$))"));
        if (parts.length < 4) {
          return [line];
        }
        var sublines = [parts[0] + parts[1] + parts[2]];
        for (var i = 3; i < parts.length; i += 2) {
          sublines.push(parts[i].slice(1) + parts[i + 1]);
        }
        return sublines;
      }
    }
  });

  // node_modules/graphql/utilities/isValidJSValue.js
  var require_isValidJSValue = __commonJS({
    "node_modules/graphql/utilities/isValidJSValue.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.isValidJSValue = isValidJSValue2;
      var _coerceValue = require_coerceValue();
      function isValidJSValue2(value, type) {
        var errors = (0, _coerceValue.coerceValue)(value, type).errors;
        return errors ? errors.map(function(error) {
          return error.message;
        }) : [];
      }
    }
  });

  // node_modules/graphql/utilities/isValidLiteralValue.js
  var require_isValidLiteralValue = __commonJS({
    "node_modules/graphql/utilities/isValidLiteralValue.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.isValidLiteralValue = isValidLiteralValue2;
      var _TypeInfo = require_TypeInfo();
      var _kinds = require_kinds();
      var _visitor = require_visitor();
      var _schema = require_schema();
      var _ValuesOfCorrectType = require_ValuesOfCorrectType();
      var _ValidationContext = require_ValidationContext();
      var _ValidationContext2 = _interopRequireDefault(_ValidationContext);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function isValidLiteralValue2(type, valueNode) {
        var emptySchema = new _schema.GraphQLSchema({});
        var emptyDoc = { kind: _kinds.Kind.DOCUMENT, definitions: [] };
        var typeInfo = new _TypeInfo.TypeInfo(emptySchema, void 0, type);
        var context = new _ValidationContext2.default(emptySchema, emptyDoc, typeInfo);
        var visitor = (0, _ValuesOfCorrectType.ValuesOfCorrectType)(context);
        (0, _visitor.visit)(valueNode, (0, _visitor.visitWithTypeInfo)(typeInfo, visitor));
        return context.getErrors();
      }
    }
  });

  // node_modules/graphql/utilities/concatAST.js
  var require_concatAST = __commonJS({
    "node_modules/graphql/utilities/concatAST.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.concatAST = concatAST2;
      function concatAST2(asts) {
        var batchDefinitions = [];
        for (var i = 0; i < asts.length; i++) {
          var definitions = asts[i].definitions;
          for (var j = 0; j < definitions.length; j++) {
            batchDefinitions.push(definitions[j]);
          }
        }
        return {
          kind: "Document",
          definitions: batchDefinitions
        };
      }
    }
  });

  // node_modules/graphql/utilities/separateOperations.js
  var require_separateOperations = __commonJS({
    "node_modules/graphql/utilities/separateOperations.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.separateOperations = separateOperations2;
      var _visitor = require_visitor();
      function separateOperations2(documentAST) {
        var operations = [];
        var fragments = /* @__PURE__ */ Object.create(null);
        var positions = /* @__PURE__ */ new Map();
        var depGraph = /* @__PURE__ */ Object.create(null);
        var fromName = void 0;
        var idx = 0;
        (0, _visitor.visit)(documentAST, {
          OperationDefinition: function OperationDefinition(node) {
            fromName = opName(node);
            operations.push(node);
            positions.set(node, idx++);
          },
          FragmentDefinition: function FragmentDefinition(node) {
            fromName = node.name.value;
            fragments[fromName] = node;
            positions.set(node, idx++);
          },
          FragmentSpread: function FragmentSpread(node) {
            var toName = node.name.value;
            (depGraph[fromName] || (depGraph[fromName] = /* @__PURE__ */ Object.create(null)))[toName] = true;
          }
        });
        var separatedDocumentASTs = /* @__PURE__ */ Object.create(null);
        operations.forEach(function(operation) {
          var operationName = opName(operation);
          var dependencies = /* @__PURE__ */ Object.create(null);
          collectTransitiveDependencies(dependencies, depGraph, operationName);
          var definitions = [operation];
          Object.keys(dependencies).forEach(function(name) {
            definitions.push(fragments[name]);
          });
          definitions.sort(function(n1, n2) {
            return (positions.get(n1) || 0) - (positions.get(n2) || 0);
          });
          separatedDocumentASTs[operationName] = {
            kind: "Document",
            definitions
          };
        });
        return separatedDocumentASTs;
      }
      function opName(operation) {
        return operation.name ? operation.name.value : "";
      }
      function collectTransitiveDependencies(collected, depGraph, fromName) {
        var immediateDeps = depGraph[fromName];
        if (immediateDeps) {
          Object.keys(immediateDeps).forEach(function(toName) {
            if (!collected[toName]) {
              collected[toName] = true;
              collectTransitiveDependencies(collected, depGraph, toName);
            }
          });
        }
      }
    }
  });

  // node_modules/graphql/utilities/findBreakingChanges.js
  var require_findBreakingChanges = __commonJS({
    "node_modules/graphql/utilities/findBreakingChanges.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.DangerousChangeType = exports2.BreakingChangeType = void 0;
      exports2.findBreakingChanges = findBreakingChanges2;
      exports2.findDangerousChanges = findDangerousChanges2;
      exports2.findRemovedTypes = findRemovedTypes;
      exports2.findTypesThatChangedKind = findTypesThatChangedKind;
      exports2.findArgChanges = findArgChanges;
      exports2.findFieldsThatChangedTypeOnObjectOrInterfaceTypes = findFieldsThatChangedTypeOnObjectOrInterfaceTypes;
      exports2.findFieldsThatChangedTypeOnInputObjectTypes = findFieldsThatChangedTypeOnInputObjectTypes;
      exports2.findTypesRemovedFromUnions = findTypesRemovedFromUnions;
      exports2.findTypesAddedToUnions = findTypesAddedToUnions;
      exports2.findValuesRemovedFromEnums = findValuesRemovedFromEnums;
      exports2.findValuesAddedToEnums = findValuesAddedToEnums;
      exports2.findInterfacesRemovedFromObjectTypes = findInterfacesRemovedFromObjectTypes;
      exports2.findInterfacesAddedToObjectTypes = findInterfacesAddedToObjectTypes;
      exports2.findRemovedDirectives = findRemovedDirectives;
      exports2.findRemovedDirectiveArgs = findRemovedDirectiveArgs;
      exports2.findAddedNonNullDirectiveArgs = findAddedNonNullDirectiveArgs;
      exports2.findRemovedLocationsForDirective = findRemovedLocationsForDirective;
      exports2.findRemovedDirectiveLocations = findRemovedDirectiveLocations;
      var _definition = require_definition();
      var _directives = require_directives();
      var _schema = require_schema();
      var _keyMap = require_keyMap();
      var _keyMap2 = _interopRequireDefault(_keyMap);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var BreakingChangeType2 = exports2.BreakingChangeType = {
        FIELD_CHANGED_KIND: "FIELD_CHANGED_KIND",
        FIELD_REMOVED: "FIELD_REMOVED",
        TYPE_CHANGED_KIND: "TYPE_CHANGED_KIND",
        TYPE_REMOVED: "TYPE_REMOVED",
        TYPE_REMOVED_FROM_UNION: "TYPE_REMOVED_FROM_UNION",
        VALUE_REMOVED_FROM_ENUM: "VALUE_REMOVED_FROM_ENUM",
        ARG_REMOVED: "ARG_REMOVED",
        ARG_CHANGED_KIND: "ARG_CHANGED_KIND",
        NON_NULL_ARG_ADDED: "NON_NULL_ARG_ADDED",
        NON_NULL_INPUT_FIELD_ADDED: "NON_NULL_INPUT_FIELD_ADDED",
        INTERFACE_REMOVED_FROM_OBJECT: "INTERFACE_REMOVED_FROM_OBJECT",
        DIRECTIVE_REMOVED: "DIRECTIVE_REMOVED",
        DIRECTIVE_ARG_REMOVED: "DIRECTIVE_ARG_REMOVED",
        DIRECTIVE_LOCATION_REMOVED: "DIRECTIVE_LOCATION_REMOVED",
        NON_NULL_DIRECTIVE_ARG_ADDED: "NON_NULL_DIRECTIVE_ARG_ADDED"
      };
      var DangerousChangeType2 = exports2.DangerousChangeType = {
        ARG_DEFAULT_VALUE_CHANGE: "ARG_DEFAULT_VALUE_CHANGE",
        VALUE_ADDED_TO_ENUM: "VALUE_ADDED_TO_ENUM",
        INTERFACE_ADDED_TO_OBJECT: "INTERFACE_ADDED_TO_OBJECT",
        TYPE_ADDED_TO_UNION: "TYPE_ADDED_TO_UNION",
        NULLABLE_INPUT_FIELD_ADDED: "NULLABLE_INPUT_FIELD_ADDED",
        NULLABLE_ARG_ADDED: "NULLABLE_ARG_ADDED"
      };
      function findBreakingChanges2(oldSchema, newSchema) {
        return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).breakingChanges, findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema), findRemovedDirectives(oldSchema, newSchema), findRemovedDirectiveArgs(oldSchema, newSchema), findAddedNonNullDirectiveArgs(oldSchema, newSchema), findRemovedDirectiveLocations(oldSchema, newSchema));
      }
      function findDangerousChanges2(oldSchema, newSchema) {
        return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findInterfacesAddedToObjectTypes(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).dangerousChanges);
      }
      function findRemovedTypes(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var breakingChanges = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          if (!newTypeMap[typeName]) {
            breakingChanges.push({
              type: BreakingChangeType2.TYPE_REMOVED,
              description: typeName + " was removed."
            });
          }
        });
        return breakingChanges;
      }
      function findTypesThatChangedKind(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var breakingChanges = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          if (!newTypeMap[typeName]) {
            return;
          }
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (oldType.constructor !== newType.constructor) {
            breakingChanges.push({
              type: BreakingChangeType2.TYPE_CHANGED_KIND,
              description: typeName + " changed from " + (typeKindName(oldType) + " to " + typeKindName(newType) + ".")
            });
          }
        });
        return breakingChanges;
      }
      function findArgChanges(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var breakingChanges = [];
        var dangerousChanges = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {
            return;
          }
          var oldTypeFields = oldType.getFields();
          var newTypeFields = newType.getFields();
          Object.keys(oldTypeFields).forEach(function(fieldName) {
            if (!newTypeFields[fieldName]) {
              return;
            }
            oldTypeFields[fieldName].args.forEach(function(oldArgDef) {
              var newArgs = newTypeFields[fieldName].args;
              var newArgDef = newArgs.find(function(arg) {
                return arg.name === oldArgDef.name;
              });
              if (!newArgDef) {
                breakingChanges.push({
                  type: BreakingChangeType2.ARG_REMOVED,
                  description: oldType.name + "." + fieldName + " arg " + (oldArgDef.name + " was removed")
                });
              } else {
                var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);
                if (!isSafe) {
                  breakingChanges.push({
                    type: BreakingChangeType2.ARG_CHANGED_KIND,
                    description: oldType.name + "." + fieldName + " arg " + (oldArgDef.name + " has changed type from ") + (oldArgDef.type.toString() + " to " + newArgDef.type.toString())
                  });
                } else if (oldArgDef.defaultValue !== void 0 && oldArgDef.defaultValue !== newArgDef.defaultValue) {
                  dangerousChanges.push({
                    type: DangerousChangeType2.ARG_DEFAULT_VALUE_CHANGE,
                    description: oldType.name + "." + fieldName + " arg " + (oldArgDef.name + " has changed defaultValue")
                  });
                }
              }
            });
            newTypeFields[fieldName].args.forEach(function(newArgDef) {
              var oldArgs = oldTypeFields[fieldName].args;
              var oldArgDef = oldArgs.find(function(arg) {
                return arg.name === newArgDef.name;
              });
              if (!oldArgDef) {
                if ((0, _definition.isNonNullType)(newArgDef.type)) {
                  breakingChanges.push({
                    type: BreakingChangeType2.NON_NULL_ARG_ADDED,
                    description: "A non-null arg " + newArgDef.name + " on " + (newType.name + "." + fieldName + " was added")
                  });
                } else {
                  dangerousChanges.push({
                    type: DangerousChangeType2.NULLABLE_ARG_ADDED,
                    description: "A nullable arg " + newArgDef.name + " on " + (newType.name + "." + fieldName + " was added")
                  });
                }
              }
            });
          });
        });
        return {
          breakingChanges,
          dangerousChanges
        };
      }
      function typeKindName(type) {
        if ((0, _definition.isScalarType)(type)) {
          return "a Scalar type";
        }
        if ((0, _definition.isObjectType)(type)) {
          return "an Object type";
        }
        if ((0, _definition.isInterfaceType)(type)) {
          return "an Interface type";
        }
        if ((0, _definition.isUnionType)(type)) {
          return "a Union type";
        }
        if ((0, _definition.isEnumType)(type)) {
          return "an Enum type";
        }
        if ((0, _definition.isInputObjectType)(type)) {
          return "an Input type";
        }
        throw new TypeError("Unknown type " + type.constructor.name);
      }
      function findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var breakingChanges = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {
            return;
          }
          var oldTypeFieldsDef = oldType.getFields();
          var newTypeFieldsDef = newType.getFields();
          Object.keys(oldTypeFieldsDef).forEach(function(fieldName) {
            if (!(fieldName in newTypeFieldsDef)) {
              breakingChanges.push({
                type: BreakingChangeType2.FIELD_REMOVED,
                description: typeName + "." + fieldName + " was removed."
              });
            } else {
              var oldFieldType = oldTypeFieldsDef[fieldName].type;
              var newFieldType = newTypeFieldsDef[fieldName].type;
              var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);
              if (!isSafe) {
                var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();
                var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();
                breakingChanges.push({
                  type: BreakingChangeType2.FIELD_CHANGED_KIND,
                  description: typeName + "." + fieldName + " changed type from " + (oldFieldTypeString + " to " + newFieldTypeString + ".")
                });
              }
            }
          });
        });
        return breakingChanges;
      }
      function findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var breakingChanges = [];
        var dangerousChanges = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!(0, _definition.isInputObjectType)(oldType) || !(0, _definition.isInputObjectType)(newType)) {
            return;
          }
          var oldTypeFieldsDef = oldType.getFields();
          var newTypeFieldsDef = newType.getFields();
          Object.keys(oldTypeFieldsDef).forEach(function(fieldName) {
            if (!(fieldName in newTypeFieldsDef)) {
              breakingChanges.push({
                type: BreakingChangeType2.FIELD_REMOVED,
                description: typeName + "." + fieldName + " was removed."
              });
            } else {
              var oldFieldType = oldTypeFieldsDef[fieldName].type;
              var newFieldType = newTypeFieldsDef[fieldName].type;
              var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);
              if (!isSafe) {
                var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();
                var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();
                breakingChanges.push({
                  type: BreakingChangeType2.FIELD_CHANGED_KIND,
                  description: typeName + "." + fieldName + " changed type from " + (oldFieldTypeString + " to " + newFieldTypeString + ".")
                });
              }
            }
          });
          Object.keys(newTypeFieldsDef).forEach(function(fieldName) {
            if (!(fieldName in oldTypeFieldsDef)) {
              if ((0, _definition.isNonNullType)(newTypeFieldsDef[fieldName].type)) {
                breakingChanges.push({
                  type: BreakingChangeType2.NON_NULL_INPUT_FIELD_ADDED,
                  description: "A non-null field " + fieldName + " on " + ("input type " + newType.name + " was added.")
                });
              } else {
                dangerousChanges.push({
                  type: DangerousChangeType2.NULLABLE_INPUT_FIELD_ADDED,
                  description: "A nullable field " + fieldName + " on " + ("input type " + newType.name + " was added.")
                });
              }
            }
          });
        });
        return {
          breakingChanges,
          dangerousChanges
        };
      }
      function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
        if ((0, _definition.isNamedType)(oldType)) {
          return (0, _definition.isNamedType)(newType) && oldType.name === newType.name || (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
        } else if ((0, _definition.isListType)(oldType)) {
          return (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
        } else if ((0, _definition.isNonNullType)(oldType)) {
          return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
        }
        return false;
      }
      function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
        if ((0, _definition.isNamedType)(oldType)) {
          return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
        } else if ((0, _definition.isListType)(oldType)) {
          return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
        } else if ((0, _definition.isNonNullType)(oldType)) {
          return (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType);
        }
        return false;
      }
      function findTypesRemovedFromUnions(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var typesRemovedFromUnion = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {
            return;
          }
          var typeNamesInNewUnion = /* @__PURE__ */ Object.create(null);
          newType.getTypes().forEach(function(type) {
            typeNamesInNewUnion[type.name] = true;
          });
          oldType.getTypes().forEach(function(type) {
            if (!typeNamesInNewUnion[type.name]) {
              typesRemovedFromUnion.push({
                type: BreakingChangeType2.TYPE_REMOVED_FROM_UNION,
                description: type.name + " was removed from union type " + typeName + "."
              });
            }
          });
        });
        return typesRemovedFromUnion;
      }
      function findTypesAddedToUnions(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var typesAddedToUnion = [];
        Object.keys(newTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {
            return;
          }
          var typeNamesInOldUnion = /* @__PURE__ */ Object.create(null);
          oldType.getTypes().forEach(function(type) {
            typeNamesInOldUnion[type.name] = true;
          });
          newType.getTypes().forEach(function(type) {
            if (!typeNamesInOldUnion[type.name]) {
              typesAddedToUnion.push({
                type: DangerousChangeType2.TYPE_ADDED_TO_UNION,
                description: type.name + " was added to union type " + typeName + "."
              });
            }
          });
        });
        return typesAddedToUnion;
      }
      function findValuesRemovedFromEnums(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var valuesRemovedFromEnums = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {
            return;
          }
          var valuesInNewEnum = /* @__PURE__ */ Object.create(null);
          newType.getValues().forEach(function(value) {
            valuesInNewEnum[value.name] = true;
          });
          oldType.getValues().forEach(function(value) {
            if (!valuesInNewEnum[value.name]) {
              valuesRemovedFromEnums.push({
                type: BreakingChangeType2.VALUE_REMOVED_FROM_ENUM,
                description: value.name + " was removed from enum type " + typeName + "."
              });
            }
          });
        });
        return valuesRemovedFromEnums;
      }
      function findValuesAddedToEnums(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var valuesAddedToEnums = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {
            return;
          }
          var valuesInOldEnum = /* @__PURE__ */ Object.create(null);
          oldType.getValues().forEach(function(value) {
            valuesInOldEnum[value.name] = true;
          });
          newType.getValues().forEach(function(value) {
            if (!valuesInOldEnum[value.name]) {
              valuesAddedToEnums.push({
                type: DangerousChangeType2.VALUE_ADDED_TO_ENUM,
                description: value.name + " was added to enum type " + typeName + "."
              });
            }
          });
        });
        return valuesAddedToEnums;
      }
      function findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var breakingChanges = [];
        Object.keys(oldTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {
            return;
          }
          var oldInterfaces = oldType.getInterfaces();
          var newInterfaces = newType.getInterfaces();
          oldInterfaces.forEach(function(oldInterface) {
            if (!newInterfaces.some(function(int) {
              return int.name === oldInterface.name;
            })) {
              breakingChanges.push({
                type: BreakingChangeType2.INTERFACE_REMOVED_FROM_OBJECT,
                description: typeName + " no longer implements interface " + (oldInterface.name + ".")
              });
            }
          });
        });
        return breakingChanges;
      }
      function findInterfacesAddedToObjectTypes(oldSchema, newSchema) {
        var oldTypeMap = oldSchema.getTypeMap();
        var newTypeMap = newSchema.getTypeMap();
        var interfacesAddedToObjectTypes = [];
        Object.keys(newTypeMap).forEach(function(typeName) {
          var oldType = oldTypeMap[typeName];
          var newType = newTypeMap[typeName];
          if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {
            return;
          }
          var oldInterfaces = oldType.getInterfaces();
          var newInterfaces = newType.getInterfaces();
          newInterfaces.forEach(function(newInterface) {
            if (!oldInterfaces.some(function(int) {
              return int.name === newInterface.name;
            })) {
              interfacesAddedToObjectTypes.push({
                type: DangerousChangeType2.INTERFACE_ADDED_TO_OBJECT,
                description: newInterface.name + " added to interfaces implemented " + ("by " + typeName + ".")
              });
            }
          });
        });
        return interfacesAddedToObjectTypes;
      }
      function findRemovedDirectives(oldSchema, newSchema) {
        var removedDirectives = [];
        var newSchemaDirectiveMap = getDirectiveMapForSchema(newSchema);
        oldSchema.getDirectives().forEach(function(directive) {
          if (!newSchemaDirectiveMap[directive.name]) {
            removedDirectives.push({
              type: BreakingChangeType2.DIRECTIVE_REMOVED,
              description: directive.name + " was removed"
            });
          }
        });
        return removedDirectives;
      }
      function findRemovedArgsForDirective(oldDirective, newDirective) {
        var removedArgs = [];
        var newArgMap = getArgumentMapForDirective(newDirective);
        oldDirective.args.forEach(function(arg) {
          if (!newArgMap[arg.name]) {
            removedArgs.push(arg);
          }
        });
        return removedArgs;
      }
      function findRemovedDirectiveArgs(oldSchema, newSchema) {
        var removedDirectiveArgs = [];
        var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);
        newSchema.getDirectives().forEach(function(newDirective) {
          var oldDirective = oldSchemaDirectiveMap[newDirective.name];
          if (!oldDirective) {
            return;
          }
          findRemovedArgsForDirective(oldDirective, newDirective).forEach(function(arg) {
            removedDirectiveArgs.push({
              type: BreakingChangeType2.DIRECTIVE_ARG_REMOVED,
              description: arg.name + " was removed from " + newDirective.name
            });
          });
        });
        return removedDirectiveArgs;
      }
      function findAddedArgsForDirective(oldDirective, newDirective) {
        var addedArgs = [];
        var oldArgMap = getArgumentMapForDirective(oldDirective);
        newDirective.args.forEach(function(arg) {
          if (!oldArgMap[arg.name]) {
            addedArgs.push(arg);
          }
        });
        return addedArgs;
      }
      function findAddedNonNullDirectiveArgs(oldSchema, newSchema) {
        var addedNonNullableArgs = [];
        var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);
        newSchema.getDirectives().forEach(function(newDirective) {
          var oldDirective = oldSchemaDirectiveMap[newDirective.name];
          if (!oldDirective) {
            return;
          }
          findAddedArgsForDirective(oldDirective, newDirective).forEach(function(arg) {
            if (!(0, _definition.isNonNullType)(arg.type)) {
              return;
            }
            addedNonNullableArgs.push({
              type: BreakingChangeType2.NON_NULL_DIRECTIVE_ARG_ADDED,
              description: "A non-null arg " + arg.name + " on directive " + (newDirective.name + " was added")
            });
          });
        });
        return addedNonNullableArgs;
      }
      function findRemovedLocationsForDirective(oldDirective, newDirective) {
        var removedLocations = [];
        var newLocationSet = new Set(newDirective.locations);
        oldDirective.locations.forEach(function(oldLocation) {
          if (!newLocationSet.has(oldLocation)) {
            removedLocations.push(oldLocation);
          }
        });
        return removedLocations;
      }
      function findRemovedDirectiveLocations(oldSchema, newSchema) {
        var removedLocations = [];
        var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);
        newSchema.getDirectives().forEach(function(newDirective) {
          var oldDirective = oldSchemaDirectiveMap[newDirective.name];
          if (!oldDirective) {
            return;
          }
          findRemovedLocationsForDirective(oldDirective, newDirective).forEach(function(location) {
            removedLocations.push({
              type: BreakingChangeType2.DIRECTIVE_LOCATION_REMOVED,
              description: location + " was removed from " + newDirective.name
            });
          });
        });
        return removedLocations;
      }
      function getDirectiveMapForSchema(schema) {
        return (0, _keyMap2.default)(schema.getDirectives(), function(dir) {
          return dir.name;
        });
      }
      function getArgumentMapForDirective(directive) {
        return (0, _keyMap2.default)(directive.args, function(arg) {
          return arg.name;
        });
      }
    }
  });

  // node_modules/graphql/utilities/findDeprecatedUsages.js
  var require_findDeprecatedUsages = __commonJS({
    "node_modules/graphql/utilities/findDeprecatedUsages.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.findDeprecatedUsages = findDeprecatedUsages2;
      var _GraphQLError = require_GraphQLError();
      var _visitor = require_visitor();
      var _definition = require_definition();
      var _schema = require_schema();
      var _TypeInfo = require_TypeInfo();
      function findDeprecatedUsages2(schema, ast) {
        var errors = [];
        var typeInfo = new _TypeInfo.TypeInfo(schema);
        (0, _visitor.visit)(ast, (0, _visitor.visitWithTypeInfo)(typeInfo, {
          Field: function Field(node) {
            var fieldDef = typeInfo.getFieldDef();
            if (fieldDef && fieldDef.isDeprecated) {
              var parentType = typeInfo.getParentType();
              if (parentType) {
                var reason = fieldDef.deprecationReason;
                errors.push(new _GraphQLError.GraphQLError("The field " + parentType.name + "." + fieldDef.name + " is deprecated." + (reason ? " " + reason : ""), [node]));
              }
            }
          },
          EnumValue: function EnumValue(node) {
            var enumVal = typeInfo.getEnumValue();
            if (enumVal && enumVal.isDeprecated) {
              var type = (0, _definition.getNamedType)(typeInfo.getInputType());
              if (type) {
                var reason = enumVal.deprecationReason;
                errors.push(new _GraphQLError.GraphQLError("The enum value " + type.name + "." + enumVal.name + " is deprecated." + (reason ? " " + reason : ""), [node]));
              }
            }
          }
        }));
        return errors;
      }
    }
  });

  // node_modules/graphql/utilities/index.js
  var require_utilities = __commonJS({
    "node_modules/graphql/utilities/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _introspectionQuery = require_introspectionQuery();
      Object.defineProperty(exports2, "getIntrospectionQuery", {
        enumerable: true,
        get: function get2() {
          return _introspectionQuery.getIntrospectionQuery;
        }
      });
      Object.defineProperty(exports2, "introspectionQuery", {
        enumerable: true,
        get: function get2() {
          return _introspectionQuery.introspectionQuery;
        }
      });
      var _getOperationAST = require_getOperationAST();
      Object.defineProperty(exports2, "getOperationAST", {
        enumerable: true,
        get: function get2() {
          return _getOperationAST.getOperationAST;
        }
      });
      var _introspectionFromSchema = require_introspectionFromSchema();
      Object.defineProperty(exports2, "introspectionFromSchema", {
        enumerable: true,
        get: function get2() {
          return _introspectionFromSchema.introspectionFromSchema;
        }
      });
      var _buildClientSchema = require_buildClientSchema();
      Object.defineProperty(exports2, "buildClientSchema", {
        enumerable: true,
        get: function get2() {
          return _buildClientSchema.buildClientSchema;
        }
      });
      var _buildASTSchema = require_buildASTSchema();
      Object.defineProperty(exports2, "buildASTSchema", {
        enumerable: true,
        get: function get2() {
          return _buildASTSchema.buildASTSchema;
        }
      });
      Object.defineProperty(exports2, "buildSchema", {
        enumerable: true,
        get: function get2() {
          return _buildASTSchema.buildSchema;
        }
      });
      Object.defineProperty(exports2, "getDescription", {
        enumerable: true,
        get: function get2() {
          return _buildASTSchema.getDescription;
        }
      });
      var _extendSchema = require_extendSchema();
      Object.defineProperty(exports2, "extendSchema", {
        enumerable: true,
        get: function get2() {
          return _extendSchema.extendSchema;
        }
      });
      var _lexicographicSortSchema = require_lexicographicSortSchema();
      Object.defineProperty(exports2, "lexicographicSortSchema", {
        enumerable: true,
        get: function get2() {
          return _lexicographicSortSchema.lexicographicSortSchema;
        }
      });
      var _schemaPrinter = require_schemaPrinter();
      Object.defineProperty(exports2, "printSchema", {
        enumerable: true,
        get: function get2() {
          return _schemaPrinter.printSchema;
        }
      });
      Object.defineProperty(exports2, "printType", {
        enumerable: true,
        get: function get2() {
          return _schemaPrinter.printType;
        }
      });
      Object.defineProperty(exports2, "printIntrospectionSchema", {
        enumerable: true,
        get: function get2() {
          return _schemaPrinter.printIntrospectionSchema;
        }
      });
      var _typeFromAST = require_typeFromAST();
      Object.defineProperty(exports2, "typeFromAST", {
        enumerable: true,
        get: function get2() {
          return _typeFromAST.typeFromAST;
        }
      });
      var _valueFromAST = require_valueFromAST();
      Object.defineProperty(exports2, "valueFromAST", {
        enumerable: true,
        get: function get2() {
          return _valueFromAST.valueFromAST;
        }
      });
      var _valueFromASTUntyped = require_valueFromASTUntyped();
      Object.defineProperty(exports2, "valueFromASTUntyped", {
        enumerable: true,
        get: function get2() {
          return _valueFromASTUntyped.valueFromASTUntyped;
        }
      });
      var _astFromValue = require_astFromValue();
      Object.defineProperty(exports2, "astFromValue", {
        enumerable: true,
        get: function get2() {
          return _astFromValue.astFromValue;
        }
      });
      var _TypeInfo = require_TypeInfo();
      Object.defineProperty(exports2, "TypeInfo", {
        enumerable: true,
        get: function get2() {
          return _TypeInfo.TypeInfo;
        }
      });
      var _coerceValue = require_coerceValue();
      Object.defineProperty(exports2, "coerceValue", {
        enumerable: true,
        get: function get2() {
          return _coerceValue.coerceValue;
        }
      });
      var _isValidJSValue = require_isValidJSValue();
      Object.defineProperty(exports2, "isValidJSValue", {
        enumerable: true,
        get: function get2() {
          return _isValidJSValue.isValidJSValue;
        }
      });
      var _isValidLiteralValue = require_isValidLiteralValue();
      Object.defineProperty(exports2, "isValidLiteralValue", {
        enumerable: true,
        get: function get2() {
          return _isValidLiteralValue.isValidLiteralValue;
        }
      });
      var _concatAST = require_concatAST();
      Object.defineProperty(exports2, "concatAST", {
        enumerable: true,
        get: function get2() {
          return _concatAST.concatAST;
        }
      });
      var _separateOperations = require_separateOperations();
      Object.defineProperty(exports2, "separateOperations", {
        enumerable: true,
        get: function get2() {
          return _separateOperations.separateOperations;
        }
      });
      var _typeComparators = require_typeComparators();
      Object.defineProperty(exports2, "isEqualType", {
        enumerable: true,
        get: function get2() {
          return _typeComparators.isEqualType;
        }
      });
      Object.defineProperty(exports2, "isTypeSubTypeOf", {
        enumerable: true,
        get: function get2() {
          return _typeComparators.isTypeSubTypeOf;
        }
      });
      Object.defineProperty(exports2, "doTypesOverlap", {
        enumerable: true,
        get: function get2() {
          return _typeComparators.doTypesOverlap;
        }
      });
      var _assertValidName = require_assertValidName();
      Object.defineProperty(exports2, "assertValidName", {
        enumerable: true,
        get: function get2() {
          return _assertValidName.assertValidName;
        }
      });
      Object.defineProperty(exports2, "isValidNameError", {
        enumerable: true,
        get: function get2() {
          return _assertValidName.isValidNameError;
        }
      });
      var _findBreakingChanges = require_findBreakingChanges();
      Object.defineProperty(exports2, "BreakingChangeType", {
        enumerable: true,
        get: function get2() {
          return _findBreakingChanges.BreakingChangeType;
        }
      });
      Object.defineProperty(exports2, "DangerousChangeType", {
        enumerable: true,
        get: function get2() {
          return _findBreakingChanges.DangerousChangeType;
        }
      });
      Object.defineProperty(exports2, "findBreakingChanges", {
        enumerable: true,
        get: function get2() {
          return _findBreakingChanges.findBreakingChanges;
        }
      });
      Object.defineProperty(exports2, "findDangerousChanges", {
        enumerable: true,
        get: function get2() {
          return _findBreakingChanges.findDangerousChanges;
        }
      });
      var _findDeprecatedUsages = require_findDeprecatedUsages();
      Object.defineProperty(exports2, "findDeprecatedUsages", {
        enumerable: true,
        get: function get2() {
          return _findDeprecatedUsages.findDeprecatedUsages;
        }
      });
    }
  });

  // node_modules/axios/lib/helpers/bind.js
  var require_bind = __commonJS({
    "node_modules/axios/lib/helpers/bind.js"(exports2, module2) {
      "use strict";
      module2.exports = function bind2(fn, thisArg) {
        return function wrap2() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          return fn.apply(thisArg, args);
        };
      };
    }
  });

  // node_modules/axios/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/axios/lib/utils.js"(exports2, module2) {
      "use strict";
      var bind2 = require_bind();
      var toString3 = Object.prototype.toString;
      function isArray(val) {
        return toString3.call(val) === "[object Array]";
      }
      function isUndefined(val) {
        return typeof val === "undefined";
      }
      function isBuffer(val) {
        return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
      }
      function isArrayBuffer(val) {
        return toString3.call(val) === "[object ArrayBuffer]";
      }
      function isFormData(val) {
        return typeof FormData !== "undefined" && val instanceof FormData;
      }
      function isArrayBufferView(val) {
        var result2;
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          result2 = ArrayBuffer.isView(val);
        } else {
          result2 = val && val.buffer && val.buffer instanceof ArrayBuffer;
        }
        return result2;
      }
      function isString(val) {
        return typeof val === "string";
      }
      function isNumber(val) {
        return typeof val === "number";
      }
      function isObject3(val) {
        return val !== null && typeof val === "object";
      }
      function isPlainObject(val) {
        if (toString3.call(val) !== "[object Object]") {
          return false;
        }
        var prototype = Object.getPrototypeOf(val);
        return prototype === null || prototype === Object.prototype;
      }
      function isDate(val) {
        return toString3.call(val) === "[object Date]";
      }
      function isFile(val) {
        return toString3.call(val) === "[object File]";
      }
      function isBlob(val) {
        return toString3.call(val) === "[object Blob]";
      }
      function isFunction(val) {
        return toString3.call(val) === "[object Function]";
      }
      function isStream(val) {
        return isObject3(val) && isFunction(val.pipe);
      }
      function isURLSearchParams(val) {
        return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
      }
      function trim(str) {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
      }
      function isStandardBrowserEnv() {
        if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
          return false;
        }
        return typeof window !== "undefined" && typeof document !== "undefined";
      }
      function forEach(obj, fn) {
        if (obj === null || typeof obj === "undefined") {
          return;
        }
        if (typeof obj !== "object") {
          obj = [obj];
        }
        if (isArray(obj)) {
          for (var i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj);
          }
        } else {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              fn.call(null, obj[key], key, obj);
            }
          }
        }
      }
      function merge() {
        var result2 = {};
        function assignValue(val, key) {
          if (isPlainObject(result2[key]) && isPlainObject(val)) {
            result2[key] = merge(result2[key], val);
          } else if (isPlainObject(val)) {
            result2[key] = merge({}, val);
          } else if (isArray(val)) {
            result2[key] = val.slice();
          } else {
            result2[key] = val;
          }
        }
        for (var i = 0, l = arguments.length; i < l; i++) {
          forEach(arguments[i], assignValue);
        }
        return result2;
      }
      function extend(a, b, thisArg) {
        forEach(b, function assignValue(val, key) {
          if (thisArg && typeof val === "function") {
            a[key] = bind2(val, thisArg);
          } else {
            a[key] = val;
          }
        });
        return a;
      }
      function stripBOM(content) {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      }
      module2.exports = {
        isArray,
        isArrayBuffer,
        isBuffer,
        isFormData,
        isArrayBufferView,
        isString,
        isNumber,
        isObject: isObject3,
        isPlainObject,
        isUndefined,
        isDate,
        isFile,
        isBlob,
        isFunction,
        isStream,
        isURLSearchParams,
        isStandardBrowserEnv,
        forEach,
        merge,
        extend,
        trim,
        stripBOM
      };
    }
  });

  // node_modules/axios/lib/helpers/buildURL.js
  var require_buildURL = __commonJS({
    "node_modules/axios/lib/helpers/buildURL.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      function encode(val) {
        return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      module2.exports = function buildURL(url, params, paramsSerializer) {
        if (!params) {
          return url;
        }
        var serializedParams;
        if (paramsSerializer) {
          serializedParams = paramsSerializer(params);
        } else if (utils.isURLSearchParams(params)) {
          serializedParams = params.toString();
        } else {
          var parts = [];
          utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") {
              return;
            }
            if (utils.isArray(val)) {
              key = key + "[]";
            } else {
              val = [val];
            }
            utils.forEach(val, function parseValue2(v) {
              if (utils.isDate(v)) {
                v = v.toISOString();
              } else if (utils.isObject(v)) {
                v = JSON.stringify(v);
              }
              parts.push(encode(key) + "=" + encode(v));
            });
          });
          serializedParams = parts.join("&");
        }
        if (serializedParams) {
          var hashmarkIndex = url.indexOf("#");
          if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
          }
          url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
        }
        return url;
      };
    }
  });

  // node_modules/axios/lib/core/InterceptorManager.js
  var require_InterceptorManager = __commonJS({
    "node_modules/axios/lib/core/InterceptorManager.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      function InterceptorManager() {
        this.handlers = [];
      }
      InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      };
      InterceptorManager.prototype.eject = function eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      };
      InterceptorManager.prototype.forEach = function forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      };
      module2.exports = InterceptorManager;
    }
  });

  // node_modules/axios/lib/helpers/normalizeHeaderName.js
  var require_normalizeHeaderName = __commonJS({
    "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      module2.exports = function normalizeHeaderName(headers, normalizedName) {
        utils.forEach(headers, function processHeader(value, name) {
          if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
          }
        });
      };
    }
  });

  // node_modules/axios/lib/core/enhanceError.js
  var require_enhanceError = __commonJS({
    "node_modules/axios/lib/core/enhanceError.js"(exports2, module2) {
      "use strict";
      module2.exports = function enhanceError(error, config, code, request, response) {
        error.config = config;
        if (code) {
          error.code = code;
        }
        error.request = request;
        error.response = response;
        error.isAxiosError = true;
        error.toJSON = function toJSON() {
          return {
            message: this.message,
            name: this.name,
            description: this.description,
            number: this.number,
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            config: this.config,
            code: this.code
          };
        };
        return error;
      };
    }
  });

  // node_modules/axios/lib/core/createError.js
  var require_createError = __commonJS({
    "node_modules/axios/lib/core/createError.js"(exports2, module2) {
      "use strict";
      var enhanceError = require_enhanceError();
      module2.exports = function createError(message, config, code, request, response) {
        var error = new Error(message);
        return enhanceError(error, config, code, request, response);
      };
    }
  });

  // node_modules/axios/lib/core/settle.js
  var require_settle = __commonJS({
    "node_modules/axios/lib/core/settle.js"(exports2, module2) {
      "use strict";
      var createError = require_createError();
      module2.exports = function settle(resolve, reject, response) {
        var validateStatus = response.config.validateStatus;
        if (!response.status || !validateStatus || validateStatus(response.status)) {
          resolve(response);
        } else {
          reject(createError(
            "Request failed with status code " + response.status,
            response.config,
            null,
            response.request,
            response
          ));
        }
      };
    }
  });

  // node_modules/axios/lib/helpers/cookies.js
  var require_cookies = __commonJS({
    "node_modules/axios/lib/helpers/cookies.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }() : function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }();
    }
  });

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  var require_isAbsoluteURL = __commonJS({
    "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports2, module2) {
      "use strict";
      module2.exports = function isAbsoluteURL(url) {
        return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
      };
    }
  });

  // node_modules/axios/lib/helpers/combineURLs.js
  var require_combineURLs = __commonJS({
    "node_modules/axios/lib/helpers/combineURLs.js"(exports2, module2) {
      "use strict";
      module2.exports = function combineURLs(baseURL, relativeURL) {
        return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
      };
    }
  });

  // node_modules/axios/lib/core/buildFullPath.js
  var require_buildFullPath = __commonJS({
    "node_modules/axios/lib/core/buildFullPath.js"(exports2, module2) {
      "use strict";
      var isAbsoluteURL = require_isAbsoluteURL();
      var combineURLs = require_combineURLs();
      module2.exports = function buildFullPath(baseURL, requestedURL) {
        if (baseURL && !isAbsoluteURL(requestedURL)) {
          return combineURLs(baseURL, requestedURL);
        }
        return requestedURL;
      };
    }
  });

  // node_modules/axios/lib/helpers/parseHeaders.js
  var require_parseHeaders = __commonJS({
    "node_modules/axios/lib/helpers/parseHeaders.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      var ignoreDuplicateOf = [
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent"
      ];
      module2.exports = function parseHeaders(headers) {
        var parsed = {};
        var key;
        var val;
        var i;
        if (!headers) {
          return parsed;
        }
        utils.forEach(headers.split("\n"), function parser(line) {
          i = line.indexOf(":");
          key = utils.trim(line.substr(0, i)).toLowerCase();
          val = utils.trim(line.substr(i + 1));
          if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
              return;
            }
            if (key === "set-cookie") {
              parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
            } else {
              parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
            }
          }
        });
        return parsed;
      };
    }
  });

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var require_isURLSameOrigin = __commonJS({
    "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }() : function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }();
    }
  });

  // node_modules/axios/lib/adapters/xhr.js
  var require_xhr = __commonJS({
    "node_modules/axios/lib/adapters/xhr.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      var settle = require_settle();
      var cookies = require_cookies();
      var buildURL = require_buildURL();
      var buildFullPath = require_buildFullPath();
      var parseHeaders = require_parseHeaders();
      var isURLSameOrigin = require_isURLSameOrigin();
      var createError = require_createError();
      module2.exports = function xhrAdapter(config) {
        return new Promise(function dispatchXhrRequest(resolve, reject) {
          var requestData = config.data;
          var requestHeaders = config.headers;
          var responseType = config.responseType;
          if (utils.isFormData(requestData)) {
            delete requestHeaders["Content-Type"];
          }
          var request = new XMLHttpRequest();
          if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
          }
          var fullPath = buildFullPath(config.baseURL, config.url);
          request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
          request.timeout = config.timeout;
          function onloadend() {
            if (!request) {
              return;
            }
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
              data: responseData,
              status: request.status,
              statusText: request.statusText,
              headers: responseHeaders,
              config,
              request
            };
            settle(resolve, reject, response);
            request = null;
          }
          if ("onloadend" in request) {
            request.onloadend = onloadend;
          } else {
            request.onreadystatechange = function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }
              if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                return;
              }
              setTimeout(onloadend);
            };
          }
          request.onabort = function handleAbort() {
            if (!request) {
              return;
            }
            reject(createError("Request aborted", config, "ECONNABORTED", request));
            request = null;
          };
          request.onerror = function handleError() {
            reject(createError("Network Error", config, null, request));
            request = null;
          };
          request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(createError(
              timeoutErrorMessage,
              config,
              config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
              request
            ));
            request = null;
          };
          if (utils.isStandardBrowserEnv()) {
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
            if (xsrfValue) {
              requestHeaders[config.xsrfHeaderName] = xsrfValue;
            }
          }
          if ("setRequestHeader" in request) {
            utils.forEach(requestHeaders, function setRequestHeader(val, key) {
              if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
                delete requestHeaders[key];
              } else {
                request.setRequestHeader(key, val);
              }
            });
          }
          if (!utils.isUndefined(config.withCredentials)) {
            request.withCredentials = !!config.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request.responseType = config.responseType;
          }
          if (typeof config.onDownloadProgress === "function") {
            request.addEventListener("progress", config.onDownloadProgress);
          }
          if (typeof config.onUploadProgress === "function" && request.upload) {
            request.upload.addEventListener("progress", config.onUploadProgress);
          }
          if (config.cancelToken) {
            config.cancelToken.promise.then(function onCanceled(cancel) {
              if (!request) {
                return;
              }
              request.abort();
              reject(cancel);
              request = null;
            });
          }
          if (!requestData) {
            requestData = null;
          }
          request.send(requestData);
        });
      };
    }
  });

  // node_modules/axios/lib/defaults.js
  var require_defaults = __commonJS({
    "node_modules/axios/lib/defaults.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      var normalizeHeaderName = require_normalizeHeaderName();
      var enhanceError = require_enhanceError();
      var DEFAULT_CONTENT_TYPE = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      function setContentTypeIfUnset(headers, value) {
        if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
          headers["Content-Type"] = value;
        }
      }
      function getDefaultAdapter() {
        var adapter;
        if (typeof XMLHttpRequest !== "undefined") {
          adapter = require_xhr();
        } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
          adapter = require_xhr();
        }
        return adapter;
      }
      function stringifySafely(rawValue, parser, encoder) {
        if (utils.isString(rawValue)) {
          try {
            (parser || JSON.parse)(rawValue);
            return utils.trim(rawValue);
          } catch (e) {
            if (e.name !== "SyntaxError") {
              throw e;
            }
          }
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      var defaults = {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: getDefaultAdapter(),
        transformRequest: [function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
            return data;
          }
          if (utils.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
            return data.toString();
          }
          if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
            setContentTypeIfUnset(headers, "application/json");
            return stringifySafely(data);
          }
          return data;
        }],
        transformResponse: [function transformResponse(data) {
          var transitional = this.transitional;
          var silentJSONParsing = transitional && transitional.silentJSONParsing;
          var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
          if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
            try {
              return JSON.parse(data);
            } catch (e) {
              if (strictJSONParsing) {
                if (e.name === "SyntaxError") {
                  throw enhanceError(e, this, "E_JSON_PARSE");
                }
                throw e;
              }
            }
          }
          return data;
        }],
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        }
      };
      defaults.headers = {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      };
      utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
        defaults.headers[method] = {};
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      });
      module2.exports = defaults;
    }
  });

  // node_modules/axios/lib/core/transformData.js
  var require_transformData = __commonJS({
    "node_modules/axios/lib/core/transformData.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      var defaults = require_defaults();
      module2.exports = function transformData(data, headers, fns) {
        var context = this || defaults;
        utils.forEach(fns, function transform(fn) {
          data = fn.call(context, data, headers);
        });
        return data;
      };
    }
  });

  // node_modules/axios/lib/cancel/isCancel.js
  var require_isCancel = __commonJS({
    "node_modules/axios/lib/cancel/isCancel.js"(exports2, module2) {
      "use strict";
      module2.exports = function isCancel(value) {
        return !!(value && value.__CANCEL__);
      };
    }
  });

  // node_modules/axios/lib/core/dispatchRequest.js
  var require_dispatchRequest = __commonJS({
    "node_modules/axios/lib/core/dispatchRequest.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      var transformData = require_transformData();
      var isCancel = require_isCancel();
      var defaults = require_defaults();
      function throwIfCancellationRequested(config) {
        if (config.cancelToken) {
          config.cancelToken.throwIfRequested();
        }
      }
      module2.exports = function dispatchRequest(config) {
        throwIfCancellationRequested(config);
        config.headers = config.headers || {};
        config.data = transformData.call(
          config,
          config.data,
          config.headers,
          config.transformRequest
        );
        config.headers = utils.merge(
          config.headers.common || {},
          config.headers[config.method] || {},
          config.headers
        );
        utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          function cleanHeaderConfig(method) {
            delete config.headers[method];
          }
        );
        var adapter = config.adapter || defaults.adapter;
        return adapter(config).then(function onAdapterResolution(response) {
          throwIfCancellationRequested(config);
          response.data = transformData.call(
            config,
            response.data,
            response.headers,
            config.transformResponse
          );
          return response;
        }, function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            if (reason && reason.response) {
              reason.response.data = transformData.call(
                config,
                reason.response.data,
                reason.response.headers,
                config.transformResponse
              );
            }
          }
          return Promise.reject(reason);
        });
      };
    }
  });

  // node_modules/axios/lib/core/mergeConfig.js
  var require_mergeConfig = __commonJS({
    "node_modules/axios/lib/core/mergeConfig.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      module2.exports = function mergeConfig(config1, config2) {
        config2 = config2 || {};
        var config = {};
        var valueFromConfig2Keys = ["url", "method", "data"];
        var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
        var defaultToConfig2Keys = [
          "baseURL",
          "transformRequest",
          "transformResponse",
          "paramsSerializer",
          "timeout",
          "timeoutMessage",
          "withCredentials",
          "adapter",
          "responseType",
          "xsrfCookieName",
          "xsrfHeaderName",
          "onUploadProgress",
          "onDownloadProgress",
          "decompress",
          "maxContentLength",
          "maxBodyLength",
          "maxRedirects",
          "transport",
          "httpAgent",
          "httpsAgent",
          "cancelToken",
          "socketPath",
          "responseEncoding"
        ];
        var directMergeKeys = ["validateStatus"];
        function getMergedValue(target, source) {
          if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
            return utils.merge(target, source);
          } else if (utils.isPlainObject(source)) {
            return utils.merge({}, source);
          } else if (utils.isArray(source)) {
            return source.slice();
          }
          return source;
        }
        function mergeDeepProperties(prop) {
          if (!utils.isUndefined(config2[prop])) {
            config[prop] = getMergedValue(config1[prop], config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            config[prop] = getMergedValue(void 0, config1[prop]);
          }
        }
        utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            config[prop] = getMergedValue(void 0, config2[prop]);
          }
        });
        utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
        utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            config[prop] = getMergedValue(void 0, config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            config[prop] = getMergedValue(void 0, config1[prop]);
          }
        });
        utils.forEach(directMergeKeys, function merge(prop) {
          if (prop in config2) {
            config[prop] = getMergedValue(config1[prop], config2[prop]);
          } else if (prop in config1) {
            config[prop] = getMergedValue(void 0, config1[prop]);
          }
        });
        var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
        var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
          return axiosKeys.indexOf(key) === -1;
        });
        utils.forEach(otherKeys, mergeDeepProperties);
        return config;
      };
    }
  });

  // node_modules/axios/package.json
  var require_package = __commonJS({
    "node_modules/axios/package.json"(exports2, module2) {
      module2.exports = {
        name: "axios",
        version: "0.21.4",
        description: "Promise based HTTP client for the browser and node.js",
        main: "index.js",
        scripts: {
          test: "grunt test",
          start: "node ./sandbox/server.js",
          build: "NODE_ENV=production grunt build",
          preversion: "npm test",
          version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
          postversion: "git push && git push --tags",
          examples: "node ./examples/server.js",
          coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
          fix: "eslint --fix lib/**/*.js"
        },
        repository: {
          type: "git",
          url: "https://github.com/axios/axios.git"
        },
        keywords: [
          "xhr",
          "http",
          "ajax",
          "promise",
          "node"
        ],
        author: "Matt Zabriskie",
        license: "MIT",
        bugs: {
          url: "https://github.com/axios/axios/issues"
        },
        homepage: "https://axios-http.com",
        devDependencies: {
          coveralls: "^3.0.0",
          "es6-promise": "^4.2.4",
          grunt: "^1.3.0",
          "grunt-banner": "^0.6.0",
          "grunt-cli": "^1.2.0",
          "grunt-contrib-clean": "^1.1.0",
          "grunt-contrib-watch": "^1.0.0",
          "grunt-eslint": "^23.0.0",
          "grunt-karma": "^4.0.0",
          "grunt-mocha-test": "^0.13.3",
          "grunt-ts": "^6.0.0-beta.19",
          "grunt-webpack": "^4.0.2",
          "istanbul-instrumenter-loader": "^1.0.0",
          "jasmine-core": "^2.4.1",
          karma: "^6.3.2",
          "karma-chrome-launcher": "^3.1.0",
          "karma-firefox-launcher": "^2.1.0",
          "karma-jasmine": "^1.1.1",
          "karma-jasmine-ajax": "^0.1.13",
          "karma-safari-launcher": "^1.0.0",
          "karma-sauce-launcher": "^4.3.6",
          "karma-sinon": "^1.0.5",
          "karma-sourcemap-loader": "^0.3.8",
          "karma-webpack": "^4.0.2",
          "load-grunt-tasks": "^3.5.2",
          minimist: "^1.2.0",
          mocha: "^8.2.1",
          sinon: "^4.5.0",
          "terser-webpack-plugin": "^4.2.3",
          typescript: "^4.0.5",
          "url-search-params": "^0.10.0",
          webpack: "^4.44.2",
          "webpack-dev-server": "^3.11.0"
        },
        browser: {
          "./lib/adapters/http.js": "./lib/adapters/xhr.js"
        },
        jsdelivr: "dist/axios.min.js",
        unpkg: "dist/axios.min.js",
        typings: "./index.d.ts",
        dependencies: {
          "follow-redirects": "^1.14.0"
        },
        bundlesize: [
          {
            path: "./dist/axios.min.js",
            threshold: "5kB"
          }
        ]
      };
    }
  });

  // node_modules/axios/lib/helpers/validator.js
  var require_validator = __commonJS({
    "node_modules/axios/lib/helpers/validator.js"(exports2, module2) {
      "use strict";
      var pkg = require_package();
      var validators = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
        validators[type] = function validator(thing) {
          return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
        };
      });
      var deprecatedWarnings = {};
      var currentVerArr = pkg.version.split(".");
      function isOlderVersion(version2, thanVersion) {
        var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
        var destVer = version2.split(".");
        for (var i = 0; i < 3; i++) {
          if (pkgVersionArr[i] > destVer[i]) {
            return true;
          } else if (pkgVersionArr[i] < destVer[i]) {
            return false;
          }
        }
        return false;
      }
      validators.transitional = function transitional(validator, version2, message) {
        var isDeprecated = version2 && isOlderVersion(version2);
        function formatMessage(opt, desc) {
          return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
        }
        return function(value, opt, opts) {
          if (validator === false) {
            throw new Error(formatMessage(opt, " has been removed in " + version2));
          }
          if (isDeprecated && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(
              formatMessage(
                opt,
                " has been deprecated since v" + version2 + " and will be removed in the near future"
              )
            );
          }
          return validator ? validator(value, opt, opts) : true;
        };
      };
      function assertOptions(options, schema, allowUnknown) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        var keys = Object.keys(options);
        var i = keys.length;
        while (i-- > 0) {
          var opt = keys[i];
          var validator = schema[opt];
          if (validator) {
            var value = options[opt];
            var result2 = value === void 0 || validator(value, opt, options);
            if (result2 !== true) {
              throw new TypeError("option " + opt + " must be " + result2);
            }
            continue;
          }
          if (allowUnknown !== true) {
            throw Error("Unknown option " + opt);
          }
        }
      }
      module2.exports = {
        isOlderVersion,
        assertOptions,
        validators
      };
    }
  });

  // node_modules/axios/lib/core/Axios.js
  var require_Axios = __commonJS({
    "node_modules/axios/lib/core/Axios.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      var buildURL = require_buildURL();
      var InterceptorManager = require_InterceptorManager();
      var dispatchRequest = require_dispatchRequest();
      var mergeConfig = require_mergeConfig();
      var validator = require_validator();
      var validators = validator.validators;
      function Axios(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }
      Axios.prototype.request = function request(config) {
        if (typeof config === "string") {
          config = arguments[1] || {};
          config.url = arguments[0];
        } else {
          config = config || {};
        }
        config = mergeConfig(this.defaults, config);
        if (config.method) {
          config.method = config.method.toLowerCase();
        } else if (this.defaults.method) {
          config.method = this.defaults.method.toLowerCase();
        } else {
          config.method = "get";
        }
        var transitional = config.transitional;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
            forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
            clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
          }, false);
        }
        var requestInterceptorChain = [];
        var synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        var responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        var promise;
        if (!synchronousRequestInterceptors) {
          var chain = [dispatchRequest, void 0];
          Array.prototype.unshift.apply(chain, requestInterceptorChain);
          chain = chain.concat(responseInterceptorChain);
          promise = Promise.resolve(config);
          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }
          return promise;
        }
        var newConfig = config;
        while (requestInterceptorChain.length) {
          var onFulfilled = requestInterceptorChain.shift();
          var onRejected = requestInterceptorChain.shift();
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected(error);
            break;
          }
        }
        try {
          promise = dispatchRequest(newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        while (responseInterceptorChain.length) {
          promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
        }
        return promise;
      };
      Axios.prototype.getUri = function getUri(config) {
        config = mergeConfig(this.defaults, config);
        return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
      };
      utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
        Axios.prototype[method] = function(url, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data: (config || {}).data
          }));
        };
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        Axios.prototype[method] = function(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data
          }));
        };
      });
      module2.exports = Axios;
    }
  });

  // node_modules/axios/lib/cancel/Cancel.js
  var require_Cancel = __commonJS({
    "node_modules/axios/lib/cancel/Cancel.js"(exports2, module2) {
      "use strict";
      function Cancel(message) {
        this.message = message;
      }
      Cancel.prototype.toString = function toString3() {
        return "Cancel" + (this.message ? ": " + this.message : "");
      };
      Cancel.prototype.__CANCEL__ = true;
      module2.exports = Cancel;
    }
  });

  // node_modules/axios/lib/cancel/CancelToken.js
  var require_CancelToken = __commonJS({
    "node_modules/axios/lib/cancel/CancelToken.js"(exports2, module2) {
      "use strict";
      var Cancel = require_Cancel();
      function CancelToken(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        var resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        var token = this;
        executor(function cancel(message) {
          if (token.reason) {
            return;
          }
          token.reason = new Cancel(message);
          resolvePromise(token.reason);
        });
      }
      CancelToken.prototype.throwIfRequested = function throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      };
      CancelToken.source = function source() {
        var cancel;
        var token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      };
      module2.exports = CancelToken;
    }
  });

  // node_modules/axios/lib/helpers/spread.js
  var require_spread = __commonJS({
    "node_modules/axios/lib/helpers/spread.js"(exports2, module2) {
      "use strict";
      module2.exports = function spread(callback) {
        return function wrap2(arr) {
          return callback.apply(null, arr);
        };
      };
    }
  });

  // node_modules/axios/lib/helpers/isAxiosError.js
  var require_isAxiosError = __commonJS({
    "node_modules/axios/lib/helpers/isAxiosError.js"(exports2, module2) {
      "use strict";
      module2.exports = function isAxiosError(payload) {
        return typeof payload === "object" && payload.isAxiosError === true;
      };
    }
  });

  // node_modules/axios/lib/axios.js
  var require_axios = __commonJS({
    "node_modules/axios/lib/axios.js"(exports2, module2) {
      "use strict";
      var utils = require_utils();
      var bind2 = require_bind();
      var Axios = require_Axios();
      var mergeConfig = require_mergeConfig();
      var defaults = require_defaults();
      function createInstance(defaultConfig2) {
        var context = new Axios(defaultConfig2);
        var instance = bind2(Axios.prototype.request, context);
        utils.extend(instance, Axios.prototype, context);
        utils.extend(instance, context);
        return instance;
      }
      var axios4 = createInstance(defaults);
      axios4.Axios = Axios;
      axios4.create = function create(instanceConfig) {
        return createInstance(mergeConfig(axios4.defaults, instanceConfig));
      };
      axios4.Cancel = require_Cancel();
      axios4.CancelToken = require_CancelToken();
      axios4.isCancel = require_isCancel();
      axios4.all = function all(promises) {
        return Promise.all(promises);
      };
      axios4.spread = require_spread();
      axios4.isAxiosError = require_isAxiosError();
      module2.exports = axios4;
      module2.exports.default = axios4;
    }
  });

  // node_modules/axios/index.js
  var require_axios2 = __commonJS({
    "node_modules/axios/index.js"(exports2, module2) {
      module2.exports = require_axios();
    }
  });

  // node_modules/openseadragon/build/openseadragon/openseadragon.js
  var require_openseadragon = __commonJS({
    "node_modules/openseadragon/build/openseadragon/openseadragon.js"(exports, module) {
      function OpenSeadragon(options) {
        return new OpenSeadragon.Viewer(options);
      }
      (function($2) {
        $2.version = {
          versionStr: "2.4.2",
          major: parseInt("2", 10),
          minor: parseInt("4", 10),
          revision: parseInt("2", 10)
        };
        var class2type = {
          "[object Boolean]": "boolean",
          "[object Number]": "number",
          "[object String]": "string",
          "[object Function]": "function",
          "[object Array]": "array",
          "[object Date]": "date",
          "[object RegExp]": "regexp",
          "[object Object]": "object"
        }, toString3 = Object.prototype.toString, hasOwn2 = Object.prototype.hasOwnProperty;
        $2.isFunction = function(obj) {
          return $2.type(obj) === "function";
        };
        $2.isArray = Array.isArray || function(obj) {
          return $2.type(obj) === "array";
        };
        $2.isWindow = function(obj) {
          return obj && typeof obj === "object" && "setInterval" in obj;
        };
        $2.type = function(obj) {
          return obj === null || obj === void 0 ? String(obj) : class2type[toString3.call(obj)] || "object";
        };
        $2.isPlainObject = function(obj) {
          if (!obj || OpenSeadragon.type(obj) !== "object" || obj.nodeType || $2.isWindow(obj)) {
            return false;
          }
          if (obj.constructor && !hasOwn2.call(obj, "constructor") && !hasOwn2.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
          }
          var lastKey;
          for (var key in obj) {
            lastKey = key;
          }
          return lastKey === void 0 || hasOwn2.call(obj, lastKey);
        };
        $2.isEmptyObject = function(obj) {
          for (var name in obj) {
            return false;
          }
          return true;
        };
        $2.freezeObject = function(obj) {
          if (Object.freeze) {
            $2.freezeObject = Object.freeze;
          } else {
            $2.freezeObject = function(obj2) {
              return obj2;
            };
          }
          return $2.freezeObject(obj);
        };
        $2.supportsCanvas = function() {
          var canvasElement = document.createElement("canvas");
          return !!($2.isFunction(canvasElement.getContext) && canvasElement.getContext("2d"));
        }();
        $2.isCanvasTainted = function(canvas) {
          var isTainted = false;
          try {
            canvas.getContext("2d").getImageData(0, 0, 1, 1);
          } catch (e) {
            isTainted = true;
          }
          return isTainted;
        };
        $2.pixelDensityRatio = function() {
          if ($2.supportsCanvas) {
            var context = document.createElement("canvas").getContext("2d");
            var devicePixelRatio = window.devicePixelRatio || 1;
            var backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
            return Math.max(devicePixelRatio, 1) / backingStoreRatio;
          } else {
            return 1;
          }
        }();
      })(OpenSeadragon);
      (function($) {
        $.extend = function() {
          var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, length = arguments.length, deep = false, i = 1;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i = 2;
          }
          if (typeof target !== "object" && !OpenSeadragon.isFunction(target)) {
            target = {};
          }
          if (length === i) {
            target = this;
            --i;
          }
          for (; i < length; i++) {
            options = arguments[i];
            if (options !== null || options !== void 0) {
              for (name in options) {
                src = target[name];
                copy = options[name];
                if (target === copy) {
                  continue;
                }
                if (deep && copy && (OpenSeadragon.isPlainObject(copy) || (copyIsArray = OpenSeadragon.isArray(copy)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && OpenSeadragon.isArray(src) ? src : [];
                  } else {
                    clone = src && OpenSeadragon.isPlainObject(src) ? src : {};
                  }
                  target[name] = OpenSeadragon.extend(deep, clone, copy);
                } else if (copy !== void 0) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        var isIOSDevice = function() {
          if (typeof navigator !== "object") {
            return false;
          }
          var userAgent = navigator.userAgent;
          if (typeof userAgent !== "string") {
            return false;
          }
          return userAgent.indexOf("iPhone") !== -1 || userAgent.indexOf("iPad") !== -1 || userAgent.indexOf("iPod") !== -1;
        };
        $.extend($, {
          DEFAULT_SETTINGS: {
            xmlPath: null,
            tileSources: null,
            tileHost: null,
            initialPage: 0,
            crossOriginPolicy: false,
            ajaxWithCredentials: false,
            loadTilesWithAjax: false,
            ajaxHeaders: {},
            panHorizontal: true,
            panVertical: true,
            constrainDuringPan: false,
            wrapHorizontal: false,
            wrapVertical: false,
            visibilityRatio: 0.5,
            minPixelRatio: 0.5,
            defaultZoomLevel: 0,
            minZoomLevel: null,
            maxZoomLevel: null,
            homeFillsViewer: false,
            clickTimeThreshold: 300,
            clickDistThreshold: 5,
            dblClickTimeThreshold: 300,
            dblClickDistThreshold: 20,
            springStiffness: 6.5,
            animationTime: 1.2,
            gestureSettingsMouse: {
              scrollToZoom: true,
              clickToZoom: true,
              dblClickToZoom: false,
              pinchToZoom: false,
              zoomToRefPoint: true,
              flickEnabled: false,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            gestureSettingsTouch: {
              scrollToZoom: false,
              clickToZoom: false,
              dblClickToZoom: true,
              pinchToZoom: true,
              zoomToRefPoint: true,
              flickEnabled: true,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            gestureSettingsPen: {
              scrollToZoom: false,
              clickToZoom: true,
              dblClickToZoom: false,
              pinchToZoom: false,
              zoomToRefPoint: true,
              flickEnabled: false,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            gestureSettingsUnknown: {
              scrollToZoom: false,
              clickToZoom: false,
              dblClickToZoom: true,
              pinchToZoom: true,
              zoomToRefPoint: true,
              flickEnabled: true,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false
            },
            zoomPerClick: 2,
            zoomPerScroll: 1.2,
            zoomPerSecond: 1,
            blendTime: 0,
            alwaysBlend: false,
            autoHideControls: true,
            immediateRender: false,
            minZoomImageRatio: 0.9,
            maxZoomPixelRatio: 1.1,
            smoothTileEdgesMinZoom: 1.1,
            iOSDevice: isIOSDevice(),
            pixelsPerWheelLine: 40,
            pixelsPerArrowPress: 40,
            autoResize: true,
            preserveImageSizeOnResize: false,
            minScrollDeltaTime: 50,
            rotationIncrement: 90,
            showSequenceControl: true,
            sequenceControlAnchor: null,
            preserveViewport: false,
            preserveOverlays: false,
            navPrevNextWrap: false,
            showNavigationControl: true,
            navigationControlAnchor: null,
            showZoomControl: true,
            showHomeControl: true,
            showFullPageControl: true,
            showRotationControl: false,
            showFlipControl: false,
            controlsFadeDelay: 2e3,
            controlsFadeLength: 1500,
            mouseNavEnabled: true,
            showNavigator: false,
            navigatorId: null,
            navigatorPosition: null,
            navigatorSizeRatio: 0.2,
            navigatorMaintainSizeRatio: false,
            navigatorTop: null,
            navigatorLeft: null,
            navigatorHeight: null,
            navigatorWidth: null,
            navigatorAutoResize: true,
            navigatorAutoFade: true,
            navigatorRotate: true,
            navigatorBackground: "#000",
            navigatorOpacity: 0.8,
            navigatorBorderColor: "#555",
            navigatorDisplayRegionColor: "#900",
            degrees: 0,
            flipped: false,
            opacity: 1,
            preload: false,
            compositeOperation: null,
            imageSmoothingEnabled: true,
            placeholderFillStyle: null,
            showReferenceStrip: false,
            referenceStripScroll: "horizontal",
            referenceStripElement: null,
            referenceStripHeight: null,
            referenceStripWidth: null,
            referenceStripPosition: "BOTTOM_LEFT",
            referenceStripSizeRatio: 0.2,
            collectionRows: 3,
            collectionColumns: 0,
            collectionLayout: "horizontal",
            collectionMode: false,
            collectionTileSize: 800,
            collectionTileMargin: 80,
            imageLoaderLimit: 0,
            maxImageCacheCount: 200,
            timeout: 3e4,
            useCanvas: true,
            prefixUrl: "/images/",
            navImages: {
              zoomIn: {
                REST: "zoomin_rest.png",
                GROUP: "zoomin_grouphover.png",
                HOVER: "zoomin_hover.png",
                DOWN: "zoomin_pressed.png"
              },
              zoomOut: {
                REST: "zoomout_rest.png",
                GROUP: "zoomout_grouphover.png",
                HOVER: "zoomout_hover.png",
                DOWN: "zoomout_pressed.png"
              },
              home: {
                REST: "home_rest.png",
                GROUP: "home_grouphover.png",
                HOVER: "home_hover.png",
                DOWN: "home_pressed.png"
              },
              fullpage: {
                REST: "fullpage_rest.png",
                GROUP: "fullpage_grouphover.png",
                HOVER: "fullpage_hover.png",
                DOWN: "fullpage_pressed.png"
              },
              rotateleft: {
                REST: "rotateleft_rest.png",
                GROUP: "rotateleft_grouphover.png",
                HOVER: "rotateleft_hover.png",
                DOWN: "rotateleft_pressed.png"
              },
              rotateright: {
                REST: "rotateright_rest.png",
                GROUP: "rotateright_grouphover.png",
                HOVER: "rotateright_hover.png",
                DOWN: "rotateright_pressed.png"
              },
              flip: {
                REST: "flip_rest.png",
                GROUP: "flip_grouphover.png",
                HOVER: "flip_hover.png",
                DOWN: "flip_pressed.png"
              },
              previous: {
                REST: "previous_rest.png",
                GROUP: "previous_grouphover.png",
                HOVER: "previous_hover.png",
                DOWN: "previous_pressed.png"
              },
              next: {
                REST: "next_rest.png",
                GROUP: "next_grouphover.png",
                HOVER: "next_hover.png",
                DOWN: "next_pressed.png"
              }
            },
            debugMode: false,
            debugGridColor: ["#437AB2", "#1B9E77", "#D95F02", "#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D", "#666666"]
          },
          SIGNAL: "----seadragon----",
          delegate: function(object, method) {
            return function() {
              var args = arguments;
              if (args === void 0) {
                args = [];
              }
              return method.apply(object, args);
            };
          },
          BROWSERS: {
            UNKNOWN: 0,
            IE: 1,
            FIREFOX: 2,
            SAFARI: 3,
            CHROME: 4,
            OPERA: 5
          },
          getElement: function(element) {
            if (typeof element == "string") {
              element = document.getElementById(element);
            }
            return element;
          },
          getElementPosition: function(element) {
            var result2 = new $.Point(), isFixed, offsetParent;
            element = $.getElement(element);
            isFixed = $.getElementStyle(element).position == "fixed";
            offsetParent = getOffsetParent(element, isFixed);
            while (offsetParent) {
              result2.x += element.offsetLeft;
              result2.y += element.offsetTop;
              if (isFixed) {
                result2 = result2.plus($.getPageScroll());
              }
              element = offsetParent;
              isFixed = $.getElementStyle(element).position == "fixed";
              offsetParent = getOffsetParent(element, isFixed);
            }
            return result2;
          },
          getElementOffset: function(element) {
            element = $.getElement(element);
            var doc = element && element.ownerDocument, docElement, win, boundingRect = { top: 0, left: 0 };
            if (!doc) {
              return new $.Point();
            }
            docElement = doc.documentElement;
            if (typeof element.getBoundingClientRect !== "undefined") {
              boundingRect = element.getBoundingClientRect();
            }
            win = doc == doc.window ? doc : doc.nodeType === 9 ? doc.defaultView || doc.parentWindow : false;
            return new $.Point(
              boundingRect.left + (win.pageXOffset || docElement.scrollLeft) - (docElement.clientLeft || 0),
              boundingRect.top + (win.pageYOffset || docElement.scrollTop) - (docElement.clientTop || 0)
            );
          },
          getElementSize: function(element) {
            element = $.getElement(element);
            return new $.Point(
              element.clientWidth,
              element.clientHeight
            );
          },
          getElementStyle: document.documentElement.currentStyle ? function(element) {
            element = $.getElement(element);
            return element.currentStyle;
          } : function(element) {
            element = $.getElement(element);
            return window.getComputedStyle(element, "");
          },
          getCssPropertyWithVendorPrefix: function(property) {
            var memo = {};
            $.getCssPropertyWithVendorPrefix = function(property2) {
              if (memo[property2] !== void 0) {
                return memo[property2];
              }
              var style = document.createElement("div").style;
              var result2 = null;
              if (style[property2] !== void 0) {
                result2 = property2;
              } else {
                var prefixes = [
                  "Webkit",
                  "Moz",
                  "MS",
                  "O",
                  "webkit",
                  "moz",
                  "ms",
                  "o"
                ];
                var suffix = $.capitalizeFirstLetter(property2);
                for (var i = 0; i < prefixes.length; i++) {
                  var prop = prefixes[i] + suffix;
                  if (style[prop] !== void 0) {
                    result2 = prop;
                    break;
                  }
                }
              }
              memo[property2] = result2;
              return result2;
            };
            return $.getCssPropertyWithVendorPrefix(property);
          },
          capitalizeFirstLetter: function(string2) {
            return string2.charAt(0).toUpperCase() + string2.slice(1);
          },
          positiveModulo: function(number, modulo) {
            var result2 = number % modulo;
            if (result2 < 0) {
              result2 += modulo;
            }
            return result2;
          },
          pointInElement: function(element, point) {
            element = $.getElement(element);
            var offset = $.getElementOffset(element), size = $.getElementSize(element);
            return point.x >= offset.x && point.x < offset.x + size.x && point.y < offset.y + size.y && point.y >= offset.y;
          },
          getEvent: function(event) {
            if (event) {
              $.getEvent = function(event2) {
                return event2;
              };
            } else {
              $.getEvent = function() {
                return window.event;
              };
            }
            return $.getEvent(event);
          },
          getMousePosition: function(event) {
            if (typeof event.pageX == "number") {
              $.getMousePosition = function(event2) {
                var result2 = new $.Point();
                event2 = $.getEvent(event2);
                result2.x = event2.pageX;
                result2.y = event2.pageY;
                return result2;
              };
            } else if (typeof event.clientX == "number") {
              $.getMousePosition = function(event2) {
                var result2 = new $.Point();
                event2 = $.getEvent(event2);
                result2.x = event2.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                result2.y = event2.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                return result2;
              };
            } else {
              throw new Error(
                "Unknown event mouse position, no known technique."
              );
            }
            return $.getMousePosition(event);
          },
          getPageScroll: function() {
            var docElement = document.documentElement || {}, body = document.body || {};
            if (typeof window.pageXOffset == "number") {
              $.getPageScroll = function() {
                return new $.Point(
                  window.pageXOffset,
                  window.pageYOffset
                );
              };
            } else if (body.scrollLeft || body.scrollTop) {
              $.getPageScroll = function() {
                return new $.Point(
                  document.body.scrollLeft,
                  document.body.scrollTop
                );
              };
            } else if (docElement.scrollLeft || docElement.scrollTop) {
              $.getPageScroll = function() {
                return new $.Point(
                  document.documentElement.scrollLeft,
                  document.documentElement.scrollTop
                );
              };
            } else {
              return new $.Point(0, 0);
            }
            return $.getPageScroll();
          },
          setPageScroll: function(scroll) {
            if (typeof window.scrollTo !== "undefined") {
              $.setPageScroll = function(scroll2) {
                window.scrollTo(scroll2.x, scroll2.y);
              };
            } else {
              var originalScroll = $.getPageScroll();
              if (originalScroll.x === scroll.x && originalScroll.y === scroll.y) {
                return;
              }
              document.body.scrollLeft = scroll.x;
              document.body.scrollTop = scroll.y;
              var currentScroll = $.getPageScroll();
              if (currentScroll.x !== originalScroll.x && currentScroll.y !== originalScroll.y) {
                $.setPageScroll = function(scroll2) {
                  document.body.scrollLeft = scroll2.x;
                  document.body.scrollTop = scroll2.y;
                };
                return;
              }
              document.documentElement.scrollLeft = scroll.x;
              document.documentElement.scrollTop = scroll.y;
              currentScroll = $.getPageScroll();
              if (currentScroll.x !== originalScroll.x && currentScroll.y !== originalScroll.y) {
                $.setPageScroll = function(scroll2) {
                  document.documentElement.scrollLeft = scroll2.x;
                  document.documentElement.scrollTop = scroll2.y;
                };
                return;
              }
              $.setPageScroll = function(scroll2) {
              };
            }
            return $.setPageScroll(scroll);
          },
          getWindowSize: function() {
            var docElement = document.documentElement || {}, body = document.body || {};
            if (typeof window.innerWidth == "number") {
              $.getWindowSize = function() {
                return new $.Point(
                  window.innerWidth,
                  window.innerHeight
                );
              };
            } else if (docElement.clientWidth || docElement.clientHeight) {
              $.getWindowSize = function() {
                return new $.Point(
                  document.documentElement.clientWidth,
                  document.documentElement.clientHeight
                );
              };
            } else if (body.clientWidth || body.clientHeight) {
              $.getWindowSize = function() {
                return new $.Point(
                  document.body.clientWidth,
                  document.body.clientHeight
                );
              };
            } else {
              throw new Error("Unknown window size, no known technique.");
            }
            return $.getWindowSize();
          },
          makeCenteredNode: function(element) {
            element = $.getElement(element);
            var wrappers = [
              $.makeNeutralElement("div"),
              $.makeNeutralElement("div"),
              $.makeNeutralElement("div")
            ];
            $.extend(wrappers[0].style, {
              display: "table",
              height: "100%",
              width: "100%"
            });
            $.extend(wrappers[1].style, {
              display: "table-row"
            });
            $.extend(wrappers[2].style, {
              display: "table-cell",
              verticalAlign: "middle",
              textAlign: "center"
            });
            wrappers[0].appendChild(wrappers[1]);
            wrappers[1].appendChild(wrappers[2]);
            wrappers[2].appendChild(element);
            return wrappers[0];
          },
          makeNeutralElement: function(tagName) {
            var element = document.createElement(tagName), style = element.style;
            style.background = "transparent none";
            style.border = "none";
            style.margin = "0px";
            style.padding = "0px";
            style.position = "static";
            return element;
          },
          now: function() {
            if (Date.now) {
              $.now = Date.now;
            } else {
              $.now = function() {
                return new Date().getTime();
              };
            }
            return $.now();
          },
          makeTransparentImage: function(src) {
            $.makeTransparentImage = function(src2) {
              var img = $.makeNeutralElement("img");
              img.src = src2;
              return img;
            };
            if ($.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 7) {
              $.makeTransparentImage = function(src2) {
                var img = $.makeNeutralElement("img"), element = null;
                element = $.makeNeutralElement("span");
                element.style.display = "inline-block";
                img.onload = function() {
                  element.style.width = element.style.width || img.width + "px";
                  element.style.height = element.style.height || img.height + "px";
                  img.onload = null;
                  img = null;
                };
                img.src = src2;
                element.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + src2 + "', sizingMethod='scale')";
                return element;
              };
            }
            return $.makeTransparentImage(src);
          },
          setElementOpacity: function(element, opacity, usesAlpha) {
            var ieOpacity, ieFilter;
            element = $.getElement(element);
            if (usesAlpha && !$.Browser.alpha) {
              opacity = Math.round(opacity);
            }
            if ($.Browser.opacity) {
              element.style.opacity = opacity < 1 ? opacity : "";
            } else {
              if (opacity < 1) {
                ieOpacity = Math.round(100 * opacity);
                ieFilter = "alpha(opacity=" + ieOpacity + ")";
                element.style.filter = ieFilter;
              } else {
                element.style.filter = "";
              }
            }
          },
          setElementTouchActionNone: function(element) {
            element = $.getElement(element);
            if (typeof element.style.touchAction !== "undefined") {
              element.style.touchAction = "none";
            } else if (typeof element.style.msTouchAction !== "undefined") {
              element.style.msTouchAction = "none";
            }
          },
          addClass: function(element, className) {
            element = $.getElement(element);
            if (!element.className) {
              element.className = className;
            } else if ((" " + element.className + " ").indexOf(" " + className + " ") === -1) {
              element.className += " " + className;
            }
          },
          indexOf: function(array, searchElement, fromIndex) {
            if (Array.prototype.indexOf) {
              this.indexOf = function(array2, searchElement2, fromIndex2) {
                return array2.indexOf(searchElement2, fromIndex2);
              };
            } else {
              this.indexOf = function(array2, searchElement2, fromIndex2) {
                var i, pivot = fromIndex2 ? fromIndex2 : 0, length;
                if (!array2) {
                  throw new TypeError();
                }
                length = array2.length;
                if (length === 0 || pivot >= length) {
                  return -1;
                }
                if (pivot < 0) {
                  pivot = length - Math.abs(pivot);
                }
                for (i = pivot; i < length; i++) {
                  if (array2[i] === searchElement2) {
                    return i;
                  }
                }
                return -1;
              };
            }
            return this.indexOf(array, searchElement, fromIndex);
          },
          removeClass: function(element, className) {
            var oldClasses, newClasses = [], i;
            element = $.getElement(element);
            oldClasses = element.className.split(/\s+/);
            for (i = 0; i < oldClasses.length; i++) {
              if (oldClasses[i] && oldClasses[i] !== className) {
                newClasses.push(oldClasses[i]);
              }
            }
            element.className = newClasses.join(" ");
          },
          addEvent: function() {
            if (window.addEventListener) {
              return function(element, eventName, handler, useCapture) {
                element = $.getElement(element);
                element.addEventListener(eventName, handler, useCapture);
              };
            } else if (window.attachEvent) {
              return function(element, eventName, handler, useCapture) {
                element = $.getElement(element);
                element.attachEvent("on" + eventName, handler);
              };
            } else {
              throw new Error("No known event model.");
            }
          }(),
          removeEvent: function() {
            if (window.removeEventListener) {
              return function(element, eventName, handler, useCapture) {
                element = $.getElement(element);
                element.removeEventListener(eventName, handler, useCapture);
              };
            } else if (window.detachEvent) {
              return function(element, eventName, handler, useCapture) {
                element = $.getElement(element);
                element.detachEvent("on" + eventName, handler);
              };
            } else {
              throw new Error("No known event model.");
            }
          }(),
          cancelEvent: function(event) {
            event = $.getEvent(event);
            if (event.preventDefault) {
              $.cancelEvent = function(event2) {
                event2.preventDefault();
              };
            } else {
              $.cancelEvent = function(event2) {
                event2 = $.getEvent(event2);
                event2.cancel = true;
                event2.returnValue = false;
              };
            }
            $.cancelEvent(event);
          },
          stopEvent: function(event) {
            event = $.getEvent(event);
            if (event.stopPropagation) {
              $.stopEvent = function(event2) {
                event2.stopPropagation();
              };
            } else {
              $.stopEvent = function(event2) {
                event2 = $.getEvent(event2);
                event2.cancelBubble = true;
              };
            }
            $.stopEvent(event);
          },
          createCallback: function(object, method) {
            var initialArgs = [], i;
            for (i = 2; i < arguments.length; i++) {
              initialArgs.push(arguments[i]);
            }
            return function() {
              var args = initialArgs.concat([]), i2;
              for (i2 = 0; i2 < arguments.length; i2++) {
                args.push(arguments[i2]);
              }
              return method.apply(object, args);
            };
          },
          getUrlParameter: function(key) {
            var value = URLPARAMS[key];
            return value ? value : null;
          },
          getUrlProtocol: function(url) {
            var match = url.match(/^([a-z]+:)\/\//i);
            if (match === null) {
              return window.location.protocol;
            }
            return match[1].toLowerCase();
          },
          createAjaxRequest: function(local) {
            var supportActiveX;
            try {
              supportActiveX = !!new ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {
              supportActiveX = false;
            }
            if (supportActiveX) {
              if (window.XMLHttpRequest) {
                $.createAjaxRequest = function(local2) {
                  if (local2) {
                    return new ActiveXObject("Microsoft.XMLHTTP");
                  }
                  return new XMLHttpRequest();
                };
              } else {
                $.createAjaxRequest = function() {
                  return new ActiveXObject("Microsoft.XMLHTTP");
                };
              }
            } else if (window.XMLHttpRequest) {
              $.createAjaxRequest = function() {
                return new XMLHttpRequest();
              };
            } else {
              throw new Error("Browser doesn't support XMLHttpRequest.");
            }
            return $.createAjaxRequest(local);
          },
          makeAjaxRequest: function(url, onSuccess, onError) {
            var withCredentials;
            var headers;
            var responseType;
            if ($.isPlainObject(url)) {
              onSuccess = url.success;
              onError = url.error;
              withCredentials = url.withCredentials;
              headers = url.headers;
              responseType = url.responseType || null;
              url = url.url;
            }
            var protocol = $.getUrlProtocol(url);
            var request = $.createAjaxRequest(protocol === "file:");
            if (!$.isFunction(onSuccess)) {
              throw new Error("makeAjaxRequest requires a success callback");
            }
            request.onreadystatechange = function() {
              if (request.readyState == 4) {
                request.onreadystatechange = function() {
                };
                if (request.status >= 200 && request.status < 300 || request.status === 0 && protocol !== "http:" && protocol !== "https:") {
                  onSuccess(request);
                } else {
                  $.console.log("AJAX request returned %d: %s", request.status, url);
                  if ($.isFunction(onError)) {
                    onError(request);
                  }
                }
              }
            };
            try {
              request.open("GET", url, true);
              if (responseType) {
                request.responseType = responseType;
              }
              if (headers) {
                for (var headerName in headers) {
                  if (Object.prototype.hasOwnProperty.call(headers, headerName) && headers[headerName]) {
                    request.setRequestHeader(headerName, headers[headerName]);
                  }
                }
              }
              if (withCredentials) {
                request.withCredentials = true;
              }
              request.send(null);
            } catch (e) {
              var msg = e.message;
              var oldIE = $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 10;
              if (oldIE && typeof e.number != "undefined" && e.number == -2147024891) {
                msg += "\nSee http://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx#xdomain";
              }
              $.console.log("%s while making AJAX request: %s", e.name, msg);
              request.onreadystatechange = function() {
              };
              if (window.XDomainRequest) {
                var xdr = new window.XDomainRequest();
                if (xdr) {
                  xdr.onload = function(e2) {
                    if ($.isFunction(onSuccess)) {
                      onSuccess({
                        responseText: xdr.responseText,
                        status: 200,
                        statusText: "OK"
                      });
                    }
                  };
                  xdr.onerror = function(e2) {
                    if ($.isFunction(onError)) {
                      onError({
                        responseText: xdr.responseText,
                        status: 444,
                        statusText: "An error happened. Due to an XDomainRequest deficiency we can not extract any information about this error. Upgrade your browser."
                      });
                    }
                  };
                  try {
                    xdr.open("GET", url);
                    xdr.send();
                  } catch (e2) {
                    if ($.isFunction(onError)) {
                      onError(request, e);
                    }
                  }
                }
              } else {
                if ($.isFunction(onError)) {
                  onError(request, e);
                }
              }
            }
            return request;
          },
          jsonp: function(options) {
            var script, url = options.url, head = document.head || document.getElementsByTagName("head")[0] || document.documentElement, jsonpCallback = options.callbackName || "openseadragon" + $.now(), previous = window[jsonpCallback], replace = "$1" + jsonpCallback + "$2", callbackParam = options.param || "callback", callback = options.callback;
            url = url.replace(/(\=)\?(&|$)|\?\?/i, replace);
            url += (/\?/.test(url) ? "&" : "?") + callbackParam + "=" + jsonpCallback;
            window[jsonpCallback] = function(response) {
              if (!previous) {
                try {
                  delete window[jsonpCallback];
                } catch (e) {
                }
              } else {
                window[jsonpCallback] = previous;
              }
              if (callback && $.isFunction(callback)) {
                callback(response);
              }
            };
            script = document.createElement("script");
            if (void 0 !== options.async || false !== options.async) {
              script.async = "async";
            }
            if (options.scriptCharset) {
              script.charset = options.scriptCharset;
            }
            script.src = url;
            script.onload = script.onreadystatechange = function(_2, isAbort) {
              if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                script.onload = script.onreadystatechange = null;
                if (head && script.parentNode) {
                  head.removeChild(script);
                }
                script = void 0;
              }
            };
            head.insertBefore(script, head.firstChild);
          },
          createFromDZI: function() {
            throw "OpenSeadragon.createFromDZI is deprecated, use Viewer.open.";
          },
          parseXml: function(string2) {
            if (window.DOMParser) {
              $.parseXml = function(string3) {
                var xmlDoc = null, parser;
                parser = new DOMParser();
                xmlDoc = parser.parseFromString(string3, "text/xml");
                return xmlDoc;
              };
            } else if (window.ActiveXObject) {
              $.parseXml = function(string3) {
                var xmlDoc = null;
                xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = false;
                xmlDoc.loadXML(string3);
                return xmlDoc;
              };
            } else {
              throw new Error("Browser doesn't support XML DOM.");
            }
            return $.parseXml(string2);
          },
          parseJSON: function(string) {
            if (window.JSON && window.JSON.parse) {
              $.parseJSON = window.JSON.parse;
            } else {
              $.parseJSON = function(string) {
                return eval("(" + string + ")");
              };
            }
            return $.parseJSON(string);
          },
          imageFormatSupported: function(extension) {
            extension = extension ? extension : "";
            return !!FILEFORMATS[extension.toLowerCase()];
          }
        });
        var nullfunction = function(msg) {
        };
        $.console = window.console || {
          log: nullfunction,
          debug: nullfunction,
          info: nullfunction,
          warn: nullfunction,
          error: nullfunction,
          assert: nullfunction
        };
        $.Browser = {
          vendor: $.BROWSERS.UNKNOWN,
          version: 0,
          alpha: true
        };
        var FILEFORMATS = {
          "bmp": false,
          "jpeg": true,
          "jpg": true,
          "png": true,
          "tif": false,
          "wdp": false
        }, URLPARAMS = {};
        (function() {
          var ver = navigator.appVersion, ua = navigator.userAgent, regex;
          switch (navigator.appName) {
            case "Microsoft Internet Explorer":
              if (!!window.attachEvent && !!window.ActiveXObject) {
                $.Browser.vendor = $.BROWSERS.IE;
                $.Browser.version = parseFloat(
                  ua.substring(
                    ua.indexOf("MSIE") + 5,
                    ua.indexOf(";", ua.indexOf("MSIE"))
                  )
                );
              }
              break;
            case "Netscape":
              if (window.addEventListener) {
                if (ua.indexOf("Firefox") >= 0) {
                  $.Browser.vendor = $.BROWSERS.FIREFOX;
                  $.Browser.version = parseFloat(
                    ua.substring(ua.indexOf("Firefox") + 8)
                  );
                } else if (ua.indexOf("Safari") >= 0) {
                  $.Browser.vendor = ua.indexOf("Chrome") >= 0 ? $.BROWSERS.CHROME : $.BROWSERS.SAFARI;
                  $.Browser.version = parseFloat(
                    ua.substring(
                      ua.substring(0, ua.indexOf("Safari")).lastIndexOf("/") + 1,
                      ua.indexOf("Safari")
                    )
                  );
                } else {
                  regex = new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})");
                  if (regex.exec(ua) !== null) {
                    $.Browser.vendor = $.BROWSERS.IE;
                    $.Browser.version = parseFloat(RegExp.$1);
                  }
                }
              }
              break;
            case "Opera":
              $.Browser.vendor = $.BROWSERS.OPERA;
              $.Browser.version = parseFloat(ver);
              break;
          }
          var query = window.location.search.substring(1), parts = query.split("&"), part, sep, i;
          for (i = 0; i < parts.length; i++) {
            part = parts[i];
            sep = part.indexOf("=");
            if (sep > 0) {
              var key = part.substring(0, sep), value = part.substring(sep + 1);
              try {
                URLPARAMS[key] = decodeURIComponent(value);
              } catch (e) {
                $.console.error("Ignoring malformed URL parameter: %s=%s", key, value);
              }
            }
          }
          $.Browser.alpha = !($.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 9 || $.Browser.vendor == $.BROWSERS.CHROME && $.Browser.version < 2);
          $.Browser.opacity = !($.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 9);
        })();
        (function(w) {
          var requestAnimationFrame = w.requestAnimationFrame || w.mozRequestAnimationFrame || w.webkitRequestAnimationFrame || w.msRequestAnimationFrame;
          var cancelAnimationFrame = w.cancelAnimationFrame || w.mozCancelAnimationFrame || w.webkitCancelAnimationFrame || w.msCancelAnimationFrame;
          if (requestAnimationFrame && cancelAnimationFrame) {
            $.requestAnimationFrame = function() {
              return requestAnimationFrame.apply(w, arguments);
            };
            $.cancelAnimationFrame = function() {
              return cancelAnimationFrame.apply(w, arguments);
            };
          } else {
            var aAnimQueue = [], processing = [], iRequestId = 0, iIntervalId;
            $.requestAnimationFrame = function(callback) {
              aAnimQueue.push([++iRequestId, callback]);
              if (!iIntervalId) {
                iIntervalId = setInterval(function() {
                  if (aAnimQueue.length) {
                    var time = $.now();
                    var temp = processing;
                    processing = aAnimQueue;
                    aAnimQueue = temp;
                    while (processing.length) {
                      processing.shift()[1](time);
                    }
                  } else {
                    clearInterval(iIntervalId);
                    iIntervalId = void 0;
                  }
                }, 1e3 / 50);
              }
              return iRequestId;
            };
            $.cancelAnimationFrame = function(requestId) {
              var i, j;
              for (i = 0, j = aAnimQueue.length; i < j; i += 1) {
                if (aAnimQueue[i][0] === requestId) {
                  aAnimQueue.splice(i, 1);
                  return;
                }
              }
              for (i = 0, j = processing.length; i < j; i += 1) {
                if (processing[i][0] === requestId) {
                  processing.splice(i, 1);
                  return;
                }
              }
            };
          }
        })(window);
        function getOffsetParent(element, isFixed) {
          if (isFixed && element != document.body) {
            return document.body;
          } else {
            return element.offsetParent;
          }
        }
      })(OpenSeadragon);
      (function(root2, factory) {
        if (typeof define === "function" && define.amd) {
          define([], factory);
        } else if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else {
          root2.OpenSeadragon = factory();
        }
      })(exports, function() {
        return OpenSeadragon;
      });
      (function($2) {
        var fullScreenApi = {
          supportsFullScreen: false,
          isFullScreen: function() {
            return false;
          },
          getFullScreenElement: function() {
            return null;
          },
          requestFullScreen: function() {
          },
          exitFullScreen: function() {
          },
          cancelFullScreen: function() {
          },
          fullScreenEventName: "",
          fullScreenErrorEventName: ""
        };
        if (document.exitFullscreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.fullscreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.requestFullscreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.exitFullscreen();
          };
          fullScreenApi.fullScreenEventName = "fullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "fullscreenerror";
        } else if (document.msExitFullscreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.msFullscreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.msRequestFullscreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.msExitFullscreen();
          };
          fullScreenApi.fullScreenEventName = "MSFullscreenChange";
          fullScreenApi.fullScreenErrorEventName = "MSFullscreenError";
        } else if (document.webkitExitFullscreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.webkitFullscreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.webkitRequestFullscreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.webkitExitFullscreen();
          };
          fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
        } else if (document.webkitCancelFullScreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.webkitCurrentFullScreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.webkitRequestFullScreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.webkitCancelFullScreen();
          };
          fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
        } else if (document.mozCancelFullScreen) {
          fullScreenApi.supportsFullScreen = true;
          fullScreenApi.getFullScreenElement = function() {
            return document.mozFullScreenElement;
          };
          fullScreenApi.requestFullScreen = function(element) {
            return element.mozRequestFullScreen();
          };
          fullScreenApi.exitFullScreen = function() {
            document.mozCancelFullScreen();
          };
          fullScreenApi.fullScreenEventName = "mozfullscreenchange";
          fullScreenApi.fullScreenErrorEventName = "mozfullscreenerror";
        }
        fullScreenApi.isFullScreen = function() {
          return fullScreenApi.getFullScreenElement() !== null;
        };
        fullScreenApi.cancelFullScreen = function() {
          $2.console.error("cancelFullScreen is deprecated. Use exitFullScreen instead.");
          fullScreenApi.exitFullScreen();
        };
        $2.extend($2, fullScreenApi);
      })(OpenSeadragon);
      (function($2) {
        $2.EventSource = function() {
          this.events = {};
        };
        $2.EventSource.prototype = {
          addOnceHandler: function(eventName, handler, userData, times) {
            var self2 = this;
            times = times || 1;
            var count = 0;
            var onceHandler = function(event) {
              count++;
              if (count === times) {
                self2.removeHandler(eventName, onceHandler);
              }
              handler(event);
            };
            this.addHandler(eventName, onceHandler, userData);
          },
          addHandler: function(eventName, handler, userData) {
            var events = this.events[eventName];
            if (!events) {
              this.events[eventName] = events = [];
            }
            if (handler && $2.isFunction(handler)) {
              events[events.length] = { handler, userData: userData || null };
            }
          },
          removeHandler: function(eventName, handler) {
            var events = this.events[eventName], handlers = [], i;
            if (!events) {
              return;
            }
            if ($2.isArray(events)) {
              for (i = 0; i < events.length; i++) {
                if (events[i].handler !== handler) {
                  handlers.push(events[i]);
                }
              }
              this.events[eventName] = handlers;
            }
          },
          removeAllHandlers: function(eventName) {
            if (eventName) {
              this.events[eventName] = [];
            } else {
              for (var eventType in this.events) {
                this.events[eventType] = [];
              }
            }
          },
          getHandler: function(eventName) {
            var events = this.events[eventName];
            if (!events || !events.length) {
              return null;
            }
            events = events.length === 1 ? [events[0]] : Array.apply(null, events);
            return function(source, args) {
              var i, length = events.length;
              for (i = 0; i < length; i++) {
                if (events[i]) {
                  args.eventSource = source;
                  args.userData = events[i].userData;
                  events[i].handler(args);
                }
              }
            };
          },
          raiseEvent: function(eventName, eventArgs) {
            var handler = this.getHandler(eventName);
            if (handler) {
              if (!eventArgs) {
                eventArgs = {};
              }
              handler(this, eventArgs);
            }
          }
        };
      })(OpenSeadragon);
      (function($2) {
        var MOUSETRACKERS = [];
        var THIS = {};
        $2.MouseTracker = function(options) {
          MOUSETRACKERS.push(this);
          var args = arguments;
          if (!$2.isPlainObject(options)) {
            options = {
              element: args[0],
              clickTimeThreshold: args[1],
              clickDistThreshold: args[2]
            };
          }
          this.hash = Math.random();
          this.element = $2.getElement(options.element);
          this.clickTimeThreshold = options.clickTimeThreshold || $2.DEFAULT_SETTINGS.clickTimeThreshold;
          this.clickDistThreshold = options.clickDistThreshold || $2.DEFAULT_SETTINGS.clickDistThreshold;
          this.dblClickTimeThreshold = options.dblClickTimeThreshold || $2.DEFAULT_SETTINGS.dblClickTimeThreshold;
          this.dblClickDistThreshold = options.dblClickDistThreshold || $2.DEFAULT_SETTINGS.dblClickDistThreshold;
          this.userData = options.userData || null;
          this.stopDelay = options.stopDelay || 50;
          this.enterHandler = options.enterHandler || null;
          this.exitHandler = options.exitHandler || null;
          this.pressHandler = options.pressHandler || null;
          this.nonPrimaryPressHandler = options.nonPrimaryPressHandler || null;
          this.releaseHandler = options.releaseHandler || null;
          this.nonPrimaryReleaseHandler = options.nonPrimaryReleaseHandler || null;
          this.moveHandler = options.moveHandler || null;
          this.scrollHandler = options.scrollHandler || null;
          this.clickHandler = options.clickHandler || null;
          this.dblClickHandler = options.dblClickHandler || null;
          this.dragHandler = options.dragHandler || null;
          this.dragEndHandler = options.dragEndHandler || null;
          this.pinchHandler = options.pinchHandler || null;
          this.stopHandler = options.stopHandler || null;
          this.keyDownHandler = options.keyDownHandler || null;
          this.keyUpHandler = options.keyUpHandler || null;
          this.keyHandler = options.keyHandler || null;
          this.focusHandler = options.focusHandler || null;
          this.blurHandler = options.blurHandler || null;
          var _this = this;
          THIS[this.hash] = {
            click: function(event) {
              onClick(_this, event);
            },
            dblclick: function(event) {
              onDblClick(_this, event);
            },
            keydown: function(event) {
              onKeyDown(_this, event);
            },
            keyup: function(event) {
              onKeyUp(_this, event);
            },
            keypress: function(event) {
              onKeyPress(_this, event);
            },
            focus: function(event) {
              onFocus(_this, event);
            },
            blur: function(event) {
              onBlur(_this, event);
            },
            wheel: function(event) {
              onWheel(_this, event);
            },
            mousewheel: function(event) {
              onMouseWheel(_this, event);
            },
            DOMMouseScroll: function(event) {
              onMouseWheel(_this, event);
            },
            MozMousePixelScroll: function(event) {
              onMouseWheel(_this, event);
            },
            mouseenter: function(event) {
              onMouseEnter(_this, event);
            },
            mouseleave: function(event) {
              onMouseLeave(_this, event);
            },
            mouseover: function(event) {
              onMouseOver(_this, event);
            },
            mouseout: function(event) {
              onMouseOut(_this, event);
            },
            mousedown: function(event) {
              onMouseDown(_this, event);
            },
            mouseup: function(event) {
              onMouseUp(_this, event);
            },
            mouseupcaptured: function(event) {
              onMouseUpCaptured(_this, event);
            },
            mousemove: function(event) {
              onMouseMove(_this, event);
            },
            mousemovecaptured: function(event) {
              onMouseMoveCaptured(_this, event);
            },
            touchstart: function(event) {
              onTouchStart(_this, event);
            },
            touchend: function(event) {
              onTouchEnd(_this, event);
            },
            touchendcaptured: function(event) {
              onTouchEndCaptured(_this, event);
            },
            touchmove: function(event) {
              onTouchMove(_this, event);
            },
            touchmovecaptured: function(event) {
              onTouchMoveCaptured(_this, event);
            },
            touchcancel: function(event) {
              onTouchCancel(_this, event);
            },
            gesturestart: function(event) {
              onGestureStart(_this, event);
            },
            gesturechange: function(event) {
              onGestureChange(_this, event);
            },
            pointerover: function(event) {
              onPointerOver(_this, event);
            },
            MSPointerOver: function(event) {
              onPointerOver(_this, event);
            },
            pointerout: function(event) {
              onPointerOut(_this, event);
            },
            MSPointerOut: function(event) {
              onPointerOut(_this, event);
            },
            pointerdown: function(event) {
              onPointerDown(_this, event);
            },
            MSPointerDown: function(event) {
              onPointerDown(_this, event);
            },
            pointerup: function(event) {
              onPointerUp(_this, event);
            },
            MSPointerUp: function(event) {
              onPointerUp(_this, event);
            },
            pointermove: function(event) {
              onPointerMove(_this, event);
            },
            MSPointerMove: function(event) {
              onPointerMove(_this, event);
            },
            pointercancel: function(event) {
              onPointerCancel(_this, event);
            },
            MSPointerCancel: function(event) {
              onPointerCancel(_this, event);
            },
            pointerupcaptured: function(event) {
              onPointerUpCaptured(_this, event);
            },
            pointermovecaptured: function(event) {
              onPointerMoveCaptured(_this, event);
            },
            tracking: false,
            activePointersLists: [],
            lastClickPos: null,
            dblClickTimeOut: null,
            pinchGPoints: [],
            lastPinchDist: 0,
            currentPinchDist: 0,
            lastPinchCenter: null,
            currentPinchCenter: null
          };
          if (!options.startDisabled) {
            this.setTracking(true);
          }
        };
        $2.MouseTracker.prototype = {
          destroy: function() {
            var i;
            stopTracking(this);
            this.element = null;
            for (i = 0; i < MOUSETRACKERS.length; i++) {
              if (MOUSETRACKERS[i] === this) {
                MOUSETRACKERS.splice(i, 1);
                break;
              }
            }
            THIS[this.hash] = null;
            delete THIS[this.hash];
          },
          isTracking: function() {
            return THIS[this.hash].tracking;
          },
          setTracking: function(track) {
            if (track) {
              startTracking(this);
            } else {
              stopTracking(this);
            }
            return this;
          },
          getActivePointersListsExceptType: function(type) {
            var delegate = THIS[this.hash];
            var listArray = [];
            for (var i = 0; i < delegate.activePointersLists.length; ++i) {
              if (delegate.activePointersLists[i].type !== type) {
                listArray.push(delegate.activePointersLists[i]);
              }
            }
            return listArray;
          },
          getActivePointersListByType: function(type) {
            var delegate = THIS[this.hash], i, len = delegate.activePointersLists.length, list;
            for (i = 0; i < len; i++) {
              if (delegate.activePointersLists[i].type === type) {
                return delegate.activePointersLists[i];
              }
            }
            list = new $2.MouseTracker.GesturePointList(type);
            delegate.activePointersLists.push(list);
            return list;
          },
          getActivePointerCount: function() {
            var delegate = THIS[this.hash], i, len = delegate.activePointersLists.length, count = 0;
            for (i = 0; i < len; i++) {
              count += delegate.activePointersLists[i].getLength();
            }
            return count;
          },
          enterHandler: function() {
          },
          exitHandler: function() {
          },
          pressHandler: function() {
          },
          nonPrimaryPressHandler: function() {
          },
          releaseHandler: function() {
          },
          nonPrimaryReleaseHandler: function() {
          },
          moveHandler: function() {
          },
          scrollHandler: function() {
          },
          clickHandler: function() {
          },
          dblClickHandler: function() {
          },
          dragHandler: function() {
          },
          dragEndHandler: function() {
          },
          pinchHandler: function() {
          },
          stopHandler: function() {
          },
          keyDownHandler: function() {
          },
          keyUpHandler: function() {
          },
          keyHandler: function() {
          },
          focusHandler: function() {
          },
          blurHandler: function() {
          }
        };
        $2.MouseTracker.resetAllMouseTrackers = function() {
          for (var i = 0; i < MOUSETRACKERS.length; i++) {
            if (MOUSETRACKERS[i].isTracking()) {
              MOUSETRACKERS[i].setTracking(false);
              MOUSETRACKERS[i].setTracking(true);
            }
          }
        };
        $2.MouseTracker.gesturePointVelocityTracker = function() {
          var trackerPoints = [], intervalId = 0, lastTime = 0;
          var _generateGuid = function(tracker, gPoint) {
            return tracker.hash.toString() + gPoint.type + gPoint.id.toString();
          };
          var _doTracking = function() {
            var i, len = trackerPoints.length, trackPoint, gPoint, now = $2.now(), elapsedTime, distance, speed;
            elapsedTime = now - lastTime;
            lastTime = now;
            for (i = 0; i < len; i++) {
              trackPoint = trackerPoints[i];
              gPoint = trackPoint.gPoint;
              gPoint.direction = Math.atan2(gPoint.currentPos.y - trackPoint.lastPos.y, gPoint.currentPos.x - trackPoint.lastPos.x);
              distance = trackPoint.lastPos.distanceTo(gPoint.currentPos);
              trackPoint.lastPos = gPoint.currentPos;
              speed = 1e3 * distance / (elapsedTime + 1);
              gPoint.speed = 0.75 * speed + 0.25 * gPoint.speed;
            }
          };
          var addPoint = function(tracker, gPoint) {
            var guid = _generateGuid(tracker, gPoint);
            trackerPoints.push(
              {
                guid,
                gPoint,
                lastPos: gPoint.currentPos
              }
            );
            if (trackerPoints.length === 1) {
              lastTime = $2.now();
              intervalId = window.setInterval(_doTracking, 50);
            }
          };
          var removePoint = function(tracker, gPoint) {
            var guid = _generateGuid(tracker, gPoint), i, len = trackerPoints.length;
            for (i = 0; i < len; i++) {
              if (trackerPoints[i].guid === guid) {
                trackerPoints.splice(i, 1);
                len--;
                if (len === 0) {
                  window.clearInterval(intervalId);
                }
                break;
              }
            }
          };
          return {
            addPoint,
            removePoint
          };
        }();
        $2.MouseTracker.captureElement = document;
        $2.MouseTracker.wheelEventName = $2.Browser.vendor == $2.BROWSERS.IE && $2.Browser.version > 8 || "onwheel" in document.createElement("div") ? "wheel" : document.onmousewheel !== void 0 ? "mousewheel" : "DOMMouseScroll";
        $2.MouseTracker.supportsMouseCapture = function() {
          var divElement = document.createElement("div");
          return $2.isFunction(divElement.setCapture) && $2.isFunction(divElement.releaseCapture);
        }();
        $2.MouseTracker.subscribeEvents = ["click", "dblclick", "keydown", "keyup", "keypress", "focus", "blur", $2.MouseTracker.wheelEventName];
        if ($2.MouseTracker.wheelEventName == "DOMMouseScroll") {
          $2.MouseTracker.subscribeEvents.push("MozMousePixelScroll");
        }
        if (window.PointerEvent && (window.navigator.pointerEnabled || $2.Browser.vendor !== $2.BROWSERS.IE)) {
          $2.MouseTracker.havePointerEvents = true;
          $2.MouseTracker.subscribeEvents.push("pointerover", "pointerout", "pointerdown", "pointerup", "pointermove", "pointercancel");
          $2.MouseTracker.unprefixedPointerEvents = true;
          if (navigator.maxTouchPoints) {
            $2.MouseTracker.maxTouchPoints = navigator.maxTouchPoints;
          } else {
            $2.MouseTracker.maxTouchPoints = 0;
          }
          $2.MouseTracker.haveMouseEnter = false;
        } else if (window.MSPointerEvent && window.navigator.msPointerEnabled) {
          $2.MouseTracker.havePointerEvents = true;
          $2.MouseTracker.subscribeEvents.push("MSPointerOver", "MSPointerOut", "MSPointerDown", "MSPointerUp", "MSPointerMove", "MSPointerCancel");
          $2.MouseTracker.unprefixedPointerEvents = false;
          if (navigator.msMaxTouchPoints) {
            $2.MouseTracker.maxTouchPoints = navigator.msMaxTouchPoints;
          } else {
            $2.MouseTracker.maxTouchPoints = 0;
          }
          $2.MouseTracker.haveMouseEnter = false;
        } else {
          $2.MouseTracker.havePointerEvents = false;
          if ($2.Browser.vendor === $2.BROWSERS.IE && $2.Browser.version < 9) {
            $2.MouseTracker.subscribeEvents.push("mouseenter", "mouseleave");
            $2.MouseTracker.haveMouseEnter = true;
          } else {
            $2.MouseTracker.subscribeEvents.push("mouseover", "mouseout");
            $2.MouseTracker.haveMouseEnter = false;
          }
          $2.MouseTracker.subscribeEvents.push("mousedown", "mouseup", "mousemove");
          if ("ontouchstart" in window) {
            $2.MouseTracker.subscribeEvents.push("touchstart", "touchend", "touchmove", "touchcancel");
          }
          if ("ongesturestart" in window) {
            $2.MouseTracker.subscribeEvents.push("gesturestart", "gesturechange");
          }
          $2.MouseTracker.mousePointerId = "legacy-mouse";
          $2.MouseTracker.maxTouchPoints = 10;
        }
        $2.MouseTracker.GesturePointList = function(type) {
          this._gPoints = [];
          this.type = type;
          this.buttons = 0;
          this.contacts = 0;
          this.clicks = 0;
          this.captureCount = 0;
        };
        $2.MouseTracker.GesturePointList.prototype = {
          getLength: function() {
            return this._gPoints.length;
          },
          asArray: function() {
            return this._gPoints;
          },
          add: function(gp) {
            return this._gPoints.push(gp);
          },
          removeById: function(id) {
            var i, len = this._gPoints.length;
            for (i = 0; i < len; i++) {
              if (this._gPoints[i].id === id) {
                this._gPoints.splice(i, 1);
                break;
              }
            }
            return this._gPoints.length;
          },
          getByIndex: function(index) {
            if (index < this._gPoints.length) {
              return this._gPoints[index];
            }
            return null;
          },
          getById: function(id) {
            var i, len = this._gPoints.length;
            for (i = 0; i < len; i++) {
              if (this._gPoints[i].id === id) {
                return this._gPoints[i];
              }
            }
            return null;
          },
          getPrimary: function(id) {
            var i, len = this._gPoints.length;
            for (i = 0; i < len; i++) {
              if (this._gPoints[i].isPrimary) {
                return this._gPoints[i];
              }
            }
            return null;
          },
          addContact: function() {
            ++this.contacts;
            if (this.contacts > 1 && (this.type === "mouse" || this.type === "pen")) {
              this.contacts = 1;
            }
          },
          removeContact: function() {
            --this.contacts;
            if (this.contacts < 0) {
              this.contacts = 0;
            }
          }
        };
        function clearTrackedPointers(tracker) {
          var delegate = THIS[tracker.hash], i, pointerListCount = delegate.activePointersLists.length;
          for (i = 0; i < pointerListCount; i++) {
            if (delegate.activePointersLists[i].captureCount > 0) {
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                "mousemove",
                delegate.mousemovecaptured,
                true
              );
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                "mouseup",
                delegate.mouseupcaptured,
                true
              );
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                $2.MouseTracker.unprefixedPointerEvents ? "pointermove" : "MSPointerMove",
                delegate.pointermovecaptured,
                true
              );
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                $2.MouseTracker.unprefixedPointerEvents ? "pointerup" : "MSPointerUp",
                delegate.pointerupcaptured,
                true
              );
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                "touchmove",
                delegate.touchmovecaptured,
                true
              );
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                "touchend",
                delegate.touchendcaptured,
                true
              );
              delegate.activePointersLists[i].captureCount = 0;
            }
          }
          for (i = 0; i < pointerListCount; i++) {
            delegate.activePointersLists.pop();
          }
        }
        function startTracking(tracker) {
          var delegate = THIS[tracker.hash], event, i;
          if (!delegate.tracking) {
            for (i = 0; i < $2.MouseTracker.subscribeEvents.length; i++) {
              event = $2.MouseTracker.subscribeEvents[i];
              $2.addEvent(
                tracker.element,
                event,
                delegate[event],
                false
              );
            }
            clearTrackedPointers(tracker);
            delegate.tracking = true;
          }
        }
        function stopTracking(tracker) {
          var delegate = THIS[tracker.hash], event, i;
          if (delegate.tracking) {
            for (i = 0; i < $2.MouseTracker.subscribeEvents.length; i++) {
              event = $2.MouseTracker.subscribeEvents[i];
              $2.removeEvent(
                tracker.element,
                event,
                delegate[event],
                false
              );
            }
            clearTrackedPointers(tracker);
            delegate.tracking = false;
          }
        }
        function getCaptureEventParams(tracker, pointerType) {
          var delegate = THIS[tracker.hash];
          if (pointerType === "pointerevent") {
            return {
              upName: $2.MouseTracker.unprefixedPointerEvents ? "pointerup" : "MSPointerUp",
              upHandler: delegate.pointerupcaptured,
              moveName: $2.MouseTracker.unprefixedPointerEvents ? "pointermove" : "MSPointerMove",
              moveHandler: delegate.pointermovecaptured
            };
          } else if (pointerType === "mouse") {
            return {
              upName: "mouseup",
              upHandler: delegate.mouseupcaptured,
              moveName: "mousemove",
              moveHandler: delegate.mousemovecaptured
            };
          } else if (pointerType === "touch") {
            return {
              upName: "touchend",
              upHandler: delegate.touchendcaptured,
              moveName: "touchmove",
              moveHandler: delegate.touchmovecaptured
            };
          } else {
            throw new Error("MouseTracker.getCaptureEventParams: Unknown pointer type.");
          }
        }
        function capturePointer(tracker, pointerType, pointerCount) {
          var pointsList = tracker.getActivePointersListByType(pointerType), eventParams;
          pointsList.captureCount += pointerCount || 1;
          if (pointsList.captureCount === 1) {
            if ($2.Browser.vendor === $2.BROWSERS.IE && $2.Browser.version < 9) {
              tracker.element.setCapture(true);
            } else {
              eventParams = getCaptureEventParams(tracker, $2.MouseTracker.havePointerEvents ? "pointerevent" : pointerType);
              if (isInIframe && canAccessEvents(window.top)) {
                $2.addEvent(
                  window.top,
                  eventParams.upName,
                  eventParams.upHandler,
                  true
                );
              }
              $2.addEvent(
                $2.MouseTracker.captureElement,
                eventParams.upName,
                eventParams.upHandler,
                true
              );
              $2.addEvent(
                $2.MouseTracker.captureElement,
                eventParams.moveName,
                eventParams.moveHandler,
                true
              );
            }
          }
        }
        function releasePointer(tracker, pointerType, pointerCount) {
          var pointsList = tracker.getActivePointersListByType(pointerType), eventParams;
          pointsList.captureCount -= pointerCount || 1;
          if (pointsList.captureCount === 0) {
            if ($2.Browser.vendor === $2.BROWSERS.IE && $2.Browser.version < 9) {
              tracker.element.releaseCapture();
            } else {
              eventParams = getCaptureEventParams(tracker, $2.MouseTracker.havePointerEvents ? "pointerevent" : pointerType);
              if (isInIframe && canAccessEvents(window.top)) {
                $2.removeEvent(
                  window.top,
                  eventParams.upName,
                  eventParams.upHandler,
                  true
                );
              }
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                eventParams.moveName,
                eventParams.moveHandler,
                true
              );
              $2.removeEvent(
                $2.MouseTracker.captureElement,
                eventParams.upName,
                eventParams.upHandler,
                true
              );
            }
          }
        }
        function getPointerType(event) {
          var pointerTypeStr;
          if ($2.MouseTracker.unprefixedPointerEvents) {
            pointerTypeStr = event.pointerType;
          } else {
            switch (event.pointerType) {
              case 2:
                pointerTypeStr = "touch";
                break;
              case 3:
                pointerTypeStr = "pen";
                break;
              case 4:
                pointerTypeStr = "mouse";
                break;
              default:
                pointerTypeStr = "";
            }
          }
          return pointerTypeStr;
        }
        function getMouseAbsolute(event) {
          return $2.getMousePosition(event);
        }
        function getMouseRelative(event, element) {
          return getPointRelativeToAbsolute(getMouseAbsolute(event), element);
        }
        function getPointRelativeToAbsolute(point, element) {
          var offset = $2.getElementOffset(element);
          return point.minus(offset);
        }
        function getCenterPoint(point1, point2) {
          return new $2.Point((point1.x + point2.x) / 2, (point1.y + point2.y) / 2);
        }
        function onClick(tracker, event) {
          if (tracker.clickHandler) {
            $2.cancelEvent(event);
          }
        }
        function onDblClick(tracker, event) {
          if (tracker.dblClickHandler) {
            $2.cancelEvent(event);
          }
        }
        function onKeyDown(tracker, event) {
          var propagate;
          if (tracker.keyDownHandler) {
            event = $2.getEvent(event);
            propagate = tracker.keyDownHandler(
              {
                eventSource: tracker,
                keyCode: event.keyCode ? event.keyCode : event.charCode,
                ctrl: event.ctrlKey,
                shift: event.shiftKey,
                alt: event.altKey,
                meta: event.metaKey,
                originalEvent: event,
                preventDefaultAction: false,
                userData: tracker.userData
              }
            );
            if (!propagate) {
              $2.cancelEvent(event);
            }
          }
        }
        function onKeyUp(tracker, event) {
          var propagate;
          if (tracker.keyUpHandler) {
            event = $2.getEvent(event);
            propagate = tracker.keyUpHandler(
              {
                eventSource: tracker,
                keyCode: event.keyCode ? event.keyCode : event.charCode,
                ctrl: event.ctrlKey,
                shift: event.shiftKey,
                alt: event.altKey,
                meta: event.metaKey,
                originalEvent: event,
                preventDefaultAction: false,
                userData: tracker.userData
              }
            );
            if (!propagate) {
              $2.cancelEvent(event);
            }
          }
        }
        function onKeyPress(tracker, event) {
          var propagate;
          if (tracker.keyHandler) {
            event = $2.getEvent(event);
            propagate = tracker.keyHandler(
              {
                eventSource: tracker,
                keyCode: event.keyCode ? event.keyCode : event.charCode,
                ctrl: event.ctrlKey,
                shift: event.shiftKey,
                alt: event.altKey,
                meta: event.metaKey,
                originalEvent: event,
                preventDefaultAction: false,
                userData: tracker.userData
              }
            );
            if (!propagate) {
              $2.cancelEvent(event);
            }
          }
        }
        function onFocus(tracker, event) {
          var propagate;
          if (tracker.focusHandler) {
            event = $2.getEvent(event);
            propagate = tracker.focusHandler(
              {
                eventSource: tracker,
                originalEvent: event,
                preventDefaultAction: false,
                userData: tracker.userData
              }
            );
            if (propagate === false) {
              $2.cancelEvent(event);
            }
          }
        }
        function onBlur(tracker, event) {
          var propagate;
          if (tracker.blurHandler) {
            event = $2.getEvent(event);
            propagate = tracker.blurHandler(
              {
                eventSource: tracker,
                originalEvent: event,
                preventDefaultAction: false,
                userData: tracker.userData
              }
            );
            if (propagate === false) {
              $2.cancelEvent(event);
            }
          }
        }
        function onWheel(tracker, event) {
          handleWheelEvent(tracker, event, event);
        }
        function onMouseWheel(tracker, event) {
          event = $2.getEvent(event);
          var simulatedEvent = {
            target: event.target || event.srcElement,
            type: "wheel",
            shiftKey: event.shiftKey || false,
            clientX: event.clientX,
            clientY: event.clientY,
            pageX: event.pageX ? event.pageX : event.clientX,
            pageY: event.pageY ? event.pageY : event.clientY,
            deltaMode: event.type == "MozMousePixelScroll" ? 0 : 1,
            deltaX: 0,
            deltaZ: 0
          };
          if ($2.MouseTracker.wheelEventName == "mousewheel") {
            simulatedEvent.deltaY = -event.wheelDelta / $2.DEFAULT_SETTINGS.pixelsPerWheelLine;
          } else {
            simulatedEvent.deltaY = event.detail;
          }
          handleWheelEvent(tracker, simulatedEvent, event);
        }
        function handleWheelEvent(tracker, event, originalEvent) {
          var nDelta = 0, propagate;
          nDelta = event.deltaY < 0 ? 1 : -1;
          if (tracker.scrollHandler) {
            propagate = tracker.scrollHandler(
              {
                eventSource: tracker,
                pointerType: "mouse",
                position: getMouseRelative(event, tracker.element),
                scroll: nDelta,
                shift: event.shiftKey,
                isTouchEvent: false,
                originalEvent,
                preventDefaultAction: false,
                userData: tracker.userData
              }
            );
            if (propagate === false) {
              $2.cancelEvent(originalEvent);
            }
          }
        }
        function isParentChild(parent, child) {
          if (parent === child) {
            return false;
          }
          while (child && child !== parent) {
            child = child.parentNode;
          }
          return child === parent;
        }
        function onMouseEnter(tracker, event) {
          event = $2.getEvent(event);
          handleMouseEnter(tracker, event);
        }
        function onMouseOver(tracker, event) {
          event = $2.getEvent(event);
          if (event.currentTarget === event.relatedTarget || isParentChild(event.currentTarget, event.relatedTarget)) {
            return;
          }
          handleMouseEnter(tracker, event);
        }
        function handleMouseEnter(tracker, event) {
          var gPoint = {
            id: $2.MouseTracker.mousePointerId,
            type: "mouse",
            isPrimary: true,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          updatePointersEnter(tracker, event, [gPoint]);
        }
        function onMouseLeave(tracker, event) {
          event = $2.getEvent(event);
          handleMouseExit(tracker, event);
        }
        function onMouseOut(tracker, event) {
          event = $2.getEvent(event);
          if (event.currentTarget === event.relatedTarget || isParentChild(event.currentTarget, event.relatedTarget)) {
            return;
          }
          handleMouseExit(tracker, event);
        }
        function handleMouseExit(tracker, event) {
          var gPoint = {
            id: $2.MouseTracker.mousePointerId,
            type: "mouse",
            isPrimary: true,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          updatePointersExit(tracker, event, [gPoint]);
        }
        function getStandardizedButton(button) {
          if ($2.Browser.vendor === $2.BROWSERS.IE && $2.Browser.version < 9) {
            if (button === 1) {
              return 0;
            } else if (button === 2) {
              return 2;
            } else if (button === 4) {
              return 1;
            } else {
              return -1;
            }
          } else {
            return button;
          }
        }
        function onMouseDown(tracker, event) {
          var gPoint;
          event = $2.getEvent(event);
          gPoint = {
            id: $2.MouseTracker.mousePointerId,
            type: "mouse",
            isPrimary: true,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          if (updatePointersDown(tracker, event, [gPoint], getStandardizedButton(event.button))) {
            $2.stopEvent(event);
            capturePointer(tracker, "mouse");
          }
          if (tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler) {
            $2.cancelEvent(event);
          }
        }
        function onMouseUp(tracker, event) {
          handleMouseUp(tracker, event);
        }
        function onMouseUpCaptured(tracker, event) {
          handleMouseUp(tracker, event);
          $2.stopEvent(event);
        }
        function handleMouseUp(tracker, event) {
          var gPoint;
          event = $2.getEvent(event);
          gPoint = {
            id: $2.MouseTracker.mousePointerId,
            type: "mouse",
            isPrimary: true,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          if (updatePointersUp(tracker, event, [gPoint], getStandardizedButton(event.button))) {
            releasePointer(tracker, "mouse");
          }
        }
        function onMouseMove(tracker, event) {
          handleMouseMove(tracker, event);
        }
        function onMouseMoveCaptured(tracker, event) {
          handleMouseMove(tracker, event);
          $2.stopEvent(event);
        }
        function handleMouseMove(tracker, event) {
          var gPoint;
          event = $2.getEvent(event);
          gPoint = {
            id: $2.MouseTracker.mousePointerId,
            type: "mouse",
            isPrimary: true,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          updatePointersMove(tracker, event, [gPoint]);
        }
        function abortContacts(tracker, event, pointsList) {
          var i, gPointCount = pointsList.getLength(), abortGPoints = [];
          if (pointsList.type === "touch" || pointsList.contacts > 0) {
            for (i = 0; i < gPointCount; i++) {
              abortGPoints.push(pointsList.getByIndex(i));
            }
            if (abortGPoints.length > 0) {
              updatePointersUp(tracker, event, abortGPoints, 0);
              pointsList.captureCount = 1;
              releasePointer(tracker, pointsList.type);
              updatePointersExit(tracker, event, abortGPoints);
            }
          }
        }
        function onTouchStart(tracker, event) {
          var time, i, j, touchCount = event.changedTouches.length, gPoints = [], parentGPoints, pointsList = tracker.getActivePointersListByType("touch");
          time = $2.now();
          if (pointsList.getLength() > event.touches.length - touchCount) {
            $2.console.warn("Tracked touch contact count doesn't match event.touches.length. Removing all tracked touch pointers.");
            abortContacts(tracker, event, pointsList);
          }
          for (i = 0; i < touchCount; i++) {
            gPoints.push({
              id: event.changedTouches[i].identifier,
              type: "touch",
              currentPos: getMouseAbsolute(event.changedTouches[i]),
              currentTime: time
            });
          }
          updatePointersEnter(tracker, event, gPoints);
          for (i = 0; i < MOUSETRACKERS.length; i++) {
            if (MOUSETRACKERS[i] !== tracker && MOUSETRACKERS[i].isTracking() && isParentChild(MOUSETRACKERS[i].element, tracker.element)) {
              parentGPoints = [];
              for (j = 0; j < touchCount; j++) {
                parentGPoints.push({
                  id: event.changedTouches[j].identifier,
                  type: "touch",
                  currentPos: getMouseAbsolute(event.changedTouches[j]),
                  currentTime: time
                });
              }
              updatePointersEnter(MOUSETRACKERS[i], event, parentGPoints);
            }
          }
          if (updatePointersDown(tracker, event, gPoints, 0)) {
            $2.stopEvent(event);
            capturePointer(tracker, "touch", touchCount);
          }
          $2.cancelEvent(event);
        }
        function onTouchEnd(tracker, event) {
          handleTouchEnd(tracker, event);
        }
        function onTouchEndCaptured(tracker, event) {
          handleTouchEnd(tracker, event);
          $2.stopEvent(event);
        }
        function handleTouchEnd(tracker, event) {
          var time, i, j, touchCount = event.changedTouches.length, gPoints = [], parentGPoints;
          time = $2.now();
          for (i = 0; i < touchCount; i++) {
            gPoints.push({
              id: event.changedTouches[i].identifier,
              type: "touch",
              currentPos: getMouseAbsolute(event.changedTouches[i]),
              currentTime: time
            });
          }
          if (updatePointersUp(tracker, event, gPoints, 0)) {
            releasePointer(tracker, "touch", touchCount);
          }
          updatePointersExit(tracker, event, gPoints);
          for (i = 0; i < MOUSETRACKERS.length; i++) {
            if (MOUSETRACKERS[i] !== tracker && MOUSETRACKERS[i].isTracking() && isParentChild(MOUSETRACKERS[i].element, tracker.element)) {
              parentGPoints = [];
              for (j = 0; j < touchCount; j++) {
                parentGPoints.push({
                  id: event.changedTouches[j].identifier,
                  type: "touch",
                  currentPos: getMouseAbsolute(event.changedTouches[j]),
                  currentTime: time
                });
              }
              updatePointersExit(MOUSETRACKERS[i], event, parentGPoints);
            }
          }
          $2.cancelEvent(event);
        }
        function onTouchMove(tracker, event) {
          handleTouchMove(tracker, event);
        }
        function onTouchMoveCaptured(tracker, event) {
          handleTouchMove(tracker, event);
          $2.stopEvent(event);
        }
        function handleTouchMove(tracker, event) {
          var i, touchCount = event.changedTouches.length, gPoints = [];
          for (i = 0; i < touchCount; i++) {
            gPoints.push({
              id: event.changedTouches[i].identifier,
              type: "touch",
              currentPos: getMouseAbsolute(event.changedTouches[i]),
              currentTime: $2.now()
            });
          }
          updatePointersMove(tracker, event, gPoints);
          $2.cancelEvent(event);
        }
        function onTouchCancel(tracker, event) {
          var pointsList = tracker.getActivePointersListByType("touch");
          abortContacts(tracker, event, pointsList);
        }
        function onGestureStart(tracker, event) {
          event.stopPropagation();
          event.preventDefault();
          return false;
        }
        function onGestureChange(tracker, event) {
          event.stopPropagation();
          event.preventDefault();
          return false;
        }
        function onPointerOver(tracker, event) {
          var gPoint;
          if (event.currentTarget === event.relatedTarget || isParentChild(event.currentTarget, event.relatedTarget)) {
            return;
          }
          gPoint = {
            id: event.pointerId,
            type: getPointerType(event),
            isPrimary: event.isPrimary,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          updatePointersEnter(tracker, event, [gPoint]);
        }
        function onPointerOut(tracker, event) {
          var gPoint;
          if (event.currentTarget === event.relatedTarget || isParentChild(event.currentTarget, event.relatedTarget)) {
            return;
          }
          gPoint = {
            id: event.pointerId,
            type: getPointerType(event),
            isPrimary: event.isPrimary,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          updatePointersExit(tracker, event, [gPoint]);
        }
        function onPointerDown(tracker, event) {
          var gPoint;
          gPoint = {
            id: event.pointerId,
            type: getPointerType(event),
            isPrimary: event.isPrimary,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          if (updatePointersDown(tracker, event, [gPoint], event.button)) {
            $2.stopEvent(event);
            capturePointer(tracker, gPoint.type);
          }
          if (tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler) {
            $2.cancelEvent(event);
          }
        }
        function onPointerUp(tracker, event) {
          handlePointerUp(tracker, event);
        }
        function onPointerUpCaptured(tracker, event) {
          var pointsList = tracker.getActivePointersListByType(getPointerType(event));
          if (pointsList.getById(event.pointerId)) {
            handlePointerUp(tracker, event);
          }
          $2.stopEvent(event);
        }
        function handlePointerUp(tracker, event) {
          var gPoint;
          gPoint = {
            id: event.pointerId,
            type: getPointerType(event),
            isPrimary: event.isPrimary,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          if (updatePointersUp(tracker, event, [gPoint], event.button)) {
            releasePointer(tracker, gPoint.type);
          }
        }
        function onPointerMove(tracker, event) {
          handlePointerMove(tracker, event);
        }
        function onPointerMoveCaptured(tracker, event) {
          var pointsList = tracker.getActivePointersListByType(getPointerType(event));
          if (pointsList.getById(event.pointerId)) {
            handlePointerMove(tracker, event);
          }
          $2.stopEvent(event);
        }
        function handlePointerMove(tracker, event) {
          var gPoint;
          gPoint = {
            id: event.pointerId,
            type: getPointerType(event),
            isPrimary: event.isPrimary,
            currentPos: getMouseAbsolute(event),
            currentTime: $2.now()
          };
          updatePointersMove(tracker, event, [gPoint]);
        }
        function onPointerCancel(tracker, event) {
          var gPoint;
          gPoint = {
            id: event.pointerId,
            type: getPointerType(event)
          };
          updatePointersCancel(tracker, event, [gPoint]);
        }
        function startTrackingPointer(pointsList, gPoint) {
          if (!Object.prototype.hasOwnProperty.call(gPoint, "isPrimary")) {
            if (pointsList.getLength() === 0) {
              gPoint.isPrimary = true;
            } else {
              gPoint.isPrimary = false;
            }
          }
          gPoint.speed = 0;
          gPoint.direction = 0;
          gPoint.contactPos = gPoint.currentPos;
          gPoint.contactTime = gPoint.currentTime;
          gPoint.lastPos = gPoint.currentPos;
          gPoint.lastTime = gPoint.currentTime;
          return pointsList.add(gPoint);
        }
        function stopTrackingPointer(pointsList, gPoint) {
          var listLength, primaryPoint;
          if (pointsList.getById(gPoint.id)) {
            listLength = pointsList.removeById(gPoint.id);
            if (!Object.prototype.hasOwnProperty.call(gPoint, "isPrimary")) {
              primaryPoint = pointsList.getPrimary();
              if (!primaryPoint) {
                primaryPoint = pointsList.getByIndex(0);
                if (primaryPoint) {
                  primaryPoint.isPrimary = true;
                }
              }
            }
          } else {
            listLength = pointsList.getLength();
          }
          return listLength;
        }
        function updatePointersEnter(tracker, event, gPoints) {
          var pointsList = tracker.getActivePointersListByType(gPoints[0].type), i, gPointCount = gPoints.length, curGPoint, updateGPoint, propagate;
          for (i = 0; i < gPointCount; i++) {
            curGPoint = gPoints[i];
            updateGPoint = pointsList.getById(curGPoint.id);
            if (updateGPoint) {
              updateGPoint.insideElement = true;
              updateGPoint.lastPos = updateGPoint.currentPos;
              updateGPoint.lastTime = updateGPoint.currentTime;
              updateGPoint.currentPos = curGPoint.currentPos;
              updateGPoint.currentTime = curGPoint.currentTime;
              curGPoint = updateGPoint;
            } else {
              curGPoint.captured = false;
              curGPoint.insideElementPressed = false;
              curGPoint.insideElement = true;
              startTrackingPointer(pointsList, curGPoint);
            }
            if (tracker.enterHandler) {
              propagate = tracker.enterHandler(
                {
                  eventSource: tracker,
                  pointerType: curGPoint.type,
                  position: getPointRelativeToAbsolute(curGPoint.currentPos, tracker.element),
                  buttons: pointsList.buttons,
                  pointers: tracker.getActivePointerCount(),
                  insideElementPressed: curGPoint.insideElementPressed,
                  buttonDownAny: pointsList.buttons !== 0,
                  isTouchEvent: curGPoint.type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
          }
        }
        function updatePointersExit(tracker, event, gPoints) {
          var pointsList = tracker.getActivePointersListByType(gPoints[0].type), i, gPointCount = gPoints.length, curGPoint, updateGPoint, propagate;
          for (i = 0; i < gPointCount; i++) {
            curGPoint = gPoints[i];
            updateGPoint = pointsList.getById(curGPoint.id);
            if (updateGPoint) {
              if (updateGPoint.captured) {
                updateGPoint.insideElement = false;
                updateGPoint.lastPos = updateGPoint.currentPos;
                updateGPoint.lastTime = updateGPoint.currentTime;
                updateGPoint.currentPos = curGPoint.currentPos;
                updateGPoint.currentTime = curGPoint.currentTime;
              } else {
                stopTrackingPointer(pointsList, updateGPoint);
              }
              curGPoint = updateGPoint;
            }
            if (tracker.exitHandler) {
              propagate = tracker.exitHandler(
                {
                  eventSource: tracker,
                  pointerType: curGPoint.type,
                  position: curGPoint.currentPos && getPointRelativeToAbsolute(curGPoint.currentPos, tracker.element),
                  buttons: pointsList.buttons,
                  pointers: tracker.getActivePointerCount(),
                  insideElementPressed: updateGPoint ? updateGPoint.insideElementPressed : false,
                  buttonDownAny: pointsList.buttons !== 0,
                  isTouchEvent: curGPoint.type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
          }
        }
        function updatePointersDown(tracker, event, gPoints, buttonChanged) {
          var delegate = THIS[tracker.hash], propagate, pointsList = tracker.getActivePointersListByType(gPoints[0].type), i, gPointCount = gPoints.length, curGPoint, updateGPoint;
          if (typeof event.buttons !== "undefined") {
            pointsList.buttons = event.buttons;
          } else {
            if ($2.Browser.vendor === $2.BROWSERS.IE && $2.Browser.version < 9) {
              if (buttonChanged === 0) {
                pointsList.buttons += 1;
              } else if (buttonChanged === 1) {
                pointsList.buttons += 4;
              } else if (buttonChanged === 2) {
                pointsList.buttons += 2;
              } else if (buttonChanged === 3) {
                pointsList.buttons += 8;
              } else if (buttonChanged === 4) {
                pointsList.buttons += 16;
              } else if (buttonChanged === 5) {
                pointsList.buttons += 32;
              }
            } else {
              if (buttonChanged === 0) {
                pointsList.buttons |= 1;
              } else if (buttonChanged === 1) {
                pointsList.buttons |= 4;
              } else if (buttonChanged === 2) {
                pointsList.buttons |= 2;
              } else if (buttonChanged === 3) {
                pointsList.buttons |= 8;
              } else if (buttonChanged === 4) {
                pointsList.buttons |= 16;
              } else if (buttonChanged === 5) {
                pointsList.buttons |= 32;
              }
            }
          }
          var otherPointsLists = tracker.getActivePointersListsExceptType(gPoints[0].type);
          for (i = 0; i < otherPointsLists.length; i++) {
            abortContacts(tracker, event, otherPointsLists[i]);
          }
          if (buttonChanged !== 0) {
            if (tracker.nonPrimaryPressHandler) {
              propagate = tracker.nonPrimaryPressHandler(
                {
                  eventSource: tracker,
                  pointerType: gPoints[0].type,
                  position: getPointRelativeToAbsolute(gPoints[0].currentPos, tracker.element),
                  button: buttonChanged,
                  buttons: pointsList.buttons,
                  isTouchEvent: gPoints[0].type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
            return false;
          }
          for (i = 0; i < gPointCount; i++) {
            curGPoint = gPoints[i];
            updateGPoint = pointsList.getById(curGPoint.id);
            if (updateGPoint) {
              updateGPoint.captured = true;
              updateGPoint.insideElementPressed = true;
              updateGPoint.insideElement = true;
              updateGPoint.contactPos = curGPoint.currentPos;
              updateGPoint.contactTime = curGPoint.currentTime;
              updateGPoint.lastPos = updateGPoint.currentPos;
              updateGPoint.lastTime = updateGPoint.currentTime;
              updateGPoint.currentPos = curGPoint.currentPos;
              updateGPoint.currentTime = curGPoint.currentTime;
              curGPoint = updateGPoint;
            } else {
              curGPoint.captured = true;
              curGPoint.insideElementPressed = true;
              curGPoint.insideElement = true;
              startTrackingPointer(pointsList, curGPoint);
            }
            pointsList.addContact();
            if (tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler) {
              $2.MouseTracker.gesturePointVelocityTracker.addPoint(tracker, curGPoint);
            }
            if (pointsList.contacts === 1) {
              if (tracker.pressHandler) {
                propagate = tracker.pressHandler(
                  {
                    eventSource: tracker,
                    pointerType: curGPoint.type,
                    position: getPointRelativeToAbsolute(curGPoint.contactPos, tracker.element),
                    buttons: pointsList.buttons,
                    isTouchEvent: curGPoint.type === "touch",
                    originalEvent: event,
                    preventDefaultAction: false,
                    userData: tracker.userData
                  }
                );
                if (propagate === false) {
                  $2.cancelEvent(event);
                }
              }
            } else if (pointsList.contacts === 2) {
              if (tracker.pinchHandler && curGPoint.type === "touch") {
                delegate.pinchGPoints = pointsList.asArray();
                delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);
                delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint(delegate.pinchGPoints[0].currentPos, delegate.pinchGPoints[1].currentPos);
              }
            }
          }
          return true;
        }
        function updatePointersUp(tracker, event, gPoints, buttonChanged) {
          var delegate = THIS[tracker.hash], pointsList = tracker.getActivePointersListByType(gPoints[0].type), propagate, releasePoint, releaseTime, i, gPointCount = gPoints.length, curGPoint, updateGPoint, releaseCapture = false, wasCaptured = false, quick;
          if (typeof event.buttons !== "undefined") {
            pointsList.buttons = event.buttons;
          } else {
            if ($2.Browser.vendor === $2.BROWSERS.IE && $2.Browser.version < 9) {
              if (buttonChanged === 0) {
                pointsList.buttons -= 1;
              } else if (buttonChanged === 1) {
                pointsList.buttons -= 4;
              } else if (buttonChanged === 2) {
                pointsList.buttons -= 2;
              } else if (buttonChanged === 3) {
                pointsList.buttons -= 8;
              } else if (buttonChanged === 4) {
                pointsList.buttons -= 16;
              } else if (buttonChanged === 5) {
                pointsList.buttons -= 32;
              }
            } else {
              if (buttonChanged === 0) {
                pointsList.buttons ^= ~1;
              } else if (buttonChanged === 1) {
                pointsList.buttons ^= ~4;
              } else if (buttonChanged === 2) {
                pointsList.buttons ^= ~2;
              } else if (buttonChanged === 3) {
                pointsList.buttons ^= ~8;
              } else if (buttonChanged === 4) {
                pointsList.buttons ^= ~16;
              } else if (buttonChanged === 5) {
                pointsList.buttons ^= ~32;
              }
            }
          }
          if (buttonChanged !== 0) {
            if (tracker.nonPrimaryReleaseHandler) {
              propagate = tracker.nonPrimaryReleaseHandler(
                {
                  eventSource: tracker,
                  pointerType: gPoints[0].type,
                  position: getPointRelativeToAbsolute(gPoints[0].currentPos, tracker.element),
                  button: buttonChanged,
                  buttons: pointsList.buttons,
                  isTouchEvent: gPoints[0].type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
            var otherPointsList = tracker.getActivePointersListByType("mouse");
            abortContacts(tracker, event, otherPointsList);
            return false;
          }
          if (typeof gPoints[0].currentPos === "undefined") {
            abortContacts(tracker, event, pointsList);
            return false;
          }
          for (i = 0; i < gPointCount; i++) {
            curGPoint = gPoints[i];
            updateGPoint = pointsList.getById(curGPoint.id);
            if (updateGPoint) {
              if (updateGPoint.captured) {
                updateGPoint.captured = false;
                releaseCapture = true;
                wasCaptured = true;
              }
              updateGPoint.lastPos = updateGPoint.currentPos;
              updateGPoint.lastTime = updateGPoint.currentTime;
              updateGPoint.currentPos = curGPoint.currentPos;
              updateGPoint.currentTime = curGPoint.currentTime;
              if (!updateGPoint.insideElement) {
                stopTrackingPointer(pointsList, updateGPoint);
              }
              releasePoint = updateGPoint.currentPos;
              releaseTime = updateGPoint.currentTime;
              if (wasCaptured) {
                pointsList.removeContact();
                if (tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler) {
                  $2.MouseTracker.gesturePointVelocityTracker.removePoint(tracker, updateGPoint);
                }
                if (pointsList.contacts === 0) {
                  if (tracker.releaseHandler) {
                    propagate = tracker.releaseHandler(
                      {
                        eventSource: tracker,
                        pointerType: updateGPoint.type,
                        position: getPointRelativeToAbsolute(releasePoint, tracker.element),
                        buttons: pointsList.buttons,
                        insideElementPressed: updateGPoint.insideElementPressed,
                        insideElementReleased: updateGPoint.insideElement,
                        isTouchEvent: updateGPoint.type === "touch",
                        originalEvent: event,
                        preventDefaultAction: false,
                        userData: tracker.userData
                      }
                    );
                    if (propagate === false) {
                      $2.cancelEvent(event);
                    }
                  }
                  if (tracker.dragEndHandler && !updateGPoint.currentPos.equals(updateGPoint.contactPos)) {
                    propagate = tracker.dragEndHandler(
                      {
                        eventSource: tracker,
                        pointerType: updateGPoint.type,
                        position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                        speed: updateGPoint.speed,
                        direction: updateGPoint.direction,
                        shift: event.shiftKey,
                        isTouchEvent: updateGPoint.type === "touch",
                        originalEvent: event,
                        preventDefaultAction: false,
                        userData: tracker.userData
                      }
                    );
                    if (propagate === false) {
                      $2.cancelEvent(event);
                    }
                  }
                  if ((tracker.clickHandler || tracker.dblClickHandler) && updateGPoint.insideElement) {
                    quick = releaseTime - updateGPoint.contactTime <= tracker.clickTimeThreshold && updateGPoint.contactPos.distanceTo(releasePoint) <= tracker.clickDistThreshold;
                    if (tracker.clickHandler) {
                      propagate = tracker.clickHandler(
                        {
                          eventSource: tracker,
                          pointerType: updateGPoint.type,
                          position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                          quick,
                          shift: event.shiftKey,
                          isTouchEvent: updateGPoint.type === "touch",
                          originalEvent: event,
                          preventDefaultAction: false,
                          userData: tracker.userData
                        }
                      );
                      if (propagate === false) {
                        $2.cancelEvent(event);
                      }
                    }
                    if (tracker.dblClickHandler && quick) {
                      pointsList.clicks++;
                      if (pointsList.clicks === 1) {
                        delegate.lastClickPos = releasePoint;
                        delegate.dblClickTimeOut = setTimeout(function() {
                          pointsList.clicks = 0;
                        }, tracker.dblClickTimeThreshold);
                      } else if (pointsList.clicks === 2) {
                        clearTimeout(delegate.dblClickTimeOut);
                        pointsList.clicks = 0;
                        if (delegate.lastClickPos.distanceTo(releasePoint) <= tracker.dblClickDistThreshold) {
                          propagate = tracker.dblClickHandler(
                            {
                              eventSource: tracker,
                              pointerType: updateGPoint.type,
                              position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                              shift: event.shiftKey,
                              isTouchEvent: updateGPoint.type === "touch",
                              originalEvent: event,
                              preventDefaultAction: false,
                              userData: tracker.userData
                            }
                          );
                          if (propagate === false) {
                            $2.cancelEvent(event);
                          }
                        }
                        delegate.lastClickPos = null;
                      }
                    }
                  }
                } else if (pointsList.contacts === 2) {
                  if (tracker.pinchHandler && updateGPoint.type === "touch") {
                    delegate.pinchGPoints = pointsList.asArray();
                    delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);
                    delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint(delegate.pinchGPoints[0].currentPos, delegate.pinchGPoints[1].currentPos);
                  }
                }
              } else {
                if (tracker.releaseHandler) {
                  propagate = tracker.releaseHandler(
                    {
                      eventSource: tracker,
                      pointerType: updateGPoint.type,
                      position: getPointRelativeToAbsolute(releasePoint, tracker.element),
                      buttons: pointsList.buttons,
                      insideElementPressed: updateGPoint.insideElementPressed,
                      insideElementReleased: updateGPoint.insideElement,
                      isTouchEvent: updateGPoint.type === "touch",
                      originalEvent: event,
                      preventDefaultAction: false,
                      userData: tracker.userData
                    }
                  );
                  if (propagate === false) {
                    $2.cancelEvent(event);
                  }
                }
              }
            }
          }
          return releaseCapture;
        }
        function updatePointersMove(tracker, event, gPoints) {
          var delegate = THIS[tracker.hash], pointsList = tracker.getActivePointersListByType(gPoints[0].type), i, gPointCount = gPoints.length, curGPoint, updateGPoint, gPointArray, delta, propagate;
          if (typeof event.buttons !== "undefined") {
            pointsList.buttons = event.buttons;
          }
          for (i = 0; i < gPointCount; i++) {
            curGPoint = gPoints[i];
            updateGPoint = pointsList.getById(curGPoint.id);
            if (updateGPoint) {
              if (Object.prototype.hasOwnProperty.call(curGPoint, "isPrimary")) {
                updateGPoint.isPrimary = curGPoint.isPrimary;
              }
              updateGPoint.lastPos = updateGPoint.currentPos;
              updateGPoint.lastTime = updateGPoint.currentTime;
              updateGPoint.currentPos = curGPoint.currentPos;
              updateGPoint.currentTime = curGPoint.currentTime;
            } else {
              curGPoint.captured = false;
              curGPoint.insideElementPressed = false;
              curGPoint.insideElement = true;
              startTrackingPointer(pointsList, curGPoint);
            }
          }
          if (tracker.stopHandler && gPoints[0].type === "mouse") {
            clearTimeout(tracker.stopTimeOut);
            tracker.stopTimeOut = setTimeout(function() {
              handlePointerStop(tracker, event, gPoints[0].type);
            }, tracker.stopDelay);
          }
          if (pointsList.contacts === 0) {
            if (tracker.moveHandler) {
              propagate = tracker.moveHandler(
                {
                  eventSource: tracker,
                  pointerType: gPoints[0].type,
                  position: getPointRelativeToAbsolute(gPoints[0].currentPos, tracker.element),
                  buttons: pointsList.buttons,
                  isTouchEvent: gPoints[0].type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
          } else if (pointsList.contacts === 1) {
            if (tracker.moveHandler) {
              updateGPoint = pointsList.asArray()[0];
              propagate = tracker.moveHandler(
                {
                  eventSource: tracker,
                  pointerType: updateGPoint.type,
                  position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                  buttons: pointsList.buttons,
                  isTouchEvent: updateGPoint.type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
            if (tracker.dragHandler) {
              updateGPoint = pointsList.asArray()[0];
              delta = updateGPoint.currentPos.minus(updateGPoint.lastPos);
              propagate = tracker.dragHandler(
                {
                  eventSource: tracker,
                  pointerType: updateGPoint.type,
                  position: getPointRelativeToAbsolute(updateGPoint.currentPos, tracker.element),
                  buttons: pointsList.buttons,
                  delta,
                  speed: updateGPoint.speed,
                  direction: updateGPoint.direction,
                  shift: event.shiftKey,
                  isTouchEvent: updateGPoint.type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
          } else if (pointsList.contacts === 2) {
            if (tracker.moveHandler) {
              gPointArray = pointsList.asArray();
              propagate = tracker.moveHandler(
                {
                  eventSource: tracker,
                  pointerType: gPointArray[0].type,
                  position: getPointRelativeToAbsolute(getCenterPoint(gPointArray[0].currentPos, gPointArray[1].currentPos), tracker.element),
                  buttons: pointsList.buttons,
                  isTouchEvent: gPointArray[0].type === "touch",
                  originalEvent: event,
                  preventDefaultAction: false,
                  userData: tracker.userData
                }
              );
              if (propagate === false) {
                $2.cancelEvent(event);
              }
            }
            if (tracker.pinchHandler && gPoints[0].type === "touch") {
              delta = delegate.pinchGPoints[0].currentPos.distanceTo(delegate.pinchGPoints[1].currentPos);
              if (delta != delegate.currentPinchDist) {
                delegate.lastPinchDist = delegate.currentPinchDist;
                delegate.currentPinchDist = delta;
                delegate.lastPinchCenter = delegate.currentPinchCenter;
                delegate.currentPinchCenter = getCenterPoint(delegate.pinchGPoints[0].currentPos, delegate.pinchGPoints[1].currentPos);
                propagate = tracker.pinchHandler(
                  {
                    eventSource: tracker,
                    pointerType: "touch",
                    gesturePoints: delegate.pinchGPoints,
                    lastCenter: getPointRelativeToAbsolute(delegate.lastPinchCenter, tracker.element),
                    center: getPointRelativeToAbsolute(delegate.currentPinchCenter, tracker.element),
                    lastDistance: delegate.lastPinchDist,
                    distance: delegate.currentPinchDist,
                    shift: event.shiftKey,
                    originalEvent: event,
                    preventDefaultAction: false,
                    userData: tracker.userData
                  }
                );
                if (propagate === false) {
                  $2.cancelEvent(event);
                }
              }
            }
          }
        }
        function updatePointersCancel(tracker, event, gPoints) {
          updatePointersUp(tracker, event, gPoints, 0);
          updatePointersExit(tracker, event, gPoints);
        }
        function handlePointerStop(tracker, originalMoveEvent, pointerType) {
          if (tracker.stopHandler) {
            tracker.stopHandler({
              eventSource: tracker,
              pointerType,
              position: getMouseRelative(originalMoveEvent, tracker.element),
              buttons: tracker.getActivePointersListByType(pointerType).buttons,
              isTouchEvent: pointerType === "touch",
              originalEvent: originalMoveEvent,
              preventDefaultAction: false,
              userData: tracker.userData
            });
          }
        }
        var isInIframe = function() {
          try {
            return window.self !== window.top;
          } catch (e) {
            return true;
          }
        }();
        function canAccessEvents(target) {
          try {
            return target.addEventListener && target.removeEventListener;
          } catch (e) {
            return false;
          }
        }
      })(OpenSeadragon);
      (function($2) {
        $2.ControlAnchor = {
          NONE: 0,
          TOP_LEFT: 1,
          TOP_RIGHT: 2,
          BOTTOM_RIGHT: 3,
          BOTTOM_LEFT: 4,
          ABSOLUTE: 5
        };
        $2.Control = function(element, options, container) {
          var parent = element.parentNode;
          if (typeof options === "number") {
            $2.console.error("Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; please use an options object instead.  Support for this deprecated variant is scheduled for removal in December 2013");
            options = { anchor: options };
          }
          options.attachToViewer = typeof options.attachToViewer === "undefined" ? true : options.attachToViewer;
          this.autoFade = typeof options.autoFade === "undefined" ? true : options.autoFade;
          this.element = element;
          this.anchor = options.anchor;
          this.container = container;
          if (this.anchor == $2.ControlAnchor.ABSOLUTE) {
            this.wrapper = $2.makeNeutralElement("div");
            this.wrapper.style.position = "absolute";
            this.wrapper.style.top = typeof options.top == "number" ? options.top + "px" : options.top;
            this.wrapper.style.left = typeof options.left == "number" ? options.left + "px" : options.left;
            this.wrapper.style.height = typeof options.height == "number" ? options.height + "px" : options.height;
            this.wrapper.style.width = typeof options.width == "number" ? options.width + "px" : options.width;
            this.wrapper.style.margin = "0px";
            this.wrapper.style.padding = "0px";
            this.element.style.position = "relative";
            this.element.style.top = "0px";
            this.element.style.left = "0px";
            this.element.style.height = "100%";
            this.element.style.width = "100%";
          } else {
            this.wrapper = $2.makeNeutralElement("div");
            this.wrapper.style.display = "inline-block";
            if (this.anchor == $2.ControlAnchor.NONE) {
              this.wrapper.style.width = this.wrapper.style.height = "100%";
            }
          }
          this.wrapper.appendChild(this.element);
          if (options.attachToViewer) {
            if (this.anchor == $2.ControlAnchor.TOP_RIGHT || this.anchor == $2.ControlAnchor.BOTTOM_RIGHT) {
              this.container.insertBefore(
                this.wrapper,
                this.container.firstChild
              );
            } else {
              this.container.appendChild(this.wrapper);
            }
          } else {
            parent.appendChild(this.wrapper);
          }
        };
        $2.Control.prototype = {
          destroy: function() {
            this.wrapper.removeChild(this.element);
            this.container.removeChild(this.wrapper);
          },
          isVisible: function() {
            return this.wrapper.style.display != "none";
          },
          setVisible: function(visible) {
            this.wrapper.style.display = visible ? this.anchor == $2.ControlAnchor.ABSOLUTE ? "block" : "inline-block" : "none";
          },
          setOpacity: function(opacity) {
            if (this.element[$2.SIGNAL] && $2.Browser.vendor == $2.BROWSERS.IE) {
              $2.setElementOpacity(this.element, opacity, true);
            } else {
              $2.setElementOpacity(this.wrapper, opacity, true);
            }
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.ControlDock = function(options) {
          var layouts = ["topleft", "topright", "bottomright", "bottomleft"], layout, i;
          $2.extend(true, this, {
            id: "controldock-" + $2.now() + "-" + Math.floor(Math.random() * 1e6),
            container: $2.makeNeutralElement("div"),
            controls: []
          }, options);
          this.container.onsubmit = function() {
            return false;
          };
          if (this.element) {
            this.element = $2.getElement(this.element);
            this.element.appendChild(this.container);
            this.element.style.position = "relative";
            this.container.style.width = "100%";
            this.container.style.height = "100%";
          }
          for (i = 0; i < layouts.length; i++) {
            layout = layouts[i];
            this.controls[layout] = $2.makeNeutralElement("div");
            this.controls[layout].style.position = "absolute";
            if (layout.match("left")) {
              this.controls[layout].style.left = "0px";
            }
            if (layout.match("right")) {
              this.controls[layout].style.right = "0px";
            }
            if (layout.match("top")) {
              this.controls[layout].style.top = "0px";
            }
            if (layout.match("bottom")) {
              this.controls[layout].style.bottom = "0px";
            }
          }
          this.container.appendChild(this.controls.topleft);
          this.container.appendChild(this.controls.topright);
          this.container.appendChild(this.controls.bottomright);
          this.container.appendChild(this.controls.bottomleft);
        };
        $2.ControlDock.prototype = {
          addControl: function(element, controlOptions) {
            element = $2.getElement(element);
            var div = null;
            if (getControlIndex(this, element) >= 0) {
              return;
            }
            switch (controlOptions.anchor) {
              case $2.ControlAnchor.TOP_RIGHT:
                div = this.controls.topright;
                element.style.position = "relative";
                element.style.paddingRight = "0px";
                element.style.paddingTop = "0px";
                break;
              case $2.ControlAnchor.BOTTOM_RIGHT:
                div = this.controls.bottomright;
                element.style.position = "relative";
                element.style.paddingRight = "0px";
                element.style.paddingBottom = "0px";
                break;
              case $2.ControlAnchor.BOTTOM_LEFT:
                div = this.controls.bottomleft;
                element.style.position = "relative";
                element.style.paddingLeft = "0px";
                element.style.paddingBottom = "0px";
                break;
              case $2.ControlAnchor.TOP_LEFT:
                div = this.controls.topleft;
                element.style.position = "relative";
                element.style.paddingLeft = "0px";
                element.style.paddingTop = "0px";
                break;
              case $2.ControlAnchor.ABSOLUTE:
                div = this.container;
                element.style.margin = "0px";
                element.style.padding = "0px";
                break;
              default:
              case $2.ControlAnchor.NONE:
                div = this.container;
                element.style.margin = "0px";
                element.style.padding = "0px";
                break;
            }
            this.controls.push(
              new $2.Control(element, controlOptions, div)
            );
            element.style.display = "inline-block";
          },
          removeControl: function(element) {
            element = $2.getElement(element);
            var i = getControlIndex(this, element);
            if (i >= 0) {
              this.controls[i].destroy();
              this.controls.splice(i, 1);
            }
            return this;
          },
          clearControls: function() {
            while (this.controls.length > 0) {
              this.controls.pop().destroy();
            }
            return this;
          },
          areControlsEnabled: function() {
            var i;
            for (i = this.controls.length - 1; i >= 0; i--) {
              if (this.controls[i].isVisible()) {
                return true;
              }
            }
            return false;
          },
          setControlsEnabled: function(enabled) {
            var i;
            for (i = this.controls.length - 1; i >= 0; i--) {
              this.controls[i].setVisible(enabled);
            }
            return this;
          }
        };
        function getControlIndex(dock, element) {
          var controls = dock.controls, i;
          for (i = controls.length - 1; i >= 0; i--) {
            if (controls[i].element == element) {
              return i;
            }
          }
          return -1;
        }
      })(OpenSeadragon);
      (function($2) {
        $2.Placement = $2.freezeObject({
          CENTER: 0,
          TOP_LEFT: 1,
          TOP: 2,
          TOP_RIGHT: 3,
          RIGHT: 4,
          BOTTOM_RIGHT: 5,
          BOTTOM: 6,
          BOTTOM_LEFT: 7,
          LEFT: 8,
          properties: {
            0: {
              isLeft: false,
              isHorizontallyCentered: true,
              isRight: false,
              isTop: false,
              isVerticallyCentered: true,
              isBottom: false
            },
            1: {
              isLeft: true,
              isHorizontallyCentered: false,
              isRight: false,
              isTop: true,
              isVerticallyCentered: false,
              isBottom: false
            },
            2: {
              isLeft: false,
              isHorizontallyCentered: true,
              isRight: false,
              isTop: true,
              isVerticallyCentered: false,
              isBottom: false
            },
            3: {
              isLeft: false,
              isHorizontallyCentered: false,
              isRight: true,
              isTop: true,
              isVerticallyCentered: false,
              isBottom: false
            },
            4: {
              isLeft: false,
              isHorizontallyCentered: false,
              isRight: true,
              isTop: false,
              isVerticallyCentered: true,
              isBottom: false
            },
            5: {
              isLeft: false,
              isHorizontallyCentered: false,
              isRight: true,
              isTop: false,
              isVerticallyCentered: false,
              isBottom: true
            },
            6: {
              isLeft: false,
              isHorizontallyCentered: true,
              isRight: false,
              isTop: false,
              isVerticallyCentered: false,
              isBottom: true
            },
            7: {
              isLeft: true,
              isHorizontallyCentered: false,
              isRight: false,
              isTop: false,
              isVerticallyCentered: false,
              isBottom: true
            },
            8: {
              isLeft: true,
              isHorizontallyCentered: false,
              isRight: false,
              isTop: false,
              isVerticallyCentered: true,
              isBottom: false
            }
          }
        });
      })(OpenSeadragon);
      (function($2) {
        var THIS = {};
        var nextHash = 1;
        $2.Viewer = function(options) {
          var args = arguments, _this = this, i;
          if (!$2.isPlainObject(options)) {
            options = {
              id: args[0],
              xmlPath: args.length > 1 ? args[1] : void 0,
              prefixUrl: args.length > 2 ? args[2] : void 0,
              controls: args.length > 3 ? args[3] : void 0,
              overlays: args.length > 4 ? args[4] : void 0
            };
          }
          if (options.config) {
            $2.extend(true, options, options.config);
            delete options.config;
          }
          $2.extend(true, this, {
            id: options.id,
            hash: options.hash || nextHash++,
            initialPage: 0,
            element: null,
            container: null,
            canvas: null,
            overlays: [],
            overlaysContainer: null,
            previousBody: [],
            customControls: [],
            source: null,
            drawer: null,
            world: null,
            viewport: null,
            navigator: null,
            collectionViewport: null,
            collectionDrawer: null,
            navImages: null,
            buttons: null,
            profiler: null
          }, $2.DEFAULT_SETTINGS, options);
          if (typeof this.hash === "undefined") {
            throw new Error("A hash must be defined, either by specifying options.id or options.hash.");
          }
          if (typeof THIS[this.hash] !== "undefined") {
            $2.console.warn("Hash " + this.hash + " has already been used.");
          }
          THIS[this.hash] = {
            "fsBoundsDelta": new $2.Point(1, 1),
            "prevContainerSize": null,
            "animating": false,
            "forceRedraw": false,
            "mouseInside": false,
            "group": null,
            "zooming": false,
            "zoomFactor": null,
            "lastZoomTime": null,
            "fullPage": false,
            "onfullscreenchange": null
          };
          this._sequenceIndex = 0;
          this._firstOpen = true;
          this._updateRequestId = null;
          this._loadQueue = [];
          this.currentOverlays = [];
          this._lastScrollTime = $2.now();
          $2.EventSource.call(this);
          this.addHandler("open-failed", function(event) {
            var msg = $2.getString("Errors.OpenFailed", event.eventSource, event.message);
            _this._showMessage(msg);
          });
          $2.ControlDock.call(this, options);
          if (this.xmlPath) {
            this.tileSources = [this.xmlPath];
          }
          this.element = this.element || document.getElementById(this.id);
          this.canvas = $2.makeNeutralElement("div");
          this.canvas.className = "openseadragon-canvas";
          (function(style) {
            style.width = "100%";
            style.height = "100%";
            style.overflow = "hidden";
            style.position = "absolute";
            style.top = "0px";
            style.left = "0px";
          })(this.canvas.style);
          $2.setElementTouchActionNone(this.canvas);
          if (options.tabIndex !== "") {
            this.canvas.tabIndex = options.tabIndex === void 0 ? 0 : options.tabIndex;
          }
          this.container.className = "openseadragon-container";
          (function(style) {
            style.width = "100%";
            style.height = "100%";
            style.position = "relative";
            style.overflow = "hidden";
            style.left = "0px";
            style.top = "0px";
            style.textAlign = "left";
          })(this.container.style);
          this.container.insertBefore(this.canvas, this.container.firstChild);
          this.element.appendChild(this.container);
          this.bodyWidth = document.body.style.width;
          this.bodyHeight = document.body.style.height;
          this.bodyOverflow = document.body.style.overflow;
          this.docOverflow = document.documentElement.style.overflow;
          this.innerTracker = new $2.MouseTracker({
            element: this.canvas,
            startDisabled: !this.mouseNavEnabled,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            dblClickTimeThreshold: this.dblClickTimeThreshold,
            dblClickDistThreshold: this.dblClickDistThreshold,
            keyDownHandler: $2.delegate(this, onCanvasKeyDown),
            keyHandler: $2.delegate(this, onCanvasKeyPress),
            clickHandler: $2.delegate(this, onCanvasClick),
            dblClickHandler: $2.delegate(this, onCanvasDblClick),
            dragHandler: $2.delegate(this, onCanvasDrag),
            dragEndHandler: $2.delegate(this, onCanvasDragEnd),
            enterHandler: $2.delegate(this, onCanvasEnter),
            exitHandler: $2.delegate(this, onCanvasExit),
            pressHandler: $2.delegate(this, onCanvasPress),
            releaseHandler: $2.delegate(this, onCanvasRelease),
            nonPrimaryPressHandler: $2.delegate(this, onCanvasNonPrimaryPress),
            nonPrimaryReleaseHandler: $2.delegate(this, onCanvasNonPrimaryRelease),
            scrollHandler: $2.delegate(this, onCanvasScroll),
            pinchHandler: $2.delegate(this, onCanvasPinch)
          });
          this.outerTracker = new $2.MouseTracker({
            element: this.container,
            startDisabled: !this.mouseNavEnabled,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            dblClickTimeThreshold: this.dblClickTimeThreshold,
            dblClickDistThreshold: this.dblClickDistThreshold,
            enterHandler: $2.delegate(this, onContainerEnter),
            exitHandler: $2.delegate(this, onContainerExit)
          });
          if (this.toolbar) {
            this.toolbar = new $2.ControlDock({ element: this.toolbar });
          }
          this.bindStandardControls();
          THIS[this.hash].prevContainerSize = _getSafeElemSize(this.container);
          this.world = new $2.World({
            viewer: this
          });
          this.world.addHandler("add-item", function(event) {
            _this.source = _this.world.getItemAt(0).source;
            THIS[_this.hash].forceRedraw = true;
            if (!_this._updateRequestId) {
              _this._updateRequestId = scheduleUpdate(_this, updateMulti);
            }
          });
          this.world.addHandler("remove-item", function(event) {
            if (_this.world.getItemCount()) {
              _this.source = _this.world.getItemAt(0).source;
            } else {
              _this.source = null;
            }
            THIS[_this.hash].forceRedraw = true;
          });
          this.world.addHandler("metrics-change", function(event) {
            if (_this.viewport) {
              _this.viewport._setContentBounds(_this.world.getHomeBounds(), _this.world.getContentFactor());
            }
          });
          this.world.addHandler("item-index-change", function(event) {
            _this.source = _this.world.getItemAt(0).source;
          });
          this.viewport = new $2.Viewport({
            containerSize: THIS[this.hash].prevContainerSize,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime,
            minZoomImageRatio: this.minZoomImageRatio,
            maxZoomPixelRatio: this.maxZoomPixelRatio,
            visibilityRatio: this.visibilityRatio,
            wrapHorizontal: this.wrapHorizontal,
            wrapVertical: this.wrapVertical,
            defaultZoomLevel: this.defaultZoomLevel,
            minZoomLevel: this.minZoomLevel,
            maxZoomLevel: this.maxZoomLevel,
            viewer: this,
            degrees: this.degrees,
            flipped: this.flipped,
            navigatorRotate: this.navigatorRotate,
            homeFillsViewer: this.homeFillsViewer,
            margins: this.viewportMargins
          });
          this.viewport._setContentBounds(this.world.getHomeBounds(), this.world.getContentFactor());
          this.imageLoader = new $2.ImageLoader({
            jobLimit: this.imageLoaderLimit,
            timeout: options.timeout
          });
          this.tileCache = new $2.TileCache({
            maxImageCacheCount: this.maxImageCacheCount
          });
          this.drawer = new $2.Drawer({
            viewer: this,
            viewport: this.viewport,
            element: this.canvas,
            debugGridColor: this.debugGridColor
          });
          this.overlaysContainer = $2.makeNeutralElement("div");
          this.canvas.appendChild(this.overlaysContainer);
          if (!this.drawer.canRotate()) {
            if (this.rotateLeft) {
              i = this.buttons.buttons.indexOf(this.rotateLeft);
              this.buttons.buttons.splice(i, 1);
              this.buttons.element.removeChild(this.rotateLeft.element);
            }
            if (this.rotateRight) {
              i = this.buttons.buttons.indexOf(this.rotateRight);
              this.buttons.buttons.splice(i, 1);
              this.buttons.element.removeChild(this.rotateRight.element);
            }
          }
          if (this.showNavigator) {
            this.navigator = new $2.Navigator({
              id: this.navigatorId,
              position: this.navigatorPosition,
              sizeRatio: this.navigatorSizeRatio,
              maintainSizeRatio: this.navigatorMaintainSizeRatio,
              top: this.navigatorTop,
              left: this.navigatorLeft,
              width: this.navigatorWidth,
              height: this.navigatorHeight,
              autoResize: this.navigatorAutoResize,
              autoFade: this.navigatorAutoFade,
              prefixUrl: this.prefixUrl,
              viewer: this,
              navigatorRotate: this.navigatorRotate,
              background: this.navigatorBackground,
              opacity: this.navigatorOpacity,
              borderColor: this.navigatorBorderColor,
              displayRegionColor: this.navigatorDisplayRegionColor,
              crossOriginPolicy: this.crossOriginPolicy
            });
          }
          if (this.sequenceMode) {
            this.bindSequenceControls();
          }
          if (this.tileSources) {
            this.open(this.tileSources);
          }
          for (i = 0; i < this.customControls.length; i++) {
            this.addControl(
              this.customControls[i].id,
              { anchor: this.customControls[i].anchor }
            );
          }
          $2.requestAnimationFrame(function() {
            beginControlsAutoHide(_this);
          });
          if (this.imageSmoothingEnabled !== void 0 && !this.imageSmoothingEnabled) {
            this.drawer.setImageSmoothingEnabled(this.imageSmoothingEnabled);
          }
        };
        $2.extend($2.Viewer.prototype, $2.EventSource.prototype, $2.ControlDock.prototype, {
          isOpen: function() {
            return !!this.world.getItemCount();
          },
          openDzi: function(dzi) {
            $2.console.error("[Viewer.openDzi] this function is deprecated; use Viewer.open() instead.");
            return this.open(dzi);
          },
          openTileSource: function(tileSource) {
            $2.console.error("[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead.");
            return this.open(tileSource);
          },
          open: function(tileSources, initialPage) {
            var _this = this;
            this.close();
            if (!tileSources) {
              return;
            }
            if (this.sequenceMode && $2.isArray(tileSources)) {
              if (this.referenceStrip) {
                this.referenceStrip.destroy();
                this.referenceStrip = null;
              }
              if (typeof initialPage != "undefined" && !isNaN(initialPage)) {
                this.initialPage = initialPage;
              }
              this.tileSources = tileSources;
              this._sequenceIndex = Math.max(0, Math.min(this.tileSources.length - 1, this.initialPage));
              if (this.tileSources.length) {
                this.open(this.tileSources[this._sequenceIndex]);
                if (this.showReferenceStrip) {
                  this.addReferenceStrip();
                }
              }
              this._updateSequenceButtons(this._sequenceIndex);
              return;
            }
            if (!$2.isArray(tileSources)) {
              tileSources = [tileSources];
            }
            if (!tileSources.length) {
              return;
            }
            this._opening = true;
            var expected = tileSources.length;
            var successes = 0;
            var failures = 0;
            var failEvent;
            var checkCompletion = function() {
              if (successes + failures === expected) {
                if (successes) {
                  if (_this._firstOpen || !_this.preserveViewport) {
                    _this.viewport.goHome(true);
                    _this.viewport.update();
                  }
                  _this._firstOpen = false;
                  var source = tileSources[0];
                  if (source.tileSource) {
                    source = source.tileSource;
                  }
                  if (_this.overlays && !_this.preserveOverlays) {
                    for (var i2 = 0; i2 < _this.overlays.length; i2++) {
                      _this.currentOverlays[i2] = getOverlayObject(_this, _this.overlays[i2]);
                    }
                  }
                  _this._drawOverlays();
                  _this._opening = false;
                  _this.raiseEvent("open", { source });
                } else {
                  _this._opening = false;
                  _this.raiseEvent("open-failed", failEvent);
                }
              }
            };
            var doOne = function(options) {
              if (!$2.isPlainObject(options) || !options.tileSource) {
                options = {
                  tileSource: options
                };
              }
              if (options.index !== void 0) {
                $2.console.error("[Viewer.open] setting indexes here is not supported; use addTiledImage instead");
                delete options.index;
              }
              if (options.collectionImmediately === void 0) {
                options.collectionImmediately = true;
              }
              var originalSuccess = options.success;
              options.success = function(event) {
                successes++;
                if (options.tileSource.overlays) {
                  for (var i2 = 0; i2 < options.tileSource.overlays.length; i2++) {
                    _this.addOverlay(options.tileSource.overlays[i2]);
                  }
                }
                if (originalSuccess) {
                  originalSuccess(event);
                }
                checkCompletion();
              };
              var originalError = options.error;
              options.error = function(event) {
                failures++;
                if (!failEvent) {
                  failEvent = event;
                }
                if (originalError) {
                  originalError(event);
                }
                checkCompletion();
              };
              _this.addTiledImage(options);
            };
            for (var i = 0; i < tileSources.length; i++) {
              doOne(tileSources[i]);
            }
            return this;
          },
          close: function() {
            if (!THIS[this.hash]) {
              return this;
            }
            this._opening = false;
            if (this.navigator) {
              this.navigator.close();
            }
            if (!this.preserveOverlays) {
              this.clearOverlays();
              this.overlaysContainer.innerHTML = "";
            }
            THIS[this.hash].animating = false;
            this.world.removeAll();
            this.imageLoader.clear();
            this.raiseEvent("close");
            return this;
          },
          destroy: function() {
            if (!THIS[this.hash]) {
              return;
            }
            this.close();
            this.clearOverlays();
            this.overlaysContainer.innerHTML = "";
            if (this.referenceStrip) {
              this.referenceStrip.destroy();
              this.referenceStrip = null;
            }
            if (this._updateRequestId !== null) {
              $2.cancelAnimationFrame(this._updateRequestId);
              this._updateRequestId = null;
            }
            if (this.drawer) {
              this.drawer.destroy();
            }
            this.removeAllHandlers();
            if (this.element) {
              while (this.element.firstChild) {
                this.element.removeChild(this.element.firstChild);
              }
            }
            if (this.innerTracker) {
              this.innerTracker.destroy();
            }
            if (this.outerTracker) {
              this.outerTracker.destroy();
            }
            THIS[this.hash] = null;
            delete THIS[this.hash];
            this.canvas = null;
            this.container = null;
            this.element = null;
          },
          isMouseNavEnabled: function() {
            return this.innerTracker.isTracking();
          },
          setMouseNavEnabled: function(enabled) {
            this.innerTracker.setTracking(enabled);
            this.outerTracker.setTracking(enabled);
            this.raiseEvent("mouse-enabled", { enabled });
            return this;
          },
          areControlsEnabled: function() {
            var enabled = this.controls.length, i;
            for (i = 0; i < this.controls.length; i++) {
              enabled = enabled && this.controls[i].isVisible();
            }
            return enabled;
          },
          setControlsEnabled: function(enabled) {
            if (enabled) {
              abortControlsAutoHide(this);
            } else {
              beginControlsAutoHide(this);
            }
            this.raiseEvent("controls-enabled", { enabled });
            return this;
          },
          setDebugMode: function(debugMode) {
            for (var i = 0; i < this.world.getItemCount(); i++) {
              this.world.getItemAt(i).debugMode = debugMode;
            }
            this.debugMode = debugMode;
            this.forceRedraw();
          },
          isFullPage: function() {
            return THIS[this.hash].fullPage;
          },
          setFullPage: function(fullPage) {
            var body = document.body, bodyStyle = body.style, docStyle = document.documentElement.style, _this = this, nodes, i;
            if (fullPage == this.isFullPage()) {
              return this;
            }
            var fullPageEventArgs = {
              fullPage,
              preventDefaultAction: false
            };
            this.raiseEvent("pre-full-page", fullPageEventArgs);
            if (fullPageEventArgs.preventDefaultAction) {
              return this;
            }
            if (fullPage) {
              this.elementSize = $2.getElementSize(this.element);
              this.pageScroll = $2.getPageScroll();
              this.elementMargin = this.element.style.margin;
              this.element.style.margin = "0";
              this.elementPadding = this.element.style.padding;
              this.element.style.padding = "0";
              this.bodyMargin = bodyStyle.margin;
              this.docMargin = docStyle.margin;
              bodyStyle.margin = "0";
              docStyle.margin = "0";
              this.bodyPadding = bodyStyle.padding;
              this.docPadding = docStyle.padding;
              bodyStyle.padding = "0";
              docStyle.padding = "0";
              this.bodyWidth = bodyStyle.width;
              this.docWidth = docStyle.width;
              bodyStyle.width = "100%";
              docStyle.width = "100%";
              this.bodyHeight = bodyStyle.height;
              this.docHeight = docStyle.height;
              bodyStyle.height = "100%";
              docStyle.height = "100%";
              this.previousBody = [];
              THIS[this.hash].prevElementParent = this.element.parentNode;
              THIS[this.hash].prevNextSibling = this.element.nextSibling;
              THIS[this.hash].prevElementWidth = this.element.style.width;
              THIS[this.hash].prevElementHeight = this.element.style.height;
              nodes = body.childNodes.length;
              for (i = 0; i < nodes; i++) {
                this.previousBody.push(body.childNodes[0]);
                body.removeChild(body.childNodes[0]);
              }
              if (this.toolbar && this.toolbar.element) {
                this.toolbar.parentNode = this.toolbar.element.parentNode;
                this.toolbar.nextSibling = this.toolbar.element.nextSibling;
                body.appendChild(this.toolbar.element);
                $2.addClass(this.toolbar.element, "fullpage");
              }
              $2.addClass(this.element, "fullpage");
              body.appendChild(this.element);
              this.element.style.height = $2.getWindowSize().y + "px";
              this.element.style.width = $2.getWindowSize().x + "px";
              if (this.toolbar && this.toolbar.element) {
                this.element.style.height = $2.getElementSize(this.element).y - $2.getElementSize(this.toolbar.element).y + "px";
              }
              THIS[this.hash].fullPage = true;
              $2.delegate(this, onContainerEnter)({});
            } else {
              this.element.style.margin = this.elementMargin;
              this.element.style.padding = this.elementPadding;
              bodyStyle.margin = this.bodyMargin;
              docStyle.margin = this.docMargin;
              bodyStyle.padding = this.bodyPadding;
              docStyle.padding = this.docPadding;
              bodyStyle.width = this.bodyWidth;
              docStyle.width = this.docWidth;
              bodyStyle.height = this.bodyHeight;
              docStyle.height = this.docHeight;
              body.removeChild(this.element);
              nodes = this.previousBody.length;
              for (i = 0; i < nodes; i++) {
                body.appendChild(this.previousBody.shift());
              }
              $2.removeClass(this.element, "fullpage");
              THIS[this.hash].prevElementParent.insertBefore(
                this.element,
                THIS[this.hash].prevNextSibling
              );
              if (this.toolbar && this.toolbar.element) {
                body.removeChild(this.toolbar.element);
                $2.removeClass(this.toolbar.element, "fullpage");
                this.toolbar.parentNode.insertBefore(
                  this.toolbar.element,
                  this.toolbar.nextSibling
                );
                delete this.toolbar.parentNode;
                delete this.toolbar.nextSibling;
              }
              this.element.style.width = THIS[this.hash].prevElementWidth;
              this.element.style.height = THIS[this.hash].prevElementHeight;
              var restoreScrollCounter = 0;
              var restoreScroll = function() {
                $2.setPageScroll(_this.pageScroll);
                var pageScroll = $2.getPageScroll();
                restoreScrollCounter++;
                if (restoreScrollCounter < 10 && (pageScroll.x !== _this.pageScroll.x || pageScroll.y !== _this.pageScroll.y)) {
                  $2.requestAnimationFrame(restoreScroll);
                }
              };
              $2.requestAnimationFrame(restoreScroll);
              THIS[this.hash].fullPage = false;
              $2.delegate(this, onContainerExit)({});
            }
            if (this.navigator && this.viewport) {
              this.navigator.update(this.viewport);
            }
            this.raiseEvent("full-page", { fullPage });
            return this;
          },
          setFullScreen: function(fullScreen) {
            var _this = this;
            if (!$2.supportsFullScreen) {
              return this.setFullPage(fullScreen);
            }
            if ($2.isFullScreen() === fullScreen) {
              return this;
            }
            var fullScreeEventArgs = {
              fullScreen,
              preventDefaultAction: false
            };
            this.raiseEvent("pre-full-screen", fullScreeEventArgs);
            if (fullScreeEventArgs.preventDefaultAction) {
              return this;
            }
            if (fullScreen) {
              this.setFullPage(true);
              if (!this.isFullPage()) {
                return this;
              }
              this.fullPageStyleWidth = this.element.style.width;
              this.fullPageStyleHeight = this.element.style.height;
              this.element.style.width = "100%";
              this.element.style.height = "100%";
              var onFullScreenChange = function() {
                var isFullScreen = $2.isFullScreen();
                if (!isFullScreen) {
                  $2.removeEvent(document, $2.fullScreenEventName, onFullScreenChange);
                  $2.removeEvent(document, $2.fullScreenErrorEventName, onFullScreenChange);
                  _this.setFullPage(false);
                  if (_this.isFullPage()) {
                    _this.element.style.width = _this.fullPageStyleWidth;
                    _this.element.style.height = _this.fullPageStyleHeight;
                  }
                }
                if (_this.navigator && _this.viewport) {
                  setTimeout(function() {
                    _this.navigator.update(_this.viewport);
                  });
                }
                _this.raiseEvent("full-screen", { fullScreen: isFullScreen });
              };
              $2.addEvent(document, $2.fullScreenEventName, onFullScreenChange);
              $2.addEvent(document, $2.fullScreenErrorEventName, onFullScreenChange);
              $2.requestFullScreen(document.body);
            } else {
              $2.exitFullScreen();
            }
            return this;
          },
          isVisible: function() {
            return this.container.style.visibility != "hidden";
          },
          setVisible: function(visible) {
            this.container.style.visibility = visible ? "" : "hidden";
            this.raiseEvent("visible", { visible });
            return this;
          },
          addTiledImage: function(options) {
            $2.console.assert(options, "[Viewer.addTiledImage] options is required");
            $2.console.assert(options.tileSource, "[Viewer.addTiledImage] options.tileSource is required");
            $2.console.assert(
              !options.replace || options.index > -1 && options.index < this.world.getItemCount(),
              "[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world"
            );
            var _this = this;
            if (options.replace) {
              options.replaceItem = _this.world.getItemAt(options.index);
            }
            this._hideMessage();
            if (options.placeholderFillStyle === void 0) {
              options.placeholderFillStyle = this.placeholderFillStyle;
            }
            if (options.opacity === void 0) {
              options.opacity = this.opacity;
            }
            if (options.preload === void 0) {
              options.preload = this.preload;
            }
            if (options.compositeOperation === void 0) {
              options.compositeOperation = this.compositeOperation;
            }
            if (options.crossOriginPolicy === void 0) {
              options.crossOriginPolicy = options.tileSource.crossOriginPolicy !== void 0 ? options.tileSource.crossOriginPolicy : this.crossOriginPolicy;
            }
            if (options.ajaxWithCredentials === void 0) {
              options.ajaxWithCredentials = this.ajaxWithCredentials;
            }
            if (options.loadTilesWithAjax === void 0) {
              options.loadTilesWithAjax = this.loadTilesWithAjax;
            }
            if (options.ajaxHeaders === void 0 || options.ajaxHeaders === null) {
              options.ajaxHeaders = this.ajaxHeaders;
            } else if ($2.isPlainObject(options.ajaxHeaders) && $2.isPlainObject(this.ajaxHeaders)) {
              options.ajaxHeaders = $2.extend({}, this.ajaxHeaders, options.ajaxHeaders);
            }
            var myQueueItem = {
              options
            };
            function raiseAddItemFailed(event) {
              for (var i = 0; i < _this._loadQueue.length; i++) {
                if (_this._loadQueue[i] === myQueueItem) {
                  _this._loadQueue.splice(i, 1);
                  break;
                }
              }
              if (_this._loadQueue.length === 0) {
                refreshWorld(myQueueItem);
              }
              _this.raiseEvent("add-item-failed", event);
              if (options.error) {
                options.error(event);
              }
            }
            function refreshWorld(theItem) {
              if (_this.collectionMode) {
                _this.world.arrange({
                  immediately: theItem.options.collectionImmediately,
                  rows: _this.collectionRows,
                  columns: _this.collectionColumns,
                  layout: _this.collectionLayout,
                  tileSize: _this.collectionTileSize,
                  tileMargin: _this.collectionTileMargin
                });
                _this.world.setAutoRefigureSizes(true);
              }
            }
            if ($2.isArray(options.tileSource)) {
              setTimeout(function() {
                raiseAddItemFailed({
                  message: "[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.",
                  source: options.tileSource,
                  options
                });
              });
              return;
            }
            this._loadQueue.push(myQueueItem);
            function processReadyItems() {
              var queueItem, tiledImage, optionsClone;
              while (_this._loadQueue.length) {
                queueItem = _this._loadQueue[0];
                if (!queueItem.tileSource) {
                  break;
                }
                _this._loadQueue.splice(0, 1);
                if (queueItem.options.replace) {
                  var newIndex = _this.world.getIndexOfItem(queueItem.options.replaceItem);
                  if (newIndex != -1) {
                    queueItem.options.index = newIndex;
                  }
                  _this.world.removeItem(queueItem.options.replaceItem);
                }
                tiledImage = new $2.TiledImage({
                  viewer: _this,
                  source: queueItem.tileSource,
                  viewport: _this.viewport,
                  drawer: _this.drawer,
                  tileCache: _this.tileCache,
                  imageLoader: _this.imageLoader,
                  x: queueItem.options.x,
                  y: queueItem.options.y,
                  width: queueItem.options.width,
                  height: queueItem.options.height,
                  fitBounds: queueItem.options.fitBounds,
                  fitBoundsPlacement: queueItem.options.fitBoundsPlacement,
                  clip: queueItem.options.clip,
                  placeholderFillStyle: queueItem.options.placeholderFillStyle,
                  opacity: queueItem.options.opacity,
                  preload: queueItem.options.preload,
                  degrees: queueItem.options.degrees,
                  compositeOperation: queueItem.options.compositeOperation,
                  springStiffness: _this.springStiffness,
                  animationTime: _this.animationTime,
                  minZoomImageRatio: _this.minZoomImageRatio,
                  wrapHorizontal: _this.wrapHorizontal,
                  wrapVertical: _this.wrapVertical,
                  immediateRender: _this.immediateRender,
                  blendTime: _this.blendTime,
                  alwaysBlend: _this.alwaysBlend,
                  minPixelRatio: _this.minPixelRatio,
                  smoothTileEdgesMinZoom: _this.smoothTileEdgesMinZoom,
                  iOSDevice: _this.iOSDevice,
                  crossOriginPolicy: queueItem.options.crossOriginPolicy,
                  ajaxWithCredentials: queueItem.options.ajaxWithCredentials,
                  loadTilesWithAjax: queueItem.options.loadTilesWithAjax,
                  ajaxHeaders: queueItem.options.ajaxHeaders,
                  debugMode: _this.debugMode
                });
                if (_this.collectionMode) {
                  _this.world.setAutoRefigureSizes(false);
                }
                _this.world.addItem(tiledImage, {
                  index: queueItem.options.index
                });
                if (_this._loadQueue.length === 0) {
                  refreshWorld(queueItem);
                }
                if (_this.world.getItemCount() === 1 && !_this.preserveViewport) {
                  _this.viewport.goHome(true);
                }
                if (_this.navigator) {
                  optionsClone = $2.extend({}, queueItem.options, {
                    replace: false,
                    originalTiledImage: tiledImage,
                    tileSource: queueItem.tileSource
                  });
                  _this.navigator.addTiledImage(optionsClone);
                }
                if (queueItem.options.success) {
                  queueItem.options.success({
                    item: tiledImage
                  });
                }
              }
            }
            getTileSourceImplementation(this, options.tileSource, options, function(tileSource) {
              myQueueItem.tileSource = tileSource;
              processReadyItems();
            }, function(event) {
              event.options = options;
              raiseAddItemFailed(event);
              processReadyItems();
            });
          },
          addSimpleImage: function(options) {
            $2.console.assert(options, "[Viewer.addSimpleImage] options is required");
            $2.console.assert(options.url, "[Viewer.addSimpleImage] options.url is required");
            var opts = $2.extend({}, options, {
              tileSource: {
                type: "image",
                url: options.url
              }
            });
            delete opts.url;
            this.addTiledImage(opts);
          },
          addLayer: function(options) {
            var _this = this;
            $2.console.error("[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead.");
            var optionsClone = $2.extend({}, options, {
              success: function(event) {
                _this.raiseEvent("add-layer", {
                  options,
                  drawer: event.item
                });
              },
              error: function(event) {
                _this.raiseEvent("add-layer-failed", event);
              }
            });
            this.addTiledImage(optionsClone);
            return this;
          },
          getLayerAtLevel: function(level) {
            $2.console.error("[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead.");
            return this.world.getItemAt(level);
          },
          getLevelOfLayer: function(drawer) {
            $2.console.error("[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead.");
            return this.world.getIndexOfItem(drawer);
          },
          getLayersCount: function() {
            $2.console.error("[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead.");
            return this.world.getItemCount();
          },
          setLayerLevel: function(drawer, level) {
            $2.console.error("[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead.");
            return this.world.setItemIndex(drawer, level);
          },
          removeLayer: function(drawer) {
            $2.console.error("[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead.");
            return this.world.removeItem(drawer);
          },
          forceRedraw: function() {
            THIS[this.hash].forceRedraw = true;
            return this;
          },
          bindSequenceControls: function() {
            var onFocusHandler = $2.delegate(this, onFocus), onBlurHandler = $2.delegate(this, onBlur), onNextHandler = $2.delegate(this, onNext), onPreviousHandler = $2.delegate(this, onPrevious), navImages = this.navImages, useGroup = true;
            if (this.showSequenceControl) {
              if (this.previousButton || this.nextButton) {
                useGroup = false;
              }
              this.previousButton = new $2.Button({
                element: this.previousButton ? $2.getElement(this.previousButton) : null,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                tooltip: $2.getString("Tooltips.PreviousPage"),
                srcRest: resolveUrl(this.prefixUrl, navImages.previous.REST),
                srcGroup: resolveUrl(this.prefixUrl, navImages.previous.GROUP),
                srcHover: resolveUrl(this.prefixUrl, navImages.previous.HOVER),
                srcDown: resolveUrl(this.prefixUrl, navImages.previous.DOWN),
                onRelease: onPreviousHandler,
                onFocus: onFocusHandler,
                onBlur: onBlurHandler
              });
              this.nextButton = new $2.Button({
                element: this.nextButton ? $2.getElement(this.nextButton) : null,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                tooltip: $2.getString("Tooltips.NextPage"),
                srcRest: resolveUrl(this.prefixUrl, navImages.next.REST),
                srcGroup: resolveUrl(this.prefixUrl, navImages.next.GROUP),
                srcHover: resolveUrl(this.prefixUrl, navImages.next.HOVER),
                srcDown: resolveUrl(this.prefixUrl, navImages.next.DOWN),
                onRelease: onNextHandler,
                onFocus: onFocusHandler,
                onBlur: onBlurHandler
              });
              if (!this.navPrevNextWrap) {
                this.previousButton.disable();
              }
              if (!this.tileSources || !this.tileSources.length) {
                this.nextButton.disable();
              }
              if (useGroup) {
                this.paging = new $2.ButtonGroup({
                  buttons: [
                    this.previousButton,
                    this.nextButton
                  ],
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold
                });
                this.pagingControl = this.paging.element;
                if (this.toolbar) {
                  this.toolbar.addControl(
                    this.pagingControl,
                    { anchor: $2.ControlAnchor.BOTTOM_RIGHT }
                  );
                } else {
                  this.addControl(
                    this.pagingControl,
                    { anchor: this.sequenceControlAnchor || $2.ControlAnchor.TOP_LEFT }
                  );
                }
              }
            }
            return this;
          },
          bindStandardControls: function() {
            var beginZoomingInHandler = $2.delegate(this, beginZoomingIn), endZoomingHandler = $2.delegate(this, endZooming), doSingleZoomInHandler = $2.delegate(this, doSingleZoomIn), beginZoomingOutHandler = $2.delegate(this, beginZoomingOut), doSingleZoomOutHandler = $2.delegate(this, doSingleZoomOut), onHomeHandler = $2.delegate(this, onHome), onFullScreenHandler = $2.delegate(this, onFullScreen), onRotateLeftHandler = $2.delegate(this, onRotateLeft), onRotateRightHandler = $2.delegate(this, onRotateRight), onFlipHandler = $2.delegate(this, onFlip), onFocusHandler = $2.delegate(this, onFocus), onBlurHandler = $2.delegate(this, onBlur), navImages = this.navImages, buttons = [], useGroup = true;
            if (this.showNavigationControl) {
              if (this.zoomInButton || this.zoomOutButton || this.homeButton || this.fullPageButton || this.rotateLeftButton || this.rotateRightButton || this.flipButton) {
                useGroup = false;
              }
              if (this.showZoomControl) {
                buttons.push(this.zoomInButton = new $2.Button({
                  element: this.zoomInButton ? $2.getElement(this.zoomInButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $2.getString("Tooltips.ZoomIn"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.zoomIn.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.zoomIn.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.zoomIn.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.zoomIn.DOWN),
                  onPress: beginZoomingInHandler,
                  onRelease: endZoomingHandler,
                  onClick: doSingleZoomInHandler,
                  onEnter: beginZoomingInHandler,
                  onExit: endZoomingHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
                buttons.push(this.zoomOutButton = new $2.Button({
                  element: this.zoomOutButton ? $2.getElement(this.zoomOutButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $2.getString("Tooltips.ZoomOut"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.zoomOut.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.zoomOut.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.zoomOut.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.zoomOut.DOWN),
                  onPress: beginZoomingOutHandler,
                  onRelease: endZoomingHandler,
                  onClick: doSingleZoomOutHandler,
                  onEnter: beginZoomingOutHandler,
                  onExit: endZoomingHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showHomeControl) {
                buttons.push(this.homeButton = new $2.Button({
                  element: this.homeButton ? $2.getElement(this.homeButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $2.getString("Tooltips.Home"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.home.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.home.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.home.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.home.DOWN),
                  onRelease: onHomeHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showFullPageControl) {
                buttons.push(this.fullPageButton = new $2.Button({
                  element: this.fullPageButton ? $2.getElement(this.fullPageButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $2.getString("Tooltips.FullPage"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.fullpage.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.fullpage.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.fullpage.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.fullpage.DOWN),
                  onRelease: onFullScreenHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showRotationControl) {
                buttons.push(this.rotateLeftButton = new $2.Button({
                  element: this.rotateLeftButton ? $2.getElement(this.rotateLeftButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $2.getString("Tooltips.RotateLeft"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.rotateleft.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.rotateleft.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.rotateleft.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.rotateleft.DOWN),
                  onRelease: onRotateLeftHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
                buttons.push(this.rotateRightButton = new $2.Button({
                  element: this.rotateRightButton ? $2.getElement(this.rotateRightButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $2.getString("Tooltips.RotateRight"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.rotateright.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.rotateright.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.rotateright.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.rotateright.DOWN),
                  onRelease: onRotateRightHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (this.showFlipControl) {
                buttons.push(this.flipButton = new $2.Button({
                  element: this.flipButton ? $2.getElement(this.flipButton) : null,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                  tooltip: $2.getString("Tooltips.Flip"),
                  srcRest: resolveUrl(this.prefixUrl, navImages.flip.REST),
                  srcGroup: resolveUrl(this.prefixUrl, navImages.flip.GROUP),
                  srcHover: resolveUrl(this.prefixUrl, navImages.flip.HOVER),
                  srcDown: resolveUrl(this.prefixUrl, navImages.flip.DOWN),
                  onRelease: onFlipHandler,
                  onFocus: onFocusHandler,
                  onBlur: onBlurHandler
                }));
              }
              if (useGroup) {
                this.buttons = new $2.ButtonGroup({
                  buttons,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold
                });
                this.navControl = this.buttons.element;
                this.addHandler("open", $2.delegate(this, lightUp));
                if (this.toolbar) {
                  this.toolbar.addControl(
                    this.navControl,
                    { anchor: this.navigationControlAnchor || $2.ControlAnchor.TOP_LEFT }
                  );
                } else {
                  this.addControl(
                    this.navControl,
                    { anchor: this.navigationControlAnchor || $2.ControlAnchor.TOP_LEFT }
                  );
                }
              }
            }
            return this;
          },
          currentPage: function() {
            return this._sequenceIndex;
          },
          goToPage: function(page) {
            if (this.tileSources && page >= 0 && page < this.tileSources.length) {
              this._sequenceIndex = page;
              this._updateSequenceButtons(page);
              this.open(this.tileSources[page]);
              if (this.referenceStrip) {
                this.referenceStrip.setFocus(page);
              }
              this.raiseEvent("page", { page });
            }
            return this;
          },
          addOverlay: function(element, location, placement, onDraw) {
            var options;
            if ($2.isPlainObject(element)) {
              options = element;
            } else {
              options = {
                element,
                location,
                placement,
                onDraw
              };
            }
            element = $2.getElement(options.element);
            if (getOverlayIndex(this.currentOverlays, element) >= 0) {
              return this;
            }
            var overlay = getOverlayObject(this, options);
            this.currentOverlays.push(overlay);
            overlay.drawHTML(this.overlaysContainer, this.viewport);
            this.raiseEvent("add-overlay", {
              element,
              location: options.location,
              placement: options.placement
            });
            return this;
          },
          updateOverlay: function(element, location, placement) {
            var i;
            element = $2.getElement(element);
            i = getOverlayIndex(this.currentOverlays, element);
            if (i >= 0) {
              this.currentOverlays[i].update(location, placement);
              THIS[this.hash].forceRedraw = true;
              this.raiseEvent("update-overlay", {
                element,
                location,
                placement
              });
            }
            return this;
          },
          removeOverlay: function(element) {
            var i;
            element = $2.getElement(element);
            i = getOverlayIndex(this.currentOverlays, element);
            if (i >= 0) {
              this.currentOverlays[i].destroy();
              this.currentOverlays.splice(i, 1);
              THIS[this.hash].forceRedraw = true;
              this.raiseEvent("remove-overlay", {
                element
              });
            }
            return this;
          },
          clearOverlays: function() {
            while (this.currentOverlays.length > 0) {
              this.currentOverlays.pop().destroy();
            }
            THIS[this.hash].forceRedraw = true;
            this.raiseEvent("clear-overlay", {});
            return this;
          },
          getOverlayById: function(element) {
            var i;
            element = $2.getElement(element);
            i = getOverlayIndex(this.currentOverlays, element);
            if (i >= 0) {
              return this.currentOverlays[i];
            } else {
              return null;
            }
          },
          _updateSequenceButtons: function(page) {
            if (this.nextButton) {
              if (!this.tileSources || this.tileSources.length - 1 === page) {
                if (!this.navPrevNextWrap) {
                  this.nextButton.disable();
                }
              } else {
                this.nextButton.enable();
              }
            }
            if (this.previousButton) {
              if (page > 0) {
                this.previousButton.enable();
              } else {
                if (!this.navPrevNextWrap) {
                  this.previousButton.disable();
                }
              }
            }
          },
          _showMessage: function(message) {
            this._hideMessage();
            var div = $2.makeNeutralElement("div");
            div.appendChild(document.createTextNode(message));
            this.messageDiv = $2.makeCenteredNode(div);
            $2.addClass(this.messageDiv, "openseadragon-message");
            this.container.appendChild(this.messageDiv);
          },
          _hideMessage: function() {
            var div = this.messageDiv;
            if (div) {
              div.parentNode.removeChild(div);
              delete this.messageDiv;
            }
          },
          gestureSettingsByDeviceType: function(type) {
            switch (type) {
              case "mouse":
                return this.gestureSettingsMouse;
              case "touch":
                return this.gestureSettingsTouch;
              case "pen":
                return this.gestureSettingsPen;
              default:
                return this.gestureSettingsUnknown;
            }
          },
          _drawOverlays: function() {
            var i, length = this.currentOverlays.length;
            for (i = 0; i < length; i++) {
              this.currentOverlays[i].drawHTML(this.overlaysContainer, this.viewport);
            }
          },
          _cancelPendingImages: function() {
            this._loadQueue = [];
          },
          removeReferenceStrip: function() {
            this.showReferenceStrip = false;
            if (this.referenceStrip) {
              this.referenceStrip.destroy();
              this.referenceStrip = null;
            }
          },
          addReferenceStrip: function() {
            this.showReferenceStrip = true;
            if (this.sequenceMode) {
              if (this.referenceStrip) {
                return;
              }
              if (this.tileSources.length && this.tileSources.length > 1) {
                this.referenceStrip = new $2.ReferenceStrip({
                  id: this.referenceStripElement,
                  position: this.referenceStripPosition,
                  sizeRatio: this.referenceStripSizeRatio,
                  scroll: this.referenceStripScroll,
                  height: this.referenceStripHeight,
                  width: this.referenceStripWidth,
                  tileSources: this.tileSources,
                  prefixUrl: this.prefixUrl,
                  useCanvas: this.useCanvas,
                  viewer: this
                });
                this.referenceStrip.setFocus(this._sequenceIndex);
              }
            } else {
              $2.console.warn('Attempting to display a reference strip while "sequenceMode" is off.');
            }
          }
        });
        function _getSafeElemSize(oElement) {
          oElement = $2.getElement(oElement);
          return new $2.Point(
            oElement.clientWidth === 0 ? 1 : oElement.clientWidth,
            oElement.clientHeight === 0 ? 1 : oElement.clientHeight
          );
        }
        function getTileSourceImplementation(viewer, tileSource, imgOptions, successCallback, failCallback) {
          var _this = viewer;
          if ($2.type(tileSource) == "string") {
            if (tileSource.match(/^\s*<.*>\s*$/)) {
              tileSource = $2.parseXml(tileSource);
            } else if (tileSource.match(/^\s*[\{\[].*[\}\]]\s*$/)) {
              try {
                var tileSourceJ = $2.parseJSON(tileSource);
                tileSource = tileSourceJ;
              } catch (e) {
              }
            }
          }
          function waitUntilReady(tileSource2, originalTileSource) {
            if (tileSource2.ready) {
              successCallback(tileSource2);
            } else {
              tileSource2.addHandler("ready", function() {
                successCallback(tileSource2);
              });
              tileSource2.addHandler("open-failed", function(event) {
                failCallback({
                  message: event.message,
                  source: originalTileSource
                });
              });
            }
          }
          setTimeout(function() {
            if ($2.type(tileSource) == "string") {
              tileSource = new $2.TileSource({
                url: tileSource,
                crossOriginPolicy: imgOptions.crossOriginPolicy !== void 0 ? imgOptions.crossOriginPolicy : viewer.crossOriginPolicy,
                ajaxWithCredentials: viewer.ajaxWithCredentials,
                ajaxHeaders: viewer.ajaxHeaders,
                useCanvas: viewer.useCanvas,
                success: function(event) {
                  successCallback(event.tileSource);
                }
              });
              tileSource.addHandler("open-failed", function(event) {
                failCallback(event);
              });
            } else if ($2.isPlainObject(tileSource) || tileSource.nodeType) {
              if (tileSource.crossOriginPolicy === void 0 && (imgOptions.crossOriginPolicy !== void 0 || viewer.crossOriginPolicy !== void 0)) {
                tileSource.crossOriginPolicy = imgOptions.crossOriginPolicy !== void 0 ? imgOptions.crossOriginPolicy : viewer.crossOriginPolicy;
              }
              if (tileSource.ajaxWithCredentials === void 0) {
                tileSource.ajaxWithCredentials = viewer.ajaxWithCredentials;
              }
              if (tileSource.useCanvas === void 0) {
                tileSource.useCanvas = viewer.useCanvas;
              }
              if ($2.isFunction(tileSource.getTileUrl)) {
                var customTileSource = new $2.TileSource(tileSource);
                customTileSource.getTileUrl = tileSource.getTileUrl;
                successCallback(customTileSource);
              } else {
                var $TileSource = $2.TileSource.determineType(_this, tileSource);
                if (!$TileSource) {
                  failCallback({
                    message: "Unable to load TileSource",
                    source: tileSource
                  });
                  return;
                }
                var options = $TileSource.prototype.configure.apply(_this, [tileSource]);
                waitUntilReady(new $TileSource(options), tileSource);
              }
            } else {
              waitUntilReady(tileSource, tileSource);
            }
          });
        }
        function getOverlayObject(viewer, overlay) {
          if (overlay instanceof $2.Overlay) {
            return overlay;
          }
          var element = null;
          if (overlay.element) {
            element = $2.getElement(overlay.element);
          } else {
            var id = overlay.id ? overlay.id : "openseadragon-overlay-" + Math.floor(Math.random() * 1e7);
            element = $2.getElement(overlay.id);
            if (!element) {
              element = document.createElement("a");
              element.href = "#/overlay/" + id;
            }
            element.id = id;
            $2.addClass(
              element,
              overlay.className ? overlay.className : "openseadragon-overlay"
            );
          }
          var location = overlay.location;
          var width = overlay.width;
          var height = overlay.height;
          if (!location) {
            var x = overlay.x;
            var y = overlay.y;
            if (overlay.px !== void 0) {
              var rect = viewer.viewport.imageToViewportRectangle(new $2.Rect(
                overlay.px,
                overlay.py,
                width || 0,
                height || 0
              ));
              x = rect.x;
              y = rect.y;
              width = width !== void 0 ? rect.width : void 0;
              height = height !== void 0 ? rect.height : void 0;
            }
            location = new $2.Point(x, y);
          }
          var placement = overlay.placement;
          if (placement && $2.type(placement) === "string") {
            placement = $2.Placement[overlay.placement.toUpperCase()];
          }
          return new $2.Overlay({
            element,
            location,
            placement,
            onDraw: overlay.onDraw,
            checkResize: overlay.checkResize,
            width,
            height,
            rotationMode: overlay.rotationMode
          });
        }
        function getOverlayIndex(overlays, element) {
          var i;
          for (i = overlays.length - 1; i >= 0; i--) {
            if (overlays[i].element === element) {
              return i;
            }
          }
          return -1;
        }
        function scheduleUpdate(viewer, updateFunc) {
          return $2.requestAnimationFrame(function() {
            updateFunc(viewer);
          });
        }
        function scheduleControlsFade(viewer) {
          $2.requestAnimationFrame(function() {
            updateControlsFade(viewer);
          });
        }
        function beginControlsAutoHide(viewer) {
          if (!viewer.autoHideControls) {
            return;
          }
          viewer.controlsShouldFade = true;
          viewer.controlsFadeBeginTime = $2.now() + viewer.controlsFadeDelay;
          window.setTimeout(function() {
            scheduleControlsFade(viewer);
          }, viewer.controlsFadeDelay);
        }
        function updateControlsFade(viewer) {
          var currentTime, deltaTime, opacity, i;
          if (viewer.controlsShouldFade) {
            currentTime = $2.now();
            deltaTime = currentTime - viewer.controlsFadeBeginTime;
            opacity = 1 - deltaTime / viewer.controlsFadeLength;
            opacity = Math.min(1, opacity);
            opacity = Math.max(0, opacity);
            for (i = viewer.controls.length - 1; i >= 0; i--) {
              if (viewer.controls[i].autoFade) {
                viewer.controls[i].setOpacity(opacity);
              }
            }
            if (opacity > 0) {
              scheduleControlsFade(viewer);
            }
          }
        }
        function abortControlsAutoHide(viewer) {
          var i;
          viewer.controlsShouldFade = false;
          for (i = viewer.controls.length - 1; i >= 0; i--) {
            viewer.controls[i].setOpacity(1);
          }
        }
        function onFocus() {
          abortControlsAutoHide(this);
        }
        function onBlur() {
          beginControlsAutoHide(this);
        }
        function onCanvasKeyDown(event) {
          var canvasKeyDownEventArgs = {
            originalEvent: event.originalEvent,
            preventDefaultAction: event.preventDefaultAction,
            preventVerticalPan: event.preventVerticalPan,
            preventHorizontalPan: event.preventHorizontalPan
          };
          this.raiseEvent("canvas-key", canvasKeyDownEventArgs);
          if (!canvasKeyDownEventArgs.preventDefaultAction && !event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 38:
                if (!canvasKeyDownEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(1.1);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(0, -this.pixelsPerArrowPress)));
                  }
                  this.viewport.applyConstraints();
                }
                return false;
              case 40:
                if (!canvasKeyDownEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(0.9);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(0, this.pixelsPerArrowPress)));
                  }
                  this.viewport.applyConstraints();
                }
                return false;
              case 37:
                if (!canvasKeyDownEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(-this.pixelsPerArrowPress, 0)));
                  this.viewport.applyConstraints();
                }
                return false;
              case 39:
                if (!canvasKeyDownEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(this.pixelsPerArrowPress, 0)));
                  this.viewport.applyConstraints();
                }
                return false;
              default:
                return true;
            }
          } else {
            return true;
          }
        }
        function onCanvasKeyPress(event) {
          var canvasKeyPressEventArgs = {
            originalEvent: event.originalEvent,
            preventDefaultAction: event.preventDefaultAction,
            preventVerticalPan: event.preventVerticalPan,
            preventHorizontalPan: event.preventHorizontalPan
          };
          this.raiseEvent("canvas-key", canvasKeyPressEventArgs);
          if (!canvasKeyPressEventArgs.preventDefaultAction && !event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 43:
              case 61:
                this.viewport.zoomBy(1.1);
                this.viewport.applyConstraints();
                return false;
              case 45:
                this.viewport.zoomBy(0.9);
                this.viewport.applyConstraints();
                return false;
              case 48:
                this.viewport.goHome();
                this.viewport.applyConstraints();
                return false;
              case 119:
              case 87:
                if (!canvasKeyPressEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(1.1);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(0, -40)));
                  }
                  this.viewport.applyConstraints();
                }
                return false;
              case 115:
              case 83:
                if (!canvasKeyPressEventArgs.preventVerticalPan) {
                  if (event.shift) {
                    this.viewport.zoomBy(0.9);
                  } else {
                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(0, 40)));
                  }
                  this.viewport.applyConstraints();
                }
                return false;
              case 97:
                if (!canvasKeyPressEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(-40, 0)));
                  this.viewport.applyConstraints();
                }
                return false;
              case 100:
                if (!canvasKeyPressEventArgs.preventHorizontalPan) {
                  this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $2.Point(40, 0)));
                  this.viewport.applyConstraints();
                }
                return false;
              case 114:
                if (this.viewport.flipped) {
                  this.viewport.setRotation($2.positiveModulo(this.viewport.degrees - this.rotationIncrement, 360));
                } else {
                  this.viewport.setRotation($2.positiveModulo(this.viewport.degrees + this.rotationIncrement, 360));
                }
                this.viewport.applyConstraints();
                return false;
              case 82:
                if (this.viewport.flipped) {
                  this.viewport.setRotation($2.positiveModulo(this.viewport.degrees + this.rotationIncrement, 360));
                } else {
                  this.viewport.setRotation($2.positiveModulo(this.viewport.degrees - this.rotationIncrement, 360));
                }
                this.viewport.applyConstraints();
                return false;
              case 102:
                this.viewport.toggleFlip();
                return false;
              default:
                return true;
            }
          } else {
            return true;
          }
        }
        function onCanvasClick(event) {
          var gestureSettings;
          var haveKeyboardFocus = document.activeElement == this.canvas;
          if (!haveKeyboardFocus) {
            this.canvas.focus();
          }
          if (this.viewport.flipped) {
            event.position.x = this.viewport.getContainerSize().x - event.position.x;
          }
          var canvasClickEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            quick: event.quick,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: event.preventDefaultAction
          };
          this.raiseEvent("canvas-click", canvasClickEventArgs);
          if (!canvasClickEventArgs.preventDefaultAction && this.viewport && event.quick) {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.clickToZoom) {
              this.viewport.zoomBy(
                event.shift ? 1 / this.zoomPerClick : this.zoomPerClick,
                gestureSettings.zoomToRefPoint ? this.viewport.pointFromPixel(event.position, true) : null
              );
              this.viewport.applyConstraints();
            }
          }
        }
        function onCanvasDblClick(event) {
          var gestureSettings;
          var canvasDblClickEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: event.preventDefaultAction
          };
          this.raiseEvent("canvas-double-click", canvasDblClickEventArgs);
          if (!canvasDblClickEventArgs.preventDefaultAction && this.viewport) {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.dblClickToZoom) {
              this.viewport.zoomBy(
                event.shift ? 1 / this.zoomPerClick : this.zoomPerClick,
                gestureSettings.zoomToRefPoint ? this.viewport.pointFromPixel(event.position, true) : null
              );
              this.viewport.applyConstraints();
            }
          }
        }
        function onCanvasDrag(event) {
          var gestureSettings;
          var canvasDragEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            delta: event.delta,
            speed: event.speed,
            direction: event.direction,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: event.preventDefaultAction
          };
          this.raiseEvent("canvas-drag", canvasDragEventArgs);
          if (!canvasDragEventArgs.preventDefaultAction && this.viewport) {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (!this.panHorizontal) {
              event.delta.x = 0;
            }
            if (!this.panVertical) {
              event.delta.y = 0;
            }
            if (this.viewport.flipped) {
              event.delta.x = -event.delta.x;
            }
            if (this.constrainDuringPan) {
              var delta = this.viewport.deltaPointsFromPixels(event.delta.negate());
              this.viewport.centerSpringX.target.value += delta.x;
              this.viewport.centerSpringY.target.value += delta.y;
              var bounds = this.viewport.getBounds();
              var constrainedBounds = this.viewport.getConstrainedBounds();
              this.viewport.centerSpringX.target.value -= delta.x;
              this.viewport.centerSpringY.target.value -= delta.y;
              if (bounds.x != constrainedBounds.x) {
                event.delta.x = 0;
              }
              if (bounds.y != constrainedBounds.y) {
                event.delta.y = 0;
              }
            }
            this.viewport.panBy(this.viewport.deltaPointsFromPixels(event.delta.negate()), gestureSettings.flickEnabled && !this.constrainDuringPan);
          }
        }
        function onCanvasDragEnd(event) {
          if (!event.preventDefaultAction && this.viewport) {
            var gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.flickEnabled && event.speed >= gestureSettings.flickMinSpeed) {
              var amplitudeX = 0;
              if (this.panHorizontal) {
                amplitudeX = gestureSettings.flickMomentum * event.speed * Math.cos(event.direction);
              }
              var amplitudeY = 0;
              if (this.panVertical) {
                amplitudeY = gestureSettings.flickMomentum * event.speed * Math.sin(event.direction);
              }
              var center = this.viewport.pixelFromPoint(
                this.viewport.getCenter(true)
              );
              var target = this.viewport.pointFromPixel(
                new $2.Point(center.x - amplitudeX, center.y - amplitudeY)
              );
              this.viewport.panTo(target, false);
            }
            this.viewport.applyConstraints();
          }
          this.raiseEvent("canvas-drag-end", {
            tracker: event.eventSource,
            position: event.position,
            speed: event.speed,
            direction: event.direction,
            shift: event.shift,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasEnter(event) {
          this.raiseEvent("canvas-enter", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasExit(event) {
          if (window.location != window.parent.location) {
            $2.MouseTracker.resetAllMouseTrackers();
          }
          this.raiseEvent("canvas-exit", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasPress(event) {
          this.raiseEvent("canvas-press", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            insideElementPressed: event.insideElementPressed,
            insideElementReleased: event.insideElementReleased,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasRelease(event) {
          this.raiseEvent("canvas-release", {
            tracker: event.eventSource,
            pointerType: event.pointerType,
            position: event.position,
            insideElementPressed: event.insideElementPressed,
            insideElementReleased: event.insideElementReleased,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasNonPrimaryPress(event) {
          this.raiseEvent("canvas-nonprimary-press", {
            tracker: event.eventSource,
            position: event.position,
            pointerType: event.pointerType,
            button: event.button,
            buttons: event.buttons,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasNonPrimaryRelease(event) {
          this.raiseEvent("canvas-nonprimary-release", {
            tracker: event.eventSource,
            position: event.position,
            pointerType: event.pointerType,
            button: event.button,
            buttons: event.buttons,
            originalEvent: event.originalEvent
          });
        }
        function onCanvasPinch(event) {
          var gestureSettings, centerPt, lastCenterPt, panByPt;
          if (!event.preventDefaultAction && this.viewport) {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings.pinchToZoom) {
              centerPt = this.viewport.pointFromPixel(event.center, true);
              lastCenterPt = this.viewport.pointFromPixel(event.lastCenter, true);
              panByPt = lastCenterPt.minus(centerPt);
              if (!this.panHorizontal) {
                panByPt.x = 0;
              }
              if (!this.panVertical) {
                panByPt.y = 0;
              }
              this.viewport.zoomBy(event.distance / event.lastDistance, centerPt, true);
              if (gestureSettings.zoomToRefPoint) {
                this.viewport.panBy(panByPt, true);
              }
              this.viewport.applyConstraints();
            }
            if (gestureSettings.pinchRotate) {
              var angle1 = Math.atan2(
                event.gesturePoints[0].currentPos.y - event.gesturePoints[1].currentPos.y,
                event.gesturePoints[0].currentPos.x - event.gesturePoints[1].currentPos.x
              );
              var angle2 = Math.atan2(
                event.gesturePoints[0].lastPos.y - event.gesturePoints[1].lastPos.y,
                event.gesturePoints[0].lastPos.x - event.gesturePoints[1].lastPos.x
              );
              this.viewport.setRotation(this.viewport.getRotation() + (angle1 - angle2) * (180 / Math.PI));
            }
          }
          this.raiseEvent("canvas-pinch", {
            tracker: event.eventSource,
            gesturePoints: event.gesturePoints,
            lastCenter: event.lastCenter,
            center: event.center,
            lastDistance: event.lastDistance,
            distance: event.distance,
            shift: event.shift,
            originalEvent: event.originalEvent
          });
          return false;
        }
        function onCanvasScroll(event) {
          var gestureSettings, factor, thisScrollTime, deltaScrollTime;
          thisScrollTime = $2.now();
          deltaScrollTime = thisScrollTime - this._lastScrollTime;
          if (deltaScrollTime > this.minScrollDeltaTime) {
            this._lastScrollTime = thisScrollTime;
            if (this.viewport.flipped) {
              event.position.x = this.viewport.getContainerSize().x - event.position.x;
            }
            if (!event.preventDefaultAction && this.viewport) {
              gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
              if (gestureSettings.scrollToZoom) {
                factor = Math.pow(this.zoomPerScroll, event.scroll);
                this.viewport.zoomBy(
                  factor,
                  gestureSettings.zoomToRefPoint ? this.viewport.pointFromPixel(event.position, true) : null
                );
                this.viewport.applyConstraints();
              }
            }
            this.raiseEvent("canvas-scroll", {
              tracker: event.eventSource,
              position: event.position,
              scroll: event.scroll,
              shift: event.shift,
              originalEvent: event.originalEvent
            });
            if (gestureSettings && gestureSettings.scrollToZoom) {
              return false;
            }
          } else {
            gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
            if (gestureSettings && gestureSettings.scrollToZoom) {
              return false;
            }
          }
        }
        function onContainerEnter(event) {
          THIS[this.hash].mouseInside = true;
          abortControlsAutoHide(this);
          this.raiseEvent("container-enter", {
            tracker: event.eventSource,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function onContainerExit(event) {
          if (event.pointers < 1) {
            THIS[this.hash].mouseInside = false;
            if (!THIS[this.hash].animating) {
              beginControlsAutoHide(this);
            }
          }
          this.raiseEvent("container-exit", {
            tracker: event.eventSource,
            position: event.position,
            buttons: event.buttons,
            pointers: event.pointers,
            insideElementPressed: event.insideElementPressed,
            buttonDownAny: event.buttonDownAny,
            originalEvent: event.originalEvent
          });
        }
        function updateMulti(viewer) {
          updateOnce(viewer);
          if (viewer.isOpen()) {
            viewer._updateRequestId = scheduleUpdate(viewer, updateMulti);
          } else {
            viewer._updateRequestId = false;
          }
        }
        function updateOnce(viewer) {
          if (viewer._opening) {
            return;
          }
          if (viewer.autoResize) {
            var containerSize = _getSafeElemSize(viewer.container);
            var prevContainerSize = THIS[viewer.hash].prevContainerSize;
            if (!containerSize.equals(prevContainerSize)) {
              var viewport = viewer.viewport;
              if (viewer.preserveImageSizeOnResize) {
                var resizeRatio = prevContainerSize.x / containerSize.x;
                var zoom = viewport.getZoom() * resizeRatio;
                var center = viewport.getCenter();
                viewport.resize(containerSize, false);
                viewport.zoomTo(zoom, null, true);
                viewport.panTo(center, true);
              } else {
                var oldBounds = viewport.getBounds();
                viewport.resize(containerSize, true);
                viewport.fitBoundsWithConstraints(oldBounds, true);
              }
              THIS[viewer.hash].prevContainerSize = containerSize;
              THIS[viewer.hash].forceRedraw = true;
            }
          }
          var viewportChange = viewer.viewport.update();
          var animated = viewer.world.update() || viewportChange;
          if (viewportChange) {
            viewer.raiseEvent("viewport-change");
          }
          if (viewer.referenceStrip) {
            animated = viewer.referenceStrip.update(viewer.viewport) || animated;
          }
          if (!THIS[viewer.hash].animating && animated) {
            viewer.raiseEvent("animation-start");
            abortControlsAutoHide(viewer);
          }
          if (animated || THIS[viewer.hash].forceRedraw || viewer.world.needsDraw()) {
            drawWorld(viewer);
            viewer._drawOverlays();
            if (viewer.navigator) {
              viewer.navigator.update(viewer.viewport);
            }
            THIS[viewer.hash].forceRedraw = false;
            if (animated) {
              viewer.raiseEvent("animation");
            }
          }
          if (THIS[viewer.hash].animating && !animated) {
            viewer.raiseEvent("animation-finish");
            if (!THIS[viewer.hash].mouseInside) {
              beginControlsAutoHide(viewer);
            }
          }
          THIS[viewer.hash].animating = animated;
        }
        function drawWorld(viewer) {
          viewer.imageLoader.clear();
          viewer.drawer.clear();
          viewer.world.draw();
          viewer.raiseEvent("update-viewport", {});
        }
        function resolveUrl(prefix, url) {
          return prefix ? prefix + url : url;
        }
        function beginZoomingIn() {
          THIS[this.hash].lastZoomTime = $2.now();
          THIS[this.hash].zoomFactor = this.zoomPerSecond;
          THIS[this.hash].zooming = true;
          scheduleZoom(this);
        }
        function beginZoomingOut() {
          THIS[this.hash].lastZoomTime = $2.now();
          THIS[this.hash].zoomFactor = 1 / this.zoomPerSecond;
          THIS[this.hash].zooming = true;
          scheduleZoom(this);
        }
        function endZooming() {
          THIS[this.hash].zooming = false;
        }
        function scheduleZoom(viewer) {
          $2.requestAnimationFrame($2.delegate(viewer, doZoom));
        }
        function doZoom() {
          var currentTime, deltaTime, adjustedFactor;
          if (THIS[this.hash].zooming && this.viewport) {
            currentTime = $2.now();
            deltaTime = currentTime - THIS[this.hash].lastZoomTime;
            adjustedFactor = Math.pow(THIS[this.hash].zoomFactor, deltaTime / 1e3);
            this.viewport.zoomBy(adjustedFactor);
            this.viewport.applyConstraints();
            THIS[this.hash].lastZoomTime = currentTime;
            scheduleZoom(this);
          }
        }
        function doSingleZoomIn() {
          if (this.viewport) {
            THIS[this.hash].zooming = false;
            this.viewport.zoomBy(
              this.zoomPerClick / 1
            );
            this.viewport.applyConstraints();
          }
        }
        function doSingleZoomOut() {
          if (this.viewport) {
            THIS[this.hash].zooming = false;
            this.viewport.zoomBy(
              1 / this.zoomPerClick
            );
            this.viewport.applyConstraints();
          }
        }
        function lightUp() {
          this.buttons.emulateEnter();
          this.buttons.emulateExit();
        }
        function onHome() {
          if (this.viewport) {
            this.viewport.goHome();
          }
        }
        function onFullScreen() {
          if (this.isFullPage() && !$2.isFullScreen()) {
            this.setFullPage(false);
          } else {
            this.setFullScreen(!this.isFullPage());
          }
          if (this.buttons) {
            this.buttons.emulateExit();
          }
          this.fullPageButton.element.focus();
          if (this.viewport) {
            this.viewport.applyConstraints();
          }
        }
        function onRotateLeft() {
          if (this.viewport) {
            var currRotation = this.viewport.getRotation();
            if (this.viewport.flipped) {
              currRotation = $2.positiveModulo(currRotation + this.rotationIncrement, 360);
            } else {
              currRotation = $2.positiveModulo(currRotation - this.rotationIncrement, 360);
            }
            this.viewport.setRotation(currRotation);
          }
        }
        function onRotateRight() {
          if (this.viewport) {
            var currRotation = this.viewport.getRotation();
            if (this.viewport.flipped) {
              currRotation = $2.positiveModulo(currRotation - this.rotationIncrement, 360);
            } else {
              currRotation = $2.positiveModulo(currRotation + this.rotationIncrement, 360);
            }
            this.viewport.setRotation(currRotation);
          }
        }
        function onFlip() {
          this.viewport.toggleFlip();
        }
        function onPrevious() {
          var previous = this._sequenceIndex - 1;
          if (this.navPrevNextWrap && previous < 0) {
            previous += this.tileSources.length;
          }
          this.goToPage(previous);
        }
        function onNext() {
          var next = this._sequenceIndex + 1;
          if (this.navPrevNextWrap && next >= this.tileSources.length) {
            next = 0;
          }
          this.goToPage(next);
        }
      })(OpenSeadragon);
      (function($2) {
        $2.Navigator = function(options) {
          var viewer = options.viewer, _this = this, viewerSize, navigatorSize;
          if (!options.id) {
            options.id = "navigator-" + $2.now();
            this.element = $2.makeNeutralElement("div");
            options.controlOptions = {
              anchor: $2.ControlAnchor.TOP_RIGHT,
              attachToViewer: true,
              autoFade: options.autoFade
            };
            if (options.position) {
              if ("BOTTOM_RIGHT" == options.position) {
                options.controlOptions.anchor = $2.ControlAnchor.BOTTOM_RIGHT;
              } else if ("BOTTOM_LEFT" == options.position) {
                options.controlOptions.anchor = $2.ControlAnchor.BOTTOM_LEFT;
              } else if ("TOP_RIGHT" == options.position) {
                options.controlOptions.anchor = $2.ControlAnchor.TOP_RIGHT;
              } else if ("TOP_LEFT" == options.position) {
                options.controlOptions.anchor = $2.ControlAnchor.TOP_LEFT;
              } else if ("ABSOLUTE" == options.position) {
                options.controlOptions.anchor = $2.ControlAnchor.ABSOLUTE;
                options.controlOptions.top = options.top;
                options.controlOptions.left = options.left;
                options.controlOptions.height = options.height;
                options.controlOptions.width = options.width;
              }
            }
          } else {
            this.element = document.getElementById(options.id);
            options.controlOptions = {
              anchor: $2.ControlAnchor.NONE,
              attachToViewer: false,
              autoFade: false
            };
          }
          this.element.id = options.id;
          this.element.className += " navigator";
          options = $2.extend(true, {
            sizeRatio: $2.DEFAULT_SETTINGS.navigatorSizeRatio
          }, options, {
            element: this.element,
            tabIndex: -1,
            showNavigator: false,
            mouseNavEnabled: false,
            showNavigationControl: false,
            showSequenceControl: false,
            immediateRender: true,
            blendTime: 0,
            animationTime: 0,
            autoResize: options.autoResize,
            minZoomImageRatio: 1,
            background: options.background,
            opacity: options.opacity,
            borderColor: options.borderColor,
            displayRegionColor: options.displayRegionColor
          });
          options.minPixelRatio = this.minPixelRatio = viewer.minPixelRatio;
          $2.setElementTouchActionNone(this.element);
          this.borderWidth = 2;
          this.fudge = new $2.Point(1, 1);
          this.totalBorderWidths = new $2.Point(this.borderWidth * 2, this.borderWidth * 2).minus(this.fudge);
          if (options.controlOptions.anchor != $2.ControlAnchor.NONE) {
            (function(style, borderWidth) {
              style.margin = "0px";
              style.border = borderWidth + "px solid " + options.borderColor;
              style.padding = "0px";
              style.background = options.background;
              style.opacity = options.opacity;
              style.overflow = "hidden";
            })(this.element.style, this.borderWidth);
          }
          this.displayRegion = $2.makeNeutralElement("div");
          this.displayRegion.id = this.element.id + "-displayregion";
          this.displayRegion.className = "displayregion";
          (function(style, borderWidth) {
            style.position = "relative";
            style.top = "0px";
            style.left = "0px";
            style.fontSize = "0px";
            style.overflow = "hidden";
            style.border = borderWidth + "px solid " + options.displayRegionColor;
            style.margin = "0px";
            style.padding = "0px";
            style.background = "transparent";
            style["float"] = "left";
            style.cssFloat = "left";
            style.styleFloat = "left";
            style.zIndex = 999999999;
            style.cursor = "default";
          })(this.displayRegion.style, this.borderWidth);
          this.displayRegionContainer = $2.makeNeutralElement("div");
          this.displayRegionContainer.id = this.element.id + "-displayregioncontainer";
          this.displayRegionContainer.className = "displayregioncontainer";
          this.displayRegionContainer.style.width = "100%";
          this.displayRegionContainer.style.height = "100%";
          viewer.addControl(
            this.element,
            options.controlOptions
          );
          this._resizeWithViewer = options.controlOptions.anchor != $2.ControlAnchor.ABSOLUTE && options.controlOptions.anchor != $2.ControlAnchor.NONE;
          if (options.width && options.height) {
            this.setWidth(options.width);
            this.setHeight(options.height);
          } else if (this._resizeWithViewer) {
            viewerSize = $2.getElementSize(viewer.element);
            this.element.style.height = Math.round(viewerSize.y * options.sizeRatio) + "px";
            this.element.style.width = Math.round(viewerSize.x * options.sizeRatio) + "px";
            this.oldViewerSize = viewerSize;
            navigatorSize = $2.getElementSize(this.element);
            this.elementArea = navigatorSize.x * navigatorSize.y;
          }
          this.oldContainerSize = new $2.Point(0, 0);
          $2.Viewer.apply(this, [options]);
          this.displayRegionContainer.appendChild(this.displayRegion);
          this.element.getElementsByTagName("div")[0].appendChild(this.displayRegionContainer);
          function rotate(degrees2) {
            _setTransformRotate(_this.displayRegionContainer, degrees2);
            _setTransformRotate(_this.displayRegion, -degrees2);
            _this.viewport.setRotation(degrees2);
          }
          if (options.navigatorRotate) {
            var degrees = options.viewer.viewport ? options.viewer.viewport.getRotation() : options.viewer.degrees || 0;
            rotate(degrees);
            options.viewer.addHandler("rotate", function(args) {
              rotate(args.degrees);
            });
          }
          this.innerTracker.destroy();
          this.innerTracker = new $2.MouseTracker({
            element: this.element,
            dragHandler: $2.delegate(this, onCanvasDrag),
            clickHandler: $2.delegate(this, onCanvasClick),
            releaseHandler: $2.delegate(this, onCanvasRelease),
            scrollHandler: $2.delegate(this, onCanvasScroll)
          });
          this.addHandler("reset-size", function() {
            if (_this.viewport) {
              _this.viewport.goHome(true);
            }
          });
          viewer.world.addHandler("item-index-change", function(event) {
            window.setTimeout(function() {
              var item = _this.world.getItemAt(event.previousIndex);
              _this.world.setItemIndex(item, event.newIndex);
            }, 1);
          });
          viewer.world.addHandler("remove-item", function(event) {
            var theirItem = event.item;
            var myItem = _this._getMatchingItem(theirItem);
            if (myItem) {
              _this.world.removeItem(myItem);
            }
          });
          this.update(viewer.viewport);
        };
        $2.extend($2.Navigator.prototype, $2.EventSource.prototype, $2.Viewer.prototype, {
          updateSize: function() {
            if (this.viewport) {
              var containerSize = new $2.Point(
                this.container.clientWidth === 0 ? 1 : this.container.clientWidth,
                this.container.clientHeight === 0 ? 1 : this.container.clientHeight
              );
              if (!containerSize.equals(this.oldContainerSize)) {
                this.viewport.resize(containerSize, true);
                this.viewport.goHome(true);
                this.oldContainerSize = containerSize;
                this.drawer.clear();
                this.world.draw();
              }
            }
          },
          setWidth: function(width) {
            this.width = width;
            this.element.style.width = typeof width == "number" ? width + "px" : width;
            this._resizeWithViewer = false;
          },
          setHeight: function(height) {
            this.height = height;
            this.element.style.height = typeof height == "number" ? height + "px" : height;
            this._resizeWithViewer = false;
          },
          setFlip: function(state) {
            this.viewport.setFlip(state);
            this.setDisplayTransform(this.viewer.viewport.getFlip() ? "scale(-1,1)" : "scale(1,1)");
            return this;
          },
          setDisplayTransform: function(rule) {
            setElementTransform(this.displayRegion, rule);
            setElementTransform(this.canvas, rule);
            setElementTransform(this.element, rule);
          },
          update: function(viewport) {
            var viewerSize, newWidth, newHeight, bounds, topleft, bottomright;
            viewerSize = $2.getElementSize(this.viewer.element);
            if (this._resizeWithViewer && viewerSize.x && viewerSize.y && !viewerSize.equals(this.oldViewerSize)) {
              this.oldViewerSize = viewerSize;
              if (this.maintainSizeRatio || !this.elementArea) {
                newWidth = viewerSize.x * this.sizeRatio;
                newHeight = viewerSize.y * this.sizeRatio;
              } else {
                newWidth = Math.sqrt(this.elementArea * (viewerSize.x / viewerSize.y));
                newHeight = this.elementArea / newWidth;
              }
              this.element.style.width = Math.round(newWidth) + "px";
              this.element.style.height = Math.round(newHeight) + "px";
              if (!this.elementArea) {
                this.elementArea = newWidth * newHeight;
              }
              this.updateSize();
            }
            if (viewport && this.viewport) {
              bounds = viewport.getBoundsNoRotate(true);
              topleft = this.viewport.pixelFromPointNoRotate(bounds.getTopLeft(), false);
              bottomright = this.viewport.pixelFromPointNoRotate(bounds.getBottomRight(), false).minus(this.totalBorderWidths);
              var style = this.displayRegion.style;
              style.display = this.world.getItemCount() ? "block" : "none";
              style.top = Math.round(topleft.y) + "px";
              style.left = Math.round(topleft.x) + "px";
              var width = Math.abs(topleft.x - bottomright.x);
              var height = Math.abs(topleft.y - bottomright.y);
              style.width = Math.round(Math.max(width, 0)) + "px";
              style.height = Math.round(Math.max(height, 0)) + "px";
            }
          },
          addTiledImage: function(options) {
            var _this = this;
            var original = options.originalTiledImage;
            delete options.original;
            var optionsClone = $2.extend({}, options, {
              success: function(event) {
                var myItem = event.item;
                myItem._originalForNavigator = original;
                _this._matchBounds(myItem, original, true);
                function matchBounds() {
                  _this._matchBounds(myItem, original);
                }
                function matchOpacity() {
                  _this._matchOpacity(myItem, original);
                }
                function matchCompositeOperation() {
                  _this._matchCompositeOperation(myItem, original);
                }
                original.addHandler("bounds-change", matchBounds);
                original.addHandler("clip-change", matchBounds);
                original.addHandler("opacity-change", matchOpacity);
                original.addHandler("composite-operation-change", matchCompositeOperation);
              }
            });
            return $2.Viewer.prototype.addTiledImage.apply(this, [optionsClone]);
          },
          _getMatchingItem: function(theirItem) {
            var count = this.world.getItemCount();
            var item;
            for (var i = 0; i < count; i++) {
              item = this.world.getItemAt(i);
              if (item._originalForNavigator === theirItem) {
                return item;
              }
            }
            return null;
          },
          _matchBounds: function(myItem, theirItem, immediately) {
            var bounds = theirItem.getBoundsNoRotate();
            myItem.setPosition(bounds.getTopLeft(), immediately);
            myItem.setWidth(bounds.width, immediately);
            myItem.setRotation(theirItem.getRotation(), immediately);
            myItem.setClip(theirItem.getClip());
          },
          _matchOpacity: function(myItem, theirItem) {
            myItem.setOpacity(theirItem.opacity);
          },
          _matchCompositeOperation: function(myItem, theirItem) {
            myItem.setCompositeOperation(theirItem.compositeOperation);
          }
        });
        function onCanvasClick(event) {
          var canvasClickEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            quick: event.quick,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: event.preventDefaultAction
          };
          this.viewer.raiseEvent("navigator-click", canvasClickEventArgs);
          if (!canvasClickEventArgs.preventDefaultAction && event.quick && this.viewer.viewport && (this.panVertical || this.panHorizontal)) {
            if (this.viewer.viewport.flipped) {
              event.position.x = this.viewport.getContainerSize().x - event.position.x;
            }
            var target = this.viewport.pointFromPixel(event.position);
            if (!this.panVertical) {
              target.y = this.viewer.viewport.getCenter(true).y;
            } else if (!this.panHorizontal) {
              target.x = this.viewer.viewport.getCenter(true).x;
            }
            this.viewer.viewport.panTo(target);
            this.viewer.viewport.applyConstraints();
          }
        }
        function onCanvasDrag(event) {
          var canvasDragEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            delta: event.delta,
            speed: event.speed,
            direction: event.direction,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: event.preventDefaultAction
          };
          this.viewer.raiseEvent("navigator-drag", canvasDragEventArgs);
          if (!canvasDragEventArgs.preventDefaultAction && this.viewer.viewport) {
            if (!this.panHorizontal) {
              event.delta.x = 0;
            }
            if (!this.panVertical) {
              event.delta.y = 0;
            }
            if (this.viewer.viewport.flipped) {
              event.delta.x = -event.delta.x;
            }
            this.viewer.viewport.panBy(
              this.viewport.deltaPointsFromPixels(
                event.delta
              )
            );
            if (this.viewer.constrainDuringPan) {
              this.viewer.viewport.applyConstraints();
            }
          }
        }
        function onCanvasRelease(event) {
          if (event.insideElementPressed && this.viewer.viewport) {
            this.viewer.viewport.applyConstraints();
          }
        }
        function onCanvasScroll(event) {
          this.viewer.raiseEvent("navigator-scroll", {
            tracker: event.eventSource,
            position: event.position,
            scroll: event.scroll,
            shift: event.shift,
            originalEvent: event.originalEvent
          });
          return false;
        }
        function _setTransformRotate(element, degrees) {
          setElementTransform(element, "rotate(" + degrees + "deg)");
        }
        function setElementTransform(element, rule) {
          element.style.webkitTransform = rule;
          element.style.mozTransform = rule;
          element.style.msTransform = rule;
          element.style.oTransform = rule;
          element.style.transform = rule;
        }
      })(OpenSeadragon);
      (function($2) {
        var I18N = {
          Errors: {
            Dzc: "Sorry, we don't support Deep Zoom Collections!",
            Dzi: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
            Xml: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
            ImageFormat: "Sorry, we don't support {0}-based Deep Zoom Images.",
            Security: "It looks like a security restriction stopped us from loading this Deep Zoom Image.",
            Status: "This space unintentionally left blank ({0} {1}).",
            OpenFailed: "Unable to open {0}: {1}"
          },
          Tooltips: {
            FullPage: "Toggle full page",
            Home: "Go home",
            ZoomIn: "Zoom in",
            ZoomOut: "Zoom out",
            NextPage: "Next page",
            PreviousPage: "Previous page",
            RotateLeft: "Rotate left",
            RotateRight: "Rotate right",
            Flip: "Flip Horizontally"
          }
        };
        $2.extend($2, {
          getString: function(prop) {
            var props = prop.split("."), string2 = null, args = arguments, container = I18N, i;
            for (i = 0; i < props.length - 1; i++) {
              container = container[props[i]] || {};
            }
            string2 = container[props[i]];
            if (typeof string2 != "string") {
              $2.console.log("Untranslated source string:", prop);
              string2 = "";
            }
            return string2.replace(/\{\d+\}/g, function(capture) {
              var i2 = parseInt(capture.match(/\d+/), 10) + 1;
              return i2 < args.length ? args[i2] : "";
            });
          },
          setString: function(prop, value) {
            var props = prop.split("."), container = I18N, i;
            for (i = 0; i < props.length - 1; i++) {
              if (!container[props[i]]) {
                container[props[i]] = {};
              }
              container = container[props[i]];
            }
            container[props[i]] = value;
          }
        });
      })(OpenSeadragon);
      (function($2) {
        $2.Point = function(x, y) {
          this.x = typeof x == "number" ? x : 0;
          this.y = typeof y == "number" ? y : 0;
        };
        $2.Point.prototype = {
          clone: function() {
            return new $2.Point(this.x, this.y);
          },
          plus: function(point) {
            return new $2.Point(
              this.x + point.x,
              this.y + point.y
            );
          },
          minus: function(point) {
            return new $2.Point(
              this.x - point.x,
              this.y - point.y
            );
          },
          times: function(factor) {
            return new $2.Point(
              this.x * factor,
              this.y * factor
            );
          },
          divide: function(factor) {
            return new $2.Point(
              this.x / factor,
              this.y / factor
            );
          },
          negate: function() {
            return new $2.Point(-this.x, -this.y);
          },
          distanceTo: function(point) {
            return Math.sqrt(
              Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2)
            );
          },
          squaredDistanceTo: function(point) {
            return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);
          },
          apply: function(func) {
            return new $2.Point(func(this.x), func(this.y));
          },
          equals: function(point) {
            return point instanceof $2.Point && this.x === point.x && this.y === point.y;
          },
          rotate: function(degrees, pivot) {
            pivot = pivot || new $2.Point(0, 0);
            var cos;
            var sin;
            if (degrees % 90 === 0) {
              var d = $2.positiveModulo(degrees, 360);
              switch (d) {
                case 0:
                  cos = 1;
                  sin = 0;
                  break;
                case 90:
                  cos = 0;
                  sin = 1;
                  break;
                case 180:
                  cos = -1;
                  sin = 0;
                  break;
                case 270:
                  cos = 0;
                  sin = -1;
                  break;
              }
            } else {
              var angle = degrees * Math.PI / 180;
              cos = Math.cos(angle);
              sin = Math.sin(angle);
            }
            var x = cos * (this.x - pivot.x) - sin * (this.y - pivot.y) + pivot.x;
            var y = sin * (this.x - pivot.x) + cos * (this.y - pivot.y) + pivot.y;
            return new $2.Point(x, y);
          },
          toString: function() {
            return "(" + Math.round(this.x * 100) / 100 + "," + Math.round(this.y * 100) / 100 + ")";
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.TileSource = function(width, height, tileSize, tileOverlap, minLevel, maxLevel) {
          var _this = this;
          var args = arguments, options, i;
          if ($2.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: args[0],
              height: args[1],
              tileSize: args[2],
              tileOverlap: args[3],
              minLevel: args[4],
              maxLevel: args[5]
            };
          }
          $2.EventSource.call(this);
          $2.extend(true, this, options);
          if (!this.success) {
            for (i = 0; i < arguments.length; i++) {
              if ($2.isFunction(arguments[i])) {
                this.success = arguments[i];
                break;
              }
            }
          }
          if (this.success) {
            this.addHandler("ready", function(event) {
              _this.success(event);
            });
          }
          if ("string" == $2.type(arguments[0])) {
            this.url = arguments[0];
          }
          if (this.url) {
            this.aspectRatio = 1;
            this.dimensions = new $2.Point(10, 10);
            this._tileWidth = 0;
            this._tileHeight = 0;
            this.tileOverlap = 0;
            this.minLevel = 0;
            this.maxLevel = 0;
            this.ready = false;
            this.getImageInfo(this.url);
          } else {
            this.ready = true;
            this.aspectRatio = options.width && options.height ? options.width / options.height : 1;
            this.dimensions = new $2.Point(options.width, options.height);
            if (this.tileSize) {
              this._tileWidth = this._tileHeight = this.tileSize;
              delete this.tileSize;
            } else {
              if (this.tileWidth) {
                this._tileWidth = this.tileWidth;
                delete this.tileWidth;
              } else {
                this._tileWidth = 0;
              }
              if (this.tileHeight) {
                this._tileHeight = this.tileHeight;
                delete this.tileHeight;
              } else {
                this._tileHeight = 0;
              }
            }
            this.tileOverlap = options.tileOverlap ? options.tileOverlap : 0;
            this.minLevel = options.minLevel ? options.minLevel : 0;
            this.maxLevel = void 0 !== options.maxLevel && null !== options.maxLevel ? options.maxLevel : options.width && options.height ? Math.ceil(
              Math.log(Math.max(options.width, options.height)) / Math.log(2)
            ) : 0;
            if (this.success && $2.isFunction(this.success)) {
              this.success(this);
            }
          }
        };
        $2.TileSource.prototype = {
          getTileSize: function(level) {
            $2.console.error(
              "[TileSource.getTileSize] is deprecated. Use TileSource.getTileWidth() and TileSource.getTileHeight() instead"
            );
            return this._tileWidth;
          },
          getTileWidth: function(level) {
            if (!this._tileWidth) {
              return this.getTileSize(level);
            }
            return this._tileWidth;
          },
          getTileHeight: function(level) {
            if (!this._tileHeight) {
              return this.getTileSize(level);
            }
            return this._tileHeight;
          },
          getLevelScale: function(level) {
            var levelScaleCache = {}, i;
            for (i = 0; i <= this.maxLevel; i++) {
              levelScaleCache[i] = 1 / Math.pow(2, this.maxLevel - i);
            }
            this.getLevelScale = function(_level) {
              return levelScaleCache[_level];
            };
            return this.getLevelScale(level);
          },
          getNumTiles: function(level) {
            var scale = this.getLevelScale(level), x = Math.ceil(scale * this.dimensions.x / this.getTileWidth(level)), y = Math.ceil(scale * this.dimensions.y / this.getTileHeight(level));
            return new $2.Point(x, y);
          },
          getPixelRatio: function(level) {
            var imageSizeScaled = this.dimensions.times(this.getLevelScale(level)), rx = 1 / imageSizeScaled.x, ry = 1 / imageSizeScaled.y;
            return new $2.Point(rx, ry);
          },
          getClosestLevel: function() {
            var i, tiles;
            for (i = this.minLevel + 1; i <= this.maxLevel; i++) {
              tiles = this.getNumTiles(i);
              if (tiles.x > 1 || tiles.y > 1) {
                break;
              }
            }
            return i - 1;
          },
          getTileAtPoint: function(level, point) {
            var validPoint = point.x >= 0 && point.x <= 1 && point.y >= 0 && point.y <= 1 / this.aspectRatio;
            $2.console.assert(validPoint, "[TileSource.getTileAtPoint] must be called with a valid point.");
            var widthScaled = this.dimensions.x * this.getLevelScale(level);
            var pixelX = point.x * widthScaled;
            var pixelY = point.y * widthScaled;
            var x = Math.floor(pixelX / this.getTileWidth(level));
            var y = Math.floor(pixelY / this.getTileHeight(level));
            if (point.x >= 1) {
              x = this.getNumTiles(level).x - 1;
            }
            var EPSILON = 1e-15;
            if (point.y >= 1 / this.aspectRatio - EPSILON) {
              y = this.getNumTiles(level).y - 1;
            }
            return new $2.Point(x, y);
          },
          getTileBounds: function(level, x, y, isSource) {
            var dimensionsScaled = this.dimensions.times(this.getLevelScale(level)), tileWidth = this.getTileWidth(level), tileHeight = this.getTileHeight(level), px = x === 0 ? 0 : tileWidth * x - this.tileOverlap, py = y === 0 ? 0 : tileHeight * y - this.tileOverlap, sx = tileWidth + (x === 0 ? 1 : 2) * this.tileOverlap, sy = tileHeight + (y === 0 ? 1 : 2) * this.tileOverlap, scale = 1 / dimensionsScaled.x;
            sx = Math.min(sx, dimensionsScaled.x - px);
            sy = Math.min(sy, dimensionsScaled.y - py);
            if (isSource) {
              return new $2.Rect(0, 0, sx, sy);
            }
            return new $2.Rect(px * scale, py * scale, sx * scale, sy * scale);
          },
          getImageInfo: function(url) {
            var _this = this, callbackName, callback, readySource, options, urlParts, filename, lastDot;
            if (url) {
              urlParts = url.split("/");
              filename = urlParts[urlParts.length - 1];
              lastDot = filename.lastIndexOf(".");
              if (lastDot > -1) {
                urlParts[urlParts.length - 1] = filename.slice(0, lastDot);
              }
            }
            callback = function(data) {
              if (typeof data === "string") {
                data = $2.parseXml(data);
              }
              var $TileSource = $2.TileSource.determineType(_this, data, url);
              if (!$TileSource) {
                _this.raiseEvent("open-failed", { message: "Unable to load TileSource", source: url });
                return;
              }
              options = $TileSource.prototype.configure.apply(_this, [data, url]);
              if (options.ajaxWithCredentials === void 0) {
                options.ajaxWithCredentials = _this.ajaxWithCredentials;
              }
              readySource = new $TileSource(options);
              _this.ready = true;
              _this.raiseEvent("ready", { tileSource: readySource });
            };
            if (url.match(/\.js$/)) {
              callbackName = url.split("/").pop().replace(".js", "");
              $2.jsonp({
                url,
                async: false,
                callbackName,
                callback
              });
            } else {
              $2.makeAjaxRequest({
                url,
                withCredentials: this.ajaxWithCredentials,
                headers: this.ajaxHeaders,
                success: function(xhr) {
                  var data = processResponse(xhr);
                  callback(data);
                },
                error: function(xhr, exc) {
                  var msg;
                  try {
                    msg = "HTTP " + xhr.status + " attempting to load TileSource";
                  } catch (e) {
                    var formattedExc;
                    if (typeof exc == "undefined" || !exc.toString) {
                      formattedExc = "Unknown error";
                    } else {
                      formattedExc = exc.toString();
                    }
                    msg = formattedExc + " attempting to load TileSource";
                  }
                  _this.raiseEvent("open-failed", {
                    message: msg,
                    source: url
                  });
                }
              });
            }
          },
          supports: function(data, url) {
            return false;
          },
          configure: function(data, url) {
            throw new Error("Method not implemented.");
          },
          getTileUrl: function(level, x, y) {
            throw new Error("Method not implemented.");
          },
          getTileAjaxHeaders: function(level, x, y) {
            return {};
          },
          tileExists: function(level, x, y) {
            var numTiles = this.getNumTiles(level);
            return level >= this.minLevel && level <= this.maxLevel && x >= 0 && y >= 0 && x < numTiles.x && y < numTiles.y;
          }
        };
        $2.extend(true, $2.TileSource.prototype, $2.EventSource.prototype);
        function processResponse(xhr) {
          var responseText = xhr.responseText, status = xhr.status, statusText, data;
          if (!xhr) {
            throw new Error($2.getString("Errors.Security"));
          } else if (xhr.status !== 200 && xhr.status !== 0) {
            status = xhr.status;
            statusText = status == 404 ? "Not Found" : xhr.statusText;
            throw new Error($2.getString("Errors.Status", status, statusText));
          }
          if (responseText.match(/\s*<.*/)) {
            try {
              data = xhr.responseXML && xhr.responseXML.documentElement ? xhr.responseXML : $2.parseXml(responseText);
            } catch (e) {
              data = xhr.responseText;
            }
          } else if (responseText.match(/\s*[\{\[].*/)) {
            try {
              data = $2.parseJSON(responseText);
            } catch (e) {
              data = responseText;
            }
          } else {
            data = responseText;
          }
          return data;
        }
        $2.TileSource.determineType = function(tileSource, data, url) {
          var property;
          for (property in OpenSeadragon) {
            if (property.match(/.+TileSource$/) && $2.isFunction(OpenSeadragon[property]) && $2.isFunction(OpenSeadragon[property].prototype.supports) && OpenSeadragon[property].prototype.supports.call(tileSource, data, url)) {
              return OpenSeadragon[property];
            }
          }
          $2.console.error("No TileSource was able to open %s %s", url, data);
        };
      })(OpenSeadragon);
      (function($2) {
        $2.DziTileSource = function(width, height, tileSize, tileOverlap, tilesUrl, fileFormat, displayRects, minLevel, maxLevel) {
          var i, rect, level, options;
          if ($2.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: arguments[0],
              height: arguments[1],
              tileSize: arguments[2],
              tileOverlap: arguments[3],
              tilesUrl: arguments[4],
              fileFormat: arguments[5],
              displayRects: arguments[6],
              minLevel: arguments[7],
              maxLevel: arguments[8]
            };
          }
          this._levelRects = {};
          this.tilesUrl = options.tilesUrl;
          this.fileFormat = options.fileFormat;
          this.displayRects = options.displayRects;
          if (this.displayRects) {
            for (i = this.displayRects.length - 1; i >= 0; i--) {
              rect = this.displayRects[i];
              for (level = rect.minLevel; level <= rect.maxLevel; level++) {
                if (!this._levelRects[level]) {
                  this._levelRects[level] = [];
                }
                this._levelRects[level].push(rect);
              }
            }
          }
          $2.TileSource.apply(this, [options]);
        };
        $2.extend($2.DziTileSource.prototype, $2.TileSource.prototype, {
          supports: function(data, url) {
            var ns;
            if (data.Image) {
              ns = data.Image.xmlns;
            } else if (data.documentElement) {
              if ("Image" == data.documentElement.localName || "Image" == data.documentElement.tagName) {
                ns = data.documentElement.namespaceURI;
              }
            }
            ns = (ns || "").toLowerCase();
            return ns.indexOf("schemas.microsoft.com/deepzoom/2008") !== -1 || ns.indexOf("schemas.microsoft.com/deepzoom/2009") !== -1;
          },
          configure: function(data, url) {
            var options;
            if (!$2.isPlainObject(data)) {
              options = configureFromXML(this, data);
            } else {
              options = configureFromObject(this, data);
            }
            if (url && !options.tilesUrl) {
              options.tilesUrl = url.replace(
                /([^\/]+?)(\.(dzi|xml|js)?(\?[^\/]*)?)?\/?$/,
                "$1_files/"
              );
              if (url.search(/\.(dzi|xml|js)\?/) != -1) {
                options.queryParams = url.match(/\?.*/);
              } else {
                options.queryParams = "";
              }
            }
            return options;
          },
          getTileUrl: function(level, x, y) {
            return [this.tilesUrl, level, "/", x, "_", y, ".", this.fileFormat, this.queryParams].join("");
          },
          tileExists: function(level, x, y) {
            var rects = this._levelRects[level], rect, scale, xMin, yMin, xMax, yMax, i;
            if (this.minLevel && level < this.minLevel || this.maxLevel && level > this.maxLevel) {
              return false;
            }
            if (!rects || !rects.length) {
              return true;
            }
            for (i = rects.length - 1; i >= 0; i--) {
              rect = rects[i];
              if (level < rect.minLevel || level > rect.maxLevel) {
                continue;
              }
              scale = this.getLevelScale(level);
              xMin = rect.x * scale;
              yMin = rect.y * scale;
              xMax = xMin + rect.width * scale;
              yMax = yMin + rect.height * scale;
              xMin = Math.floor(xMin / this._tileWidth);
              yMin = Math.floor(yMin / this._tileWidth);
              xMax = Math.ceil(xMax / this._tileWidth);
              yMax = Math.ceil(yMax / this._tileWidth);
              if (xMin <= x && x < xMax && yMin <= y && y < yMax) {
                return true;
              }
            }
            return false;
          }
        });
        function configureFromXML(tileSource, xmlDoc) {
          if (!xmlDoc || !xmlDoc.documentElement) {
            throw new Error($2.getString("Errors.Xml"));
          }
          var root2 = xmlDoc.documentElement, rootName = root2.localName || root2.tagName, ns = xmlDoc.documentElement.namespaceURI, configuration = null, displayRects = [], dispRectNodes, dispRectNode, rectNode, sizeNode, i;
          if (rootName == "Image") {
            try {
              sizeNode = root2.getElementsByTagName("Size")[0];
              if (sizeNode === void 0) {
                sizeNode = root2.getElementsByTagNameNS(ns, "Size")[0];
              }
              configuration = {
                Image: {
                  xmlns: "http://schemas.microsoft.com/deepzoom/2008",
                  Url: root2.getAttribute("Url"),
                  Format: root2.getAttribute("Format"),
                  DisplayRect: null,
                  Overlap: parseInt(root2.getAttribute("Overlap"), 10),
                  TileSize: parseInt(root2.getAttribute("TileSize"), 10),
                  Size: {
                    Height: parseInt(sizeNode.getAttribute("Height"), 10),
                    Width: parseInt(sizeNode.getAttribute("Width"), 10)
                  }
                }
              };
              if (!$2.imageFormatSupported(configuration.Image.Format)) {
                throw new Error(
                  $2.getString("Errors.ImageFormat", configuration.Image.Format.toUpperCase())
                );
              }
              dispRectNodes = root2.getElementsByTagName("DisplayRect");
              if (dispRectNodes === void 0) {
                dispRectNodes = root2.getElementsByTagNameNS(ns, "DisplayRect")[0];
              }
              for (i = 0; i < dispRectNodes.length; i++) {
                dispRectNode = dispRectNodes[i];
                rectNode = dispRectNode.getElementsByTagName("Rect")[0];
                if (rectNode === void 0) {
                  rectNode = dispRectNode.getElementsByTagNameNS(ns, "Rect")[0];
                }
                displayRects.push({
                  Rect: {
                    X: parseInt(rectNode.getAttribute("X"), 10),
                    Y: parseInt(rectNode.getAttribute("Y"), 10),
                    Width: parseInt(rectNode.getAttribute("Width"), 10),
                    Height: parseInt(rectNode.getAttribute("Height"), 10),
                    MinLevel: parseInt(dispRectNode.getAttribute("MinLevel"), 10),
                    MaxLevel: parseInt(dispRectNode.getAttribute("MaxLevel"), 10)
                  }
                });
              }
              if (displayRects.length) {
                configuration.Image.DisplayRect = displayRects;
              }
              return configureFromObject(tileSource, configuration);
            } catch (e) {
              throw e instanceof Error ? e : new Error($2.getString("Errors.Dzi"));
            }
          } else if (rootName == "Collection") {
            throw new Error($2.getString("Errors.Dzc"));
          } else if (rootName == "Error") {
            var messageNode = root2.getElementsByTagName("Message")[0];
            var message = messageNode.firstChild.nodeValue;
            throw new Error(message);
          }
          throw new Error($2.getString("Errors.Dzi"));
        }
        function configureFromObject(tileSource, configuration) {
          var imageData = configuration.Image, tilesUrl = imageData.Url, fileFormat = imageData.Format, sizeData = imageData.Size, dispRectData = imageData.DisplayRect || [], width = parseInt(sizeData.Width, 10), height = parseInt(sizeData.Height, 10), tileSize = parseInt(imageData.TileSize, 10), tileOverlap = parseInt(imageData.Overlap, 10), displayRects = [], rectData, i;
          for (i = 0; i < dispRectData.length; i++) {
            rectData = dispRectData[i].Rect;
            displayRects.push(new $2.DisplayRect(
              parseInt(rectData.X, 10),
              parseInt(rectData.Y, 10),
              parseInt(rectData.Width, 10),
              parseInt(rectData.Height, 10),
              parseInt(rectData.MinLevel, 10),
              parseInt(rectData.MaxLevel, 10)
            ));
          }
          return $2.extend(true, {
            width,
            height,
            tileSize,
            tileOverlap,
            minLevel: null,
            maxLevel: null,
            tilesUrl,
            fileFormat,
            displayRects
          }, configuration);
        }
      })(OpenSeadragon);
      (function($2) {
        $2.IIIFTileSource = function(options) {
          $2.extend(true, this, options);
          if (!(this.height && this.width && this["@id"])) {
            throw new Error("IIIF required parameters not provided.");
          }
          options.tileSizePerScaleFactor = {};
          this.tileFormat = this.tileFormat || "jpg";
          this.version = options.version;
          if (this.tile_width && this.tile_height) {
            options.tileWidth = this.tile_width;
            options.tileHeight = this.tile_height;
          } else if (this.tile_width) {
            options.tileSize = this.tile_width;
          } else if (this.tile_height) {
            options.tileSize = this.tile_height;
          } else if (this.tiles) {
            if (this.tiles.length == 1) {
              options.tileWidth = this.tiles[0].width;
              options.tileHeight = this.tiles[0].height || this.tiles[0].width;
              this.scale_factors = this.tiles[0].scaleFactors;
            } else {
              this.scale_factors = [];
              for (var t = 0; t < this.tiles.length; t++) {
                for (var sf = 0; sf < this.tiles[t].scaleFactors.length; sf++) {
                  var scaleFactor = this.tiles[t].scaleFactors[sf];
                  this.scale_factors.push(scaleFactor);
                  options.tileSizePerScaleFactor[scaleFactor] = {
                    width: this.tiles[t].width,
                    height: this.tiles[t].height || this.tiles[t].width
                  };
                }
              }
            }
          } else if (canBeTiled(options)) {
            var shortDim = Math.min(this.height, this.width), tileOptions = [256, 512, 1024], smallerTiles = [];
            for (var c = 0; c < tileOptions.length; c++) {
              if (tileOptions[c] <= shortDim) {
                smallerTiles.push(tileOptions[c]);
              }
            }
            if (smallerTiles.length > 0) {
              options.tileSize = Math.max.apply(null, smallerTiles);
            } else {
              options.tileSize = shortDim;
            }
          } else if (this.sizes && this.sizes.length > 0) {
            this.emulateLegacyImagePyramid = true;
            options.levels = constructLevels(this);
            $2.extend(true, options, {
              width: options.levels[options.levels.length - 1].width,
              height: options.levels[options.levels.length - 1].height,
              tileSize: Math.max(options.height, options.width),
              tileOverlap: 0,
              minLevel: 0,
              maxLevel: options.levels.length - 1
            });
            this.levels = options.levels;
          } else {
            $2.console.error("Nothing in the info.json to construct image pyramids from");
          }
          if (!options.maxLevel && !this.emulateLegacyImagePyramid) {
            if (!this.scale_factors) {
              options.maxLevel = Number(Math.ceil(Math.log(Math.max(this.width, this.height), 2)));
            } else {
              var maxScaleFactor = Math.max.apply(null, this.scale_factors);
              options.maxLevel = Math.round(Math.log(maxScaleFactor) * Math.LOG2E);
            }
          }
          $2.TileSource.apply(this, [options]);
        };
        $2.extend($2.IIIFTileSource.prototype, $2.TileSource.prototype, {
          supports: function(data, url) {
            if (data.protocol && data.protocol == "http://iiif.io/api/image") {
              return true;
            } else if (data["@context"] && (data["@context"] == "http://library.stanford.edu/iiif/image-api/1.1/context.json" || data["@context"] == "http://iiif.io/api/image/1/context.json")) {
              return true;
            } else if (data.profile && data.profile.indexOf("http://library.stanford.edu/iiif/image-api/compliance.html") === 0) {
              return true;
            } else if (data.identifier && data.width && data.height) {
              return true;
            } else if (data.documentElement && "info" == data.documentElement.tagName && "http://library.stanford.edu/iiif/image-api/ns/" == data.documentElement.namespaceURI) {
              return true;
            } else {
              return false;
            }
          },
          configure: function(data, url) {
            if (!$2.isPlainObject(data)) {
              var options = configureFromXml10(data);
              options["@context"] = "http://iiif.io/api/image/1.0/context.json";
              options["@id"] = url.replace("/info.xml", "");
              options.version = 1;
              return options;
            } else {
              if (!data["@context"]) {
                data["@context"] = "http://iiif.io/api/image/1.0/context.json";
                data["@id"] = url.replace("/info.json", "");
                data.version = 1;
              } else {
                var context = data["@context"];
                if (Array.isArray(context)) {
                  for (var i = 0; i < context.length; i++) {
                    if (typeof context[i] === "string" && (/^http:\/\/iiif\.io\/api\/image\/[1-3]\/context\.json$/.test(context[i]) || context[i] === "http://library.stanford.edu/iiif/image-api/1.1/context.json")) {
                      context = context[i];
                      break;
                    }
                  }
                }
                switch (context) {
                  case "http://iiif.io/api/image/1/context.json":
                  case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
                    data.version = 1;
                    break;
                  case "http://iiif.io/api/image/2/context.json":
                    data.version = 2;
                    break;
                  case "http://iiif.io/api/image/3/context.json":
                    data.version = 3;
                    break;
                  default:
                    $2.console.error("Data has a @context property which contains no known IIIF context URI.");
                }
              }
              if (!data["@id"] && data["id"]) {
                data["@id"] = data["id"];
              }
              if (data.preferredFormats) {
                for (var f = 0; f < data.preferredFormats.length; f++) {
                  if (OpenSeadragon.imageFormatSupported(data.preferredFormats[f])) {
                    data.tileFormat = data.preferredFormats[f];
                    break;
                  }
                }
              }
              return data;
            }
          },
          getTileWidth: function(level) {
            if (this.emulateLegacyImagePyramid) {
              return $2.TileSource.prototype.getTileWidth.call(this, level);
            }
            var scaleFactor = Math.pow(2, this.maxLevel - level);
            if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
              return this.tileSizePerScaleFactor[scaleFactor].width;
            }
            return this._tileWidth;
          },
          getTileHeight: function(level) {
            if (this.emulateLegacyImagePyramid) {
              return $2.TileSource.prototype.getTileHeight.call(this, level);
            }
            var scaleFactor = Math.pow(2, this.maxLevel - level);
            if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
              return this.tileSizePerScaleFactor[scaleFactor].height;
            }
            return this._tileHeight;
          },
          getLevelScale: function(level) {
            if (this.emulateLegacyImagePyramid) {
              var levelScale = NaN;
              if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
                levelScale = this.levels[level].width / this.levels[this.maxLevel].width;
              }
              return levelScale;
            }
            return $2.TileSource.prototype.getLevelScale.call(this, level);
          },
          getNumTiles: function(level) {
            if (this.emulateLegacyImagePyramid) {
              var scale = this.getLevelScale(level);
              if (scale) {
                return new $2.Point(1, 1);
              } else {
                return new $2.Point(0, 0);
              }
            }
            return $2.TileSource.prototype.getNumTiles.call(this, level);
          },
          getTileAtPoint: function(level, point) {
            if (this.emulateLegacyImagePyramid) {
              return new $2.Point(0, 0);
            }
            return $2.TileSource.prototype.getTileAtPoint.call(this, level, point);
          },
          getTileUrl: function(level, x, y) {
            if (this.emulateLegacyImagePyramid) {
              var url = null;
              if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
                url = this.levels[level].url;
              }
              return url;
            }
            var IIIF_ROTATION = "0", scale = Math.pow(0.5, this.maxLevel - level), levelWidth = Math.ceil(this.width * scale), levelHeight = Math.ceil(this.height * scale), tileWidth, tileHeight, iiifTileSizeWidth, iiifTileSizeHeight, iiifRegion, iiifTileX, iiifTileY, iiifTileW, iiifTileH, iiifSize, iiifSizeW, iiifSizeH, iiifQuality, uri;
            tileWidth = this.getTileWidth(level);
            tileHeight = this.getTileHeight(level);
            iiifTileSizeWidth = Math.ceil(tileWidth / scale);
            iiifTileSizeHeight = Math.ceil(tileHeight / scale);
            if (this.version === 1) {
              iiifQuality = "native." + this.tileFormat;
            } else {
              iiifQuality = "default." + this.tileFormat;
            }
            if (levelWidth < tileWidth && levelHeight < tileHeight) {
              if (this.version === 2 && levelWidth === this.width) {
                iiifSize = "max";
              } else if (this.version === 3 && levelWidth === this.width && levelHeight === this.height) {
                iiifSize = "max";
              } else if (this.version === 3) {
                iiifSize = levelWidth + "," + levelHeight;
              } else {
                iiifSize = levelWidth + ",";
              }
              iiifRegion = "full";
            } else {
              iiifTileX = x * iiifTileSizeWidth;
              iiifTileY = y * iiifTileSizeHeight;
              iiifTileW = Math.min(iiifTileSizeWidth, this.width - iiifTileX);
              iiifTileH = Math.min(iiifTileSizeHeight, this.height - iiifTileY);
              if (x === 0 && y === 0 && iiifTileW === this.width && iiifTileH === this.height) {
                iiifRegion = "full";
              } else {
                iiifRegion = [iiifTileX, iiifTileY, iiifTileW, iiifTileH].join(",");
              }
              iiifSizeW = Math.ceil(iiifTileW * scale);
              iiifSizeH = Math.ceil(iiifTileH * scale);
              if (this.version === 2 && iiifSizeW === this.width) {
                iiifSize = "max";
              } else if (this.version === 3 && iiifSizeW === this.width && iiifSizeH === this.height) {
                iiifSize = "max";
              } else if (this.version === 3) {
                iiifSize = iiifSizeW + "," + iiifSizeH;
              } else {
                iiifSize = iiifSizeW + ",";
              }
            }
            uri = [this["@id"], iiifRegion, iiifSize, IIIF_ROTATION, iiifQuality].join("/");
            return uri;
          },
          __testonly__: {
            canBeTiled,
            constructLevels
          }
        });
        function canBeTiled(options) {
          var level0Profiles = [
            "http://library.stanford.edu/iiif/image-api/compliance.html#level0",
            "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0",
            "http://iiif.io/api/image/2/level0.json",
            "level0",
            "https://iiif.io/api/image/3/level0.json"
          ];
          var profileLevel = Array.isArray(options.profile) ? options.profile[0] : options.profile;
          var isLevel0 = level0Profiles.indexOf(profileLevel) !== -1;
          var hasCanoncicalSizeFeature = false;
          if (options.version === 2 && options.profile.length > 1 && options.profile[1].supports) {
            hasCanoncicalSizeFeature = options.profile[1].supports.indexOf("sizeByW") !== -1;
          }
          if (options.version === 3 && options.extraFeatures) {
            hasCanoncicalSizeFeature = options.extraFeatures.indexOf("sizeByWh") !== -1;
          }
          return !isLevel0 || hasCanoncicalSizeFeature;
        }
        function constructLevels(options) {
          var levels = [];
          for (var i = 0; i < options.sizes.length; i++) {
            levels.push({
              url: options["@id"] + "/full/" + options.sizes[i].width + "," + (options.version === 3 ? options.sizes[i].height : "") + "/0/default." + options.tileFormat,
              width: options.sizes[i].width,
              height: options.sizes[i].height
            });
          }
          return levels.sort(function(a, b) {
            return a.width - b.width;
          });
        }
        function configureFromXml10(xmlDoc) {
          if (!xmlDoc || !xmlDoc.documentElement) {
            throw new Error($2.getString("Errors.Xml"));
          }
          var root2 = xmlDoc.documentElement, rootName = root2.tagName, configuration = null;
          if (rootName == "info") {
            try {
              configuration = {};
              parseXML10(root2, configuration);
              return configuration;
            } catch (e) {
              throw e instanceof Error ? e : new Error($2.getString("Errors.IIIF"));
            }
          }
          throw new Error($2.getString("Errors.IIIF"));
        }
        function parseXML10(node, configuration, property) {
          var i, value;
          if (node.nodeType == 3 && property) {
            value = node.nodeValue.trim();
            if (value.match(/^\d*$/)) {
              value = Number(value);
            }
            if (!configuration[property]) {
              configuration[property] = value;
            } else {
              if (!$2.isArray(configuration[property])) {
                configuration[property] = [configuration[property]];
              }
              configuration[property].push(value);
            }
          } else if (node.nodeType == 1) {
            for (i = 0; i < node.childNodes.length; i++) {
              parseXML10(node.childNodes[i], configuration, node.nodeName);
            }
          }
        }
      })(OpenSeadragon);
      (function($2) {
        $2.OsmTileSource = function(width, height, tileSize, tileOverlap, tilesUrl) {
          var options;
          if ($2.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: arguments[0],
              height: arguments[1],
              tileSize: arguments[2],
              tileOverlap: arguments[3],
              tilesUrl: arguments[4]
            };
          }
          if (!options.width || !options.height) {
            options.width = 65572864;
            options.height = 65572864;
          }
          if (!options.tileSize) {
            options.tileSize = 256;
            options.tileOverlap = 0;
          }
          if (!options.tilesUrl) {
            options.tilesUrl = "http://tile.openstreetmap.org/";
          }
          options.minLevel = 8;
          $2.TileSource.apply(this, [options]);
        };
        $2.extend($2.OsmTileSource.prototype, $2.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && "openstreetmaps" == data.type;
          },
          configure: function(data, url) {
            return data;
          },
          getTileUrl: function(level, x, y) {
            return this.tilesUrl + (level - 8) + "/" + x + "/" + y + ".png";
          }
        });
      })(OpenSeadragon);
      (function($2) {
        $2.TmsTileSource = function(width, height, tileSize, tileOverlap, tilesUrl) {
          var options;
          if ($2.isPlainObject(width)) {
            options = width;
          } else {
            options = {
              width: arguments[0],
              height: arguments[1],
              tileSize: arguments[2],
              tileOverlap: arguments[3],
              tilesUrl: arguments[4]
            };
          }
          var bufferedWidth = Math.ceil(options.width / 256) * 256, bufferedHeight = Math.ceil(options.height / 256) * 256, max;
          if (bufferedWidth > bufferedHeight) {
            max = bufferedWidth / 256;
          } else {
            max = bufferedHeight / 256;
          }
          options.maxLevel = Math.ceil(Math.log(max) / Math.log(2)) - 1;
          options.tileSize = 256;
          options.width = bufferedWidth;
          options.height = bufferedHeight;
          $2.TileSource.apply(this, [options]);
        };
        $2.extend($2.TmsTileSource.prototype, $2.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && "tiledmapservice" == data.type;
          },
          configure: function(data, url) {
            return data;
          },
          getTileUrl: function(level, x, y) {
            var yTiles = this.getNumTiles(level).y - 1;
            return this.tilesUrl + level + "/" + x + "/" + (yTiles - y) + ".png";
          }
        });
      })(OpenSeadragon);
      (function($2) {
        $2.ZoomifyTileSource = function(options) {
          options.tileSize = 256;
          var currentImageSize = {
            x: options.width,
            y: options.height
          };
          options.imageSizes = [{
            x: options.width,
            y: options.height
          }];
          options.gridSize = [this._getGridSize(options.width, options.height, options.tileSize)];
          while (parseInt(currentImageSize.x, 10) > options.tileSize || parseInt(currentImageSize.y, 10) > options.tileSize) {
            currentImageSize.x = Math.floor(currentImageSize.x / 2);
            currentImageSize.y = Math.floor(currentImageSize.y / 2);
            options.imageSizes.push({
              x: currentImageSize.x,
              y: currentImageSize.y
            });
            options.gridSize.push(this._getGridSize(currentImageSize.x, currentImageSize.y, options.tileSize));
          }
          options.imageSizes.reverse();
          options.gridSize.reverse();
          options.minLevel = 0;
          options.maxLevel = options.gridSize.length - 1;
          OpenSeadragon.TileSource.apply(this, [options]);
        };
        $2.extend($2.ZoomifyTileSource.prototype, $2.TileSource.prototype, {
          _getGridSize: function(width, height, tileSize) {
            return {
              x: Math.ceil(width / tileSize),
              y: Math.ceil(height / tileSize)
            };
          },
          _calculateAbsoluteTileNumber: function(level, x, y) {
            var num = 0;
            var size = {};
            for (var z = 0; z < level; z++) {
              size = this.gridSize[z];
              num += size.x * size.y;
            }
            size = this.gridSize[level];
            num += size.x * y + x;
            return num;
          },
          supports: function(data, url) {
            return data.type && "zoomifytileservice" == data.type;
          },
          configure: function(data, url) {
            return data;
          },
          getTileUrl: function(level, x, y) {
            var result2 = 0;
            var num = this._calculateAbsoluteTileNumber(level, x, y);
            result2 = Math.floor(num / 256);
            return this.tilesUrl + "TileGroup" + result2 + "/" + level + "-" + x + "-" + y + ".jpg";
          }
        });
      })(OpenSeadragon);
      (function($2) {
        $2.LegacyTileSource = function(levels) {
          var options, width, height;
          if ($2.isArray(levels)) {
            options = {
              type: "legacy-image-pyramid",
              levels
            };
          }
          options.levels = filterFiles(options.levels);
          if (options.levels.length > 0) {
            width = options.levels[options.levels.length - 1].width;
            height = options.levels[options.levels.length - 1].height;
          } else {
            width = 0;
            height = 0;
            $2.console.error("No supported image formats found");
          }
          $2.extend(true, options, {
            width,
            height,
            tileSize: Math.max(height, width),
            tileOverlap: 0,
            minLevel: 0,
            maxLevel: options.levels.length > 0 ? options.levels.length - 1 : 0
          });
          $2.TileSource.apply(this, [options]);
          this.levels = options.levels;
        };
        $2.extend($2.LegacyTileSource.prototype, $2.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && "legacy-image-pyramid" == data.type || data.documentElement && "legacy-image-pyramid" == data.documentElement.getAttribute("type");
          },
          configure: function(configuration, dataUrl) {
            var options;
            if (!$2.isPlainObject(configuration)) {
              options = configureFromXML(this, configuration);
            } else {
              options = configureFromObject(this, configuration);
            }
            return options;
          },
          getLevelScale: function(level) {
            var levelScale = NaN;
            if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
              levelScale = this.levels[level].width / this.levels[this.maxLevel].width;
            }
            return levelScale;
          },
          getNumTiles: function(level) {
            var scale = this.getLevelScale(level);
            if (scale) {
              return new $2.Point(1, 1);
            } else {
              return new $2.Point(0, 0);
            }
          },
          getTileUrl: function(level, x, y) {
            var url = null;
            if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
              url = this.levels[level].url;
            }
            return url;
          }
        });
        function filterFiles(files) {
          var filtered = [], file, i;
          for (i = 0; i < files.length; i++) {
            file = files[i];
            if (file.height && file.width && file.url) {
              filtered.push({
                url: file.url,
                width: Number(file.width),
                height: Number(file.height)
              });
            } else {
              $2.console.error("Unsupported image format: %s", file.url ? file.url : "<no URL>");
            }
          }
          return filtered.sort(function(a, b) {
            return a.height - b.height;
          });
        }
        function configureFromXML(tileSource, xmlDoc) {
          if (!xmlDoc || !xmlDoc.documentElement) {
            throw new Error($2.getString("Errors.Xml"));
          }
          var root2 = xmlDoc.documentElement, rootName = root2.tagName, conf = null, levels = [], level, i;
          if (rootName == "image") {
            try {
              conf = {
                type: root2.getAttribute("type"),
                levels: []
              };
              levels = root2.getElementsByTagName("level");
              for (i = 0; i < levels.length; i++) {
                level = levels[i];
                conf.levels.push({
                  url: level.getAttribute("url"),
                  width: parseInt(level.getAttribute("width"), 10),
                  height: parseInt(level.getAttribute("height"), 10)
                });
              }
              return configureFromObject(tileSource, conf);
            } catch (e) {
              throw e instanceof Error ? e : new Error("Unknown error parsing Legacy Image Pyramid XML.");
            }
          } else if (rootName == "collection") {
            throw new Error("Legacy Image Pyramid Collections not yet supported.");
          } else if (rootName == "error") {
            throw new Error("Error: " + xmlDoc);
          }
          throw new Error("Unknown element " + rootName);
        }
        function configureFromObject(tileSource, configuration) {
          return configuration.levels;
        }
      })(OpenSeadragon);
      (function($2) {
        $2.ImageTileSource = function(options) {
          options = $2.extend({
            buildPyramid: true,
            crossOriginPolicy: false,
            ajaxWithCredentials: false,
            useCanvas: true
          }, options);
          $2.TileSource.apply(this, [options]);
        };
        $2.extend($2.ImageTileSource.prototype, $2.TileSource.prototype, {
          supports: function(data, url) {
            return data.type && data.type === "image";
          },
          configure: function(options, dataUrl) {
            return options;
          },
          getImageInfo: function(url) {
            var image = this._image = new Image();
            var _this = this;
            if (this.crossOriginPolicy) {
              image.crossOrigin = this.crossOriginPolicy;
            }
            if (this.ajaxWithCredentials) {
              image.useCredentials = this.ajaxWithCredentials;
            }
            $2.addEvent(image, "load", function() {
              _this.width = Object.prototype.hasOwnProperty.call(image, "naturalWidth") ? image.naturalWidth : image.width;
              _this.height = Object.prototype.hasOwnProperty.call(image, "naturalHeight") ? image.naturalHeight : image.height;
              _this.aspectRatio = _this.width / _this.height;
              _this.dimensions = new $2.Point(_this.width, _this.height);
              _this._tileWidth = _this.width;
              _this._tileHeight = _this.height;
              _this.tileOverlap = 0;
              _this.minLevel = 0;
              _this.levels = _this._buildLevels();
              _this.maxLevel = _this.levels.length - 1;
              _this.ready = true;
              _this.raiseEvent("ready", { tileSource: _this });
            });
            $2.addEvent(image, "error", function() {
              _this.raiseEvent("open-failed", {
                message: "Error loading image at " + url,
                source: url
              });
            });
            image.src = url;
          },
          getLevelScale: function(level) {
            var levelScale = NaN;
            if (level >= this.minLevel && level <= this.maxLevel) {
              levelScale = this.levels[level].width / this.levels[this.maxLevel].width;
            }
            return levelScale;
          },
          getNumTiles: function(level) {
            var scale = this.getLevelScale(level);
            if (scale) {
              return new $2.Point(1, 1);
            } else {
              return new $2.Point(0, 0);
            }
          },
          getTileUrl: function(level, x, y) {
            var url = null;
            if (level >= this.minLevel && level <= this.maxLevel) {
              url = this.levels[level].url;
            }
            return url;
          },
          getContext2D: function(level, x, y) {
            var context = null;
            if (level >= this.minLevel && level <= this.maxLevel) {
              context = this.levels[level].context2D;
            }
            return context;
          },
          _buildLevels: function() {
            var levels = [{
              url: this._image.src,
              width: Object.prototype.hasOwnProperty.call(this._image, "naturalWidth") ? this._image.naturalWidth : this._image.width,
              height: Object.prototype.hasOwnProperty.call(this._image, "naturalHeight") ? this._image.naturalHeight : this._image.height
            }];
            if (!this.buildPyramid || !$2.supportsCanvas || !this.useCanvas) {
              delete this._image;
              return levels;
            }
            var currentWidth = Object.prototype.hasOwnProperty.call(this._image, "naturalWidth") ? this._image.naturalWidth : this._image.width;
            var currentHeight = Object.prototype.hasOwnProperty.call(this._image, "naturalHeight") ? this._image.naturalHeight : this._image.height;
            var bigCanvas = document.createElement("canvas");
            var bigContext = bigCanvas.getContext("2d");
            bigCanvas.width = currentWidth;
            bigCanvas.height = currentHeight;
            bigContext.drawImage(this._image, 0, 0, currentWidth, currentHeight);
            levels[0].context2D = bigContext;
            delete this._image;
            if ($2.isCanvasTainted(bigCanvas)) {
              return levels;
            }
            while (currentWidth >= 2 && currentHeight >= 2) {
              currentWidth = Math.floor(currentWidth / 2);
              currentHeight = Math.floor(currentHeight / 2);
              var smallCanvas = document.createElement("canvas");
              var smallContext = smallCanvas.getContext("2d");
              smallCanvas.width = currentWidth;
              smallCanvas.height = currentHeight;
              smallContext.drawImage(bigCanvas, 0, 0, currentWidth, currentHeight);
              levels.splice(0, 0, {
                context2D: smallContext,
                width: currentWidth,
                height: currentHeight
              });
              bigCanvas = smallCanvas;
              bigContext = smallContext;
            }
            return levels;
          }
        });
      })(OpenSeadragon);
      (function($2) {
        $2.TileSourceCollection = function(tileSize, tileSources, rows, layout) {
          $2.console.error("TileSourceCollection is deprecated; use World instead");
        };
      })(OpenSeadragon);
      (function($2) {
        $2.ButtonState = {
          REST: 0,
          GROUP: 1,
          HOVER: 2,
          DOWN: 3
        };
        $2.Button = function(options) {
          var _this = this;
          $2.EventSource.call(this);
          $2.extend(true, this, {
            tooltip: null,
            srcRest: null,
            srcGroup: null,
            srcHover: null,
            srcDown: null,
            clickTimeThreshold: $2.DEFAULT_SETTINGS.clickTimeThreshold,
            clickDistThreshold: $2.DEFAULT_SETTINGS.clickDistThreshold,
            fadeDelay: 0,
            fadeLength: 2e3,
            onPress: null,
            onRelease: null,
            onClick: null,
            onEnter: null,
            onExit: null,
            onFocus: null,
            onBlur: null
          }, options);
          this.element = options.element || $2.makeNeutralElement("div");
          if (!options.element) {
            this.imgRest = $2.makeTransparentImage(this.srcRest);
            this.imgGroup = $2.makeTransparentImage(this.srcGroup);
            this.imgHover = $2.makeTransparentImage(this.srcHover);
            this.imgDown = $2.makeTransparentImage(this.srcDown);
            this.imgRest.alt = this.imgGroup.alt = this.imgHover.alt = this.imgDown.alt = this.tooltip;
            this.element.style.position = "relative";
            $2.setElementTouchActionNone(this.element);
            this.imgGroup.style.position = this.imgHover.style.position = this.imgDown.style.position = "absolute";
            this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top = "0px";
            this.imgGroup.style.left = this.imgHover.style.left = this.imgDown.style.left = "0px";
            this.imgHover.style.visibility = this.imgDown.style.visibility = "hidden";
            if ($2.Browser.vendor == $2.BROWSERS.FIREFOX && $2.Browser.version < 3) {
              this.imgGroup.style.top = this.imgHover.style.top = this.imgDown.style.top = "";
            }
            this.element.appendChild(this.imgRest);
            this.element.appendChild(this.imgGroup);
            this.element.appendChild(this.imgHover);
            this.element.appendChild(this.imgDown);
          }
          this.addHandler("press", this.onPress);
          this.addHandler("release", this.onRelease);
          this.addHandler("click", this.onClick);
          this.addHandler("enter", this.onEnter);
          this.addHandler("exit", this.onExit);
          this.addHandler("focus", this.onFocus);
          this.addHandler("blur", this.onBlur);
          this.currentState = $2.ButtonState.GROUP;
          this.fadeBeginTime = null;
          this.shouldFade = false;
          this.element.style.display = "inline-block";
          this.element.style.position = "relative";
          this.element.title = this.tooltip;
          this.tracker = new $2.MouseTracker({
            element: this.element,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            enterHandler: function(event) {
              if (event.insideElementPressed) {
                inTo(_this, $2.ButtonState.DOWN);
                _this.raiseEvent("enter", { originalEvent: event.originalEvent });
              } else if (!event.buttonDownAny) {
                inTo(_this, $2.ButtonState.HOVER);
              }
            },
            focusHandler: function(event) {
              this.enterHandler(event);
              _this.raiseEvent("focus", { originalEvent: event.originalEvent });
            },
            exitHandler: function(event) {
              outTo(_this, $2.ButtonState.GROUP);
              if (event.insideElementPressed) {
                _this.raiseEvent("exit", { originalEvent: event.originalEvent });
              }
            },
            blurHandler: function(event) {
              this.exitHandler(event);
              _this.raiseEvent("blur", { originalEvent: event.originalEvent });
            },
            pressHandler: function(event) {
              inTo(_this, $2.ButtonState.DOWN);
              _this.raiseEvent("press", { originalEvent: event.originalEvent });
            },
            releaseHandler: function(event) {
              if (event.insideElementPressed && event.insideElementReleased) {
                outTo(_this, $2.ButtonState.HOVER);
                _this.raiseEvent("release", { originalEvent: event.originalEvent });
              } else if (event.insideElementPressed) {
                outTo(_this, $2.ButtonState.GROUP);
              } else {
                inTo(_this, $2.ButtonState.HOVER);
              }
            },
            clickHandler: function(event) {
              if (event.quick) {
                _this.raiseEvent("click", { originalEvent: event.originalEvent });
              }
            },
            keyHandler: function(event) {
              if (13 === event.keyCode) {
                _this.raiseEvent("click", { originalEvent: event.originalEvent });
                _this.raiseEvent("release", { originalEvent: event.originalEvent });
                return false;
              }
              return true;
            }
          });
          outTo(this, $2.ButtonState.REST);
        };
        $2.extend($2.Button.prototype, $2.EventSource.prototype, {
          notifyGroupEnter: function() {
            inTo(this, $2.ButtonState.GROUP);
          },
          notifyGroupExit: function() {
            outTo(this, $2.ButtonState.REST);
          },
          disable: function() {
            this.notifyGroupExit();
            this.element.disabled = true;
            $2.setElementOpacity(this.element, 0.2, true);
          },
          enable: function() {
            this.element.disabled = false;
            $2.setElementOpacity(this.element, 1, true);
            this.notifyGroupEnter();
          }
        });
        function scheduleFade(button) {
          $2.requestAnimationFrame(function() {
            updateFade(button);
          });
        }
        function updateFade(button) {
          var currentTime, deltaTime, opacity;
          if (button.shouldFade) {
            currentTime = $2.now();
            deltaTime = currentTime - button.fadeBeginTime;
            opacity = 1 - deltaTime / button.fadeLength;
            opacity = Math.min(1, opacity);
            opacity = Math.max(0, opacity);
            if (button.imgGroup) {
              $2.setElementOpacity(button.imgGroup, opacity, true);
            }
            if (opacity > 0) {
              scheduleFade(button);
            }
          }
        }
        function beginFading(button) {
          button.shouldFade = true;
          button.fadeBeginTime = $2.now() + button.fadeDelay;
          window.setTimeout(function() {
            scheduleFade(button);
          }, button.fadeDelay);
        }
        function stopFading(button) {
          button.shouldFade = false;
          if (button.imgGroup) {
            $2.setElementOpacity(button.imgGroup, 1, true);
          }
        }
        function inTo(button, newState) {
          if (button.element.disabled) {
            return;
          }
          if (newState >= $2.ButtonState.GROUP && button.currentState == $2.ButtonState.REST) {
            stopFading(button);
            button.currentState = $2.ButtonState.GROUP;
          }
          if (newState >= $2.ButtonState.HOVER && button.currentState == $2.ButtonState.GROUP) {
            if (button.imgHover) {
              button.imgHover.style.visibility = "";
            }
            button.currentState = $2.ButtonState.HOVER;
          }
          if (newState >= $2.ButtonState.DOWN && button.currentState == $2.ButtonState.HOVER) {
            if (button.imgDown) {
              button.imgDown.style.visibility = "";
            }
            button.currentState = $2.ButtonState.DOWN;
          }
        }
        function outTo(button, newState) {
          if (button.element.disabled) {
            return;
          }
          if (newState <= $2.ButtonState.HOVER && button.currentState == $2.ButtonState.DOWN) {
            if (button.imgDown) {
              button.imgDown.style.visibility = "hidden";
            }
            button.currentState = $2.ButtonState.HOVER;
          }
          if (newState <= $2.ButtonState.GROUP && button.currentState == $2.ButtonState.HOVER) {
            if (button.imgHover) {
              button.imgHover.style.visibility = "hidden";
            }
            button.currentState = $2.ButtonState.GROUP;
          }
          if (newState <= $2.ButtonState.REST && button.currentState == $2.ButtonState.GROUP) {
            beginFading(button);
            button.currentState = $2.ButtonState.REST;
          }
        }
      })(OpenSeadragon);
      (function($2) {
        $2.ButtonGroup = function(options) {
          $2.extend(true, this, {
            buttons: [],
            clickTimeThreshold: $2.DEFAULT_SETTINGS.clickTimeThreshold,
            clickDistThreshold: $2.DEFAULT_SETTINGS.clickDistThreshold,
            labelText: ""
          }, options);
          var buttons = this.buttons.concat([]), _this = this, i;
          this.element = options.element || $2.makeNeutralElement("div");
          if (!options.group) {
            this.element.style.display = "inline-block";
            for (i = 0; i < buttons.length; i++) {
              this.element.appendChild(buttons[i].element);
            }
          }
          $2.setElementTouchActionNone(this.element);
          this.tracker = new $2.MouseTracker({
            element: this.element,
            clickTimeThreshold: this.clickTimeThreshold,
            clickDistThreshold: this.clickDistThreshold,
            enterHandler: function(event) {
              var i2;
              for (i2 = 0; i2 < _this.buttons.length; i2++) {
                _this.buttons[i2].notifyGroupEnter();
              }
            },
            exitHandler: function(event) {
              var i2;
              if (!event.insideElementPressed) {
                for (i2 = 0; i2 < _this.buttons.length; i2++) {
                  _this.buttons[i2].notifyGroupExit();
                }
              }
            }
          });
        };
        $2.ButtonGroup.prototype = {
          emulateEnter: function() {
            this.tracker.enterHandler({ eventSource: this.tracker });
          },
          emulateExit: function() {
            this.tracker.exitHandler({ eventSource: this.tracker });
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.Rect = function(x, y, width, height, degrees) {
          this.x = typeof x === "number" ? x : 0;
          this.y = typeof y === "number" ? y : 0;
          this.width = typeof width === "number" ? width : 0;
          this.height = typeof height === "number" ? height : 0;
          this.degrees = typeof degrees === "number" ? degrees : 0;
          this.degrees = $2.positiveModulo(this.degrees, 360);
          var newTopLeft, newWidth;
          if (this.degrees >= 270) {
            newTopLeft = this.getTopRight();
            this.x = newTopLeft.x;
            this.y = newTopLeft.y;
            newWidth = this.height;
            this.height = this.width;
            this.width = newWidth;
            this.degrees -= 270;
          } else if (this.degrees >= 180) {
            newTopLeft = this.getBottomRight();
            this.x = newTopLeft.x;
            this.y = newTopLeft.y;
            this.degrees -= 180;
          } else if (this.degrees >= 90) {
            newTopLeft = this.getBottomLeft();
            this.x = newTopLeft.x;
            this.y = newTopLeft.y;
            newWidth = this.height;
            this.height = this.width;
            this.width = newWidth;
            this.degrees -= 90;
          }
        };
        $2.Rect.fromSummits = function(topLeft, topRight, bottomLeft) {
          var width = topLeft.distanceTo(topRight);
          var height = topLeft.distanceTo(bottomLeft);
          var diff = topRight.minus(topLeft);
          var radians = Math.atan(diff.y / diff.x);
          if (diff.x < 0) {
            radians += Math.PI;
          } else if (diff.y < 0) {
            radians += 2 * Math.PI;
          }
          return new $2.Rect(
            topLeft.x,
            topLeft.y,
            width,
            height,
            radians / Math.PI * 180
          );
        };
        $2.Rect.prototype = {
          clone: function() {
            return new $2.Rect(
              this.x,
              this.y,
              this.width,
              this.height,
              this.degrees
            );
          },
          getAspectRatio: function() {
            return this.width / this.height;
          },
          getTopLeft: function() {
            return new $2.Point(
              this.x,
              this.y
            );
          },
          getBottomRight: function() {
            return new $2.Point(this.x + this.width, this.y + this.height).rotate(this.degrees, this.getTopLeft());
          },
          getTopRight: function() {
            return new $2.Point(this.x + this.width, this.y).rotate(this.degrees, this.getTopLeft());
          },
          getBottomLeft: function() {
            return new $2.Point(this.x, this.y + this.height).rotate(this.degrees, this.getTopLeft());
          },
          getCenter: function() {
            return new $2.Point(
              this.x + this.width / 2,
              this.y + this.height / 2
            ).rotate(this.degrees, this.getTopLeft());
          },
          getSize: function() {
            return new $2.Point(this.width, this.height);
          },
          equals: function(other) {
            return other instanceof $2.Rect && this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height && this.degrees === other.degrees;
          },
          times: function(factor) {
            return new $2.Rect(
              this.x * factor,
              this.y * factor,
              this.width * factor,
              this.height * factor,
              this.degrees
            );
          },
          translate: function(delta) {
            return new $2.Rect(
              this.x + delta.x,
              this.y + delta.y,
              this.width,
              this.height,
              this.degrees
            );
          },
          union: function(rect) {
            var thisBoundingBox = this.getBoundingBox();
            var otherBoundingBox = rect.getBoundingBox();
            var left = Math.min(thisBoundingBox.x, otherBoundingBox.x);
            var top = Math.min(thisBoundingBox.y, otherBoundingBox.y);
            var right = Math.max(
              thisBoundingBox.x + thisBoundingBox.width,
              otherBoundingBox.x + otherBoundingBox.width
            );
            var bottom = Math.max(
              thisBoundingBox.y + thisBoundingBox.height,
              otherBoundingBox.y + otherBoundingBox.height
            );
            return new $2.Rect(
              left,
              top,
              right - left,
              bottom - top
            );
          },
          intersection: function(rect) {
            var EPSILON = 1e-10;
            var intersectionPoints = [];
            var thisTopLeft = this.getTopLeft();
            if (rect.containsPoint(thisTopLeft, EPSILON)) {
              intersectionPoints.push(thisTopLeft);
            }
            var thisTopRight = this.getTopRight();
            if (rect.containsPoint(thisTopRight, EPSILON)) {
              intersectionPoints.push(thisTopRight);
            }
            var thisBottomLeft = this.getBottomLeft();
            if (rect.containsPoint(thisBottomLeft, EPSILON)) {
              intersectionPoints.push(thisBottomLeft);
            }
            var thisBottomRight = this.getBottomRight();
            if (rect.containsPoint(thisBottomRight, EPSILON)) {
              intersectionPoints.push(thisBottomRight);
            }
            var rectTopLeft = rect.getTopLeft();
            if (this.containsPoint(rectTopLeft, EPSILON)) {
              intersectionPoints.push(rectTopLeft);
            }
            var rectTopRight = rect.getTopRight();
            if (this.containsPoint(rectTopRight, EPSILON)) {
              intersectionPoints.push(rectTopRight);
            }
            var rectBottomLeft = rect.getBottomLeft();
            if (this.containsPoint(rectBottomLeft, EPSILON)) {
              intersectionPoints.push(rectBottomLeft);
            }
            var rectBottomRight = rect.getBottomRight();
            if (this.containsPoint(rectBottomRight, EPSILON)) {
              intersectionPoints.push(rectBottomRight);
            }
            var thisSegments = this._getSegments();
            var rectSegments = rect._getSegments();
            for (var i = 0; i < thisSegments.length; i++) {
              var thisSegment = thisSegments[i];
              for (var j = 0; j < rectSegments.length; j++) {
                var rectSegment = rectSegments[j];
                var intersect = getIntersection(
                  thisSegment[0],
                  thisSegment[1],
                  rectSegment[0],
                  rectSegment[1]
                );
                if (intersect) {
                  intersectionPoints.push(intersect);
                }
              }
            }
            function getIntersection(a, b, c, d) {
              var abVector = b.minus(a);
              var cdVector = d.minus(c);
              var denom = -cdVector.x * abVector.y + abVector.x * cdVector.y;
              if (denom === 0) {
                return null;
              }
              var s = (abVector.x * (a.y - c.y) - abVector.y * (a.x - c.x)) / denom;
              var t = (cdVector.x * (a.y - c.y) - cdVector.y * (a.x - c.x)) / denom;
              if (-EPSILON <= s && s <= 1 - EPSILON && -EPSILON <= t && t <= 1 - EPSILON) {
                return new $2.Point(a.x + t * abVector.x, a.y + t * abVector.y);
              }
              return null;
            }
            if (intersectionPoints.length === 0) {
              return null;
            }
            var minX = intersectionPoints[0].x;
            var maxX = intersectionPoints[0].x;
            var minY = intersectionPoints[0].y;
            var maxY = intersectionPoints[0].y;
            for (var k = 1; k < intersectionPoints.length; k++) {
              var point = intersectionPoints[k];
              if (point.x < minX) {
                minX = point.x;
              }
              if (point.x > maxX) {
                maxX = point.x;
              }
              if (point.y < minY) {
                minY = point.y;
              }
              if (point.y > maxY) {
                maxY = point.y;
              }
            }
            return new $2.Rect(minX, minY, maxX - minX, maxY - minY);
          },
          _getSegments: function() {
            var topLeft = this.getTopLeft();
            var topRight = this.getTopRight();
            var bottomLeft = this.getBottomLeft();
            var bottomRight = this.getBottomRight();
            return [
              [topLeft, topRight],
              [topRight, bottomRight],
              [bottomRight, bottomLeft],
              [bottomLeft, topLeft]
            ];
          },
          rotate: function(degrees, pivot) {
            degrees = $2.positiveModulo(degrees, 360);
            if (degrees === 0) {
              return this.clone();
            }
            pivot = pivot || this.getCenter();
            var newTopLeft = this.getTopLeft().rotate(degrees, pivot);
            var newTopRight = this.getTopRight().rotate(degrees, pivot);
            var diff = newTopRight.minus(newTopLeft);
            diff = diff.apply(function(x) {
              var EPSILON = 1e-15;
              return Math.abs(x) < EPSILON ? 0 : x;
            });
            var radians = Math.atan(diff.y / diff.x);
            if (diff.x < 0) {
              radians += Math.PI;
            } else if (diff.y < 0) {
              radians += 2 * Math.PI;
            }
            return new $2.Rect(
              newTopLeft.x,
              newTopLeft.y,
              this.width,
              this.height,
              radians / Math.PI * 180
            );
          },
          getBoundingBox: function() {
            if (this.degrees === 0) {
              return this.clone();
            }
            var topLeft = this.getTopLeft();
            var topRight = this.getTopRight();
            var bottomLeft = this.getBottomLeft();
            var bottomRight = this.getBottomRight();
            var minX = Math.min(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);
            var maxX = Math.max(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);
            var minY = Math.min(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);
            var maxY = Math.max(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);
            return new $2.Rect(
              minX,
              minY,
              maxX - minX,
              maxY - minY
            );
          },
          getIntegerBoundingBox: function() {
            var boundingBox = this.getBoundingBox();
            var x = Math.floor(boundingBox.x);
            var y = Math.floor(boundingBox.y);
            var width = Math.ceil(boundingBox.width + boundingBox.x - x);
            var height = Math.ceil(boundingBox.height + boundingBox.y - y);
            return new $2.Rect(x, y, width, height);
          },
          containsPoint: function(point, epsilon) {
            epsilon = epsilon || 0;
            var topLeft = this.getTopLeft();
            var topRight = this.getTopRight();
            var bottomLeft = this.getBottomLeft();
            var topDiff = topRight.minus(topLeft);
            var leftDiff = bottomLeft.minus(topLeft);
            return (point.x - topLeft.x) * topDiff.x + (point.y - topLeft.y) * topDiff.y >= -epsilon && (point.x - topRight.x) * topDiff.x + (point.y - topRight.y) * topDiff.y <= epsilon && (point.x - topLeft.x) * leftDiff.x + (point.y - topLeft.y) * leftDiff.y >= -epsilon && (point.x - bottomLeft.x) * leftDiff.x + (point.y - bottomLeft.y) * leftDiff.y <= epsilon;
          },
          toString: function() {
            return "[" + Math.round(this.x * 100) / 100 + ", " + Math.round(this.y * 100) / 100 + ", " + Math.round(this.width * 100) / 100 + "x" + Math.round(this.height * 100) / 100 + ", " + Math.round(this.degrees * 100) / 100 + "deg]";
          }
        };
      })(OpenSeadragon);
      (function($2) {
        var THIS = {};
        $2.ReferenceStrip = function(options) {
          var _this = this, viewer = options.viewer, viewerSize = $2.getElementSize(viewer.element), element, style, i;
          if (!options.id) {
            options.id = "referencestrip-" + $2.now();
            this.element = $2.makeNeutralElement("div");
            this.element.id = options.id;
            this.element.className = "referencestrip";
          }
          options = $2.extend(true, {
            sizeRatio: $2.DEFAULT_SETTINGS.referenceStripSizeRatio,
            position: $2.DEFAULT_SETTINGS.referenceStripPosition,
            scroll: $2.DEFAULT_SETTINGS.referenceStripScroll,
            clickTimeThreshold: $2.DEFAULT_SETTINGS.clickTimeThreshold
          }, options, {
            element: this.element,
            showNavigator: false,
            mouseNavEnabled: false,
            showNavigationControl: false,
            showSequenceControl: false
          });
          $2.extend(this, options);
          THIS[this.id] = {
            "animating": false
          };
          this.minPixelRatio = this.viewer.minPixelRatio;
          style = this.element.style;
          style.marginTop = "0px";
          style.marginRight = "0px";
          style.marginBottom = "0px";
          style.marginLeft = "0px";
          style.left = "0px";
          style.bottom = "0px";
          style.border = "0px";
          style.background = "#000";
          style.position = "relative";
          $2.setElementTouchActionNone(this.element);
          $2.setElementOpacity(this.element, 0.8);
          this.viewer = viewer;
          this.innerTracker = new $2.MouseTracker({
            element: this.element,
            dragHandler: $2.delegate(this, onStripDrag),
            scrollHandler: $2.delegate(this, onStripScroll),
            enterHandler: $2.delegate(this, onStripEnter),
            exitHandler: $2.delegate(this, onStripExit),
            keyDownHandler: $2.delegate(this, onKeyDown),
            keyHandler: $2.delegate(this, onKeyPress)
          });
          if (options.width && options.height) {
            this.element.style.width = options.width + "px";
            this.element.style.height = options.height + "px";
            viewer.addControl(
              this.element,
              { anchor: $2.ControlAnchor.BOTTOM_LEFT }
            );
          } else {
            if ("horizontal" == options.scroll) {
              this.element.style.width = viewerSize.x * options.sizeRatio * viewer.tileSources.length + 12 * viewer.tileSources.length + "px";
              this.element.style.height = viewerSize.y * options.sizeRatio + "px";
              viewer.addControl(
                this.element,
                { anchor: $2.ControlAnchor.BOTTOM_LEFT }
              );
            } else {
              this.element.style.height = viewerSize.y * options.sizeRatio * viewer.tileSources.length + 12 * viewer.tileSources.length + "px";
              this.element.style.width = viewerSize.x * options.sizeRatio + "px";
              viewer.addControl(
                this.element,
                { anchor: $2.ControlAnchor.TOP_LEFT }
              );
            }
          }
          this.panelWidth = viewerSize.x * this.sizeRatio + 8;
          this.panelHeight = viewerSize.y * this.sizeRatio + 8;
          this.panels = [];
          this.miniViewers = {};
          for (i = 0; i < viewer.tileSources.length; i++) {
            element = $2.makeNeutralElement("div");
            element.id = this.element.id + "-" + i;
            element.style.width = _this.panelWidth + "px";
            element.style.height = _this.panelHeight + "px";
            element.style.display = "inline";
            element.style.float = "left";
            element.style.cssFloat = "left";
            element.style.styleFloat = "left";
            element.style.padding = "2px";
            $2.setElementTouchActionNone(element);
            element.innerTracker = new $2.MouseTracker({
              element,
              clickTimeThreshold: this.clickTimeThreshold,
              clickDistThreshold: this.clickDistThreshold,
              pressHandler: function(event) {
                event.eventSource.dragging = $2.now();
              },
              releaseHandler: function(event) {
                var tracker = event.eventSource, id = tracker.element.id, page = Number(id.split("-")[2]), now = $2.now();
                if (event.insideElementPressed && event.insideElementReleased && tracker.dragging && now - tracker.dragging < tracker.clickTimeThreshold) {
                  tracker.dragging = null;
                  viewer.goToPage(page);
                }
              }
            });
            this.element.appendChild(element);
            element.activePanel = false;
            this.panels.push(element);
          }
          loadPanels(this, this.scroll == "vertical" ? viewerSize.y : viewerSize.x, 0);
          this.setFocus(0);
        };
        $2.extend($2.ReferenceStrip.prototype, $2.EventSource.prototype, $2.Viewer.prototype, {
          setFocus: function(page) {
            var element = this.element.querySelector("#" + this.element.id + "-" + page), viewerSize = $2.getElementSize(this.viewer.canvas), scrollWidth = Number(this.element.style.width.replace("px", "")), scrollHeight = Number(this.element.style.height.replace("px", "")), offsetLeft = -Number(this.element.style.marginLeft.replace("px", "")), offsetTop = -Number(this.element.style.marginTop.replace("px", "")), offset;
            if (this.currentSelected !== element) {
              if (this.currentSelected) {
                this.currentSelected.style.background = "#000";
              }
              this.currentSelected = element;
              this.currentSelected.style.background = "#999";
              if ("horizontal" == this.scroll) {
                offset = Number(page) * (this.panelWidth + 3);
                if (offset > offsetLeft + viewerSize.x - this.panelWidth) {
                  offset = Math.min(offset, scrollWidth - viewerSize.x);
                  this.element.style.marginLeft = -offset + "px";
                  loadPanels(this, viewerSize.x, -offset);
                } else if (offset < offsetLeft) {
                  offset = Math.max(0, offset - viewerSize.x / 2);
                  this.element.style.marginLeft = -offset + "px";
                  loadPanels(this, viewerSize.x, -offset);
                }
              } else {
                offset = Number(page) * (this.panelHeight + 3);
                if (offset > offsetTop + viewerSize.y - this.panelHeight) {
                  offset = Math.min(offset, scrollHeight - viewerSize.y);
                  this.element.style.marginTop = -offset + "px";
                  loadPanels(this, viewerSize.y, -offset);
                } else if (offset < offsetTop) {
                  offset = Math.max(0, offset - viewerSize.y / 2);
                  this.element.style.marginTop = -offset + "px";
                  loadPanels(this, viewerSize.y, -offset);
                }
              }
              this.currentPage = page;
              onStripEnter.call(this, { eventSource: this.innerTracker });
            }
          },
          update: function() {
            if (THIS[this.id].animating) {
              $2.console.log("image reference strip update");
              return true;
            }
            return false;
          },
          destroy: function() {
            if (this.miniViewers) {
              for (var key in this.miniViewers) {
                this.miniViewers[key].destroy();
              }
            }
            if (this.element) {
              this.element.parentNode.removeChild(this.element);
            }
          }
        });
        function onStripDrag(event) {
          var offsetLeft = Number(this.element.style.marginLeft.replace("px", "")), offsetTop = Number(this.element.style.marginTop.replace("px", "")), scrollWidth = Number(this.element.style.width.replace("px", "")), scrollHeight = Number(this.element.style.height.replace("px", "")), viewerSize = $2.getElementSize(this.viewer.canvas);
          this.dragging = true;
          if (this.element) {
            if ("horizontal" == this.scroll) {
              if (-event.delta.x > 0) {
                if (offsetLeft > -(scrollWidth - viewerSize.x)) {
                  this.element.style.marginLeft = offsetLeft + event.delta.x * 2 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft + event.delta.x * 2);
                }
              } else if (-event.delta.x < 0) {
                if (offsetLeft < 0) {
                  this.element.style.marginLeft = offsetLeft + event.delta.x * 2 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft + event.delta.x * 2);
                }
              }
            } else {
              if (-event.delta.y > 0) {
                if (offsetTop > -(scrollHeight - viewerSize.y)) {
                  this.element.style.marginTop = offsetTop + event.delta.y * 2 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.delta.y * 2);
                }
              } else if (-event.delta.y < 0) {
                if (offsetTop < 0) {
                  this.element.style.marginTop = offsetTop + event.delta.y * 2 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.delta.y * 2);
                }
              }
            }
          }
          return false;
        }
        function onStripScroll(event) {
          var offsetLeft = Number(this.element.style.marginLeft.replace("px", "")), offsetTop = Number(this.element.style.marginTop.replace("px", "")), scrollWidth = Number(this.element.style.width.replace("px", "")), scrollHeight = Number(this.element.style.height.replace("px", "")), viewerSize = $2.getElementSize(this.viewer.canvas);
          if (this.element) {
            if ("horizontal" == this.scroll) {
              if (event.scroll > 0) {
                if (offsetLeft > -(scrollWidth - viewerSize.x)) {
                  this.element.style.marginLeft = offsetLeft - event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft - event.scroll * 60);
                }
              } else if (event.scroll < 0) {
                if (offsetLeft < 0) {
                  this.element.style.marginLeft = offsetLeft - event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.x, offsetLeft - event.scroll * 60);
                }
              }
            } else {
              if (event.scroll < 0) {
                if (offsetTop > viewerSize.y - scrollHeight) {
                  this.element.style.marginTop = offsetTop + event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.scroll * 60);
                }
              } else if (event.scroll > 0) {
                if (offsetTop < 0) {
                  this.element.style.marginTop = offsetTop + event.scroll * 60 + "px";
                  loadPanels(this, viewerSize.y, offsetTop + event.scroll * 60);
                }
              }
            }
          }
          return false;
        }
        function loadPanels(strip, viewerSize, scroll) {
          var panelSize, activePanelsStart, activePanelsEnd, miniViewer, style, i, element;
          if ("horizontal" == strip.scroll) {
            panelSize = strip.panelWidth;
          } else {
            panelSize = strip.panelHeight;
          }
          activePanelsStart = Math.ceil(viewerSize / panelSize) + 5;
          activePanelsEnd = Math.ceil((Math.abs(scroll) + viewerSize) / panelSize) + 1;
          activePanelsStart = activePanelsEnd - activePanelsStart;
          activePanelsStart = activePanelsStart < 0 ? 0 : activePanelsStart;
          for (i = activePanelsStart; i < activePanelsEnd && i < strip.panels.length; i++) {
            element = strip.panels[i];
            if (!element.activePanel) {
              var miniTileSource;
              var originalTileSource = strip.viewer.tileSources[i];
              if (originalTileSource.referenceStripThumbnailUrl) {
                miniTileSource = {
                  type: "image",
                  url: originalTileSource.referenceStripThumbnailUrl
                };
              } else {
                miniTileSource = originalTileSource;
              }
              miniViewer = new $2.Viewer({
                id: element.id,
                tileSources: [miniTileSource],
                element,
                navigatorSizeRatio: strip.sizeRatio,
                showNavigator: false,
                mouseNavEnabled: false,
                showNavigationControl: false,
                showSequenceControl: false,
                immediateRender: true,
                blendTime: 0,
                animationTime: 0,
                loadTilesWithAjax: strip.viewer.loadTilesWithAjax,
                ajaxHeaders: strip.viewer.ajaxHeaders,
                useCanvas: strip.useCanvas
              });
              miniViewer.displayRegion = $2.makeNeutralElement("div");
              miniViewer.displayRegion.id = element.id + "-displayregion";
              miniViewer.displayRegion.className = "displayregion";
              style = miniViewer.displayRegion.style;
              style.position = "relative";
              style.top = "0px";
              style.left = "0px";
              style.fontSize = "0px";
              style.overflow = "hidden";
              style.float = "left";
              style.cssFloat = "left";
              style.styleFloat = "left";
              style.zIndex = 999999999;
              style.cursor = "default";
              style.width = strip.panelWidth - 4 + "px";
              style.height = strip.panelHeight - 4 + "px";
              miniViewer.displayRegion.innerTracker = new $2.MouseTracker({
                element: miniViewer.displayRegion,
                startDisabled: true
              });
              element.getElementsByTagName("div")[0].appendChild(
                miniViewer.displayRegion
              );
              strip.miniViewers[element.id] = miniViewer;
              element.activePanel = true;
            }
          }
        }
        function onStripEnter(event) {
          var element = event.eventSource.element;
          if ("horizontal" == this.scroll) {
            element.style.marginBottom = "0px";
          } else {
            element.style.marginLeft = "0px";
          }
          return false;
        }
        function onStripExit(event) {
          var element = event.eventSource.element;
          if ("horizontal" == this.scroll) {
            element.style.marginBottom = "-" + $2.getElementSize(element).y / 2 + "px";
          } else {
            element.style.marginLeft = "-" + $2.getElementSize(element).x / 2 + "px";
          }
          return false;
        }
        function onKeyDown(event) {
          if (!event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 38:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                return false;
              case 40:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                return false;
              case 37:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                return false;
              case 39:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                return false;
              default:
                return true;
            }
          } else {
            return true;
          }
        }
        function onKeyPress(event) {
          if (!event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta) {
            switch (event.keyCode) {
              case 61:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                return false;
              case 45:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                return false;
              case 48:
              case 119:
              case 87:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                return false;
              case 115:
              case 83:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                return false;
              case 97:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: -1, shift: null });
                return false;
              case 100:
                onStripScroll.call(this, { eventSource: this.tracker, position: null, scroll: 1, shift: null });
                return false;
              default:
                return true;
            }
          } else {
            return true;
          }
        }
      })(OpenSeadragon);
      (function($2) {
        $2.DisplayRect = function(x, y, width, height, minLevel, maxLevel) {
          $2.Rect.apply(this, [x, y, width, height]);
          this.minLevel = minLevel;
          this.maxLevel = maxLevel;
        };
        $2.extend($2.DisplayRect.prototype, $2.Rect.prototype);
      })(OpenSeadragon);
      (function($2) {
        $2.Spring = function(options) {
          var args = arguments;
          if (typeof options != "object") {
            options = {
              initial: args.length && typeof args[0] == "number" ? args[0] : void 0,
              springStiffness: args.length > 1 ? args[1].springStiffness : 5,
              animationTime: args.length > 1 ? args[1].animationTime : 1.5
            };
          }
          $2.console.assert(
            typeof options.springStiffness === "number" && options.springStiffness !== 0,
            "[OpenSeadragon.Spring] options.springStiffness must be a non-zero number"
          );
          $2.console.assert(
            typeof options.animationTime === "number" && options.animationTime >= 0,
            "[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0"
          );
          if (options.exponential) {
            this._exponential = true;
            delete options.exponential;
          }
          $2.extend(true, this, options);
          this.current = {
            value: typeof this.initial == "number" ? this.initial : this._exponential ? 0 : 1,
            time: $2.now()
          };
          $2.console.assert(
            !this._exponential || this.current.value !== 0,
            "[OpenSeadragon.Spring] value must be non-zero for exponential springs"
          );
          this.start = {
            value: this.current.value,
            time: this.current.time
          };
          this.target = {
            value: this.current.value,
            time: this.current.time
          };
          if (this._exponential) {
            this.start._logValue = Math.log(this.start.value);
            this.target._logValue = Math.log(this.target.value);
            this.current._logValue = Math.log(this.current.value);
          }
        };
        $2.Spring.prototype = {
          resetTo: function(target) {
            $2.console.assert(
              !this._exponential || target !== 0,
              "[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs"
            );
            this.start.value = this.target.value = this.current.value = target;
            this.start.time = this.target.time = this.current.time = $2.now();
            if (this._exponential) {
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
              this.current._logValue = Math.log(this.current.value);
            }
          },
          springTo: function(target) {
            $2.console.assert(
              !this._exponential || target !== 0,
              "[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs"
            );
            this.start.value = this.current.value;
            this.start.time = this.current.time;
            this.target.value = target;
            this.target.time = this.start.time + 1e3 * this.animationTime;
            if (this._exponential) {
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
            }
          },
          shiftBy: function(delta) {
            this.start.value += delta;
            this.target.value += delta;
            if (this._exponential) {
              $2.console.assert(
                this.target.value !== 0 && this.start.value !== 0,
                "[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs"
              );
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
            }
          },
          setExponential: function(value) {
            this._exponential = value;
            if (this._exponential) {
              $2.console.assert(
                this.current.value !== 0 && this.target.value !== 0 && this.start.value !== 0,
                "[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs"
              );
              this.start._logValue = Math.log(this.start.value);
              this.target._logValue = Math.log(this.target.value);
              this.current._logValue = Math.log(this.current.value);
            }
          },
          update: function() {
            this.current.time = $2.now();
            var startValue, targetValue;
            if (this._exponential) {
              startValue = this.start._logValue;
              targetValue = this.target._logValue;
            } else {
              startValue = this.start.value;
              targetValue = this.target.value;
            }
            var currentValue = this.current.time >= this.target.time ? targetValue : startValue + (targetValue - startValue) * transform(
              this.springStiffness,
              (this.current.time - this.start.time) / (this.target.time - this.start.time)
            );
            var oldValue = this.current.value;
            if (this._exponential) {
              this.current.value = Math.exp(currentValue);
            } else {
              this.current.value = currentValue;
            }
            return oldValue != this.current.value;
          },
          isAtTargetValue: function() {
            return this.current.value === this.target.value;
          }
        };
        function transform(stiffness, x) {
          return (1 - Math.exp(stiffness * -x)) / (1 - Math.exp(-stiffness));
        }
      })(OpenSeadragon);
      (function($2) {
        function ImageJob(options) {
          $2.extend(true, this, {
            timeout: $2.DEFAULT_SETTINGS.timeout,
            jobId: null
          }, options);
          this.image = null;
        }
        ImageJob.prototype = {
          errorMsg: null,
          start: function() {
            var self2 = this;
            var selfAbort = this.abort;
            this.image = new Image();
            this.image.onload = function() {
              self2.finish(true);
            };
            this.image.onabort = this.image.onerror = function() {
              self2.errorMsg = "Image load aborted";
              self2.finish(false);
            };
            this.jobId = window.setTimeout(function() {
              self2.errorMsg = "Image load exceeded timeout (" + self2.timeout + " ms)";
              self2.finish(false);
            }, this.timeout);
            if (this.loadWithAjax) {
              this.request = $2.makeAjaxRequest({
                url: this.src,
                withCredentials: this.ajaxWithCredentials,
                headers: this.ajaxHeaders,
                responseType: "arraybuffer",
                success: function(request) {
                  var blb;
                  try {
                    blb = new window.Blob([request.response]);
                  } catch (e) {
                    var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                    if (e.name === "TypeError" && BlobBuilder) {
                      var bb = new BlobBuilder();
                      bb.append(request.response);
                      blb = bb.getBlob();
                    }
                  }
                  if (blb.size === 0) {
                    self2.errorMsg = "Empty image response.";
                    self2.finish(false);
                  }
                  var url = (window.URL || window.webkitURL).createObjectURL(blb);
                  self2.image.src = url;
                },
                error: function(request) {
                  self2.errorMsg = "Image load aborted - XHR error";
                  self2.finish(false);
                }
              });
              this.abort = function() {
                self2.request.abort();
                if (typeof selfAbort === "function") {
                  selfAbort();
                }
              };
            } else {
              if (this.crossOriginPolicy !== false) {
                this.image.crossOrigin = this.crossOriginPolicy;
              }
              this.image.src = this.src;
            }
          },
          finish: function(successful) {
            this.image.onload = this.image.onerror = this.image.onabort = null;
            if (!successful) {
              this.image = null;
            }
            if (this.jobId) {
              window.clearTimeout(this.jobId);
            }
            this.callback(this);
          }
        };
        $2.ImageLoader = function(options) {
          $2.extend(true, this, {
            jobLimit: $2.DEFAULT_SETTINGS.imageLoaderLimit,
            timeout: $2.DEFAULT_SETTINGS.timeout,
            jobQueue: [],
            jobsInProgress: 0
          }, options);
        };
        $2.ImageLoader.prototype = {
          addJob: function(options) {
            var _this = this, complete = function(job) {
              completeJob(_this, job, options.callback);
            }, jobOptions = {
              src: options.src,
              loadWithAjax: options.loadWithAjax,
              ajaxHeaders: options.loadWithAjax ? options.ajaxHeaders : null,
              crossOriginPolicy: options.crossOriginPolicy,
              ajaxWithCredentials: options.ajaxWithCredentials,
              callback: complete,
              abort: options.abort,
              timeout: this.timeout
            }, newJob = new ImageJob(jobOptions);
            if (!this.jobLimit || this.jobsInProgress < this.jobLimit) {
              newJob.start();
              this.jobsInProgress++;
            } else {
              this.jobQueue.push(newJob);
            }
          },
          clear: function() {
            for (var i = 0; i < this.jobQueue.length; i++) {
              var job = this.jobQueue[i];
              if (typeof job.abort === "function") {
                job.abort();
              }
            }
            this.jobQueue = [];
          }
        };
        function completeJob(loader, job, callback) {
          var nextJob;
          loader.jobsInProgress--;
          if ((!loader.jobLimit || loader.jobsInProgress < loader.jobLimit) && loader.jobQueue.length > 0) {
            nextJob = loader.jobQueue.shift();
            nextJob.start();
            loader.jobsInProgress++;
          }
          callback(job.image, job.errorMsg, job.request);
        }
      })(OpenSeadragon);
      (function($2) {
        $2.Tile = function(level, x, y, bounds, exists, url, context2D, loadWithAjax, ajaxHeaders, sourceBounds) {
          this.level = level;
          this.x = x;
          this.y = y;
          this.bounds = bounds;
          this.sourceBounds = sourceBounds;
          this.exists = exists;
          this.url = url;
          this.context2D = context2D;
          this.loadWithAjax = loadWithAjax;
          this.ajaxHeaders = ajaxHeaders;
          if (this.ajaxHeaders) {
            this.cacheKey = this.url + "+" + JSON.stringify(this.ajaxHeaders);
          } else {
            this.cacheKey = this.url;
          }
          this.loaded = false;
          this.loading = false;
          this.element = null;
          this.imgElement = null;
          this.image = null;
          this.style = null;
          this.position = null;
          this.size = null;
          this.blendStart = null;
          this.opacity = null;
          this.squaredDistance = null;
          this.visibility = null;
          this.beingDrawn = false;
          this.lastTouchTime = 0;
          this.isRightMost = false;
          this.isBottomMost = false;
        };
        $2.Tile.prototype = {
          toString: function() {
            return this.level + "/" + this.x + "_" + this.y;
          },
          _hasTransparencyChannel: function() {
            return !!this.context2D || this.url.match(".png");
          },
          drawHTML: function(container) {
            if (!this.cacheImageRecord) {
              $2.console.warn(
                "[Tile.drawHTML] attempting to draw tile %s when it's not cached",
                this.toString()
              );
              return;
            }
            if (!this.loaded) {
              $2.console.warn(
                "Attempting to draw tile %s when it's not yet loaded.",
                this.toString()
              );
              return;
            }
            if (!this.element) {
              this.element = $2.makeNeutralElement("div");
              this.imgElement = this.cacheImageRecord.getImage().cloneNode();
              this.imgElement.style.msInterpolationMode = "nearest-neighbor";
              this.imgElement.style.width = "100%";
              this.imgElement.style.height = "100%";
              this.style = this.element.style;
              this.style.position = "absolute";
            }
            if (this.element.parentNode != container) {
              container.appendChild(this.element);
            }
            if (this.imgElement.parentNode != this.element) {
              this.element.appendChild(this.imgElement);
            }
            this.style.top = this.position.y + "px";
            this.style.left = this.position.x + "px";
            this.style.height = this.size.y + "px";
            this.style.width = this.size.x + "px";
            $2.setElementOpacity(this.element, this.opacity);
          },
          drawCanvas: function(context, drawingHandler, scale, translate) {
            var position = this.position.times($2.pixelDensityRatio), size = this.size.times($2.pixelDensityRatio), rendered;
            if (!this.context2D && !this.cacheImageRecord) {
              $2.console.warn(
                "[Tile.drawCanvas] attempting to draw tile %s when it's not cached",
                this.toString()
              );
              return;
            }
            rendered = this.context2D || this.cacheImageRecord.getRenderedContext();
            if (!this.loaded || !rendered) {
              $2.console.warn(
                "Attempting to draw tile %s when it's not yet loaded.",
                this.toString()
              );
              return;
            }
            context.save();
            context.globalAlpha = this.opacity;
            if (typeof scale === "number" && scale !== 1) {
              position = position.times(scale);
              size = size.times(scale);
            }
            if (translate instanceof $2.Point) {
              position = position.plus(translate);
            }
            if (context.globalAlpha === 1 && this._hasTransparencyChannel()) {
              context.clearRect(
                position.x,
                position.y,
                size.x,
                size.y
              );
            }
            drawingHandler({ context, tile: this, rendered });
            var sourceWidth, sourceHeight;
            if (this.sourceBounds) {
              sourceWidth = Math.min(this.sourceBounds.width, rendered.canvas.width);
              sourceHeight = Math.min(this.sourceBounds.height, rendered.canvas.height);
            } else {
              sourceWidth = rendered.canvas.width;
              sourceHeight = rendered.canvas.height;
            }
            context.drawImage(
              rendered.canvas,
              0,
              0,
              sourceWidth,
              sourceHeight,
              position.x,
              position.y,
              size.x,
              size.y
            );
            context.restore();
          },
          getScaleForEdgeSmoothing: function() {
            var context;
            if (this.cacheImageRecord) {
              context = this.cacheImageRecord.getRenderedContext();
            } else if (this.context2D) {
              context = this.context2D;
            } else {
              $2.console.warn(
                "[Tile.drawCanvas] attempting to get tile scale %s when tile's not cached",
                this.toString()
              );
              return 1;
            }
            return context.canvas.width / (this.size.x * $2.pixelDensityRatio);
          },
          getTranslationForEdgeSmoothing: function(scale, canvasSize, sketchCanvasSize) {
            var x = Math.max(1, Math.ceil((sketchCanvasSize.x - canvasSize.x) / 2));
            var y = Math.max(1, Math.ceil((sketchCanvasSize.y - canvasSize.y) / 2));
            return new $2.Point(x, y).minus(
              this.position.times($2.pixelDensityRatio).times(scale || 1).apply(function(x2) {
                return x2 % 1;
              })
            );
          },
          unload: function() {
            if (this.imgElement && this.imgElement.parentNode) {
              this.imgElement.parentNode.removeChild(this.imgElement);
            }
            if (this.element && this.element.parentNode) {
              this.element.parentNode.removeChild(this.element);
            }
            this.element = null;
            this.imgElement = null;
            this.loaded = false;
            this.loading = false;
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.OverlayPlacement = $2.Placement;
        $2.OverlayRotationMode = $2.freezeObject({
          NO_ROTATION: 1,
          EXACT: 2,
          BOUNDING_BOX: 3
        });
        $2.Overlay = function(element, location, placement) {
          var options;
          if ($2.isPlainObject(element)) {
            options = element;
          } else {
            options = {
              element,
              location,
              placement
            };
          }
          this.element = options.element;
          this.style = options.element.style;
          this._init(options);
        };
        $2.Overlay.prototype = {
          _init: function(options) {
            this.location = options.location;
            this.placement = options.placement === void 0 ? $2.Placement.TOP_LEFT : options.placement;
            this.onDraw = options.onDraw;
            this.checkResize = options.checkResize === void 0 ? true : options.checkResize;
            this.width = options.width === void 0 ? null : options.width;
            this.height = options.height === void 0 ? null : options.height;
            this.rotationMode = options.rotationMode || $2.OverlayRotationMode.EXACT;
            if (this.location instanceof $2.Rect) {
              this.width = this.location.width;
              this.height = this.location.height;
              this.location = this.location.getTopLeft();
              this.placement = $2.Placement.TOP_LEFT;
            }
            this.scales = this.width !== null && this.height !== null;
            this.bounds = new $2.Rect(
              this.location.x,
              this.location.y,
              this.width,
              this.height
            );
            this.position = this.location;
          },
          adjust: function(position, size) {
            var properties = $2.Placement.properties[this.placement];
            if (!properties) {
              return;
            }
            if (properties.isHorizontallyCentered) {
              position.x -= size.x / 2;
            } else if (properties.isRight) {
              position.x -= size.x;
            }
            if (properties.isVerticallyCentered) {
              position.y -= size.y / 2;
            } else if (properties.isBottom) {
              position.y -= size.y;
            }
          },
          destroy: function() {
            var element = this.element;
            var style = this.style;
            if (element.parentNode) {
              element.parentNode.removeChild(element);
              if (element.prevElementParent) {
                style.display = "none";
                document.body.appendChild(element);
              }
            }
            this.onDraw = null;
            style.top = "";
            style.left = "";
            style.position = "";
            if (this.width !== null) {
              style.width = "";
            }
            if (this.height !== null) {
              style.height = "";
            }
            var transformOriginProp = $2.getCssPropertyWithVendorPrefix(
              "transformOrigin"
            );
            var transformProp = $2.getCssPropertyWithVendorPrefix(
              "transform"
            );
            if (transformOriginProp && transformProp) {
              style[transformOriginProp] = "";
              style[transformProp] = "";
            }
          },
          drawHTML: function(container, viewport) {
            var element = this.element;
            if (element.parentNode !== container) {
              element.prevElementParent = element.parentNode;
              element.prevNextSibling = element.nextSibling;
              container.appendChild(element);
              this.style.position = "absolute";
              this.size = $2.getElementSize(element);
            }
            var positionAndSize = this._getOverlayPositionAndSize(viewport);
            var position = positionAndSize.position;
            var size = this.size = positionAndSize.size;
            var rotate = positionAndSize.rotate;
            if (this.onDraw) {
              this.onDraw(position, size, this.element);
            } else {
              var style = this.style;
              style.left = position.x + "px";
              style.top = position.y + "px";
              if (this.width !== null) {
                style.width = size.x + "px";
              }
              if (this.height !== null) {
                style.height = size.y + "px";
              }
              var transformOriginProp = $2.getCssPropertyWithVendorPrefix(
                "transformOrigin"
              );
              var transformProp = $2.getCssPropertyWithVendorPrefix(
                "transform"
              );
              if (transformOriginProp && transformProp) {
                if (rotate) {
                  style[transformOriginProp] = this._getTransformOrigin();
                  style[transformProp] = "rotate(" + rotate + "deg)";
                } else {
                  style[transformOriginProp] = "";
                  style[transformProp] = "";
                }
              }
              if (style.display !== "none") {
                style.display = "block";
              }
            }
          },
          _getOverlayPositionAndSize: function(viewport) {
            var position = viewport.pixelFromPoint(this.location, true);
            var size = this._getSizeInPixels(viewport);
            this.adjust(position, size);
            var rotate = 0;
            if (viewport.degrees && this.rotationMode !== $2.OverlayRotationMode.NO_ROTATION) {
              if (this.rotationMode === $2.OverlayRotationMode.BOUNDING_BOX && this.width !== null && this.height !== null) {
                var rect = new $2.Rect(position.x, position.y, size.x, size.y);
                var boundingBox = this._getBoundingBox(rect, viewport.degrees);
                position = boundingBox.getTopLeft();
                size = boundingBox.getSize();
              } else {
                rotate = viewport.degrees;
              }
            }
            return {
              position,
              size,
              rotate
            };
          },
          _getSizeInPixels: function(viewport) {
            var width = this.size.x;
            var height = this.size.y;
            if (this.width !== null || this.height !== null) {
              var scaledSize = viewport.deltaPixelsFromPointsNoRotate(
                new $2.Point(this.width || 0, this.height || 0),
                true
              );
              if (this.width !== null) {
                width = scaledSize.x;
              }
              if (this.height !== null) {
                height = scaledSize.y;
              }
            }
            if (this.checkResize && (this.width === null || this.height === null)) {
              var eltSize = this.size = $2.getElementSize(this.element);
              if (this.width === null) {
                width = eltSize.x;
              }
              if (this.height === null) {
                height = eltSize.y;
              }
            }
            return new $2.Point(width, height);
          },
          _getBoundingBox: function(rect, degrees) {
            var refPoint = this._getPlacementPoint(rect);
            return rect.rotate(degrees, refPoint).getBoundingBox();
          },
          _getPlacementPoint: function(rect) {
            var result2 = new $2.Point(rect.x, rect.y);
            var properties = $2.Placement.properties[this.placement];
            if (properties) {
              if (properties.isHorizontallyCentered) {
                result2.x += rect.width / 2;
              } else if (properties.isRight) {
                result2.x += rect.width;
              }
              if (properties.isVerticallyCentered) {
                result2.y += rect.height / 2;
              } else if (properties.isBottom) {
                result2.y += rect.height;
              }
            }
            return result2;
          },
          _getTransformOrigin: function() {
            var result2 = "";
            var properties = $2.Placement.properties[this.placement];
            if (!properties) {
              return result2;
            }
            if (properties.isLeft) {
              result2 = "left";
            } else if (properties.isRight) {
              result2 = "right";
            }
            if (properties.isTop) {
              result2 += " top";
            } else if (properties.isBottom) {
              result2 += " bottom";
            }
            return result2;
          },
          update: function(location, placement) {
            var options = $2.isPlainObject(location) ? location : {
              location,
              placement
            };
            this._init({
              location: options.location || this.location,
              placement: options.placement !== void 0 ? options.placement : this.placement,
              onDraw: options.onDraw || this.onDraw,
              checkResize: options.checkResize || this.checkResize,
              width: options.width !== void 0 ? options.width : this.width,
              height: options.height !== void 0 ? options.height : this.height,
              rotationMode: options.rotationMode || this.rotationMode
            });
          },
          getBounds: function(viewport) {
            $2.console.assert(
              viewport,
              "A viewport must now be passed to Overlay.getBounds."
            );
            var width = this.width;
            var height = this.height;
            if (width === null || height === null) {
              var size = viewport.deltaPointsFromPixelsNoRotate(this.size, true);
              if (width === null) {
                width = size.x;
              }
              if (height === null) {
                height = size.y;
              }
            }
            var location = this.location.clone();
            this.adjust(location, new $2.Point(width, height));
            return this._adjustBoundsForRotation(
              viewport,
              new $2.Rect(location.x, location.y, width, height)
            );
          },
          _adjustBoundsForRotation: function(viewport, bounds) {
            if (!viewport || viewport.degrees === 0 || this.rotationMode === $2.OverlayRotationMode.EXACT) {
              return bounds;
            }
            if (this.rotationMode === $2.OverlayRotationMode.BOUNDING_BOX) {
              if (this.width === null || this.height === null) {
                return bounds;
              }
              var positionAndSize = this._getOverlayPositionAndSize(viewport);
              return viewport.viewerElementToViewportRectangle(new $2.Rect(
                positionAndSize.position.x,
                positionAndSize.position.y,
                positionAndSize.size.x,
                positionAndSize.size.y
              ));
            }
            return bounds.rotate(
              -viewport.degrees,
              this._getPlacementPoint(bounds)
            );
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.Drawer = function(options) {
          $2.console.assert(options.viewer, "[Drawer] options.viewer is required");
          var args = arguments;
          if (!$2.isPlainObject(options)) {
            options = {
              source: args[0],
              viewport: args[1],
              element: args[2]
            };
          }
          $2.console.assert(options.viewport, "[Drawer] options.viewport is required");
          $2.console.assert(options.element, "[Drawer] options.element is required");
          if (options.source) {
            $2.console.error("[Drawer] options.source is no longer accepted; use TiledImage instead");
          }
          this.viewer = options.viewer;
          this.viewport = options.viewport;
          this.debugGridColor = typeof options.debugGridColor === "string" ? [options.debugGridColor] : options.debugGridColor || $2.DEFAULT_SETTINGS.debugGridColor;
          if (options.opacity) {
            $2.console.error("[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead");
          }
          this.useCanvas = $2.supportsCanvas && (this.viewer ? this.viewer.useCanvas : true);
          this.container = $2.getElement(options.element);
          this.canvas = $2.makeNeutralElement(this.useCanvas ? "canvas" : "div");
          this.context = this.useCanvas ? this.canvas.getContext("2d") : null;
          this.sketchCanvas = null;
          this.sketchContext = null;
          this.element = this.container;
          this.container.dir = "ltr";
          if (this.useCanvas) {
            var viewportSize = this._calculateCanvasSize();
            this.canvas.width = viewportSize.x;
            this.canvas.height = viewportSize.y;
          }
          this.canvas.style.width = "100%";
          this.canvas.style.height = "100%";
          this.canvas.style.position = "absolute";
          $2.setElementOpacity(this.canvas, this.opacity, true);
          this.container.style.textAlign = "left";
          this.container.appendChild(this.canvas);
          this._imageSmoothingEnabled = true;
        };
        $2.Drawer.prototype = {
          addOverlay: function(element, location, placement, onDraw) {
            $2.console.error("drawer.addOverlay is deprecated. Use viewer.addOverlay instead.");
            this.viewer.addOverlay(element, location, placement, onDraw);
            return this;
          },
          updateOverlay: function(element, location, placement) {
            $2.console.error("drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.");
            this.viewer.updateOverlay(element, location, placement);
            return this;
          },
          removeOverlay: function(element) {
            $2.console.error("drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.");
            this.viewer.removeOverlay(element);
            return this;
          },
          clearOverlays: function() {
            $2.console.error("drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.");
            this.viewer.clearOverlays();
            return this;
          },
          viewportCoordToDrawerCoord: function(point) {
            var vpPoint = this.viewport.pixelFromPointNoRotate(point, true);
            return new $2.Point(
              vpPoint.x * $2.pixelDensityRatio,
              vpPoint.y * $2.pixelDensityRatio
            );
          },
          clipWithPolygons: function(polygons, useSketch) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            context.beginPath();
            polygons.forEach(function(polygon) {
              polygon.forEach(function(coord, i) {
                context[i === 0 ? "moveTo" : "lineTo"](coord.x, coord.y);
              });
            });
            context.clip();
          },
          setOpacity: function(opacity) {
            $2.console.error("drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.");
            var world = this.viewer.world;
            for (var i = 0; i < world.getItemCount(); i++) {
              world.getItemAt(i).setOpacity(opacity);
            }
            return this;
          },
          getOpacity: function() {
            $2.console.error("drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.");
            var world = this.viewer.world;
            var maxOpacity = 0;
            for (var i = 0; i < world.getItemCount(); i++) {
              var opacity = world.getItemAt(i).getOpacity();
              if (opacity > maxOpacity) {
                maxOpacity = opacity;
              }
            }
            return maxOpacity;
          },
          needsUpdate: function() {
            $2.console.error("[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead.");
            return this.viewer.world.needsDraw();
          },
          numTilesLoaded: function() {
            $2.console.error("[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead.");
            return this.viewer.tileCache.numTilesLoaded();
          },
          reset: function() {
            $2.console.error("[Drawer.reset] this function is deprecated. Use World.resetItems instead.");
            this.viewer.world.resetItems();
            return this;
          },
          update: function() {
            $2.console.error("[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead.");
            this.clear();
            this.viewer.world.draw();
            return this;
          },
          canRotate: function() {
            return this.useCanvas;
          },
          destroy: function() {
            this.canvas.width = 1;
            this.canvas.height = 1;
            this.sketchCanvas = null;
            this.sketchContext = null;
          },
          clear: function() {
            this.canvas.innerHTML = "";
            if (this.useCanvas) {
              var viewportSize = this._calculateCanvasSize();
              if (this.canvas.width != viewportSize.x || this.canvas.height != viewportSize.y) {
                this.canvas.width = viewportSize.x;
                this.canvas.height = viewportSize.y;
                this._updateImageSmoothingEnabled(this.context);
                if (this.sketchCanvas !== null) {
                  var sketchCanvasSize = this._calculateSketchCanvasSize();
                  this.sketchCanvas.width = sketchCanvasSize.x;
                  this.sketchCanvas.height = sketchCanvasSize.y;
                  this._updateImageSmoothingEnabled(this.sketchContext);
                }
              }
              this._clear();
            }
          },
          _clear: function(useSketch, bounds) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            if (bounds) {
              context.clearRect(bounds.x, bounds.y, bounds.width, bounds.height);
            } else {
              var canvas = context.canvas;
              context.clearRect(0, 0, canvas.width, canvas.height);
            }
          },
          viewportToDrawerRectangle: function(rectangle) {
            var topLeft = this.viewport.pixelFromPointNoRotate(rectangle.getTopLeft(), true);
            var size = this.viewport.deltaPixelsFromPointsNoRotate(rectangle.getSize(), true);
            return new $2.Rect(
              topLeft.x * $2.pixelDensityRatio,
              topLeft.y * $2.pixelDensityRatio,
              size.x * $2.pixelDensityRatio,
              size.y * $2.pixelDensityRatio
            );
          },
          drawTile: function(tile, drawingHandler, useSketch, scale, translate) {
            $2.console.assert(tile, "[Drawer.drawTile] tile is required");
            $2.console.assert(drawingHandler, "[Drawer.drawTile] drawingHandler is required");
            if (this.useCanvas) {
              var context = this._getContext(useSketch);
              scale = scale || 1;
              tile.drawCanvas(context, drawingHandler, scale, translate);
            } else {
              tile.drawHTML(this.canvas);
            }
          },
          _getContext: function(useSketch) {
            var context = this.context;
            if (useSketch) {
              if (this.sketchCanvas === null) {
                this.sketchCanvas = document.createElement("canvas");
                var sketchCanvasSize = this._calculateSketchCanvasSize();
                this.sketchCanvas.width = sketchCanvasSize.x;
                this.sketchCanvas.height = sketchCanvasSize.y;
                this.sketchContext = this.sketchCanvas.getContext("2d");
                if (this.viewport.getRotation() === 0) {
                  var self2 = this;
                  this.viewer.addHandler("rotate", function resizeSketchCanvas() {
                    if (self2.viewport.getRotation() === 0) {
                      return;
                    }
                    self2.viewer.removeHandler("rotate", resizeSketchCanvas);
                    var sketchCanvasSize2 = self2._calculateSketchCanvasSize();
                    self2.sketchCanvas.width = sketchCanvasSize2.x;
                    self2.sketchCanvas.height = sketchCanvasSize2.y;
                  });
                }
                this._updateImageSmoothingEnabled(this.sketchContext);
              }
              context = this.sketchContext;
            }
            return context;
          },
          saveContext: function(useSketch) {
            if (!this.useCanvas) {
              return;
            }
            this._getContext(useSketch).save();
          },
          restoreContext: function(useSketch) {
            if (!this.useCanvas) {
              return;
            }
            this._getContext(useSketch).restore();
          },
          setClip: function(rect, useSketch) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            context.beginPath();
            context.rect(rect.x, rect.y, rect.width, rect.height);
            context.clip();
          },
          drawRectangle: function(rect, fillStyle, useSketch) {
            if (!this.useCanvas) {
              return;
            }
            var context = this._getContext(useSketch);
            context.save();
            context.fillStyle = fillStyle;
            context.fillRect(rect.x, rect.y, rect.width, rect.height);
            context.restore();
          },
          blendSketch: function(opacity, scale, translate, compositeOperation) {
            var options = opacity;
            if (!$2.isPlainObject(options)) {
              options = {
                opacity,
                scale,
                translate,
                compositeOperation
              };
            }
            if (!this.useCanvas || !this.sketchCanvas) {
              return;
            }
            opacity = options.opacity;
            compositeOperation = options.compositeOperation;
            var bounds = options.bounds;
            this.context.save();
            this.context.globalAlpha = opacity;
            if (compositeOperation) {
              this.context.globalCompositeOperation = compositeOperation;
            }
            if (bounds) {
              if (bounds.x < 0) {
                bounds.width += bounds.x;
                bounds.x = 0;
              }
              if (bounds.x + bounds.width > this.canvas.width) {
                bounds.width = this.canvas.width - bounds.x;
              }
              if (bounds.y < 0) {
                bounds.height += bounds.y;
                bounds.y = 0;
              }
              if (bounds.y + bounds.height > this.canvas.height) {
                bounds.height = this.canvas.height - bounds.y;
              }
              this.context.drawImage(
                this.sketchCanvas,
                bounds.x,
                bounds.y,
                bounds.width,
                bounds.height,
                bounds.x,
                bounds.y,
                bounds.width,
                bounds.height
              );
            } else {
              scale = options.scale || 1;
              translate = options.translate;
              var position = translate instanceof $2.Point ? translate : new $2.Point(0, 0);
              var widthExt = 0;
              var heightExt = 0;
              if (translate) {
                var widthDiff = this.sketchCanvas.width - this.canvas.width;
                var heightDiff = this.sketchCanvas.height - this.canvas.height;
                widthExt = Math.round(widthDiff / 2);
                heightExt = Math.round(heightDiff / 2);
              }
              this.context.drawImage(
                this.sketchCanvas,
                position.x - widthExt * scale,
                position.y - heightExt * scale,
                (this.canvas.width + 2 * widthExt) * scale,
                (this.canvas.height + 2 * heightExt) * scale,
                -widthExt,
                -heightExt,
                this.canvas.width + 2 * widthExt,
                this.canvas.height + 2 * heightExt
              );
            }
            this.context.restore();
          },
          drawDebugInfo: function(tile, count, i, tiledImage) {
            if (!this.useCanvas) {
              return;
            }
            var colorIndex = this.viewer.world.getIndexOfItem(tiledImage) % this.debugGridColor.length;
            var context = this.context;
            context.save();
            context.lineWidth = 2 * $2.pixelDensityRatio;
            context.font = "small-caps bold " + 13 * $2.pixelDensityRatio + "px arial";
            context.strokeStyle = this.debugGridColor[colorIndex];
            context.fillStyle = this.debugGridColor[colorIndex];
            if (this.viewport.degrees !== 0) {
              this._offsetForRotation({ degrees: this.viewport.degrees });
            }
            if (tiledImage.getRotation(true) % 360 !== 0) {
              this._offsetForRotation({
                degrees: tiledImage.getRotation(true),
                point: tiledImage.viewport.pixelFromPointNoRotate(
                  tiledImage._getRotationPoint(true),
                  true
                )
              });
            }
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
            context.strokeRect(
              tile.position.x * $2.pixelDensityRatio,
              tile.position.y * $2.pixelDensityRatio,
              tile.size.x * $2.pixelDensityRatio,
              tile.size.y * $2.pixelDensityRatio
            );
            var tileCenterX = (tile.position.x + tile.size.x / 2) * $2.pixelDensityRatio;
            var tileCenterY = (tile.position.y + tile.size.y / 2) * $2.pixelDensityRatio;
            context.translate(tileCenterX, tileCenterY);
            context.rotate(Math.PI / 180 * -this.viewport.degrees);
            context.translate(-tileCenterX, -tileCenterY);
            if (tile.x === 0 && tile.y === 0) {
              context.fillText(
                "Zoom: " + this.viewport.getZoom(),
                tile.position.x * $2.pixelDensityRatio,
                (tile.position.y - 30) * $2.pixelDensityRatio
              );
              context.fillText(
                "Pan: " + this.viewport.getBounds().toString(),
                tile.position.x * $2.pixelDensityRatio,
                (tile.position.y - 20) * $2.pixelDensityRatio
              );
            }
            context.fillText(
              "Level: " + tile.level,
              (tile.position.x + 10) * $2.pixelDensityRatio,
              (tile.position.y + 20) * $2.pixelDensityRatio
            );
            context.fillText(
              "Column: " + tile.x,
              (tile.position.x + 10) * $2.pixelDensityRatio,
              (tile.position.y + 30) * $2.pixelDensityRatio
            );
            context.fillText(
              "Row: " + tile.y,
              (tile.position.x + 10) * $2.pixelDensityRatio,
              (tile.position.y + 40) * $2.pixelDensityRatio
            );
            context.fillText(
              "Order: " + i + " of " + count,
              (tile.position.x + 10) * $2.pixelDensityRatio,
              (tile.position.y + 50) * $2.pixelDensityRatio
            );
            context.fillText(
              "Size: " + tile.size.toString(),
              (tile.position.x + 10) * $2.pixelDensityRatio,
              (tile.position.y + 60) * $2.pixelDensityRatio
            );
            context.fillText(
              "Position: " + tile.position.toString(),
              (tile.position.x + 10) * $2.pixelDensityRatio,
              (tile.position.y + 70) * $2.pixelDensityRatio
            );
            if (this.viewport.degrees !== 0) {
              this._restoreRotationChanges();
            }
            if (tiledImage.getRotation(true) % 360 !== 0) {
              this._restoreRotationChanges();
            }
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
            context.restore();
          },
          debugRect: function(rect) {
            if (this.useCanvas) {
              var context = this.context;
              context.save();
              context.lineWidth = 2 * $2.pixelDensityRatio;
              context.strokeStyle = this.debugGridColor[0];
              context.fillStyle = this.debugGridColor[0];
              context.strokeRect(
                rect.x * $2.pixelDensityRatio,
                rect.y * $2.pixelDensityRatio,
                rect.width * $2.pixelDensityRatio,
                rect.height * $2.pixelDensityRatio
              );
              context.restore();
            }
          },
          setImageSmoothingEnabled: function(imageSmoothingEnabled) {
            if (this.useCanvas) {
              this._imageSmoothingEnabled = imageSmoothingEnabled;
              this._updateImageSmoothingEnabled(this.context);
              this.viewer.forceRedraw();
            }
          },
          _updateImageSmoothingEnabled: function(context) {
            context.msImageSmoothingEnabled = this._imageSmoothingEnabled;
            context.imageSmoothingEnabled = this._imageSmoothingEnabled;
          },
          getCanvasSize: function(sketch) {
            var canvas = this._getContext(sketch).canvas;
            return new $2.Point(canvas.width, canvas.height);
          },
          getCanvasCenter: function() {
            return new $2.Point(this.canvas.width / 2, this.canvas.height / 2);
          },
          _offsetForRotation: function(options) {
            var point = options.point ? options.point.times($2.pixelDensityRatio) : this.getCanvasCenter();
            var context = this._getContext(options.useSketch);
            context.save();
            context.translate(point.x, point.y);
            if (this.viewer.viewport.flipped) {
              context.rotate(Math.PI / 180 * -options.degrees);
              context.scale(-1, 1);
            } else {
              context.rotate(Math.PI / 180 * options.degrees);
            }
            context.translate(-point.x, -point.y);
          },
          _flip: function(options) {
            options = options || {};
            var point = options.point ? options.point.times($2.pixelDensityRatio) : this.getCanvasCenter();
            var context = this._getContext(options.useSketch);
            context.translate(point.x, 0);
            context.scale(-1, 1);
            context.translate(-point.x, 0);
          },
          _restoreRotationChanges: function(useSketch) {
            var context = this._getContext(useSketch);
            context.restore();
          },
          _calculateCanvasSize: function() {
            var pixelDensityRatio = $2.pixelDensityRatio;
            var viewportSize = this.viewport.getContainerSize();
            return {
              x: Math.round(viewportSize.x * pixelDensityRatio),
              y: Math.round(viewportSize.y * pixelDensityRatio)
            };
          },
          _calculateSketchCanvasSize: function() {
            var canvasSize = this._calculateCanvasSize();
            if (this.viewport.getRotation() === 0) {
              return canvasSize;
            }
            var sketchCanvasSize = Math.ceil(Math.sqrt(
              canvasSize.x * canvasSize.x + canvasSize.y * canvasSize.y
            ));
            return {
              x: sketchCanvasSize,
              y: sketchCanvasSize
            };
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.Viewport = function(options) {
          var args = arguments;
          if (args.length && args[0] instanceof $2.Point) {
            options = {
              containerSize: args[0],
              contentSize: args[1],
              config: args[2]
            };
          }
          if (options.config) {
            $2.extend(true, options, options.config);
            delete options.config;
          }
          this._margins = $2.extend({
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
          }, options.margins || {});
          delete options.margins;
          $2.extend(true, this, {
            containerSize: null,
            contentSize: null,
            zoomPoint: null,
            viewer: null,
            springStiffness: $2.DEFAULT_SETTINGS.springStiffness,
            animationTime: $2.DEFAULT_SETTINGS.animationTime,
            minZoomImageRatio: $2.DEFAULT_SETTINGS.minZoomImageRatio,
            maxZoomPixelRatio: $2.DEFAULT_SETTINGS.maxZoomPixelRatio,
            visibilityRatio: $2.DEFAULT_SETTINGS.visibilityRatio,
            wrapHorizontal: $2.DEFAULT_SETTINGS.wrapHorizontal,
            wrapVertical: $2.DEFAULT_SETTINGS.wrapVertical,
            defaultZoomLevel: $2.DEFAULT_SETTINGS.defaultZoomLevel,
            minZoomLevel: $2.DEFAULT_SETTINGS.minZoomLevel,
            maxZoomLevel: $2.DEFAULT_SETTINGS.maxZoomLevel,
            degrees: $2.DEFAULT_SETTINGS.degrees,
            flipped: $2.DEFAULT_SETTINGS.flipped,
            homeFillsViewer: $2.DEFAULT_SETTINGS.homeFillsViewer
          }, options);
          this._updateContainerInnerSize();
          this.centerSpringX = new $2.Spring({
            initial: 0,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this.centerSpringY = new $2.Spring({
            initial: 0,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this.zoomSpring = new $2.Spring({
            exponential: true,
            initial: 1,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._oldCenterX = this.centerSpringX.current.value;
          this._oldCenterY = this.centerSpringY.current.value;
          this._oldZoom = this.zoomSpring.current.value;
          this._setContentBounds(new $2.Rect(0, 0, 1, 1), 1);
          this.goHome(true);
          this.update();
        };
        $2.Viewport.prototype = {
          resetContentSize: function(contentSize) {
            $2.console.assert(contentSize, "[Viewport.resetContentSize] contentSize is required");
            $2.console.assert(contentSize instanceof $2.Point, "[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point");
            $2.console.assert(contentSize.x > 0, "[Viewport.resetContentSize] contentSize.x must be greater than 0");
            $2.console.assert(contentSize.y > 0, "[Viewport.resetContentSize] contentSize.y must be greater than 0");
            this._setContentBounds(new $2.Rect(0, 0, 1, contentSize.y / contentSize.x), contentSize.x);
            return this;
          },
          setHomeBounds: function(bounds, contentFactor) {
            $2.console.error("[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.");
            this._setContentBounds(bounds, contentFactor);
          },
          _setContentBounds: function(bounds, contentFactor) {
            $2.console.assert(bounds, "[Viewport._setContentBounds] bounds is required");
            $2.console.assert(bounds instanceof $2.Rect, "[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect");
            $2.console.assert(bounds.width > 0, "[Viewport._setContentBounds] bounds.width must be greater than 0");
            $2.console.assert(bounds.height > 0, "[Viewport._setContentBounds] bounds.height must be greater than 0");
            this._contentBoundsNoRotate = bounds.clone();
            this._contentSizeNoRotate = this._contentBoundsNoRotate.getSize().times(
              contentFactor
            );
            this._contentBounds = bounds.rotate(this.degrees).getBoundingBox();
            this._contentSize = this._contentBounds.getSize().times(contentFactor);
            this._contentAspectRatio = this._contentSize.x / this._contentSize.y;
            if (this.viewer) {
              this.viewer.raiseEvent("reset-size", {
                contentSize: this._contentSizeNoRotate.clone(),
                contentFactor,
                homeBounds: this._contentBoundsNoRotate.clone(),
                contentBounds: this._contentBounds.clone()
              });
            }
          },
          getHomeZoom: function() {
            if (this.defaultZoomLevel) {
              return this.defaultZoomLevel;
            }
            var aspectFactor = this._contentAspectRatio / this.getAspectRatio();
            var output;
            if (this.homeFillsViewer) {
              output = aspectFactor >= 1 ? aspectFactor : 1;
            } else {
              output = aspectFactor >= 1 ? 1 : aspectFactor;
            }
            return output / this._contentBounds.width;
          },
          getHomeBounds: function() {
            return this.getHomeBoundsNoRotate().rotate(-this.getRotation());
          },
          getHomeBoundsNoRotate: function() {
            var center = this._contentBounds.getCenter();
            var width = 1 / this.getHomeZoom();
            var height = width / this.getAspectRatio();
            return new $2.Rect(
              center.x - width / 2,
              center.y - height / 2,
              width,
              height
            );
          },
          goHome: function(immediately) {
            if (this.viewer) {
              this.viewer.raiseEvent("home", {
                immediately
              });
            }
            return this.fitBounds(this.getHomeBounds(), immediately);
          },
          getMinZoom: function() {
            var homeZoom = this.getHomeZoom(), zoom = this.minZoomLevel ? this.minZoomLevel : this.minZoomImageRatio * homeZoom;
            return zoom;
          },
          getMaxZoom: function() {
            var zoom = this.maxZoomLevel;
            if (!zoom) {
              zoom = this._contentSize.x * this.maxZoomPixelRatio / this._containerInnerSize.x;
              zoom /= this._contentBounds.width;
            }
            return Math.max(zoom, this.getHomeZoom());
          },
          getAspectRatio: function() {
            return this._containerInnerSize.x / this._containerInnerSize.y;
          },
          getContainerSize: function() {
            return new $2.Point(
              this.containerSize.x,
              this.containerSize.y
            );
          },
          getMargins: function() {
            return $2.extend({}, this._margins);
          },
          setMargins: function(margins) {
            $2.console.assert($2.type(margins) === "object", "[Viewport.setMargins] margins must be an object");
            this._margins = $2.extend({
              left: 0,
              top: 0,
              right: 0,
              bottom: 0
            }, margins);
            this._updateContainerInnerSize();
            if (this.viewer) {
              this.viewer.forceRedraw();
            }
          },
          getBounds: function(current) {
            return this.getBoundsNoRotate(current).rotate(-this.getRotation());
          },
          getBoundsNoRotate: function(current) {
            var center = this.getCenter(current);
            var width = 1 / this.getZoom(current);
            var height = width / this.getAspectRatio();
            return new $2.Rect(
              center.x - width / 2,
              center.y - height / 2,
              width,
              height
            );
          },
          getBoundsWithMargins: function(current) {
            return this.getBoundsNoRotateWithMargins(current).rotate(
              -this.getRotation(),
              this.getCenter(current)
            );
          },
          getBoundsNoRotateWithMargins: function(current) {
            var bounds = this.getBoundsNoRotate(current);
            var factor = this._containerInnerSize.x * this.getZoom(current);
            bounds.x -= this._margins.left / factor;
            bounds.y -= this._margins.top / factor;
            bounds.width += (this._margins.left + this._margins.right) / factor;
            bounds.height += (this._margins.top + this._margins.bottom) / factor;
            return bounds;
          },
          getCenter: function(current) {
            var centerCurrent = new $2.Point(
              this.centerSpringX.current.value,
              this.centerSpringY.current.value
            ), centerTarget = new $2.Point(
              this.centerSpringX.target.value,
              this.centerSpringY.target.value
            ), oldZoomPixel, zoom, width, height, bounds, newZoomPixel, deltaZoomPixels, deltaZoomPoints;
            if (current) {
              return centerCurrent;
            } else if (!this.zoomPoint) {
              return centerTarget;
            }
            oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
            zoom = this.getZoom();
            width = 1 / zoom;
            height = width / this.getAspectRatio();
            bounds = new $2.Rect(
              centerCurrent.x - width / 2,
              centerCurrent.y - height / 2,
              width,
              height
            );
            newZoomPixel = this._pixelFromPoint(this.zoomPoint, bounds);
            deltaZoomPixels = newZoomPixel.minus(oldZoomPixel);
            deltaZoomPoints = deltaZoomPixels.divide(this._containerInnerSize.x * zoom);
            return centerTarget.plus(deltaZoomPoints);
          },
          getZoom: function(current) {
            if (current) {
              return this.zoomSpring.current.value;
            } else {
              return this.zoomSpring.target.value;
            }
          },
          _applyZoomConstraints: function(zoom) {
            return Math.max(
              Math.min(zoom, this.getMaxZoom()),
              this.getMinZoom()
            );
          },
          _applyBoundaryConstraints: function(bounds) {
            var newBounds = new $2.Rect(
              bounds.x,
              bounds.y,
              bounds.width,
              bounds.height
            );
            if (this.wrapHorizontal) {
            } else {
              var horizontalThreshold = this.visibilityRatio * newBounds.width;
              var boundsRight = newBounds.x + newBounds.width;
              var contentRight = this._contentBoundsNoRotate.x + this._contentBoundsNoRotate.width;
              var leftDx = this._contentBoundsNoRotate.x - boundsRight + horizontalThreshold;
              var rightDx = contentRight - newBounds.x - horizontalThreshold;
              if (horizontalThreshold > this._contentBoundsNoRotate.width) {
                newBounds.x += (leftDx + rightDx) / 2;
              } else if (rightDx < 0) {
                newBounds.x += rightDx;
              } else if (leftDx > 0) {
                newBounds.x += leftDx;
              }
            }
            if (this.wrapVertical) {
            } else {
              var verticalThreshold = this.visibilityRatio * newBounds.height;
              var boundsBottom = newBounds.y + newBounds.height;
              var contentBottom = this._contentBoundsNoRotate.y + this._contentBoundsNoRotate.height;
              var topDy = this._contentBoundsNoRotate.y - boundsBottom + verticalThreshold;
              var bottomDy = contentBottom - newBounds.y - verticalThreshold;
              if (verticalThreshold > this._contentBoundsNoRotate.height) {
                newBounds.y += (topDy + bottomDy) / 2;
              } else if (bottomDy < 0) {
                newBounds.y += bottomDy;
              } else if (topDy > 0) {
                newBounds.y += topDy;
              }
            }
            return newBounds;
          },
          _raiseConstraintsEvent: function(immediately) {
            if (this.viewer) {
              this.viewer.raiseEvent("constrain", {
                immediately
              });
            }
          },
          applyConstraints: function(immediately) {
            var actualZoom = this.getZoom();
            var constrainedZoom = this._applyZoomConstraints(actualZoom);
            if (actualZoom !== constrainedZoom) {
              this.zoomTo(constrainedZoom, this.zoomPoint, immediately);
            }
            var bounds = this.getBoundsNoRotate();
            var constrainedBounds = this._applyBoundaryConstraints(bounds);
            this._raiseConstraintsEvent(immediately);
            if (bounds.x !== constrainedBounds.x || bounds.y !== constrainedBounds.y || immediately) {
              this.fitBounds(
                constrainedBounds.rotate(-this.getRotation()),
                immediately
              );
            }
            return this;
          },
          ensureVisible: function(immediately) {
            return this.applyConstraints(immediately);
          },
          _fitBounds: function(bounds, options) {
            options = options || {};
            var immediately = options.immediately || false;
            var constraints = options.constraints || false;
            var aspect = this.getAspectRatio();
            var center = bounds.getCenter();
            var newBounds = new $2.Rect(
              bounds.x,
              bounds.y,
              bounds.width,
              bounds.height,
              bounds.degrees + this.getRotation()
            ).getBoundingBox();
            if (newBounds.getAspectRatio() >= aspect) {
              newBounds.height = newBounds.width / aspect;
            } else {
              newBounds.width = newBounds.height * aspect;
            }
            newBounds.x = center.x - newBounds.width / 2;
            newBounds.y = center.y - newBounds.height / 2;
            var newZoom = 1 / newBounds.width;
            if (constraints) {
              var newBoundsAspectRatio = newBounds.getAspectRatio();
              var newConstrainedZoom = this._applyZoomConstraints(newZoom);
              if (newZoom !== newConstrainedZoom) {
                newZoom = newConstrainedZoom;
                newBounds.width = 1 / newZoom;
                newBounds.x = center.x - newBounds.width / 2;
                newBounds.height = newBounds.width / newBoundsAspectRatio;
                newBounds.y = center.y - newBounds.height / 2;
              }
              newBounds = this._applyBoundaryConstraints(newBounds);
              center = newBounds.getCenter();
              this._raiseConstraintsEvent(immediately);
            }
            if (immediately) {
              this.panTo(center, true);
              return this.zoomTo(newZoom, null, true);
            }
            this.panTo(this.getCenter(true), true);
            this.zoomTo(this.getZoom(true), null, true);
            var oldBounds = this.getBounds();
            var oldZoom = this.getZoom();
            if (oldZoom === 0 || Math.abs(newZoom / oldZoom - 1) < 1e-8) {
              this.zoomTo(newZoom, true);
              return this.panTo(center, immediately);
            }
            newBounds = newBounds.rotate(-this.getRotation());
            var referencePoint = newBounds.getTopLeft().times(newZoom).minus(oldBounds.getTopLeft().times(oldZoom)).divide(newZoom - oldZoom);
            return this.zoomTo(newZoom, referencePoint, immediately);
          },
          fitBounds: function(bounds, immediately) {
            return this._fitBounds(bounds, {
              immediately,
              constraints: false
            });
          },
          fitBoundsWithConstraints: function(bounds, immediately) {
            return this._fitBounds(bounds, {
              immediately,
              constraints: true
            });
          },
          fitVertically: function(immediately) {
            var box = new $2.Rect(
              this._contentBounds.x + this._contentBounds.width / 2,
              this._contentBounds.y,
              0,
              this._contentBounds.height
            );
            return this.fitBounds(box, immediately);
          },
          fitHorizontally: function(immediately) {
            var box = new $2.Rect(
              this._contentBounds.x,
              this._contentBounds.y + this._contentBounds.height / 2,
              this._contentBounds.width,
              0
            );
            return this.fitBounds(box, immediately);
          },
          getConstrainedBounds: function(current) {
            var bounds, constrainedBounds;
            bounds = this.getBounds(current);
            constrainedBounds = this._applyBoundaryConstraints(bounds);
            return constrainedBounds;
          },
          panBy: function(delta, immediately) {
            var center = new $2.Point(
              this.centerSpringX.target.value,
              this.centerSpringY.target.value
            );
            return this.panTo(center.plus(delta), immediately);
          },
          panTo: function(center, immediately) {
            if (immediately) {
              this.centerSpringX.resetTo(center.x);
              this.centerSpringY.resetTo(center.y);
            } else {
              this.centerSpringX.springTo(center.x);
              this.centerSpringY.springTo(center.y);
            }
            if (this.viewer) {
              this.viewer.raiseEvent("pan", {
                center,
                immediately
              });
            }
            return this;
          },
          zoomBy: function(factor, refPoint, immediately) {
            return this.zoomTo(
              this.zoomSpring.target.value * factor,
              refPoint,
              immediately
            );
          },
          zoomTo: function(zoom, refPoint, immediately) {
            var _this = this;
            this.zoomPoint = refPoint instanceof $2.Point && !isNaN(refPoint.x) && !isNaN(refPoint.y) ? refPoint : null;
            if (immediately) {
              this._adjustCenterSpringsForZoomPoint(function() {
                _this.zoomSpring.resetTo(zoom);
              });
            } else {
              this.zoomSpring.springTo(zoom);
            }
            if (this.viewer) {
              this.viewer.raiseEvent("zoom", {
                zoom,
                refPoint,
                immediately
              });
            }
            return this;
          },
          setRotation: function(degrees) {
            if (!this.viewer || !this.viewer.drawer.canRotate()) {
              return this;
            }
            this.degrees = $2.positiveModulo(degrees, 360);
            this._setContentBounds(
              this.viewer.world.getHomeBounds(),
              this.viewer.world.getContentFactor()
            );
            this.viewer.forceRedraw();
            this.viewer.raiseEvent("rotate", { "degrees": degrees });
            return this;
          },
          getRotation: function() {
            return this.degrees;
          },
          resize: function(newContainerSize, maintain) {
            var oldBounds = this.getBoundsNoRotate(), newBounds = oldBounds, widthDeltaFactor;
            this.containerSize.x = newContainerSize.x;
            this.containerSize.y = newContainerSize.y;
            this._updateContainerInnerSize();
            if (maintain) {
              widthDeltaFactor = newContainerSize.x / this.containerSize.x;
              newBounds.width = oldBounds.width * widthDeltaFactor;
              newBounds.height = newBounds.width / this.getAspectRatio();
            }
            if (this.viewer) {
              this.viewer.raiseEvent("resize", {
                newContainerSize,
                maintain
              });
            }
            return this.fitBounds(newBounds, true);
          },
          _updateContainerInnerSize: function() {
            this._containerInnerSize = new $2.Point(
              Math.max(1, this.containerSize.x - (this._margins.left + this._margins.right)),
              Math.max(1, this.containerSize.y - (this._margins.top + this._margins.bottom))
            );
          },
          update: function() {
            var _this = this;
            this._adjustCenterSpringsForZoomPoint(function() {
              _this.zoomSpring.update();
            });
            this.centerSpringX.update();
            this.centerSpringY.update();
            var changed = this.centerSpringX.current.value !== this._oldCenterX || this.centerSpringY.current.value !== this._oldCenterY || this.zoomSpring.current.value !== this._oldZoom;
            this._oldCenterX = this.centerSpringX.current.value;
            this._oldCenterY = this.centerSpringY.current.value;
            this._oldZoom = this.zoomSpring.current.value;
            return changed;
          },
          _adjustCenterSpringsForZoomPoint: function(zoomSpringHandler) {
            if (this.zoomPoint) {
              var oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
              zoomSpringHandler();
              var newZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
              var deltaZoomPixels = newZoomPixel.minus(oldZoomPixel);
              var deltaZoomPoints = this.deltaPointsFromPixels(
                deltaZoomPixels,
                true
              );
              this.centerSpringX.shiftBy(deltaZoomPoints.x);
              this.centerSpringY.shiftBy(deltaZoomPoints.y);
              if (this.zoomSpring.isAtTargetValue()) {
                this.zoomPoint = null;
              }
            } else {
              zoomSpringHandler();
            }
          },
          deltaPixelsFromPointsNoRotate: function(deltaPoints, current) {
            return deltaPoints.times(
              this._containerInnerSize.x * this.getZoom(current)
            );
          },
          deltaPixelsFromPoints: function(deltaPoints, current) {
            return this.deltaPixelsFromPointsNoRotate(
              deltaPoints.rotate(this.getRotation()),
              current
            );
          },
          deltaPointsFromPixelsNoRotate: function(deltaPixels, current) {
            return deltaPixels.divide(
              this._containerInnerSize.x * this.getZoom(current)
            );
          },
          deltaPointsFromPixels: function(deltaPixels, current) {
            return this.deltaPointsFromPixelsNoRotate(deltaPixels, current).rotate(-this.getRotation());
          },
          pixelFromPointNoRotate: function(point, current) {
            return this._pixelFromPointNoRotate(
              point,
              this.getBoundsNoRotate(current)
            );
          },
          pixelFromPoint: function(point, current) {
            return this._pixelFromPoint(point, this.getBoundsNoRotate(current));
          },
          _pixelFromPointNoRotate: function(point, bounds) {
            return point.minus(
              bounds.getTopLeft()
            ).times(
              this._containerInnerSize.x / bounds.width
            ).plus(
              new $2.Point(this._margins.left, this._margins.top)
            );
          },
          _pixelFromPoint: function(point, bounds) {
            return this._pixelFromPointNoRotate(
              point.rotate(this.getRotation(), this.getCenter(true)),
              bounds
            );
          },
          pointFromPixelNoRotate: function(pixel, current) {
            var bounds = this.getBoundsNoRotate(current);
            return pixel.minus(
              new $2.Point(this._margins.left, this._margins.top)
            ).divide(
              this._containerInnerSize.x / bounds.width
            ).plus(
              bounds.getTopLeft()
            );
          },
          pointFromPixel: function(pixel, current) {
            return this.pointFromPixelNoRotate(pixel, current).rotate(
              -this.getRotation(),
              this.getCenter(true)
            );
          },
          _viewportToImageDelta: function(viewerX, viewerY) {
            var scale = this._contentBoundsNoRotate.width;
            return new $2.Point(
              viewerX * this._contentSizeNoRotate.x / scale,
              viewerY * this._contentSizeNoRotate.x / scale
            );
          },
          viewportToImageCoordinates: function(viewerX, viewerY) {
            if (viewerX instanceof $2.Point) {
              return this.viewportToImageCoordinates(viewerX.x, viewerX.y);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $2.console.error("[Viewport.viewportToImageCoordinates] is not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.viewportToImageCoordinates(viewerX, viewerY, true);
              }
            }
            return this._viewportToImageDelta(
              viewerX - this._contentBoundsNoRotate.x,
              viewerY - this._contentBoundsNoRotate.y
            );
          },
          _imageToViewportDelta: function(imageX, imageY) {
            var scale = this._contentBoundsNoRotate.width;
            return new $2.Point(
              imageX / this._contentSizeNoRotate.x * scale,
              imageY / this._contentSizeNoRotate.x * scale
            );
          },
          imageToViewportCoordinates: function(imageX, imageY) {
            if (imageX instanceof $2.Point) {
              return this.imageToViewportCoordinates(imageX.x, imageX.y);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $2.console.error("[Viewport.imageToViewportCoordinates] is not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.imageToViewportCoordinates(imageX, imageY, true);
              }
            }
            var point = this._imageToViewportDelta(imageX, imageY);
            point.x += this._contentBoundsNoRotate.x;
            point.y += this._contentBoundsNoRotate.y;
            return point;
          },
          imageToViewportRectangle: function(imageX, imageY, pixelWidth, pixelHeight) {
            var rect = imageX;
            if (!(rect instanceof $2.Rect)) {
              rect = new $2.Rect(imageX, imageY, pixelWidth, pixelHeight);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $2.console.error("[Viewport.imageToViewportRectangle] is not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.imageToViewportRectangle(
                  imageX,
                  imageY,
                  pixelWidth,
                  pixelHeight,
                  true
                );
              }
            }
            var coordA = this.imageToViewportCoordinates(rect.x, rect.y);
            var coordB = this._imageToViewportDelta(rect.width, rect.height);
            return new $2.Rect(
              coordA.x,
              coordA.y,
              coordB.x,
              coordB.y,
              rect.degrees
            );
          },
          viewportToImageRectangle: function(viewerX, viewerY, pointWidth, pointHeight) {
            var rect = viewerX;
            if (!(rect instanceof $2.Rect)) {
              rect = new $2.Rect(viewerX, viewerY, pointWidth, pointHeight);
            }
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $2.console.error("[Viewport.viewportToImageRectangle] is not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.viewportToImageRectangle(
                  viewerX,
                  viewerY,
                  pointWidth,
                  pointHeight,
                  true
                );
              }
            }
            var coordA = this.viewportToImageCoordinates(rect.x, rect.y);
            var coordB = this._viewportToImageDelta(rect.width, rect.height);
            return new $2.Rect(
              coordA.x,
              coordA.y,
              coordB.x,
              coordB.y,
              rect.degrees
            );
          },
          viewerElementToImageCoordinates: function(pixel) {
            var point = this.pointFromPixel(pixel, true);
            return this.viewportToImageCoordinates(point);
          },
          imageToViewerElementCoordinates: function(pixel) {
            var point = this.imageToViewportCoordinates(pixel);
            return this.pixelFromPoint(point, true);
          },
          windowToImageCoordinates: function(pixel) {
            $2.console.assert(
              this.viewer,
              "[Viewport.windowToImageCoordinates] the viewport must have a viewer."
            );
            var viewerCoordinates = pixel.minus(
              $2.getElementPosition(this.viewer.element)
            );
            return this.viewerElementToImageCoordinates(viewerCoordinates);
          },
          imageToWindowCoordinates: function(pixel) {
            $2.console.assert(
              this.viewer,
              "[Viewport.imageToWindowCoordinates] the viewport must have a viewer."
            );
            var viewerCoordinates = this.imageToViewerElementCoordinates(pixel);
            return viewerCoordinates.plus(
              $2.getElementPosition(this.viewer.element)
            );
          },
          viewerElementToViewportCoordinates: function(pixel) {
            return this.pointFromPixel(pixel, true);
          },
          viewportToViewerElementCoordinates: function(point) {
            return this.pixelFromPoint(point, true);
          },
          viewerElementToViewportRectangle: function(rectangle) {
            return $2.Rect.fromSummits(
              this.pointFromPixel(rectangle.getTopLeft(), true),
              this.pointFromPixel(rectangle.getTopRight(), true),
              this.pointFromPixel(rectangle.getBottomLeft(), true)
            );
          },
          viewportToViewerElementRectangle: function(rectangle) {
            return $2.Rect.fromSummits(
              this.pixelFromPoint(rectangle.getTopLeft(), true),
              this.pixelFromPoint(rectangle.getTopRight(), true),
              this.pixelFromPoint(rectangle.getBottomLeft(), true)
            );
          },
          windowToViewportCoordinates: function(pixel) {
            $2.console.assert(
              this.viewer,
              "[Viewport.windowToViewportCoordinates] the viewport must have a viewer."
            );
            var viewerCoordinates = pixel.minus(
              $2.getElementPosition(this.viewer.element)
            );
            return this.viewerElementToViewportCoordinates(viewerCoordinates);
          },
          viewportToWindowCoordinates: function(point) {
            $2.console.assert(
              this.viewer,
              "[Viewport.viewportToWindowCoordinates] the viewport must have a viewer."
            );
            var viewerCoordinates = this.viewportToViewerElementCoordinates(point);
            return viewerCoordinates.plus(
              $2.getElementPosition(this.viewer.element)
            );
          },
          viewportToImageZoom: function(viewportZoom) {
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $2.console.error("[Viewport.viewportToImageZoom] is not accurate with multi-image.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.viewportToImageZoom(viewportZoom);
              }
            }
            var imageWidth = this._contentSizeNoRotate.x;
            var containerWidth = this._containerInnerSize.x;
            var scale = this._contentBoundsNoRotate.width;
            var viewportToImageZoomRatio = containerWidth / imageWidth * scale;
            return viewportZoom * viewportToImageZoomRatio;
          },
          imageToViewportZoom: function(imageZoom) {
            if (this.viewer) {
              var count = this.viewer.world.getItemCount();
              if (count > 1) {
                $2.console.error("[Viewport.imageToViewportZoom] is not accurate with multi-image.");
              } else if (count === 1) {
                var item = this.viewer.world.getItemAt(0);
                return item.imageToViewportZoom(imageZoom);
              }
            }
            var imageWidth = this._contentSizeNoRotate.x;
            var containerWidth = this._containerInnerSize.x;
            var scale = this._contentBoundsNoRotate.width;
            var viewportToImageZoomRatio = imageWidth / containerWidth / scale;
            return imageZoom * viewportToImageZoomRatio;
          },
          toggleFlip: function() {
            this.setFlip(!this.getFlip());
            return this;
          },
          getFlip: function() {
            return this.flipped;
          },
          setFlip: function(state) {
            if (this.flipped === state) {
              return this;
            }
            this.flipped = state;
            if (this.viewer.navigator) {
              this.viewer.navigator.setFlip(this.getFlip());
            }
            this.viewer.forceRedraw();
            this.viewer.raiseEvent("flip", { "flipped": state });
            return this;
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.TiledImage = function(options) {
          var _this = this;
          $2.console.assert(options.tileCache, "[TiledImage] options.tileCache is required");
          $2.console.assert(options.drawer, "[TiledImage] options.drawer is required");
          $2.console.assert(options.viewer, "[TiledImage] options.viewer is required");
          $2.console.assert(options.imageLoader, "[TiledImage] options.imageLoader is required");
          $2.console.assert(options.source, "[TiledImage] options.source is required");
          $2.console.assert(
            !options.clip || options.clip instanceof $2.Rect,
            "[TiledImage] options.clip must be an OpenSeadragon.Rect if present"
          );
          $2.EventSource.call(this);
          this._tileCache = options.tileCache;
          delete options.tileCache;
          this._drawer = options.drawer;
          delete options.drawer;
          this._imageLoader = options.imageLoader;
          delete options.imageLoader;
          if (options.clip instanceof $2.Rect) {
            this._clip = options.clip.clone();
          }
          delete options.clip;
          var x = options.x || 0;
          delete options.x;
          var y = options.y || 0;
          delete options.y;
          this.normHeight = options.source.dimensions.y / options.source.dimensions.x;
          this.contentAspectX = options.source.dimensions.x / options.source.dimensions.y;
          var scale = 1;
          if (options.width) {
            scale = options.width;
            delete options.width;
            if (options.height) {
              $2.console.error("specifying both width and height to a tiledImage is not supported");
              delete options.height;
            }
          } else if (options.height) {
            scale = options.height / this.normHeight;
            delete options.height;
          }
          var fitBounds = options.fitBounds;
          delete options.fitBounds;
          var fitBoundsPlacement = options.fitBoundsPlacement || OpenSeadragon.Placement.CENTER;
          delete options.fitBoundsPlacement;
          var degrees = options.degrees || 0;
          delete options.degrees;
          $2.extend(true, this, {
            viewer: null,
            tilesMatrix: {},
            coverage: {},
            loadingCoverage: {},
            lastDrawn: [],
            lastResetTime: 0,
            _midDraw: false,
            _needsDraw: true,
            _hasOpaqueTile: false,
            _tilesLoading: 0,
            springStiffness: $2.DEFAULT_SETTINGS.springStiffness,
            animationTime: $2.DEFAULT_SETTINGS.animationTime,
            minZoomImageRatio: $2.DEFAULT_SETTINGS.minZoomImageRatio,
            wrapHorizontal: $2.DEFAULT_SETTINGS.wrapHorizontal,
            wrapVertical: $2.DEFAULT_SETTINGS.wrapVertical,
            immediateRender: $2.DEFAULT_SETTINGS.immediateRender,
            blendTime: $2.DEFAULT_SETTINGS.blendTime,
            alwaysBlend: $2.DEFAULT_SETTINGS.alwaysBlend,
            minPixelRatio: $2.DEFAULT_SETTINGS.minPixelRatio,
            smoothTileEdgesMinZoom: $2.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,
            iOSDevice: $2.DEFAULT_SETTINGS.iOSDevice,
            debugMode: $2.DEFAULT_SETTINGS.debugMode,
            crossOriginPolicy: $2.DEFAULT_SETTINGS.crossOriginPolicy,
            ajaxWithCredentials: $2.DEFAULT_SETTINGS.ajaxWithCredentials,
            placeholderFillStyle: $2.DEFAULT_SETTINGS.placeholderFillStyle,
            opacity: $2.DEFAULT_SETTINGS.opacity,
            preload: $2.DEFAULT_SETTINGS.preload,
            compositeOperation: $2.DEFAULT_SETTINGS.compositeOperation
          }, options);
          this._preload = this.preload;
          delete this.preload;
          this._fullyLoaded = false;
          this._xSpring = new $2.Spring({
            initial: x,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._ySpring = new $2.Spring({
            initial: y,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._scaleSpring = new $2.Spring({
            initial: scale,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._degreesSpring = new $2.Spring({
            initial: degrees,
            springStiffness: this.springStiffness,
            animationTime: this.animationTime
          });
          this._updateForScale();
          if (fitBounds) {
            this.fitBounds(fitBounds, fitBoundsPlacement, true);
          }
          this._drawingHandler = function(args) {
            _this.viewer.raiseEvent("tile-drawing", $2.extend({
              tiledImage: _this
            }, args));
          };
        };
        $2.extend($2.TiledImage.prototype, $2.EventSource.prototype, {
          needsDraw: function() {
            return this._needsDraw;
          },
          getFullyLoaded: function() {
            return this._fullyLoaded;
          },
          _setFullyLoaded: function(flag) {
            if (flag === this._fullyLoaded) {
              return;
            }
            this._fullyLoaded = flag;
            this.raiseEvent("fully-loaded-change", {
              fullyLoaded: this._fullyLoaded
            });
          },
          reset: function() {
            this._tileCache.clearTilesFor(this);
            this.lastResetTime = $2.now();
            this._needsDraw = true;
          },
          update: function() {
            var xUpdated = this._xSpring.update();
            var yUpdated = this._ySpring.update();
            var scaleUpdated = this._scaleSpring.update();
            var degreesUpdated = this._degreesSpring.update();
            if (xUpdated || yUpdated || scaleUpdated || degreesUpdated) {
              this._updateForScale();
              this._needsDraw = true;
              return true;
            }
            return false;
          },
          draw: function() {
            if (this.opacity !== 0 || this._preload) {
              this._midDraw = true;
              this._updateViewport();
              this._midDraw = false;
            } else {
              this._needsDraw = false;
            }
          },
          destroy: function() {
            this.reset();
          },
          getBounds: function(current) {
            return this.getBoundsNoRotate(current).rotate(this.getRotation(current), this._getRotationPoint(current));
          },
          getBoundsNoRotate: function(current) {
            return current ? new $2.Rect(
              this._xSpring.current.value,
              this._ySpring.current.value,
              this._worldWidthCurrent,
              this._worldHeightCurrent
            ) : new $2.Rect(
              this._xSpring.target.value,
              this._ySpring.target.value,
              this._worldWidthTarget,
              this._worldHeightTarget
            );
          },
          getWorldBounds: function() {
            $2.console.error("[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead");
            return this.getBounds();
          },
          getClippedBounds: function(current) {
            var bounds = this.getBoundsNoRotate(current);
            if (this._clip) {
              var worldWidth = current ? this._worldWidthCurrent : this._worldWidthTarget;
              var ratio = worldWidth / this.source.dimensions.x;
              var clip = this._clip.times(ratio);
              bounds = new $2.Rect(
                bounds.x + clip.x,
                bounds.y + clip.y,
                clip.width,
                clip.height
              );
            }
            return bounds.rotate(this.getRotation(current), this._getRotationPoint(current));
          },
          getContentSize: function() {
            return new $2.Point(this.source.dimensions.x, this.source.dimensions.y);
          },
          _viewportToImageDelta: function(viewerX, viewerY, current) {
            var scale = current ? this._scaleSpring.current.value : this._scaleSpring.target.value;
            return new $2.Point(
              viewerX * (this.source.dimensions.x / scale),
              viewerY * (this.source.dimensions.y * this.contentAspectX / scale)
            );
          },
          viewportToImageCoordinates: function(viewerX, viewerY, current) {
            var point;
            if (viewerX instanceof $2.Point) {
              current = viewerY;
              point = viewerX;
            } else {
              point = new $2.Point(viewerX, viewerY);
            }
            point = point.rotate(-this.getRotation(current), this._getRotationPoint(current));
            return current ? this._viewportToImageDelta(
              point.x - this._xSpring.current.value,
              point.y - this._ySpring.current.value
            ) : this._viewportToImageDelta(
              point.x - this._xSpring.target.value,
              point.y - this._ySpring.target.value
            );
          },
          _imageToViewportDelta: function(imageX, imageY, current) {
            var scale = current ? this._scaleSpring.current.value : this._scaleSpring.target.value;
            return new $2.Point(
              imageX / this.source.dimensions.x * scale,
              imageY / this.source.dimensions.y / this.contentAspectX * scale
            );
          },
          imageToViewportCoordinates: function(imageX, imageY, current) {
            if (imageX instanceof $2.Point) {
              current = imageY;
              imageY = imageX.y;
              imageX = imageX.x;
            }
            var point = this._imageToViewportDelta(imageX, imageY);
            if (current) {
              point.x += this._xSpring.current.value;
              point.y += this._ySpring.current.value;
            } else {
              point.x += this._xSpring.target.value;
              point.y += this._ySpring.target.value;
            }
            return point.rotate(this.getRotation(current), this._getRotationPoint(current));
          },
          imageToViewportRectangle: function(imageX, imageY, pixelWidth, pixelHeight, current) {
            var rect = imageX;
            if (rect instanceof $2.Rect) {
              current = imageY;
            } else {
              rect = new $2.Rect(imageX, imageY, pixelWidth, pixelHeight);
            }
            var coordA = this.imageToViewportCoordinates(rect.getTopLeft(), current);
            var coordB = this._imageToViewportDelta(rect.width, rect.height, current);
            return new $2.Rect(
              coordA.x,
              coordA.y,
              coordB.x,
              coordB.y,
              rect.degrees + this.getRotation(current)
            );
          },
          viewportToImageRectangle: function(viewerX, viewerY, pointWidth, pointHeight, current) {
            var rect = viewerX;
            if (viewerX instanceof $2.Rect) {
              current = viewerY;
            } else {
              rect = new $2.Rect(viewerX, viewerY, pointWidth, pointHeight);
            }
            var coordA = this.viewportToImageCoordinates(rect.getTopLeft(), current);
            var coordB = this._viewportToImageDelta(rect.width, rect.height, current);
            return new $2.Rect(
              coordA.x,
              coordA.y,
              coordB.x,
              coordB.y,
              rect.degrees - this.getRotation(current)
            );
          },
          viewerElementToImageCoordinates: function(pixel) {
            var point = this.viewport.pointFromPixel(pixel, true);
            return this.viewportToImageCoordinates(point);
          },
          imageToViewerElementCoordinates: function(pixel) {
            var point = this.imageToViewportCoordinates(pixel);
            return this.viewport.pixelFromPoint(point, true);
          },
          windowToImageCoordinates: function(pixel) {
            var viewerCoordinates = pixel.minus(
              OpenSeadragon.getElementPosition(this.viewer.element)
            );
            return this.viewerElementToImageCoordinates(viewerCoordinates);
          },
          imageToWindowCoordinates: function(pixel) {
            var viewerCoordinates = this.imageToViewerElementCoordinates(pixel);
            return viewerCoordinates.plus(
              OpenSeadragon.getElementPosition(this.viewer.element)
            );
          },
          _viewportToTiledImageRectangle: function(rect) {
            var scale = this._scaleSpring.current.value;
            rect = rect.rotate(-this.getRotation(true), this._getRotationPoint(true));
            return new $2.Rect(
              (rect.x - this._xSpring.current.value) / scale,
              (rect.y - this._ySpring.current.value) / scale,
              rect.width / scale,
              rect.height / scale,
              rect.degrees
            );
          },
          viewportToImageZoom: function(viewportZoom) {
            var ratio = this._scaleSpring.current.value * this.viewport._containerInnerSize.x / this.source.dimensions.x;
            return ratio * viewportZoom;
          },
          imageToViewportZoom: function(imageZoom) {
            var ratio = this._scaleSpring.current.value * this.viewport._containerInnerSize.x / this.source.dimensions.x;
            return imageZoom / ratio;
          },
          setPosition: function(position, immediately) {
            var sameTarget = this._xSpring.target.value === position.x && this._ySpring.target.value === position.y;
            if (immediately) {
              if (sameTarget && this._xSpring.current.value === position.x && this._ySpring.current.value === position.y) {
                return;
              }
              this._xSpring.resetTo(position.x);
              this._ySpring.resetTo(position.y);
              this._needsDraw = true;
            } else {
              if (sameTarget) {
                return;
              }
              this._xSpring.springTo(position.x);
              this._ySpring.springTo(position.y);
              this._needsDraw = true;
            }
            if (!sameTarget) {
              this._raiseBoundsChange();
            }
          },
          setWidth: function(width, immediately) {
            this._setScale(width, immediately);
          },
          setHeight: function(height, immediately) {
            this._setScale(height / this.normHeight, immediately);
          },
          setCroppingPolygons: function(polygons) {
            var isXYObject = function(obj) {
              return obj instanceof $2.Point || typeof obj.x === "number" && typeof obj.y === "number";
            };
            var objectToSimpleXYObject = function(objs) {
              return objs.map(function(obj) {
                try {
                  if (isXYObject(obj)) {
                    return { x: obj.x, y: obj.y };
                  } else {
                    throw new Error();
                  }
                } catch (e) {
                  throw new Error("A Provided cropping polygon point is not supported");
                }
              });
            };
            try {
              if (!$2.isArray(polygons)) {
                throw new Error("Provided cropping polygon is not an array");
              }
              this._croppingPolygons = polygons.map(function(polygon) {
                return objectToSimpleXYObject(polygon);
              });
            } catch (e) {
              $2.console.error("[TiledImage.setCroppingPolygons] Cropping polygon format not supported");
              $2.console.error(e);
              this._croppingPolygons = null;
            }
          },
          resetCroppingPolygons: function() {
            this._croppingPolygons = null;
          },
          fitBounds: function(bounds, anchor, immediately) {
            anchor = anchor || $2.Placement.CENTER;
            var anchorProperties = $2.Placement.properties[anchor];
            var aspectRatio = this.contentAspectX;
            var xOffset = 0;
            var yOffset = 0;
            var displayedWidthRatio = 1;
            var displayedHeightRatio = 1;
            if (this._clip) {
              aspectRatio = this._clip.getAspectRatio();
              displayedWidthRatio = this._clip.width / this.source.dimensions.x;
              displayedHeightRatio = this._clip.height / this.source.dimensions.y;
              if (bounds.getAspectRatio() > aspectRatio) {
                xOffset = this._clip.x / this._clip.height * bounds.height;
                yOffset = this._clip.y / this._clip.height * bounds.height;
              } else {
                xOffset = this._clip.x / this._clip.width * bounds.width;
                yOffset = this._clip.y / this._clip.width * bounds.width;
              }
            }
            if (bounds.getAspectRatio() > aspectRatio) {
              var height = bounds.height / displayedHeightRatio;
              var marginLeft = 0;
              if (anchorProperties.isHorizontallyCentered) {
                marginLeft = (bounds.width - bounds.height * aspectRatio) / 2;
              } else if (anchorProperties.isRight) {
                marginLeft = bounds.width - bounds.height * aspectRatio;
              }
              this.setPosition(
                new $2.Point(bounds.x - xOffset + marginLeft, bounds.y - yOffset),
                immediately
              );
              this.setHeight(height, immediately);
            } else {
              var width = bounds.width / displayedWidthRatio;
              var marginTop = 0;
              if (anchorProperties.isVerticallyCentered) {
                marginTop = (bounds.height - bounds.width / aspectRatio) / 2;
              } else if (anchorProperties.isBottom) {
                marginTop = bounds.height - bounds.width / aspectRatio;
              }
              this.setPosition(
                new $2.Point(bounds.x - xOffset, bounds.y - yOffset + marginTop),
                immediately
              );
              this.setWidth(width, immediately);
            }
          },
          getClip: function() {
            if (this._clip) {
              return this._clip.clone();
            }
            return null;
          },
          setClip: function(newClip) {
            $2.console.assert(
              !newClip || newClip instanceof $2.Rect,
              "[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null"
            );
            if (newClip instanceof $2.Rect) {
              this._clip = newClip.clone();
            } else {
              this._clip = null;
            }
            this._needsDraw = true;
            this.raiseEvent("clip-change");
          },
          getOpacity: function() {
            return this.opacity;
          },
          setOpacity: function(opacity) {
            if (opacity === this.opacity) {
              return;
            }
            this.opacity = opacity;
            this._needsDraw = true;
            this.raiseEvent("opacity-change", {
              opacity: this.opacity
            });
          },
          getPreload: function() {
            return this._preload;
          },
          setPreload: function(preload) {
            this._preload = !!preload;
            this._needsDraw = true;
          },
          getRotation: function(current) {
            return current ? this._degreesSpring.current.value : this._degreesSpring.target.value;
          },
          setRotation: function(degrees, immediately) {
            if (this._degreesSpring.target.value === degrees && this._degreesSpring.isAtTargetValue()) {
              return;
            }
            if (immediately) {
              this._degreesSpring.resetTo(degrees);
            } else {
              this._degreesSpring.springTo(degrees);
            }
            this._needsDraw = true;
            this._raiseBoundsChange();
          },
          _getRotationPoint: function(current) {
            return this.getBoundsNoRotate(current).getCenter();
          },
          getCompositeOperation: function() {
            return this.compositeOperation;
          },
          setCompositeOperation: function(compositeOperation) {
            if (compositeOperation === this.compositeOperation) {
              return;
            }
            this.compositeOperation = compositeOperation;
            this._needsDraw = true;
            this.raiseEvent("composite-operation-change", {
              compositeOperation: this.compositeOperation
            });
          },
          _setScale: function(scale, immediately) {
            var sameTarget = this._scaleSpring.target.value === scale;
            if (immediately) {
              if (sameTarget && this._scaleSpring.current.value === scale) {
                return;
              }
              this._scaleSpring.resetTo(scale);
              this._updateForScale();
              this._needsDraw = true;
            } else {
              if (sameTarget) {
                return;
              }
              this._scaleSpring.springTo(scale);
              this._updateForScale();
              this._needsDraw = true;
            }
            if (!sameTarget) {
              this._raiseBoundsChange();
            }
          },
          _updateForScale: function() {
            this._worldWidthTarget = this._scaleSpring.target.value;
            this._worldHeightTarget = this.normHeight * this._scaleSpring.target.value;
            this._worldWidthCurrent = this._scaleSpring.current.value;
            this._worldHeightCurrent = this.normHeight * this._scaleSpring.current.value;
          },
          _raiseBoundsChange: function() {
            this.raiseEvent("bounds-change");
          },
          _isBottomItem: function() {
            return this.viewer.world.getItemAt(0) === this;
          },
          _getLevelsInterval: function() {
            var lowestLevel = Math.max(
              this.source.minLevel,
              Math.floor(Math.log(this.minZoomImageRatio) / Math.log(2))
            );
            var currentZeroRatio = this.viewport.deltaPixelsFromPointsNoRotate(
              this.source.getPixelRatio(0),
              true
            ).x * this._scaleSpring.current.value;
            var highestLevel = Math.min(
              Math.abs(this.source.maxLevel),
              Math.abs(Math.floor(
                Math.log(currentZeroRatio / this.minPixelRatio) / Math.log(2)
              ))
            );
            highestLevel = Math.max(highestLevel, this.source.minLevel || 0);
            lowestLevel = Math.min(lowestLevel, highestLevel);
            return {
              lowestLevel,
              highestLevel
            };
          },
          _updateViewport: function() {
            this._needsDraw = false;
            this._tilesLoading = 0;
            this.loadingCoverage = {};
            while (this.lastDrawn.length > 0) {
              var tile = this.lastDrawn.pop();
              tile.beingDrawn = false;
            }
            var viewport = this.viewport;
            var drawArea = this._viewportToTiledImageRectangle(
              viewport.getBoundsWithMargins(true)
            );
            if (!this.wrapHorizontal && !this.wrapVertical) {
              var tiledImageBounds = this._viewportToTiledImageRectangle(
                this.getClippedBounds(true)
              );
              drawArea = drawArea.intersection(tiledImageBounds);
              if (drawArea === null) {
                return;
              }
            }
            var levelsInterval = this._getLevelsInterval();
            var lowestLevel = levelsInterval.lowestLevel;
            var highestLevel = levelsInterval.highestLevel;
            var bestTile = null;
            var haveDrawn = false;
            var currentTime = $2.now();
            for (var level = highestLevel; level >= lowestLevel; level--) {
              var drawLevel = false;
              var currentRenderPixelRatio = viewport.deltaPixelsFromPointsNoRotate(
                this.source.getPixelRatio(level),
                true
              ).x * this._scaleSpring.current.value;
              if (level === lowestLevel || !haveDrawn && currentRenderPixelRatio >= this.minPixelRatio) {
                drawLevel = true;
                haveDrawn = true;
              } else if (!haveDrawn) {
                continue;
              }
              var targetRenderPixelRatio = viewport.deltaPixelsFromPointsNoRotate(
                this.source.getPixelRatio(level),
                false
              ).x * this._scaleSpring.current.value;
              var targetZeroRatio = viewport.deltaPixelsFromPointsNoRotate(
                this.source.getPixelRatio(
                  Math.max(
                    this.source.getClosestLevel(),
                    0
                  )
                ),
                false
              ).x * this._scaleSpring.current.value;
              var optimalRatio = this.immediateRender ? 1 : targetZeroRatio;
              var levelOpacity = Math.min(1, (currentRenderPixelRatio - 0.5) / 0.5);
              var levelVisibility = optimalRatio / Math.abs(
                optimalRatio - targetRenderPixelRatio
              );
              bestTile = updateLevel(
                this,
                haveDrawn,
                drawLevel,
                level,
                levelOpacity,
                levelVisibility,
                drawArea,
                currentTime,
                bestTile
              );
              if (providesCoverage(this.coverage, level)) {
                break;
              }
            }
            drawTiles(this, this.lastDrawn);
            if (bestTile && !bestTile.context2D) {
              loadTile(this, bestTile, currentTime);
              this._needsDraw = true;
              this._setFullyLoaded(false);
            } else {
              this._setFullyLoaded(this._tilesLoading === 0);
            }
          },
          _getCornerTiles: function(level, topLeftBound, bottomRightBound) {
            var leftX;
            var rightX;
            if (this.wrapHorizontal) {
              leftX = $2.positiveModulo(topLeftBound.x, 1);
              rightX = $2.positiveModulo(bottomRightBound.x, 1);
            } else {
              leftX = Math.max(0, topLeftBound.x);
              rightX = Math.min(1, bottomRightBound.x);
            }
            var topY;
            var bottomY;
            var aspectRatio = 1 / this.source.aspectRatio;
            if (this.wrapVertical) {
              topY = $2.positiveModulo(topLeftBound.y, aspectRatio);
              bottomY = $2.positiveModulo(bottomRightBound.y, aspectRatio);
            } else {
              topY = Math.max(0, topLeftBound.y);
              bottomY = Math.min(aspectRatio, bottomRightBound.y);
            }
            var topLeftTile = this.source.getTileAtPoint(level, new $2.Point(leftX, topY));
            var bottomRightTile = this.source.getTileAtPoint(level, new $2.Point(rightX, bottomY));
            var numTiles = this.source.getNumTiles(level);
            if (this.wrapHorizontal) {
              topLeftTile.x += numTiles.x * Math.floor(topLeftBound.x);
              bottomRightTile.x += numTiles.x * Math.floor(bottomRightBound.x);
            }
            if (this.wrapVertical) {
              topLeftTile.y += numTiles.y * Math.floor(topLeftBound.y / aspectRatio);
              bottomRightTile.y += numTiles.y * Math.floor(bottomRightBound.y / aspectRatio);
            }
            return {
              topLeft: topLeftTile,
              bottomRight: bottomRightTile
            };
          }
        });
        function updateLevel(tiledImage, haveDrawn, drawLevel, level, levelOpacity, levelVisibility, drawArea, currentTime, best) {
          var topLeftBound = drawArea.getBoundingBox().getTopLeft();
          var bottomRightBound = drawArea.getBoundingBox().getBottomRight();
          if (tiledImage.viewer) {
            tiledImage.viewer.raiseEvent("update-level", {
              tiledImage,
              havedrawn: haveDrawn,
              level,
              opacity: levelOpacity,
              visibility: levelVisibility,
              drawArea,
              topleft: topLeftBound,
              bottomright: bottomRightBound,
              currenttime: currentTime,
              best
            });
          }
          resetCoverage(tiledImage.coverage, level);
          resetCoverage(tiledImage.loadingCoverage, level);
          var cornerTiles = tiledImage._getCornerTiles(level, topLeftBound, bottomRightBound);
          var topLeftTile = cornerTiles.topLeft;
          var bottomRightTile = cornerTiles.bottomRight;
          var numberOfTiles = tiledImage.source.getNumTiles(level);
          var viewportCenter = tiledImage.viewport.pixelFromPoint(
            tiledImage.viewport.getCenter()
          );
          for (var x = topLeftTile.x; x <= bottomRightTile.x; x++) {
            for (var y = topLeftTile.y; y <= bottomRightTile.y; y++) {
              if (!tiledImage.wrapHorizontal && !tiledImage.wrapVertical) {
                var tileBounds = tiledImage.source.getTileBounds(level, x, y);
                if (drawArea.intersection(tileBounds) === null) {
                  continue;
                }
              }
              best = updateTile(
                tiledImage,
                drawLevel,
                haveDrawn,
                x,
                y,
                level,
                levelOpacity,
                levelVisibility,
                viewportCenter,
                numberOfTiles,
                currentTime,
                best
              );
            }
          }
          return best;
        }
        function updateTile(tiledImage, haveDrawn, drawLevel, x, y, level, levelOpacity, levelVisibility, viewportCenter, numberOfTiles, currentTime, best) {
          var tile = getTile(
            x,
            y,
            level,
            tiledImage,
            tiledImage.source,
            tiledImage.tilesMatrix,
            currentTime,
            numberOfTiles,
            tiledImage._worldWidthCurrent,
            tiledImage._worldHeightCurrent
          ), drawTile = drawLevel;
          if (tiledImage.viewer) {
            tiledImage.viewer.raiseEvent("update-tile", {
              tiledImage,
              tile
            });
          }
          setCoverage(tiledImage.coverage, level, x, y, false);
          var loadingCoverage = tile.loaded || tile.loading || isCovered(tiledImage.loadingCoverage, level, x, y);
          setCoverage(tiledImage.loadingCoverage, level, x, y, loadingCoverage);
          if (!tile.exists) {
            return best;
          }
          if (haveDrawn && !drawTile) {
            if (isCovered(tiledImage.coverage, level, x, y)) {
              setCoverage(tiledImage.coverage, level, x, y, true);
            } else {
              drawTile = true;
            }
          }
          if (!drawTile) {
            return best;
          }
          positionTile(
            tile,
            tiledImage.source.tileOverlap,
            tiledImage.viewport,
            viewportCenter,
            levelVisibility,
            tiledImage
          );
          if (!tile.loaded) {
            if (tile.context2D) {
              setTileLoaded(tiledImage, tile);
            } else {
              var imageRecord = tiledImage._tileCache.getImageRecord(tile.cacheKey);
              if (imageRecord) {
                var image = imageRecord.getImage();
                setTileLoaded(tiledImage, tile, image);
              }
            }
          }
          if (tile.loaded) {
            var needsDraw = blendTile(
              tiledImage,
              tile,
              x,
              y,
              level,
              levelOpacity,
              currentTime
            );
            if (needsDraw) {
              tiledImage._needsDraw = true;
            }
          } else if (tile.loading) {
            tiledImage._tilesLoading++;
          } else if (!loadingCoverage) {
            best = compareTiles(best, tile);
          }
          return best;
        }
        function getTile(x, y, level, tiledImage, tileSource, tilesMatrix, time, numTiles, worldWidth, worldHeight) {
          var xMod, yMod, bounds, sourceBounds, exists, url, ajaxHeaders, context2D, tile;
          if (!tilesMatrix[level]) {
            tilesMatrix[level] = {};
          }
          if (!tilesMatrix[level][x]) {
            tilesMatrix[level][x] = {};
          }
          if (!tilesMatrix[level][x][y]) {
            xMod = (numTiles.x + x % numTiles.x) % numTiles.x;
            yMod = (numTiles.y + y % numTiles.y) % numTiles.y;
            bounds = tileSource.getTileBounds(level, xMod, yMod);
            sourceBounds = tileSource.getTileBounds(level, xMod, yMod, true);
            exists = tileSource.tileExists(level, xMod, yMod);
            url = tileSource.getTileUrl(level, xMod, yMod);
            if (tiledImage.loadTilesWithAjax) {
              ajaxHeaders = tileSource.getTileAjaxHeaders(level, xMod, yMod);
              if ($2.isPlainObject(tiledImage.ajaxHeaders)) {
                ajaxHeaders = $2.extend({}, tiledImage.ajaxHeaders, ajaxHeaders);
              }
            } else {
              ajaxHeaders = null;
            }
            context2D = tileSource.getContext2D ? tileSource.getContext2D(level, xMod, yMod) : void 0;
            bounds.x += (x - xMod) / numTiles.x;
            bounds.y += worldHeight / worldWidth * ((y - yMod) / numTiles.y);
            tile = new $2.Tile(
              level,
              x,
              y,
              bounds,
              exists,
              url,
              context2D,
              tiledImage.loadTilesWithAjax,
              ajaxHeaders,
              sourceBounds
            );
            if (xMod === numTiles.x - 1) {
              tile.isRightMost = true;
            }
            if (yMod === numTiles.y - 1) {
              tile.isBottomMost = true;
            }
            tilesMatrix[level][x][y] = tile;
          }
          tile = tilesMatrix[level][x][y];
          tile.lastTouchTime = time;
          return tile;
        }
        function loadTile(tiledImage, tile, time) {
          tile.loading = true;
          tiledImage._imageLoader.addJob({
            src: tile.url,
            loadWithAjax: tile.loadWithAjax,
            ajaxHeaders: tile.ajaxHeaders,
            crossOriginPolicy: tiledImage.crossOriginPolicy,
            ajaxWithCredentials: tiledImage.ajaxWithCredentials,
            callback: function(image, errorMsg, tileRequest) {
              onTileLoad(tiledImage, tile, time, image, errorMsg, tileRequest);
            },
            abort: function() {
              tile.loading = false;
            }
          });
        }
        function onTileLoad(tiledImage, tile, time, image, errorMsg, tileRequest) {
          if (!image) {
            $2.console.log("Tile %s failed to load: %s - error: %s", tile, tile.url, errorMsg);
            tiledImage.viewer.raiseEvent("tile-load-failed", {
              tile,
              tiledImage,
              time,
              message: errorMsg,
              tileRequest
            });
            tile.loading = false;
            tile.exists = false;
            return;
          }
          if (time < tiledImage.lastResetTime) {
            $2.console.log("Ignoring tile %s loaded before reset: %s", tile, tile.url);
            tile.loading = false;
            return;
          }
          var finish = function() {
            var cutoff = tiledImage.source.getClosestLevel();
            setTileLoaded(tiledImage, tile, image, cutoff, tileRequest);
          };
          if (!tiledImage._midDraw) {
            finish();
          } else {
            window.setTimeout(finish, 1);
          }
        }
        function setTileLoaded(tiledImage, tile, image, cutoff, tileRequest) {
          var increment = 0;
          function getCompletionCallback() {
            increment++;
            return completionCallback;
          }
          function completionCallback() {
            increment--;
            if (increment === 0) {
              tile.loading = false;
              tile.loaded = true;
              if (!tile.context2D) {
                tiledImage._tileCache.cacheTile({
                  image,
                  tile,
                  cutoff,
                  tiledImage
                });
              }
              tiledImage._needsDraw = true;
            }
          }
          tiledImage.viewer.raiseEvent("tile-loaded", {
            tile,
            tiledImage,
            tileRequest,
            image,
            getCompletionCallback
          });
          getCompletionCallback()();
        }
        function positionTile(tile, overlap, viewport, viewportCenter, levelVisibility, tiledImage) {
          var boundsTL = tile.bounds.getTopLeft();
          boundsTL.x *= tiledImage._scaleSpring.current.value;
          boundsTL.y *= tiledImage._scaleSpring.current.value;
          boundsTL.x += tiledImage._xSpring.current.value;
          boundsTL.y += tiledImage._ySpring.current.value;
          var boundsSize = tile.bounds.getSize();
          boundsSize.x *= tiledImage._scaleSpring.current.value;
          boundsSize.y *= tiledImage._scaleSpring.current.value;
          var positionC = viewport.pixelFromPointNoRotate(boundsTL, true), positionT = viewport.pixelFromPointNoRotate(boundsTL, false), sizeC = viewport.deltaPixelsFromPointsNoRotate(boundsSize, true), sizeT = viewport.deltaPixelsFromPointsNoRotate(boundsSize, false), tileCenter = positionT.plus(sizeT.divide(2)), tileSquaredDistance = viewportCenter.squaredDistanceTo(tileCenter);
          if (!overlap) {
            sizeC = sizeC.plus(new $2.Point(1, 1));
          }
          if (tile.isRightMost && tiledImage.wrapHorizontal) {
            sizeC.x += 0.75;
          }
          if (tile.isBottomMost && tiledImage.wrapVertical) {
            sizeC.y += 0.75;
          }
          tile.position = positionC;
          tile.size = sizeC;
          tile.squaredDistance = tileSquaredDistance;
          tile.visibility = levelVisibility;
        }
        function blendTile(tiledImage, tile, x, y, level, levelOpacity, currentTime) {
          var blendTimeMillis = 1e3 * tiledImage.blendTime, deltaTime, opacity;
          if (!tile.blendStart) {
            tile.blendStart = currentTime;
          }
          deltaTime = currentTime - tile.blendStart;
          opacity = blendTimeMillis ? Math.min(1, deltaTime / blendTimeMillis) : 1;
          if (tiledImage.alwaysBlend) {
            opacity *= levelOpacity;
          }
          tile.opacity = opacity;
          tiledImage.lastDrawn.push(tile);
          if (opacity === 1) {
            setCoverage(tiledImage.coverage, level, x, y, true);
            tiledImage._hasOpaqueTile = true;
          } else if (deltaTime < blendTimeMillis) {
            return true;
          }
          return false;
        }
        function providesCoverage(coverage, level, x, y) {
          var rows, cols, i, j;
          if (!coverage[level]) {
            return false;
          }
          if (x === void 0 || y === void 0) {
            rows = coverage[level];
            for (i in rows) {
              if (Object.prototype.hasOwnProperty.call(rows, i)) {
                cols = rows[i];
                for (j in cols) {
                  if (Object.prototype.hasOwnProperty.call(cols, j) && !cols[j]) {
                    return false;
                  }
                }
              }
            }
            return true;
          }
          return coverage[level][x] === void 0 || coverage[level][x][y] === void 0 || coverage[level][x][y] === true;
        }
        function isCovered(coverage, level, x, y) {
          if (x === void 0 || y === void 0) {
            return providesCoverage(coverage, level + 1);
          } else {
            return providesCoverage(coverage, level + 1, 2 * x, 2 * y) && providesCoverage(coverage, level + 1, 2 * x, 2 * y + 1) && providesCoverage(coverage, level + 1, 2 * x + 1, 2 * y) && providesCoverage(coverage, level + 1, 2 * x + 1, 2 * y + 1);
          }
        }
        function setCoverage(coverage, level, x, y, covers) {
          if (!coverage[level]) {
            $2.console.warn(
              "Setting coverage for a tile before its level's coverage has been reset: %s",
              level
            );
            return;
          }
          if (!coverage[level][x]) {
            coverage[level][x] = {};
          }
          coverage[level][x][y] = covers;
        }
        function resetCoverage(coverage, level) {
          coverage[level] = {};
        }
        function compareTiles(previousBest, tile) {
          if (!previousBest) {
            return tile;
          }
          if (tile.visibility > previousBest.visibility) {
            return tile;
          } else if (tile.visibility == previousBest.visibility) {
            if (tile.squaredDistance < previousBest.squaredDistance) {
              return tile;
            }
          }
          return previousBest;
        }
        function drawTiles(tiledImage, lastDrawn) {
          if (tiledImage.opacity === 0 || lastDrawn.length === 0 && !tiledImage.placeholderFillStyle) {
            return;
          }
          var tile = lastDrawn[0];
          var useSketch;
          if (tile) {
            useSketch = tiledImage.opacity < 1 || tiledImage.compositeOperation && tiledImage.compositeOperation !== "source-over" || !tiledImage._isBottomItem() && tile._hasTransparencyChannel();
          }
          var sketchScale;
          var sketchTranslate;
          var zoom = tiledImage.viewport.getZoom(true);
          var imageZoom = tiledImage.viewportToImageZoom(zoom);
          if (lastDrawn.length > 1 && imageZoom > tiledImage.smoothTileEdgesMinZoom && !tiledImage.iOSDevice && tiledImage.getRotation(true) % 360 === 0 && $2.supportsCanvas) {
            useSketch = true;
            sketchScale = tile.getScaleForEdgeSmoothing();
            sketchTranslate = tile.getTranslationForEdgeSmoothing(
              sketchScale,
              tiledImage._drawer.getCanvasSize(false),
              tiledImage._drawer.getCanvasSize(true)
            );
          }
          var bounds;
          if (useSketch) {
            if (!sketchScale) {
              bounds = tiledImage.viewport.viewportToViewerElementRectangle(
                tiledImage.getClippedBounds(true)
              ).getIntegerBoundingBox();
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                if (tiledImage.viewport.degrees !== 0 || tiledImage.getRotation(true) % 360 !== 0) {
                  bounds.x = tiledImage._drawer.viewer.container.clientWidth - (bounds.x + bounds.width);
                }
              }
              bounds = bounds.times($2.pixelDensityRatio);
            }
            tiledImage._drawer._clear(true, bounds);
          }
          if (!sketchScale) {
            if (tiledImage.viewport.degrees !== 0) {
              tiledImage._drawer._offsetForRotation({
                degrees: tiledImage.viewport.degrees,
                useSketch
              });
            }
            if (tiledImage.getRotation(true) % 360 !== 0) {
              tiledImage._drawer._offsetForRotation({
                degrees: tiledImage.getRotation(true),
                point: tiledImage.viewport.pixelFromPointNoRotate(
                  tiledImage._getRotationPoint(true),
                  true
                ),
                useSketch
              });
            }
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
          }
          var usedClip = false;
          if (tiledImage._clip) {
            tiledImage._drawer.saveContext(useSketch);
            var box = tiledImage.imageToViewportRectangle(tiledImage._clip, true);
            box = box.rotate(-tiledImage.getRotation(true), tiledImage._getRotationPoint(true));
            var clipRect = tiledImage._drawer.viewportToDrawerRectangle(box);
            if (sketchScale) {
              clipRect = clipRect.times(sketchScale);
            }
            if (sketchTranslate) {
              clipRect = clipRect.translate(sketchTranslate);
            }
            tiledImage._drawer.setClip(clipRect, useSketch);
            usedClip = true;
          }
          if (tiledImage._croppingPolygons) {
            tiledImage._drawer.saveContext(useSketch);
            try {
              var polygons = tiledImage._croppingPolygons.map(function(polygon) {
                return polygon.map(function(coord) {
                  var point = tiledImage.imageToViewportCoordinates(coord.x, coord.y, true).rotate(-tiledImage.getRotation(true), tiledImage._getRotationPoint(true));
                  var clipPoint = tiledImage._drawer.viewportCoordToDrawerCoord(point);
                  if (sketchScale) {
                    clipPoint = clipPoint.times(sketchScale);
                  }
                  return clipPoint;
                });
              });
              tiledImage._drawer.clipWithPolygons(polygons, useSketch);
            } catch (e) {
              $2.console.error(e);
            }
            usedClip = true;
          }
          if (tiledImage.placeholderFillStyle && tiledImage._hasOpaqueTile === false) {
            var placeholderRect = tiledImage._drawer.viewportToDrawerRectangle(tiledImage.getBounds(true));
            if (sketchScale) {
              placeholderRect = placeholderRect.times(sketchScale);
            }
            if (sketchTranslate) {
              placeholderRect = placeholderRect.translate(sketchTranslate);
            }
            var fillStyle = null;
            if (typeof tiledImage.placeholderFillStyle === "function") {
              fillStyle = tiledImage.placeholderFillStyle(tiledImage, tiledImage._drawer.context);
            } else {
              fillStyle = tiledImage.placeholderFillStyle;
            }
            tiledImage._drawer.drawRectangle(placeholderRect, fillStyle, useSketch);
          }
          for (var i = lastDrawn.length - 1; i >= 0; i--) {
            tile = lastDrawn[i];
            tiledImage._drawer.drawTile(tile, tiledImage._drawingHandler, useSketch, sketchScale, sketchTranslate);
            tile.beingDrawn = true;
            if (tiledImage.viewer) {
              tiledImage.viewer.raiseEvent("tile-drawn", {
                tiledImage,
                tile
              });
            }
          }
          if (usedClip) {
            tiledImage._drawer.restoreContext(useSketch);
          }
          if (!sketchScale) {
            if (tiledImage.getRotation(true) % 360 !== 0) {
              tiledImage._drawer._restoreRotationChanges(useSketch);
            }
            if (tiledImage.viewport.degrees !== 0) {
              tiledImage._drawer._restoreRotationChanges(useSketch);
            }
          }
          if (useSketch) {
            if (sketchScale) {
              if (tiledImage.viewport.degrees !== 0) {
                tiledImage._drawer._offsetForRotation({
                  degrees: tiledImage.viewport.degrees,
                  useSketch: false
                });
              }
              if (tiledImage.getRotation(true) % 360 !== 0) {
                tiledImage._drawer._offsetForRotation({
                  degrees: tiledImage.getRotation(true),
                  point: tiledImage.viewport.pixelFromPointNoRotate(
                    tiledImage._getRotationPoint(true),
                    true
                  ),
                  useSketch: false
                });
              }
            }
            tiledImage._drawer.blendSketch({
              opacity: tiledImage.opacity,
              scale: sketchScale,
              translate: sketchTranslate,
              compositeOperation: tiledImage.compositeOperation,
              bounds
            });
            if (sketchScale) {
              if (tiledImage.getRotation(true) % 360 !== 0) {
                tiledImage._drawer._restoreRotationChanges(false);
              }
              if (tiledImage.viewport.degrees !== 0) {
                tiledImage._drawer._restoreRotationChanges(false);
              }
            }
          }
          if (!sketchScale) {
            if (tiledImage.viewport.degrees === 0 && tiledImage.getRotation(true) % 360 === 0) {
              if (tiledImage._drawer.viewer.viewport.getFlip()) {
                tiledImage._drawer._flip();
              }
            }
          }
          drawDebugInfo(tiledImage, lastDrawn);
        }
        function drawDebugInfo(tiledImage, lastDrawn) {
          if (tiledImage.debugMode) {
            for (var i = lastDrawn.length - 1; i >= 0; i--) {
              var tile = lastDrawn[i];
              try {
                tiledImage._drawer.drawDebugInfo(
                  tile,
                  lastDrawn.length,
                  i,
                  tiledImage
                );
              } catch (e) {
                $2.console.error(e);
              }
            }
          }
        }
      })(OpenSeadragon);
      (function($2) {
        var TileRecord = function(options) {
          $2.console.assert(options, "[TileCache.cacheTile] options is required");
          $2.console.assert(options.tile, "[TileCache.cacheTile] options.tile is required");
          $2.console.assert(options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required");
          this.tile = options.tile;
          this.tiledImage = options.tiledImage;
        };
        var ImageRecord = function(options) {
          $2.console.assert(options, "[ImageRecord] options is required");
          $2.console.assert(options.image, "[ImageRecord] options.image is required");
          this._image = options.image;
          this._tiles = [];
        };
        ImageRecord.prototype = {
          destroy: function() {
            this._image = null;
            this._renderedContext = null;
            this._tiles = null;
          },
          getImage: function() {
            return this._image;
          },
          getRenderedContext: function() {
            if (!this._renderedContext) {
              var canvas = document.createElement("canvas");
              canvas.width = this._image.width;
              canvas.height = this._image.height;
              this._renderedContext = canvas.getContext("2d");
              this._renderedContext.drawImage(this._image, 0, 0);
              this._image = null;
            }
            return this._renderedContext;
          },
          setRenderedContext: function(renderedContext) {
            $2.console.error("ImageRecord.setRenderedContext is deprecated. The rendered context should be created by the ImageRecord itself when calling ImageRecord.getRenderedContext.");
            this._renderedContext = renderedContext;
          },
          addTile: function(tile) {
            $2.console.assert(tile, "[ImageRecord.addTile] tile is required");
            this._tiles.push(tile);
          },
          removeTile: function(tile) {
            for (var i = 0; i < this._tiles.length; i++) {
              if (this._tiles[i] === tile) {
                this._tiles.splice(i, 1);
                return;
              }
            }
            $2.console.warn("[ImageRecord.removeTile] trying to remove unknown tile", tile);
          },
          getTileCount: function() {
            return this._tiles.length;
          }
        };
        $2.TileCache = function(options) {
          options = options || {};
          this._maxImageCacheCount = options.maxImageCacheCount || $2.DEFAULT_SETTINGS.maxImageCacheCount;
          this._tilesLoaded = [];
          this._imagesLoaded = [];
          this._imagesLoadedCount = 0;
        };
        $2.TileCache.prototype = {
          numTilesLoaded: function() {
            return this._tilesLoaded.length;
          },
          cacheTile: function(options) {
            $2.console.assert(options, "[TileCache.cacheTile] options is required");
            $2.console.assert(options.tile, "[TileCache.cacheTile] options.tile is required");
            $2.console.assert(options.tile.cacheKey, "[TileCache.cacheTile] options.tile.cacheKey is required");
            $2.console.assert(options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required");
            var cutoff = options.cutoff || 0;
            var insertionIndex = this._tilesLoaded.length;
            var imageRecord = this._imagesLoaded[options.tile.cacheKey];
            if (!imageRecord) {
              $2.console.assert(options.image, "[TileCache.cacheTile] options.image is required to create an ImageRecord");
              imageRecord = this._imagesLoaded[options.tile.cacheKey] = new ImageRecord({
                image: options.image
              });
              this._imagesLoadedCount++;
            }
            imageRecord.addTile(options.tile);
            options.tile.cacheImageRecord = imageRecord;
            if (this._imagesLoadedCount > this._maxImageCacheCount) {
              var worstTile = null;
              var worstTileIndex = -1;
              var worstTileRecord = null;
              var prevTile, worstTime, worstLevel, prevTime, prevLevel, prevTileRecord;
              for (var i = this._tilesLoaded.length - 1; i >= 0; i--) {
                prevTileRecord = this._tilesLoaded[i];
                prevTile = prevTileRecord.tile;
                if (prevTile.level <= cutoff || prevTile.beingDrawn) {
                  continue;
                } else if (!worstTile) {
                  worstTile = prevTile;
                  worstTileIndex = i;
                  worstTileRecord = prevTileRecord;
                  continue;
                }
                prevTime = prevTile.lastTouchTime;
                worstTime = worstTile.lastTouchTime;
                prevLevel = prevTile.level;
                worstLevel = worstTile.level;
                if (prevTime < worstTime || prevTime == worstTime && prevLevel > worstLevel) {
                  worstTile = prevTile;
                  worstTileIndex = i;
                  worstTileRecord = prevTileRecord;
                }
              }
              if (worstTile && worstTileIndex >= 0) {
                this._unloadTile(worstTileRecord);
                insertionIndex = worstTileIndex;
              }
            }
            this._tilesLoaded[insertionIndex] = new TileRecord({
              tile: options.tile,
              tiledImage: options.tiledImage
            });
          },
          clearTilesFor: function(tiledImage) {
            $2.console.assert(tiledImage, "[TileCache.clearTilesFor] tiledImage is required");
            var tileRecord;
            for (var i = 0; i < this._tilesLoaded.length; ++i) {
              tileRecord = this._tilesLoaded[i];
              if (tileRecord.tiledImage === tiledImage) {
                this._unloadTile(tileRecord);
                this._tilesLoaded.splice(i, 1);
                i--;
              }
            }
          },
          getImageRecord: function(cacheKey) {
            $2.console.assert(cacheKey, "[TileCache.getImageRecord] cacheKey is required");
            return this._imagesLoaded[cacheKey];
          },
          _unloadTile: function(tileRecord) {
            $2.console.assert(tileRecord, "[TileCache._unloadTile] tileRecord is required");
            var tile = tileRecord.tile;
            var tiledImage = tileRecord.tiledImage;
            tile.unload();
            tile.cacheImageRecord = null;
            var imageRecord = this._imagesLoaded[tile.cacheKey];
            imageRecord.removeTile(tile);
            if (!imageRecord.getTileCount()) {
              imageRecord.destroy();
              delete this._imagesLoaded[tile.cacheKey];
              this._imagesLoadedCount--;
            }
            tiledImage.viewer.raiseEvent("tile-unloaded", {
              tile,
              tiledImage
            });
          }
        };
      })(OpenSeadragon);
      (function($2) {
        $2.World = function(options) {
          var _this = this;
          $2.console.assert(options.viewer, "[World] options.viewer is required");
          $2.EventSource.call(this);
          this.viewer = options.viewer;
          this._items = [];
          this._needsDraw = false;
          this._autoRefigureSizes = true;
          this._needsSizesFigured = false;
          this._delegatedFigureSizes = function(event) {
            if (_this._autoRefigureSizes) {
              _this._figureSizes();
            } else {
              _this._needsSizesFigured = true;
            }
          };
          this._figureSizes();
        };
        $2.extend($2.World.prototype, $2.EventSource.prototype, {
          addItem: function(item, options) {
            $2.console.assert(item, "[World.addItem] item is required");
            $2.console.assert(item instanceof $2.TiledImage, "[World.addItem] only TiledImages supported at this time");
            options = options || {};
            if (options.index !== void 0) {
              var index = Math.max(0, Math.min(this._items.length, options.index));
              this._items.splice(index, 0, item);
            } else {
              this._items.push(item);
            }
            if (this._autoRefigureSizes) {
              this._figureSizes();
            } else {
              this._needsSizesFigured = true;
            }
            this._needsDraw = true;
            item.addHandler("bounds-change", this._delegatedFigureSizes);
            item.addHandler("clip-change", this._delegatedFigureSizes);
            this.raiseEvent("add-item", {
              item
            });
          },
          getItemAt: function(index) {
            $2.console.assert(index !== void 0, "[World.getItemAt] index is required");
            return this._items[index];
          },
          getIndexOfItem: function(item) {
            $2.console.assert(item, "[World.getIndexOfItem] item is required");
            return $2.indexOf(this._items, item);
          },
          getItemCount: function() {
            return this._items.length;
          },
          setItemIndex: function(item, index) {
            $2.console.assert(item, "[World.setItemIndex] item is required");
            $2.console.assert(index !== void 0, "[World.setItemIndex] index is required");
            var oldIndex = this.getIndexOfItem(item);
            if (index >= this._items.length) {
              throw new Error("Index bigger than number of layers.");
            }
            if (index === oldIndex || oldIndex === -1) {
              return;
            }
            this._items.splice(oldIndex, 1);
            this._items.splice(index, 0, item);
            this._needsDraw = true;
            this.raiseEvent("item-index-change", {
              item,
              previousIndex: oldIndex,
              newIndex: index
            });
          },
          removeItem: function(item) {
            $2.console.assert(item, "[World.removeItem] item is required");
            var index = $2.indexOf(this._items, item);
            if (index === -1) {
              return;
            }
            item.removeHandler("bounds-change", this._delegatedFigureSizes);
            item.removeHandler("clip-change", this._delegatedFigureSizes);
            item.destroy();
            this._items.splice(index, 1);
            this._figureSizes();
            this._needsDraw = true;
            this._raiseRemoveItem(item);
          },
          removeAll: function() {
            this.viewer._cancelPendingImages();
            var item;
            var i;
            for (i = 0; i < this._items.length; i++) {
              item = this._items[i];
              item.removeHandler("bounds-change", this._delegatedFigureSizes);
              item.removeHandler("clip-change", this._delegatedFigureSizes);
              item.destroy();
            }
            var removedItems = this._items;
            this._items = [];
            this._figureSizes();
            this._needsDraw = true;
            for (i = 0; i < removedItems.length; i++) {
              item = removedItems[i];
              this._raiseRemoveItem(item);
            }
          },
          resetItems: function() {
            for (var i = 0; i < this._items.length; i++) {
              this._items[i].reset();
            }
          },
          update: function() {
            var animated = false;
            for (var i = 0; i < this._items.length; i++) {
              animated = this._items[i].update() || animated;
            }
            return animated;
          },
          draw: function() {
            for (var i = 0; i < this._items.length; i++) {
              this._items[i].draw();
            }
            this._needsDraw = false;
          },
          needsDraw: function() {
            for (var i = 0; i < this._items.length; i++) {
              if (this._items[i].needsDraw()) {
                return true;
              }
            }
            return this._needsDraw;
          },
          getHomeBounds: function() {
            return this._homeBounds.clone();
          },
          getContentFactor: function() {
            return this._contentFactor;
          },
          setAutoRefigureSizes: function(value) {
            this._autoRefigureSizes = value;
            if (value & this._needsSizesFigured) {
              this._figureSizes();
              this._needsSizesFigured = false;
            }
          },
          arrange: function(options) {
            options = options || {};
            var immediately = options.immediately || false;
            var layout = options.layout || $2.DEFAULT_SETTINGS.collectionLayout;
            var rows = options.rows || $2.DEFAULT_SETTINGS.collectionRows;
            var columns = options.columns || $2.DEFAULT_SETTINGS.collectionColumns;
            var tileSize = options.tileSize || $2.DEFAULT_SETTINGS.collectionTileSize;
            var tileMargin = options.tileMargin || $2.DEFAULT_SETTINGS.collectionTileMargin;
            var increment = tileSize + tileMargin;
            var wrap2;
            if (!options.rows && columns) {
              wrap2 = columns;
            } else {
              wrap2 = Math.ceil(this._items.length / rows);
            }
            var x = 0;
            var y = 0;
            var item, box, width, height, position;
            this.setAutoRefigureSizes(false);
            for (var i = 0; i < this._items.length; i++) {
              if (i && i % wrap2 === 0) {
                if (layout === "horizontal") {
                  y += increment;
                  x = 0;
                } else {
                  x += increment;
                  y = 0;
                }
              }
              item = this._items[i];
              box = item.getBounds();
              if (box.width > box.height) {
                width = tileSize;
              } else {
                width = tileSize * (box.width / box.height);
              }
              height = width * (box.height / box.width);
              position = new $2.Point(
                x + (tileSize - width) / 2,
                y + (tileSize - height) / 2
              );
              item.setPosition(position, immediately);
              item.setWidth(width, immediately);
              if (layout === "horizontal") {
                x += increment;
              } else {
                y += increment;
              }
            }
            this.setAutoRefigureSizes(true);
          },
          _figureSizes: function() {
            var oldHomeBounds = this._homeBounds ? this._homeBounds.clone() : null;
            var oldContentSize = this._contentSize ? this._contentSize.clone() : null;
            var oldContentFactor = this._contentFactor || 0;
            if (!this._items.length) {
              this._homeBounds = new $2.Rect(0, 0, 1, 1);
              this._contentSize = new $2.Point(1, 1);
              this._contentFactor = 1;
            } else {
              var item = this._items[0];
              var bounds = item.getBounds();
              this._contentFactor = item.getContentSize().x / bounds.width;
              var clippedBounds = item.getClippedBounds().getBoundingBox();
              var left = clippedBounds.x;
              var top = clippedBounds.y;
              var right = clippedBounds.x + clippedBounds.width;
              var bottom = clippedBounds.y + clippedBounds.height;
              for (var i = 1; i < this._items.length; i++) {
                item = this._items[i];
                bounds = item.getBounds();
                this._contentFactor = Math.max(
                  this._contentFactor,
                  item.getContentSize().x / bounds.width
                );
                clippedBounds = item.getClippedBounds().getBoundingBox();
                left = Math.min(left, clippedBounds.x);
                top = Math.min(top, clippedBounds.y);
                right = Math.max(right, clippedBounds.x + clippedBounds.width);
                bottom = Math.max(bottom, clippedBounds.y + clippedBounds.height);
              }
              this._homeBounds = new $2.Rect(left, top, right - left, bottom - top);
              this._contentSize = new $2.Point(
                this._homeBounds.width * this._contentFactor,
                this._homeBounds.height * this._contentFactor
              );
            }
            if (this._contentFactor !== oldContentFactor || !this._homeBounds.equals(oldHomeBounds) || !this._contentSize.equals(oldContentSize)) {
              this.raiseEvent("metrics-change", {});
            }
          },
          _raiseRemoveItem: function(item) {
            this.raiseEvent("remove-item", { item });
          }
        });
      })(OpenSeadragon);
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports2, module2) {
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root2 = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
        var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result2 = Array(length);
          while (++index < length) {
            result2[index] = iteratee(array[index], index, array);
          }
          return result2;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string2) {
          return string2.split("");
        }
        function asciiWords(string2) {
          return string2.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result2;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result2 = key;
              return false;
            }
          });
          return result2;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result2, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result2 = result2 === undefined2 ? current : result2 + current;
            }
          }
          return result2;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result2 = Array(n);
          while (++index < n) {
            result2[index] = iteratee(index);
          }
          return result2;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string2) {
          return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result2 = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result2;
            }
          }
          return result2;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string2) {
          return reHasUnicode.test(string2);
        }
        function hasUnicodeWord(string2) {
          return reHasUnicodeWord.test(string2);
        }
        function iteratorToArray(iterator) {
          var data, result2 = [];
          while (!(data = iterator.next()).done) {
            result2.push(data.value);
          }
          return result2;
        }
        function mapToArray(map) {
          var index = -1, result2 = Array(map.size);
          map.forEach(function(value, key) {
            result2[++index] = [key, value];
          });
          return result2;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result2[resIndex++] = index;
            }
          }
          return result2;
        }
        function setToArray(set) {
          var index = -1, result2 = Array(set.size);
          set.forEach(function(value) {
            result2[++index] = value;
          });
          return result2;
        }
        function setToPairs(set) {
          var index = -1, result2 = Array(set.size);
          set.forEach(function(value) {
            result2[++index] = [value, value];
          });
          return result2;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string2) {
          return hasUnicode(string2) ? unicodeSize(string2) : asciiSize(string2);
        }
        function stringToArray(string2) {
          return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
        }
        function trimmedEndIndex(string2) {
          var index = string2.length;
          while (index-- && reWhitespace.test(string2.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string2) {
          var result2 = reUnicode.lastIndex = 0;
          while (reUnicode.test(string2)) {
            ++result2;
          }
          return result2;
        }
        function unicodeToArray(string2) {
          return string2.match(reUnicode) || [];
        }
        function unicodeWords(string2) {
          return string2.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root2 : _2.defaults(root2.Object(), context, _2.pick(root2, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty4 = objectProto.hasOwnProperty;
          var idCounter2 = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root2._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty4).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty4.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject3(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result3 = new object();
              object.prototype = undefined2;
              return result3;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            "escape": reEscape,
            "evaluate": reEvaluate,
            "interpolate": reInterpolate,
            "variable": "",
            "imports": {
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result3 = new LazyWrapper(this.__wrapped__);
            result3.__actions__ = copyArray(this.__actions__);
            result3.__dir__ = this.__dir__;
            result3.__filtered__ = this.__filtered__;
            result3.__iteratees__ = copyArray(this.__iteratees__);
            result3.__takeCount__ = this.__takeCount__;
            result3.__views__ = copyArray(this.__views__);
            return result3;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result3 = new LazyWrapper(this);
              result3.__dir__ = -1;
              result3.__filtered__ = true;
            } else {
              result3 = this.clone();
              result3.__dir__ *= -1;
            }
            return result3;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result3 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result3[resIndex++] = value;
              }
            return result3;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result3 = this.has(key) && delete this.__data__[key];
            this.size -= result3 ? 1 : 0;
            return result3;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result3 = data[key];
              return result3 === HASH_UNDEFINED ? undefined2 : result3;
            }
            return hasOwnProperty4.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty4.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result3 = getMapData(this, key)["delete"](key);
            this.size -= result3 ? 1 : 0;
            return result3;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result3 = data["delete"](key);
            this.size = data.size;
            return result3;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType2, result3 = skipIndexes ? baseTimes(value.length, String2) : [], length = result3.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty4.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                result3.push(key);
              }
            }
            return result3;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty4.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result3 = Array2(length), skip = object == null;
            while (++index < length) {
              result3[index] = skip ? undefined2 : get2(object, paths[index]);
            }
            return result3;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result3, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result3 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result3 !== undefined2) {
              return result3;
            }
            if (!isObject3(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result3 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result3);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result3 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result3, value)) : copySymbols(value, baseAssign(result3, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result3 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result3);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result3.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result3.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result3, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result3;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result3 = [], valuesLength = values2.length;
            if (!length) {
              return result3;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result3.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result3.push(value);
                }
              }
            return result3;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result3 = true;
            baseEach(collection, function(value, index, collection2) {
              result3 = !!predicate(value, index, collection2);
              return result3;
            });
            return result3;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result3 = value;
              }
            }
            return result3;
          }
          function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end === undefined2 || end > length ? length : toInteger(end);
            if (end < 0) {
              end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
              array[start++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result3 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result3.push(value);
              }
            });
            return result3;
          }
          function baseFlatten(array, depth, predicate, isStrict, result3) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result3 || (result3 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result3);
                } else {
                  arrayPush(result3, value);
                }
              } else if (!isStrict) {
                result3[result3.length] = value;
              }
            }
            return result3;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result3 = keysFunc(object);
            return isArray(object) ? result3 : arrayPush(result3, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty4.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches2 = Array2(othLength), maxLength = Infinity, result3 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches2[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches2[0];
            outer:
              while (++index < length && result3.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result3, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches2[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result3.push(value);
                }
              }
            return result3;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty4.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty4.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result3 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result3 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result3)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject3(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result3 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty4.call(object, key) && key != "constructor") {
                result3.push(key);
              }
            }
            return result3;
          }
          function baseKeysIn(object) {
            if (!isObject3(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result3 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty4.call(object, key)))) {
                result3.push(key);
              }
            }
            return result3;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index = -1, result3 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result3[++index] = iteratee2(value, key, collection2);
            });
            return result3;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get2(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject3(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject3(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n) {
            var length = array.length;
            if (!length) {
              return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result3 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result3, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result3 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result3, castPath(path, object), value);
              }
            }
            return result3;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result3 = Array2(length);
            while (length--) {
              result3[fromRight ? length : ++index] = start;
              start += step;
            }
            return result3;
          }
          function baseRepeat(string2, n) {
            var result3 = "";
            if (!string2 || n < 1 || n > MAX_SAFE_INTEGER) {
              return result3;
            }
            do {
              if (n % 2) {
                result3 += string2;
              }
              n = nativeFloor(n / 2);
              if (n) {
                string2 += string2;
              }
            } while (n);
            return result3;
          }
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject3(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject3(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string2) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string2),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
              end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result3 = Array2(length);
            while (++index < length) {
              result3[index] = array[index + start];
            }
            return result3;
          }
          function baseSome(collection, predicate) {
            var result3;
            baseEach(collection, function(value, index, collection2) {
              result3 = predicate(value, index, collection2);
              return !result3;
            });
            return !!result3;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result3 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result3[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result3;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result3 = value + "";
            return result3 == "0" && 1 / value == -INFINITY ? "-0" : result3;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result3 = [], seen = result3;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result3;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result3.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result3) {
                    seen.push(computed);
                  }
                  result3.push(value);
                }
              }
            return result3;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          function baseWrapperValue(value, actions2) {
            var result3 = value;
            if (result3 instanceof LazyWrapper) {
              result3 = result3.value();
            }
            return arrayReduce(actions2, function(result4, action) {
              return action.func.apply(action.thisArg, arrayPush([result4], action.args));
            }, result3);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result3 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result3[index] = baseDifference(result3[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result3, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result3 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result3, props[index], value);
            }
            return result3;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString3(value));
          }
          var castRest = baseRest;
          function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined2 ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root2.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result3 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result3);
            return result3;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result3 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result3).set(new Uint8Array2(arrayBuffer));
            return result3;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result3 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result3.lastIndex = regexp.lastIndex;
            return result3;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result3 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result3) {
                if (index >= ordersLength) {
                  return result3;
                }
                var order = orders[index];
                return result3 * (order == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result3 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result3[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result3[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result3[leftIndex++] = args[argsIndex++];
            }
            return result3;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result3 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result3[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
              result3[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result3[offset + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result3;
          }
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
              return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string2) {
              string2 = toString3(string2);
              var strSymbols = hasUnicode(string2) ? stringToArray(string2) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string2) {
              return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result3 = Ctor.apply(thisBinding, args);
              return isObject3(result3) ? result3 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
              return apply(fn, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result3 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result3 = funcs[index2].call(this, result3);
                }
                return result3;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root2 && this instanceof wrapper) {
                fn = Ctor || createCtor(fn);
              }
              return fn.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result3;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result3 = value;
              }
              if (other !== undefined2) {
                if (result3 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result3 = operator(value, other);
              }
              return result3;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result3 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result3), 0, length).join("") : result3.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined2;
              }
              start = toFinite(start);
              if (end === undefined2) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result3 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result3, newData);
            }
            result3.placeholder = placeholder;
            return setWrapToString(result3, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString3(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString3(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result3 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result3 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result3 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result3 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result3, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty4.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject3(objValue) && isObject3(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result3 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result3 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result3 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result3 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result3;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result3 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result3;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty4.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result3 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result3 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result3 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result3 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result3;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result3 = func.name + "", array = realNames[result3], length = hasOwnProperty4.call(realNames, result3) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result3;
          }
          function getHolder(func) {
            var object = hasOwnProperty4.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result3 = lodash.iteratee || iteratee;
            result3 = result3 === iteratee ? baseIteratee : result3;
            return arguments.length ? result3(arguments[0], arguments[1]) : result3;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result3 = keys(object), length = result3.length;
            while (length--) {
              var key = result3[length], value = object[key];
              result3[length] = [key, value, isStrictComparable(value)];
            }
            return result3;
          }
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty4.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e) {
            }
            var result3 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result3;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result3 = [];
            while (object) {
              arrayPush(result3, getSymbols(object));
              object = getPrototype(object);
            }
            return result3;
          };
          var getTag = baseGetTag;
          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value) {
              var result3 = baseGetTag(value), Ctor = result3 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result3;
            };
          }
          function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start += size2;
                  break;
                case "dropRight":
                  end -= size2;
                  break;
                case "take":
                  end = nativeMin(end, start + size2);
                  break;
                case "takeRight":
                  start = nativeMax(start, end - size2);
                  break;
              }
            }
            return { "start": start, "end": end };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result3 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result3 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result3 || ++index != length) {
              return result3;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result3 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty4.call(array, "index")) {
              result3.index = array.index;
              result3.input = array.input;
            }
            return result3;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index, object) {
            if (!isObject3(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject3(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result3 = memoize(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result3.cache;
            return result3;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result3 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result3.push(key);
              }
            }
            return result3;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start, transform2) {
            start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start + index];
              }
              index = -1;
              var otherArgs = Array2(start + 1);
              while (++index < start) {
                otherArgs[index] = args[index];
              }
              otherArgs[start] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root2.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string2) {
            var result3 = [];
            if (string2.charCodeAt(0) === 46) {
              result3.push("");
            }
            string2.replace(rePropName, function(match, number, quote, subString) {
              result3.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result3;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result3 = value + "";
            return result3 == "0" && 1 / value == -INFINITY ? "-0" : result3;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {
              }
              try {
                return func + "";
              } catch (e) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result3 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result3.__actions__ = copyArray(wrapper.__actions__);
            result3.__index__ = wrapper.__index__;
            result3.__values__ = wrapper.__values__;
            return result3;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result3 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result3[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result3;
          }
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result3 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result3[resIndex++] = value;
              }
            }
            return result3;
          }
          function concat2() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
              start = 0;
              end = length;
            }
            return baseFill(array, value, start, end);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result3 = {};
            while (++index < length) {
              var pair = pairs[index];
              result3[pair[0]] = pair[1];
            }
            return result3;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result3 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result3;
          });
          function remove(array, predicate) {
            var result3 = [];
            if (!(array && array.length)) {
              return result3;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result3.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result3;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
              start = 0;
              end = length;
            } else {
              start = start == null ? 0 : toInteger(start);
              end = end === undefined2 ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result3 = unzip(array);
            if (iteratee2 == null) {
              return result3;
            }
            return arrayMap(result3, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result3 = lodash(value);
            result3.__chain__ = true;
            return result3;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result3, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result3) {
                previous.__wrapped__ = clone2;
              } else {
                result3 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result3;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result3, value, key) {
            if (hasOwnProperty4.call(result3, key)) {
              ++result3[key];
            } else {
              baseAssignValue(result3, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result3, value, key) {
            if (hasOwnProperty4.call(result3, key)) {
              result3[key].push(value);
            } else {
              baseAssignValue(result3, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result3 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result3[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result3;
          });
          var keyBy = createAggregator(function(result3, value, key) {
            baseAssignValue(result3, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result3, value, key) {
            result3[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root2.Date.now();
          };
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n, guard) {
            n = guard ? undefined2 : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
          }
          function before(n, func) {
            var result3;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n > 0) {
                result3 = func.apply(this, arguments);
              }
              if (n <= 1) {
                func = undefined2;
              }
              return result3;
            };
          }
          var bind2 = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind2));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result3 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result3.placeholder = curry.placeholder;
            return result3;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result3 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result3.placeholder = curryRight.placeholder;
            return result3;
          }
          function debounce3(func, wait, options) {
            var lastArgs, lastThis, maxWait, result3, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject3(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result3 = func.apply(thisArg, args);
              return result3;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result3;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result3;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result3 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result3;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result3 = func.apply(this, args);
              memoized.cache = cache.set(key, result3) || cache;
              return result3;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start === undefined2 ? start : toInteger(start);
            return baseRest(func, start);
          }
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
              var array = args[start], otherArgs = castSlice(args, 0, start);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject3(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce3(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap2(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep2(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty4.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          function isEmpty2(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty4.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result3 = customizer ? customizer(value, other) : undefined2;
            return result3 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result3;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject3(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject3(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty4.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result3 = toFinite(value), remainder = result3 % 1;
            return result3 === result3 ? remainder ? result3 - remainder : result3 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject3(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject3(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString3(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign2 = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty4.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at = flatRest(baseAt);
          function create(prototype, properties) {
            var result3 = baseCreate(prototype);
            return properties == null ? result3 : baseAssign(result3, properties);
          }
          var defaults = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty4.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get2(object, path, defaultValue) {
            var result3 = object == null ? undefined2 : baseGet(object, path);
            return result3 === undefined2 ? defaultValue : result3;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result3, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result3[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result3, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty4.call(result3, value)) {
              result3[value].push(key);
            } else {
              result3[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result3 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result3, iteratee2(value, key, object2), value);
            });
            return result3;
          }
          function mapValues(object, iteratee2) {
            var result3 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result3, key, iteratee2(value, key, object2));
            });
            return result3;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result3 = {};
            if (object == null) {
              return result3;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result3);
            if (isDeep) {
              result3 = baseClone(result3, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result3, paths[length]);
            }
            return result3;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result2(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value = object == null ? undefined2 : object[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object = isFunction(value) ? value.call(object) : value;
            }
            return object;
          }
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject3(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update3(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result3, word, index) {
            word = word.toLowerCase();
            return result3 + (index ? capitalize(word) : word);
          });
          function capitalize(string2) {
            return upperFirst(toString3(string2).toLowerCase());
          }
          function deburr(string2) {
            string2 = toString3(string2);
            return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string2, target, position) {
            string2 = toString3(string2);
            target = baseToString(target);
            var length = string2.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string2.slice(position, end) == target;
          }
          function escape(string2) {
            string2 = toString3(string2);
            return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
          }
          function escapeRegExp(string2) {
            string2 = toString3(string2);
            return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar, "\\$&") : string2;
          }
          var kebabCase = createCompounder(function(result3, word, index) {
            return result3 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result3, word, index) {
            return result3 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string2, length, chars) {
            string2 = toString3(string2);
            length = toInteger(length);
            var strLength = length ? stringSize(string2) : 0;
            if (!length || strLength >= length) {
              return string2;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string2, length, chars) {
            string2 = toString3(string2);
            length = toInteger(length);
            var strLength = length ? stringSize(string2) : 0;
            return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
          }
          function padStart(string2, length, chars) {
            string2 = toString3(string2);
            length = toInteger(length);
            var strLength = length ? stringSize(string2) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
          }
          function parseInt2(string2, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString3(string2).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string2, n, guard) {
            if (guard ? isIterateeCall(string2, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            return baseRepeat(toString3(string2), n);
          }
          function replace() {
            var args = arguments, string2 = toString3(args[0]);
            return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result3, word, index) {
            return result3 + (index ? "_" : "") + word.toLowerCase();
          });
          function split2(string2, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string2, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string2 = toString3(string2);
            if (string2 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string2)) {
                return castSlice(stringToArray(string2), 0, limit);
              }
            }
            return string2.split(separator, limit);
          }
          var startCase = createCompounder(function(result3, word, index) {
            return result3 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string2, target, position) {
            string2 = toString3(string2);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string2.length);
            target = baseToString(target);
            return string2.slice(position, position + target.length) == target;
          }
          function template(string2, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string2, options, guard)) {
              options = undefined2;
            }
            string2 = toString3(string2);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty4.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string2.slice(index, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty4.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result3 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result3.source = source;
            if (isError(result3)) {
              throw result3;
            }
            return result3;
          }
          function toLower(value) {
            return toString3(value).toLowerCase();
          }
          function toUpper(value) {
            return toString3(value).toUpperCase();
          }
          function trim(string2, chars, guard) {
            string2 = toString3(string2);
            if (string2 && (guard || chars === undefined2)) {
              return baseTrim(string2);
            }
            if (!string2 || !(chars = baseToString(chars))) {
              return string2;
            }
            var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
          }
          function trimEnd(string2, chars, guard) {
            string2 = toString3(string2);
            if (string2 && (guard || chars === undefined2)) {
              return string2.slice(0, trimmedEndIndex(string2) + 1);
            }
            if (!string2 || !(chars = baseToString(chars))) {
              return string2;
            }
            var strSymbols = stringToArray(string2), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
          }
          function trimStart(string2, chars, guard) {
            string2 = toString3(string2);
            if (string2 && (guard || chars === undefined2)) {
              return string2.replace(reTrimStart, "");
            }
            if (!string2 || !(chars = baseToString(chars))) {
              return string2;
            }
            var strSymbols = stringToArray(string2), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
          }
          function truncate(string2, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject3(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string2 = toString3(string2);
            var strLength = string2.length;
            if (hasUnicode(string2)) {
              var strSymbols = stringToArray(string2);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string2;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
              return omission;
            }
            var result3 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string2.slice(0, end);
            if (separator === undefined2) {
              return result3 + omission;
            }
            if (strSymbols) {
              end += result3.length - end;
            }
            if (isRegExp(separator)) {
              if (string2.slice(end).search(separator)) {
                var match, substring = result3;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString3(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result3 = result3.slice(0, newEnd === undefined2 ? end : newEnd);
              }
            } else if (string2.indexOf(baseToString(separator), end) != end) {
              var index = result3.lastIndexOf(separator);
              if (index > -1) {
                result3 = result3.slice(0, index);
              }
            }
            return result3 + omission;
          }
          function unescape2(string2) {
            string2 = toString3(string2);
            return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
          }
          var upperCase = createCompounder(function(result3, word, index) {
            return result3 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string2, pattern, guard) {
            string2 = toString3(string2);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
            }
            return string2.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e) {
              return isError(e) ? e : new Error2(e);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind2(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject3(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject3(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result3 = object(this.__wrapped__), actions2 = result3.__actions__ = copyArray(this.__actions__);
                    actions2.push({ "func": func, "args": arguments, "thisArg": object });
                    result3.__chain__ = chainAll;
                    return result3;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root2._ === this) {
              root2._ = oldDash;
            }
            return this;
          }
          function noop() {
          }
          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
              return baseNth(args, n);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n, iteratee2) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n -= MAX_ARRAY_LENGTH;
            var result3 = baseTimes(length, iteratee2);
            while (++index < n) {
              iteratee2(index);
            }
            return result3;
          }
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString3(value)));
          }
          function uniqueId(prefix) {
            var id = ++idCounter2;
            return toString3(prefix) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign2;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind2;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat2;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce3;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split2;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update3;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap2;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep2;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get2;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty2;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject3;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result2;
          lodash.round = round;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString3;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape2;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty4.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
              n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
              var result3 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result3.__filtered__) {
                result3.__takeCount__ = nativeMin(n, result3.__takeCount__);
              } else {
                result3.__views__.push({
                  "size": nativeMin(n, MAX_ARRAY_LENGTH),
                  "type": methodName + (result3.__dir__ < 0 ? "Right" : "")
                });
              }
              return result3;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
              return this.reverse()[methodName](n).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result3 = this.clone();
              result3.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result3.__filtered__ = result3.__filtered__ || isFilter;
              return result3;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result3 = this;
            if (result3.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result3);
            }
            if (start < 0) {
              result3 = result3.takeRight(-start);
            } else if (start) {
              result3 = result3.drop(start);
            }
            if (end !== undefined2) {
              end = toInteger(end);
              result3 = end < 0 ? result3.dropRight(-end) : result3.take(end - start);
            }
            return result3;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = function(value2) {
                var result4 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result4[0] : result4;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result3 = func.apply(value, args);
                result3.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result3, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result3 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result3.value()[0] : result3.value() : result3;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty4.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _2 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root2._ = _2;
          define(function() {
            return _2;
          });
        } else if (freeModule) {
          (freeModule.exports = _2)._ = _2;
          freeExports._ = _2;
        } else {
          root2._ = _2;
        }
      }).call(exports2);
    }
  });

  // node_modules/vue-select/dist/vue-select.js
  var require_vue_select = __commonJS({
    "node_modules/vue-select/dist/vue-select.js"(exports2, module2) {
      !function(t, e) {
        "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports2 ? exports2.VueSelect = e() : t.VueSelect = e();
      }("undefined" != typeof self ? self : exports2, function() {
        return (() => {
          var t = { 646: (t2) => {
            t2.exports = function(t3) {
              if (Array.isArray(t3)) {
                for (var e2 = 0, n2 = new Array(t3.length); e2 < t3.length; e2++)
                  n2[e2] = t3[e2];
                return n2;
              }
            };
          }, 713: (t2) => {
            t2.exports = function(t3, e2, n2) {
              return e2 in t3 ? Object.defineProperty(t3, e2, { value: n2, enumerable: true, configurable: true, writable: true }) : t3[e2] = n2, t3;
            };
          }, 860: (t2) => {
            t2.exports = function(t3) {
              if (Symbol.iterator in Object(t3) || "[object Arguments]" === Object.prototype.toString.call(t3))
                return Array.from(t3);
            };
          }, 206: (t2) => {
            t2.exports = function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            };
          }, 319: (t2, e2, n2) => {
            var o2 = n2(646), i = n2(860), s = n2(206);
            t2.exports = function(t3) {
              return o2(t3) || i(t3) || s();
            };
          }, 8: (t2) => {
            function e2(n2) {
              return "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? t2.exports = e2 = function(t3) {
                return typeof t3;
              } : t2.exports = e2 = function(t3) {
                return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
              }, e2(n2);
            }
            t2.exports = e2;
          } }, e = {};
          function n(o2) {
            var i = e[o2];
            if (void 0 !== i)
              return i.exports;
            var s = e[o2] = { exports: {} };
            return t[o2](s, s.exports, n), s.exports;
          }
          n.n = (t2) => {
            var e2 = t2 && t2.__esModule ? () => t2.default : () => t2;
            return n.d(e2, { a: e2 }), e2;
          }, n.d = (t2, e2) => {
            for (var o2 in e2)
              n.o(e2, o2) && !n.o(t2, o2) && Object.defineProperty(t2, o2, { enumerable: true, get: e2[o2] });
          }, n.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), n.r = (t2) => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
          };
          var o = {};
          return (() => {
            "use strict";
            n.r(o), n.d(o, { VueSelect: () => m, default: () => O, mixins: () => _2 });
            var t2 = n(319), e2 = n.n(t2), i = n(8), s = n.n(i), r = n(713), a = n.n(r);
            const l = { props: { autoscroll: { type: Boolean, default: true } }, watch: { typeAheadPointer: function() {
              this.autoscroll && this.maybeAdjustScroll();
            }, open: function(t3) {
              var e3 = this;
              this.autoscroll && t3 && this.$nextTick(function() {
                return e3.maybeAdjustScroll();
              });
            } }, methods: { maybeAdjustScroll: function() {
              var t3, e3 = (null === (t3 = this.$refs.dropdownMenu) || void 0 === t3 ? void 0 : t3.children[this.typeAheadPointer]) || false;
              if (e3) {
                var n2 = this.getDropdownViewport(), o2 = e3.getBoundingClientRect(), i2 = o2.top, s2 = o2.bottom, r2 = o2.height;
                if (i2 < n2.top)
                  return this.$refs.dropdownMenu.scrollTop = e3.offsetTop;
                if (s2 > n2.bottom)
                  return this.$refs.dropdownMenu.scrollTop = e3.offsetTop - (n2.height - r2);
              }
            }, getDropdownViewport: function() {
              return this.$refs.dropdownMenu ? this.$refs.dropdownMenu.getBoundingClientRect() : { height: 0, top: 0, bottom: 0 };
            } } }, c = { data: function() {
              return { typeAheadPointer: -1 };
            }, watch: { filteredOptions: function() {
              for (var t3 = 0; t3 < this.filteredOptions.length; t3++)
                if (this.selectable(this.filteredOptions[t3])) {
                  this.typeAheadPointer = t3;
                  break;
                }
            }, open: function(t3) {
              t3 && this.typeAheadToLastSelected();
            }, selectedValue: function() {
              this.open && this.typeAheadToLastSelected();
            } }, methods: { typeAheadUp: function() {
              for (var t3 = this.typeAheadPointer - 1; t3 >= 0; t3--)
                if (this.selectable(this.filteredOptions[t3])) {
                  this.typeAheadPointer = t3;
                  break;
                }
            }, typeAheadDown: function() {
              for (var t3 = this.typeAheadPointer + 1; t3 < this.filteredOptions.length; t3++)
                if (this.selectable(this.filteredOptions[t3])) {
                  this.typeAheadPointer = t3;
                  break;
                }
            }, typeAheadSelect: function() {
              var t3 = this.filteredOptions[this.typeAheadPointer];
              t3 && this.selectable(t3) && this.select(t3);
            }, typeAheadToLastSelected: function() {
              this.typeAheadPointer = 0 !== this.selectedValue.length ? this.filteredOptions.indexOf(this.selectedValue[this.selectedValue.length - 1]) : -1;
            } } }, u = { props: { loading: { type: Boolean, default: false } }, data: function() {
              return { mutableLoading: false };
            }, watch: { search: function() {
              this.$emit("search", this.search, this.toggleLoading);
            }, loading: function(t3) {
              this.mutableLoading = t3;
            } }, methods: { toggleLoading: function() {
              var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
              return this.mutableLoading = null == t3 ? !this.mutableLoading : t3;
            } } };
            function p(t3, e3, n2, o2, i2, s2, r2, a2) {
              var l2, c2 = "function" == typeof t3 ? t3.options : t3;
              if (e3 && (c2.render = e3, c2.staticRenderFns = n2, c2._compiled = true), o2 && (c2.functional = true), s2 && (c2._scopeId = "data-v-" + s2), r2 ? (l2 = function(t4) {
                (t4 = t4 || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (t4 = __VUE_SSR_CONTEXT__), i2 && i2.call(this, t4), t4 && t4._registeredComponents && t4._registeredComponents.add(r2);
              }, c2._ssrRegister = l2) : i2 && (l2 = a2 ? function() {
                i2.call(this, (c2.functional ? this.parent : this).$root.$options.shadowRoot);
              } : i2), l2)
                if (c2.functional) {
                  c2._injectStyles = l2;
                  var u2 = c2.render;
                  c2.render = function(t4, e4) {
                    return l2.call(e4), u2(t4, e4);
                  };
                } else {
                  var p2 = c2.beforeCreate;
                  c2.beforeCreate = p2 ? [].concat(p2, l2) : [l2];
                }
              return { exports: t3, options: c2 };
            }
            const h = { Deselect: p({}, function() {
              var t3 = this.$createElement, e3 = this._self._c || t3;
              return e3("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: "10", height: "10" } }, [e3("path", { attrs: { d: "M6.895455 5l2.842897-2.842898c.348864-.348863.348864-.914488 0-1.263636L9.106534.261648c-.348864-.348864-.914489-.348864-1.263636 0L5 3.104545 2.157102.261648c-.348863-.348864-.914488-.348864-1.263636 0L.261648.893466c-.348864.348864-.348864.914489 0 1.263636L3.104545 5 .261648 7.842898c-.348864.348863-.348864.914488 0 1.263636l.631818.631818c.348864.348864.914773.348864 1.263636 0L5 6.895455l2.842898 2.842897c.348863.348864.914772.348864 1.263636 0l.631818-.631818c.348864-.348864.348864-.914489 0-1.263636L6.895455 5z" } })]);
            }, [], false, null, null, null).exports, OpenIndicator: p({}, function() {
              var t3 = this.$createElement, e3 = this._self._c || t3;
              return e3("svg", { attrs: { xmlns: "http://www.w3.org/2000/svg", width: "14", height: "10" } }, [e3("path", { attrs: { d: "M9.211364 7.59931l4.48338-4.867229c.407008-.441854.407008-1.158247 0-1.60046l-.73712-.80023c-.407008-.441854-1.066904-.441854-1.474243 0L7 5.198617 2.51662.33139c-.407008-.441853-1.066904-.441853-1.474243 0l-.737121.80023c-.407008.441854-.407008 1.158248 0 1.600461l4.48338 4.867228L7 10l2.211364-2.40069z" } })]);
            }, [], false, null, null, null).exports }, d = { inserted: function(t3, e3, n2) {
              var o2 = n2.context;
              if (o2.appendToBody) {
                var i2 = o2.$refs.toggle.getBoundingClientRect(), s2 = i2.height, r2 = i2.top, a2 = i2.left, l2 = i2.width, c2 = window.scrollX || window.pageXOffset, u2 = window.scrollY || window.pageYOffset;
                t3.unbindPosition = o2.calculatePosition(t3, o2, { width: l2 + "px", left: c2 + a2 + "px", top: u2 + r2 + s2 + "px" }), document.body.appendChild(t3);
              }
            }, unbind: function(t3, e3, n2) {
              n2.context.appendToBody && (t3.unbindPosition && "function" == typeof t3.unbindPosition && t3.unbindPosition(), t3.parentNode && t3.parentNode.removeChild(t3));
            } };
            const f = function(t3) {
              var e3 = {};
              return Object.keys(t3).sort().forEach(function(n2) {
                e3[n2] = t3[n2];
              }), JSON.stringify(e3);
            };
            var y = 0;
            const b = function() {
              return ++y;
            };
            function g(t3, e3) {
              var n2 = Object.keys(t3);
              if (Object.getOwnPropertySymbols) {
                var o2 = Object.getOwnPropertySymbols(t3);
                e3 && (o2 = o2.filter(function(e4) {
                  return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
                })), n2.push.apply(n2, o2);
              }
              return n2;
            }
            function v(t3) {
              for (var e3 = 1; e3 < arguments.length; e3++) {
                var n2 = null != arguments[e3] ? arguments[e3] : {};
                e3 % 2 ? g(Object(n2), true).forEach(function(e4) {
                  a()(t3, e4, n2[e4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(n2)) : g(Object(n2)).forEach(function(e4) {
                  Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(n2, e4));
                });
              }
              return t3;
            }
            const m = p({ components: v({}, h), directives: { appendToBody: d }, mixins: [l, c, u], props: { value: {}, components: { type: Object, default: function() {
              return {};
            } }, options: { type: Array, default: function() {
              return [];
            } }, disabled: { type: Boolean, default: false }, clearable: { type: Boolean, default: true }, deselectFromDropdown: { type: Boolean, default: false }, searchable: { type: Boolean, default: true }, multiple: { type: Boolean, default: false }, placeholder: { type: String, default: "" }, transition: { type: String, default: "vs__fade" }, clearSearchOnSelect: { type: Boolean, default: true }, closeOnSelect: { type: Boolean, default: true }, label: { type: String, default: "label" }, autocomplete: { type: String, default: "off" }, reduce: { type: Function, default: function(t3) {
              return t3;
            } }, selectable: { type: Function, default: function(t3) {
              return true;
            } }, getOptionLabel: { type: Function, default: function(t3) {
              return "object" === s()(t3) ? t3.hasOwnProperty(this.label) ? t3[this.label] : console.warn('[vue-select warn]: Label key "option.'.concat(this.label, '" does not') + " exist in options object ".concat(JSON.stringify(t3), ".\n") + "https://vue-select.org/api/props.html#getoptionlabel") : t3;
            } }, getOptionKey: { type: Function, default: function(t3) {
              if ("object" !== s()(t3))
                return t3;
              try {
                return t3.hasOwnProperty("id") ? t3.id : f(t3);
              } catch (e3) {
                return console.warn("[vue-select warn]: Could not stringify this option to generate unique key. Please provide'getOptionKey' prop to return a unique key for each option.\nhttps://vue-select.org/api/props.html#getoptionkey", t3, e3);
              }
            } }, onTab: { type: Function, default: function() {
              this.selectOnTab && !this.isComposing && this.typeAheadSelect();
            } }, taggable: { type: Boolean, default: false }, tabindex: { type: Number, default: null }, pushTags: { type: Boolean, default: false }, filterable: { type: Boolean, default: true }, filterBy: { type: Function, default: function(t3, e3, n2) {
              return (e3 || "").toLocaleLowerCase().indexOf(n2.toLocaleLowerCase()) > -1;
            } }, filter: { type: Function, default: function(t3, e3) {
              var n2 = this;
              return t3.filter(function(t4) {
                var o2 = n2.getOptionLabel(t4);
                return "number" == typeof o2 && (o2 = o2.toString()), n2.filterBy(t4, o2, e3);
              });
            } }, createOption: { type: Function, default: function(t3) {
              return "object" === s()(this.optionList[0]) ? a()({}, this.label, t3) : t3;
            } }, resetOnOptionsChange: { default: false, validator: function(t3) {
              return ["function", "boolean"].includes(s()(t3));
            } }, clearSearchOnBlur: { type: Function, default: function(t3) {
              var e3 = t3.clearSearchOnSelect, n2 = t3.multiple;
              return e3 && !n2;
            } }, noDrop: { type: Boolean, default: false }, inputId: { type: String }, dir: { type: String, default: "auto" }, selectOnTab: { type: Boolean, default: false }, selectOnKeyCodes: { type: Array, default: function() {
              return [13];
            } }, searchInputQuerySelector: { type: String, default: "[type=search]" }, mapKeydown: { type: Function, default: function(t3, e3) {
              return t3;
            } }, appendToBody: { type: Boolean, default: false }, calculatePosition: { type: Function, default: function(t3, e3, n2) {
              var o2 = n2.width, i2 = n2.top, s2 = n2.left;
              t3.style.top = i2, t3.style.left = s2, t3.style.width = o2;
            } }, dropdownShouldOpen: { type: Function, default: function(t3) {
              var e3 = t3.noDrop, n2 = t3.open, o2 = t3.mutableLoading;
              return !e3 && (n2 && !o2);
            } }, uid: { type: [String, Number], default: function() {
              return b();
            } } }, data: function() {
              return { search: "", open: false, isComposing: false, pushedTags: [], _value: [] };
            }, computed: { isTrackingValues: function() {
              return void 0 === this.value || this.$options.propsData.hasOwnProperty("reduce");
            }, selectedValue: function() {
              var t3 = this.value;
              return this.isTrackingValues && (t3 = this.$data._value), null != t3 && "" !== t3 ? [].concat(t3) : [];
            }, optionList: function() {
              return this.options.concat(this.pushTags ? this.pushedTags : []);
            }, searchEl: function() {
              return this.$scopedSlots.search ? this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector) : this.$refs.search;
            }, scope: function() {
              var t3 = this, e3 = { search: this.search, loading: this.loading, searching: this.searching, filteredOptions: this.filteredOptions };
              return { search: { attributes: v({ disabled: this.disabled, placeholder: this.searchPlaceholder, tabindex: this.tabindex, readonly: !this.searchable, id: this.inputId, "aria-autocomplete": "list", "aria-labelledby": "vs".concat(this.uid, "__combobox"), "aria-controls": "vs".concat(this.uid, "__listbox"), ref: "search", type: "search", autocomplete: this.autocomplete, value: this.search }, this.dropdownOpen && this.filteredOptions[this.typeAheadPointer] ? { "aria-activedescendant": "vs".concat(this.uid, "__option-").concat(this.typeAheadPointer) } : {}), events: { compositionstart: function() {
                return t3.isComposing = true;
              }, compositionend: function() {
                return t3.isComposing = false;
              }, keydown: this.onSearchKeyDown, blur: this.onSearchBlur, focus: this.onSearchFocus, input: function(e4) {
                return t3.search = e4.target.value;
              } } }, spinner: { loading: this.mutableLoading }, noOptions: { search: this.search, loading: this.mutableLoading, searching: this.searching }, openIndicator: { attributes: { ref: "openIndicator", role: "presentation", class: "vs__open-indicator" } }, listHeader: e3, listFooter: e3, header: v({}, e3, { deselect: this.deselect }), footer: v({}, e3, { deselect: this.deselect }) };
            }, childComponents: function() {
              return v({}, h, {}, this.components);
            }, stateClasses: function() {
              return { "vs--open": this.dropdownOpen, "vs--single": !this.multiple, "vs--multiple": this.multiple, "vs--searching": this.searching && !this.noDrop, "vs--searchable": this.searchable && !this.noDrop, "vs--unsearchable": !this.searchable, "vs--loading": this.mutableLoading, "vs--disabled": this.disabled };
            }, searching: function() {
              return !!this.search;
            }, dropdownOpen: function() {
              return this.dropdownShouldOpen(this);
            }, searchPlaceholder: function() {
              return this.isValueEmpty && this.placeholder ? this.placeholder : void 0;
            }, filteredOptions: function() {
              var t3 = [].concat(this.optionList);
              if (!this.filterable && !this.taggable)
                return t3;
              var e3 = this.search.length ? this.filter(t3, this.search, this) : t3;
              if (this.taggable && this.search.length) {
                var n2 = this.createOption(this.search);
                this.optionExists(n2) || e3.unshift(n2);
              }
              return e3;
            }, isValueEmpty: function() {
              return 0 === this.selectedValue.length;
            }, showClearButton: function() {
              return !this.multiple && this.clearable && !this.open && !this.isValueEmpty;
            } }, watch: { options: function(t3, e3) {
              var n2 = this;
              !this.taggable && ("function" == typeof n2.resetOnOptionsChange ? n2.resetOnOptionsChange(t3, e3, n2.selectedValue) : n2.resetOnOptionsChange) && this.clearSelection(), this.value && this.isTrackingValues && this.setInternalValueFromOptions(this.value);
            }, value: { immediate: true, handler: function(t3) {
              this.isTrackingValues && this.setInternalValueFromOptions(t3);
            } }, multiple: function() {
              this.clearSelection();
            }, open: function(t3) {
              this.$emit(t3 ? "open" : "close");
            } }, created: function() {
              this.mutableLoading = this.loading, this.$on("option:created", this.pushTag);
            }, methods: { setInternalValueFromOptions: function(t3) {
              var e3 = this;
              Array.isArray(t3) ? this.$data._value = t3.map(function(t4) {
                return e3.findOptionFromReducedValue(t4);
              }) : this.$data._value = this.findOptionFromReducedValue(t3);
            }, select: function(t3) {
              this.$emit("option:selecting", t3), this.isOptionSelected(t3) ? this.deselectFromDropdown && (this.clearable || this.multiple && this.selectedValue.length > 1) && this.deselect(t3) : (this.taggable && !this.optionExists(t3) && this.$emit("option:created", t3), this.multiple && (t3 = this.selectedValue.concat(t3)), this.updateValue(t3), this.$emit("option:selected", t3)), this.onAfterSelect(t3);
            }, deselect: function(t3) {
              var e3 = this;
              this.$emit("option:deselecting", t3), this.updateValue(this.selectedValue.filter(function(n2) {
                return !e3.optionComparator(n2, t3);
              })), this.$emit("option:deselected", t3);
            }, clearSelection: function() {
              this.updateValue(this.multiple ? [] : null);
            }, onAfterSelect: function(t3) {
              var e3 = this;
              this.closeOnSelect && (this.open = !this.open, this.searchEl.blur()), this.clearSearchOnSelect && (this.search = ""), this.noDrop && this.multiple && this.$nextTick(function() {
                return e3.$refs.search.focus();
              });
            }, updateValue: function(t3) {
              var e3 = this;
              void 0 === this.value && (this.$data._value = t3), null !== t3 && (t3 = Array.isArray(t3) ? t3.map(function(t4) {
                return e3.reduce(t4);
              }) : this.reduce(t3)), this.$emit("input", t3);
            }, toggleDropdown: function(t3) {
              var n2 = t3.target !== this.searchEl;
              n2 && t3.preventDefault();
              var o2 = [].concat(e2()(this.$refs.deselectButtons || []), e2()([this.$refs.clearButton]));
              void 0 === this.searchEl || o2.filter(Boolean).some(function(e3) {
                return e3.contains(t3.target) || e3 === t3.target;
              }) ? t3.preventDefault() : this.open && n2 ? this.searchEl.blur() : this.disabled || (this.open = true, this.searchEl.focus());
            }, isOptionSelected: function(t3) {
              var e3 = this;
              return this.selectedValue.some(function(n2) {
                return e3.optionComparator(n2, t3);
              });
            }, isOptionDeselectable: function(t3) {
              return this.isOptionSelected(t3) && this.deselectFromDropdown;
            }, optionComparator: function(t3, e3) {
              return this.getOptionKey(t3) === this.getOptionKey(e3);
            }, findOptionFromReducedValue: function(t3) {
              var n2 = this, o2 = [].concat(e2()(this.options), e2()(this.pushedTags)).filter(function(e3) {
                return JSON.stringify(n2.reduce(e3)) === JSON.stringify(t3);
              });
              return 1 === o2.length ? o2[0] : o2.find(function(t4) {
                return n2.optionComparator(t4, n2.$data._value);
              }) || t3;
            }, closeSearchOptions: function() {
              this.open = false, this.$emit("search:blur");
            }, maybeDeleteValue: function() {
              if (!this.searchEl.value.length && this.selectedValue && this.selectedValue.length && this.clearable) {
                var t3 = null;
                this.multiple && (t3 = e2()(this.selectedValue.slice(0, this.selectedValue.length - 1))), this.updateValue(t3);
              }
            }, optionExists: function(t3) {
              var e3 = this;
              return this.optionList.some(function(n2) {
                return e3.optionComparator(n2, t3);
              });
            }, normalizeOptionForSlot: function(t3) {
              return "object" === s()(t3) ? t3 : a()({}, this.label, t3);
            }, pushTag: function(t3) {
              this.pushedTags.push(t3);
            }, onEscape: function() {
              this.search.length ? this.search = "" : this.searchEl.blur();
            }, onSearchBlur: function() {
              if (!this.mousedown || this.searching) {
                var t3 = this.clearSearchOnSelect, e3 = this.multiple;
                return this.clearSearchOnBlur({ clearSearchOnSelect: t3, multiple: e3 }) && (this.search = ""), void this.closeSearchOptions();
              }
              this.mousedown = false, 0 !== this.search.length || 0 !== this.options.length || this.closeSearchOptions();
            }, onSearchFocus: function() {
              this.open = true, this.$emit("search:focus");
            }, onMousedown: function() {
              this.mousedown = true;
            }, onMouseUp: function() {
              this.mousedown = false;
            }, onSearchKeyDown: function(t3) {
              var e3 = this, n2 = function(t4) {
                return t4.preventDefault(), !e3.isComposing && e3.typeAheadSelect();
              }, o2 = { 8: function(t4) {
                return e3.maybeDeleteValue();
              }, 9: function(t4) {
                return e3.onTab();
              }, 27: function(t4) {
                return e3.onEscape();
              }, 38: function(t4) {
                return t4.preventDefault(), e3.typeAheadUp();
              }, 40: function(t4) {
                return t4.preventDefault(), e3.typeAheadDown();
              } };
              this.selectOnKeyCodes.forEach(function(t4) {
                return o2[t4] = n2;
              });
              var i2 = this.mapKeydown(o2, this);
              if ("function" == typeof i2[t3.keyCode])
                return i2[t3.keyCode](t3);
            } } }, function() {
              var t3 = this, e3 = t3.$createElement, n2 = t3._self._c || e3;
              return n2("div", { staticClass: "v-select", class: t3.stateClasses, attrs: { dir: t3.dir } }, [t3._t("header", null, null, t3.scope.header), t3._v(" "), n2("div", { ref: "toggle", staticClass: "vs__dropdown-toggle", attrs: { id: "vs" + t3.uid + "__combobox", role: "combobox", "aria-expanded": t3.dropdownOpen.toString(), "aria-owns": "vs" + t3.uid + "__listbox", "aria-label": "Search for option" }, on: { mousedown: function(e4) {
                return t3.toggleDropdown(e4);
              } } }, [n2("div", { ref: "selectedOptions", staticClass: "vs__selected-options" }, [t3._l(t3.selectedValue, function(e4) {
                return t3._t("selected-option-container", [n2("span", { key: t3.getOptionKey(e4), staticClass: "vs__selected" }, [t3._t("selected-option", [t3._v("\n            " + t3._s(t3.getOptionLabel(e4)) + "\n          ")], null, t3.normalizeOptionForSlot(e4)), t3._v(" "), t3.multiple ? n2("button", { ref: "deselectButtons", refInFor: true, staticClass: "vs__deselect", attrs: { disabled: t3.disabled, type: "button", title: "Deselect " + t3.getOptionLabel(e4), "aria-label": "Deselect " + t3.getOptionLabel(e4) }, on: { click: function(n3) {
                  return t3.deselect(e4);
                } } }, [n2(t3.childComponents.Deselect, { tag: "component" })], 1) : t3._e()], 2)], { option: t3.normalizeOptionForSlot(e4), deselect: t3.deselect, multiple: t3.multiple, disabled: t3.disabled });
              }), t3._v(" "), t3._t("search", [n2("input", t3._g(t3._b({ staticClass: "vs__search" }, "input", t3.scope.search.attributes, false), t3.scope.search.events))], null, t3.scope.search)], 2), t3._v(" "), n2("div", { ref: "actions", staticClass: "vs__actions" }, [n2("button", { directives: [{ name: "show", rawName: "v-show", value: t3.showClearButton, expression: "showClearButton" }], ref: "clearButton", staticClass: "vs__clear", attrs: { disabled: t3.disabled, type: "button", title: "Clear Selected", "aria-label": "Clear Selected" }, on: { click: t3.clearSelection } }, [n2(t3.childComponents.Deselect, { tag: "component" })], 1), t3._v(" "), t3._t("open-indicator", [t3.noDrop ? t3._e() : n2(t3.childComponents.OpenIndicator, t3._b({ tag: "component" }, "component", t3.scope.openIndicator.attributes, false))], null, t3.scope.openIndicator), t3._v(" "), t3._t("spinner", [n2("div", { directives: [{ name: "show", rawName: "v-show", value: t3.mutableLoading, expression: "mutableLoading" }], staticClass: "vs__spinner" }, [t3._v("Loading...")])], null, t3.scope.spinner)], 2)]), t3._v(" "), n2("transition", { attrs: { name: t3.transition } }, [t3.dropdownOpen ? n2("ul", { directives: [{ name: "append-to-body", rawName: "v-append-to-body" }], key: "vs" + t3.uid + "__listbox", ref: "dropdownMenu", staticClass: "vs__dropdown-menu", attrs: { id: "vs" + t3.uid + "__listbox", role: "listbox", tabindex: "-1" }, on: { mousedown: function(e4) {
                return e4.preventDefault(), t3.onMousedown(e4);
              }, mouseup: t3.onMouseUp } }, [t3._t("list-header", null, null, t3.scope.listHeader), t3._v(" "), t3._l(t3.filteredOptions, function(e4, o2) {
                return n2("li", { key: t3.getOptionKey(e4), staticClass: "vs__dropdown-option", class: { "vs__dropdown-option--deselect": t3.isOptionDeselectable(e4) && o2 === t3.typeAheadPointer, "vs__dropdown-option--selected": t3.isOptionSelected(e4), "vs__dropdown-option--highlight": o2 === t3.typeAheadPointer, "vs__dropdown-option--disabled": !t3.selectable(e4) }, attrs: { id: "vs" + t3.uid + "__option-" + o2, role: "option", "aria-selected": o2 === t3.typeAheadPointer || null }, on: { mouseover: function(n3) {
                  t3.selectable(e4) && (t3.typeAheadPointer = o2);
                }, click: function(n3) {
                  n3.preventDefault(), n3.stopPropagation(), t3.selectable(e4) && t3.select(e4);
                } } }, [t3._t("option", [t3._v("\n          " + t3._s(t3.getOptionLabel(e4)) + "\n        ")], null, t3.normalizeOptionForSlot(e4))], 2);
              }), t3._v(" "), 0 === t3.filteredOptions.length ? n2("li", { staticClass: "vs__no-options" }, [t3._t("no-options", [t3._v("\n          Sorry, no matching options.\n        ")], null, t3.scope.noOptions)], 2) : t3._e(), t3._v(" "), t3._t("list-footer", null, null, t3.scope.listFooter)], 2) : n2("ul", { staticStyle: { display: "none", visibility: "hidden" }, attrs: { id: "vs" + t3.uid + "__listbox", role: "listbox" } })]), t3._v(" "), t3._t("footer", null, null, t3.scope.footer)], 2);
            }, [], false, null, null, null).exports, _2 = { ajax: u, pointer: c, pointerScroll: l }, O = m;
          })(), o;
        })();
      });
    }
  });

  // node_modules/vue2-dropzone/dist/vue2Dropzone.js
  var require_vue2Dropzone = __commonJS({
    "node_modules/vue2-dropzone/dist/vue2Dropzone.js"(exports2, module2) {
      !function(e, t) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = e || self).vue2Dropzone = t();
      }(exports2, function() {
        "use strict";
        var e, t = (function(e2) {
          var t2 = function() {
            function e3(e4, t3) {
              for (var i3 = 0; i3 < t3.length; i3++) {
                var n2 = t3[i3];
                n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e4, n2.key, n2);
              }
            }
            return function(t3, i3, n2) {
              return i3 && e3(t3.prototype, i3), n2 && e3(t3, n2), t3;
            };
          }();
          function i2(e3, t3) {
            if (!e3)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t3 || "object" != typeof t3 && "function" != typeof t3 ? e3 : t3;
          }
          function n(e3, t3) {
            if (!(e3 instanceof t3))
              throw new TypeError("Cannot call a class as a function");
          }
          var r = function() {
            function e3() {
              n(this, e3);
            }
            return t2(e3, [{ key: "on", value: function(e4, t3) {
              return this._callbacks = this._callbacks || {}, this._callbacks[e4] || (this._callbacks[e4] = []), this._callbacks[e4].push(t3), this;
            } }, { key: "emit", value: function(e4) {
              this._callbacks = this._callbacks || {};
              var t3 = this._callbacks[e4];
              if (t3) {
                for (var i3 = arguments.length, n2 = Array(i3 > 1 ? i3 - 1 : 0), r2 = 1; r2 < i3; r2++)
                  n2[r2 - 1] = arguments[r2];
                for (var o2 = 0, s2 = s2 = t3; ; ) {
                  if (o2 >= s2.length)
                    break;
                  s2[o2++].apply(this, n2);
                }
              }
              return this;
            } }, { key: "off", value: function(e4, t3) {
              if (!this._callbacks || 0 === arguments.length)
                return this._callbacks = {}, this;
              var i3 = this._callbacks[e4];
              if (!i3)
                return this;
              if (1 === arguments.length)
                return delete this._callbacks[e4], this;
              for (var n2 = 0; n2 < i3.length; n2++) {
                if (i3[n2] === t3) {
                  i3.splice(n2, 1);
                  break;
                }
              }
              return this;
            } }]), e3;
          }(), o = function(e3) {
            function o2(e4, t3) {
              n(this, o2);
              var r2, s2 = i2(this, (o2.__proto__ || Object.getPrototypeOf(o2)).call(this)), a2 = void 0;
              if (s2.element = e4, s2.version = o2.version, s2.defaultOptions.previewTemplate = s2.defaultOptions.previewTemplate.replace(/\n*/g, ""), s2.clickableElements = [], s2.listeners = [], s2.files = [], "string" == typeof s2.element && (s2.element = document.querySelector(s2.element)), !s2.element || null == s2.element.nodeType)
                throw new Error("Invalid dropzone element.");
              if (s2.element.dropzone)
                throw new Error("Dropzone already attached.");
              o2.instances.push(s2), s2.element.dropzone = s2;
              var l2, u2 = null != (r2 = o2.optionsForElement(s2.element)) ? r2 : {};
              if (s2.options = o2.extend({}, s2.defaultOptions, u2, null != t3 ? t3 : {}), s2.options.forceFallback || !o2.isBrowserSupported())
                return l2 = s2.options.fallback.call(s2), i2(s2, l2);
              if (null == s2.options.url && (s2.options.url = s2.element.getAttribute("action")), !s2.options.url)
                throw new Error("No URL provided.");
              if (s2.options.acceptedFiles && s2.options.acceptedMimeTypes)
                throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
              if (s2.options.uploadMultiple && s2.options.chunking)
                throw new Error("You cannot set both: uploadMultiple and chunking.");
              return s2.options.acceptedMimeTypes && (s2.options.acceptedFiles = s2.options.acceptedMimeTypes, delete s2.options.acceptedMimeTypes), null != s2.options.renameFilename && (s2.options.renameFile = function(e5) {
                return s2.options.renameFilename.call(s2, e5.name, e5);
              }), s2.options.method = s2.options.method.toUpperCase(), (a2 = s2.getExistingFallback()) && a2.parentNode && a2.parentNode.removeChild(a2), false !== s2.options.previewsContainer && (s2.options.previewsContainer ? s2.previewsContainer = o2.getElement(s2.options.previewsContainer, "previewsContainer") : s2.previewsContainer = s2.element), s2.options.clickable && (true === s2.options.clickable ? s2.clickableElements = [s2.element] : s2.clickableElements = o2.getElements(s2.options.clickable, "clickable")), s2.init(), s2;
            }
            return function(e4, t3) {
              if ("function" != typeof t3 && null !== t3)
                throw new TypeError("Super expression must either be null or a function, not " + typeof t3);
              e4.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e4, enumerable: false, writable: true, configurable: true } }), t3 && (Object.setPrototypeOf ? Object.setPrototypeOf(e4, t3) : e4.__proto__ = t3);
            }(o2, r), t2(o2, null, [{ key: "initClass", value: function() {
              this.prototype.Emitter = r, this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"], this.prototype.defaultOptions = { url: null, method: "post", withCredentials: false, timeout: 3e4, parallelUploads: 2, uploadMultiple: false, chunking: false, forceChunking: false, chunkSize: 2e6, parallelChunkUploads: false, retryChunks: false, retryChunksLimit: 3, maxFilesize: 256, paramName: "file", createImageThumbnails: true, maxThumbnailFilesize: 10, thumbnailWidth: 120, thumbnailHeight: 120, thumbnailMethod: "crop", resizeWidth: null, resizeHeight: null, resizeMimeType: null, resizeQuality: 0.8, resizeMethod: "contain", filesizeBase: 1e3, maxFiles: null, headers: null, clickable: true, ignoreHiddenFiles: true, acceptedFiles: null, acceptedMimeTypes: null, autoProcessQueue: true, autoQueue: true, addRemoveLinks: false, previewsContainer: null, hiddenInputContainer: "body", capture: null, renameFilename: null, renameFile: null, forceFallback: false, dictDefaultMessage: "Drop files here to upload", dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.", dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.", dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.", dictInvalidFileType: "You can't upload files of this type.", dictResponseError: "Server responded with {{statusCode}} code.", dictCancelUpload: "Cancel upload", dictUploadCanceled: "Upload canceled.", dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?", dictRemoveFile: "Remove file", dictRemoveFileConfirmation: null, dictMaxFilesExceeded: "You can not upload any more files.", dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" }, init: function() {
              }, params: function(e4, t3, i3) {
                if (i3)
                  return { dzuuid: i3.file.upload.uuid, dzchunkindex: i3.index, dztotalfilesize: i3.file.size, dzchunksize: this.options.chunkSize, dztotalchunkcount: i3.file.upload.totalChunkCount, dzchunkbyteoffset: i3.index * this.options.chunkSize };
              }, accept: function(e4, t3) {
                return t3();
              }, chunksUploaded: function(e4, t3) {
                t3();
              }, fallback: function() {
                var e4 = void 0;
                this.element.className = this.element.className + " dz-browser-not-supported";
                for (var t3 = 0, i3 = i3 = this.element.getElementsByTagName("div"); ; ) {
                  if (t3 >= i3.length)
                    break;
                  var n2 = i3[t3++];
                  if (/(^| )dz-message($| )/.test(n2.className)) {
                    e4 = n2, n2.className = "dz-message";
                    break;
                  }
                }
                e4 || (e4 = o2.createElement('<div class="dz-message"><span></span></div>'), this.element.appendChild(e4));
                var r2 = e4.getElementsByTagName("span")[0];
                return r2 && (null != r2.textContent ? r2.textContent = this.options.dictFallbackMessage : null != r2.innerText && (r2.innerText = this.options.dictFallbackMessage)), this.element.appendChild(this.getFallbackForm());
              }, resize: function(e4, t3, i3, n2) {
                var r2 = { srcX: 0, srcY: 0, srcWidth: e4.width, srcHeight: e4.height }, o3 = e4.width / e4.height;
                null == t3 && null == i3 ? (t3 = r2.srcWidth, i3 = r2.srcHeight) : null == t3 ? t3 = i3 * o3 : null == i3 && (i3 = t3 / o3);
                var s2 = (t3 = Math.min(t3, r2.srcWidth)) / (i3 = Math.min(i3, r2.srcHeight));
                if (r2.srcWidth > t3 || r2.srcHeight > i3)
                  if ("crop" === n2)
                    o3 > s2 ? (r2.srcHeight = e4.height, r2.srcWidth = r2.srcHeight * s2) : (r2.srcWidth = e4.width, r2.srcHeight = r2.srcWidth / s2);
                  else {
                    if ("contain" !== n2)
                      throw new Error("Unknown resizeMethod '" + n2 + "'");
                    o3 > s2 ? i3 = t3 / o3 : t3 = i3 * o3;
                  }
                return r2.srcX = (e4.width - r2.srcWidth) / 2, r2.srcY = (e4.height - r2.srcHeight) / 2, r2.trgWidth = t3, r2.trgHeight = i3, r2;
              }, transformFile: function(e4, t3) {
                return (this.options.resizeWidth || this.options.resizeHeight) && e4.type.match(/image.*/) ? this.resizeImage(e4, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, t3) : t3(e4);
              }, previewTemplate: '<div class="dz-preview dz-file-preview">\n  <div class="dz-image"><img data-dz-thumbnail /></div>\n  <div class="dz-details">\n    <div class="dz-size"><span data-dz-size></span></div>\n    <div class="dz-filename"><span data-dz-name></span></div>\n  </div>\n  <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>\n  <div class="dz-error-message"><span data-dz-errormessage></span></div>\n  <div class="dz-success-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Check</title>\n      <defs></defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF" sketch:type="MSShapeGroup"></path>\n      </g>\n    </svg>\n  </div>\n  <div class="dz-error-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Error</title>\n      <defs></defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <g id="Check-+-Oval-2" sketch:type="MSLayerGroup" stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475">\n          <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" sketch:type="MSShapeGroup"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>', drop: function(e4) {
                return this.element.classList.remove("dz-drag-hover");
              }, dragstart: function(e4) {
              }, dragend: function(e4) {
                return this.element.classList.remove("dz-drag-hover");
              }, dragenter: function(e4) {
                return this.element.classList.add("dz-drag-hover");
              }, dragover: function(e4) {
                return this.element.classList.add("dz-drag-hover");
              }, dragleave: function(e4) {
                return this.element.classList.remove("dz-drag-hover");
              }, paste: function(e4) {
              }, reset: function() {
                return this.element.classList.remove("dz-started");
              }, addedfile: function(e4) {
                var t3 = this;
                if (this.element === this.previewsContainer && this.element.classList.add("dz-started"), this.previewsContainer) {
                  e4.previewElement = o2.createElement(this.options.previewTemplate.trim()), e4.previewTemplate = e4.previewElement, this.previewsContainer.appendChild(e4.previewElement);
                  for (var i3 = 0, n2 = n2 = e4.previewElement.querySelectorAll("[data-dz-name]"); ; ) {
                    if (i3 >= n2.length)
                      break;
                    var r2 = n2[i3++];
                    r2.textContent = e4.name;
                  }
                  for (var s2 = 0, a2 = a2 = e4.previewElement.querySelectorAll("[data-dz-size]"); !(s2 >= a2.length); )
                    (r2 = a2[s2++]).innerHTML = this.filesize(e4.size);
                  this.options.addRemoveLinks && (e4._removeLink = o2.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>' + this.options.dictRemoveFile + "</a>"), e4.previewElement.appendChild(e4._removeLink));
                  for (var l2 = function(i4) {
                    return i4.preventDefault(), i4.stopPropagation(), e4.status === o2.UPLOADING ? o2.confirm(t3.options.dictCancelUploadConfirmation, function() {
                      return t3.removeFile(e4);
                    }) : t3.options.dictRemoveFileConfirmation ? o2.confirm(t3.options.dictRemoveFileConfirmation, function() {
                      return t3.removeFile(e4);
                    }) : t3.removeFile(e4);
                  }, u2 = 0, d = d = e4.previewElement.querySelectorAll("[data-dz-remove]"); ; ) {
                    if (u2 >= d.length)
                      break;
                    d[u2++].addEventListener("click", l2);
                  }
                }
              }, removedfile: function(e4) {
                return null != e4.previewElement && null != e4.previewElement.parentNode && e4.previewElement.parentNode.removeChild(e4.previewElement), this._updateMaxFilesReachedClass();
              }, thumbnail: function(e4, t3) {
                if (e4.previewElement) {
                  e4.previewElement.classList.remove("dz-file-preview");
                  for (var i3 = 0, n2 = n2 = e4.previewElement.querySelectorAll("[data-dz-thumbnail]"); ; ) {
                    if (i3 >= n2.length)
                      break;
                    var r2 = n2[i3++];
                    r2.alt = e4.name, r2.src = t3;
                  }
                  return setTimeout(function() {
                    return e4.previewElement.classList.add("dz-image-preview");
                  }, 1);
                }
              }, error: function(e4, t3) {
                if (e4.previewElement) {
                  e4.previewElement.classList.add("dz-error"), "String" != typeof t3 && t3.error && (t3 = t3.error);
                  for (var i3 = 0, n2 = n2 = e4.previewElement.querySelectorAll("[data-dz-errormessage]"); ; ) {
                    if (i3 >= n2.length)
                      break;
                    n2[i3++].textContent = t3;
                  }
                }
              }, errormultiple: function() {
              }, processing: function(e4) {
                if (e4.previewElement && (e4.previewElement.classList.add("dz-processing"), e4._removeLink))
                  return e4._removeLink.innerHTML = this.options.dictCancelUpload;
              }, processingmultiple: function() {
              }, uploadprogress: function(e4, t3, i3) {
                if (e4.previewElement)
                  for (var n2 = 0, r2 = r2 = e4.previewElement.querySelectorAll("[data-dz-uploadprogress]"); ; ) {
                    if (n2 >= r2.length)
                      break;
                    var o3 = r2[n2++];
                    "PROGRESS" === o3.nodeName ? o3.value = t3 : o3.style.width = t3 + "%";
                  }
              }, totaluploadprogress: function() {
              }, sending: function() {
              }, sendingmultiple: function() {
              }, success: function(e4) {
                if (e4.previewElement)
                  return e4.previewElement.classList.add("dz-success");
              }, successmultiple: function() {
              }, canceled: function(e4) {
                return this.emit("error", e4, this.options.dictUploadCanceled);
              }, canceledmultiple: function() {
              }, complete: function(e4) {
                if (e4._removeLink && (e4._removeLink.innerHTML = this.options.dictRemoveFile), e4.previewElement)
                  return e4.previewElement.classList.add("dz-complete");
              }, completemultiple: function() {
              }, maxfilesexceeded: function() {
              }, maxfilesreached: function() {
              }, queuecomplete: function() {
              }, addedfiles: function() {
              } }, this.prototype._thumbnailQueue = [], this.prototype._processingThumbnail = false;
            } }, { key: "extend", value: function(e4) {
              for (var t3 = arguments.length, i3 = Array(t3 > 1 ? t3 - 1 : 0), n2 = 1; n2 < t3; n2++)
                i3[n2 - 1] = arguments[n2];
              for (var r2 = 0, o3 = o3 = i3; ; ) {
                if (r2 >= o3.length)
                  break;
                var s2 = o3[r2++];
                for (var a2 in s2) {
                  var l2 = s2[a2];
                  e4[a2] = l2;
                }
              }
              return e4;
            } }]), t2(o2, [{ key: "getAcceptedFiles", value: function() {
              return this.files.filter(function(e4) {
                return e4.accepted;
              }).map(function(e4) {
                return e4;
              });
            } }, { key: "getRejectedFiles", value: function() {
              return this.files.filter(function(e4) {
                return !e4.accepted;
              }).map(function(e4) {
                return e4;
              });
            } }, { key: "getFilesWithStatus", value: function(e4) {
              return this.files.filter(function(t3) {
                return t3.status === e4;
              }).map(function(e5) {
                return e5;
              });
            } }, { key: "getQueuedFiles", value: function() {
              return this.getFilesWithStatus(o2.QUEUED);
            } }, { key: "getUploadingFiles", value: function() {
              return this.getFilesWithStatus(o2.UPLOADING);
            } }, { key: "getAddedFiles", value: function() {
              return this.getFilesWithStatus(o2.ADDED);
            } }, { key: "getActiveFiles", value: function() {
              return this.files.filter(function(e4) {
                return e4.status === o2.UPLOADING || e4.status === o2.QUEUED;
              }).map(function(e4) {
                return e4;
              });
            } }, { key: "init", value: function() {
              var e4 = this;
              if ("form" === this.element.tagName && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(o2.createElement('<div class="dz-default dz-message"><span>' + this.options.dictDefaultMessage + "</span></div>")), this.clickableElements.length) {
                !function t4() {
                  return e4.hiddenFileInput && e4.hiddenFileInput.parentNode.removeChild(e4.hiddenFileInput), e4.hiddenFileInput = document.createElement("input"), e4.hiddenFileInput.setAttribute("type", "file"), (null === e4.options.maxFiles || e4.options.maxFiles > 1) && e4.hiddenFileInput.setAttribute("multiple", "multiple"), e4.hiddenFileInput.className = "dz-hidden-input", null !== e4.options.acceptedFiles && e4.hiddenFileInput.setAttribute("accept", e4.options.acceptedFiles), null !== e4.options.capture && e4.hiddenFileInput.setAttribute("capture", e4.options.capture), e4.hiddenFileInput.style.visibility = "hidden", e4.hiddenFileInput.style.position = "absolute", e4.hiddenFileInput.style.top = "0", e4.hiddenFileInput.style.left = "0", e4.hiddenFileInput.style.height = "0", e4.hiddenFileInput.style.width = "0", o2.getElement(e4.options.hiddenInputContainer, "hiddenInputContainer").appendChild(e4.hiddenFileInput), e4.hiddenFileInput.addEventListener("change", function() {
                    var i4 = e4.hiddenFileInput.files;
                    if (i4.length)
                      for (var n3 = 0, r3 = r3 = i4; !(n3 >= r3.length); ) {
                        var o3 = r3[n3++];
                        e4.addFile(o3);
                      }
                    return e4.emit("addedfiles", i4), t4();
                  });
                }();
              }
              this.URL = null !== window.URL ? window.URL : window.webkitURL;
              for (var t3 = 0, i3 = i3 = this.events; ; ) {
                if (t3 >= i3.length)
                  break;
                var n2 = i3[t3++];
                this.on(n2, this.options[n2]);
              }
              this.on("uploadprogress", function() {
                return e4.updateTotalUploadProgress();
              }), this.on("removedfile", function() {
                return e4.updateTotalUploadProgress();
              }), this.on("canceled", function(t4) {
                return e4.emit("complete", t4);
              }), this.on("complete", function(t4) {
                if (0 === e4.getAddedFiles().length && 0 === e4.getUploadingFiles().length && 0 === e4.getQueuedFiles().length)
                  return setTimeout(function() {
                    return e4.emit("queuecomplete");
                  }, 0);
              });
              var r2 = function(e5) {
                return e5.stopPropagation(), e5.preventDefault ? e5.preventDefault() : e5.returnValue = false;
              };
              return this.listeners = [{ element: this.element, events: { dragstart: function(t4) {
                return e4.emit("dragstart", t4);
              }, dragenter: function(t4) {
                return r2(t4), e4.emit("dragenter", t4);
              }, dragover: function(t4) {
                var i4 = void 0;
                try {
                  i4 = t4.dataTransfer.effectAllowed;
                } catch (e5) {
                }
                return t4.dataTransfer.dropEffect = "move" === i4 || "linkMove" === i4 ? "move" : "copy", r2(t4), e4.emit("dragover", t4);
              }, dragleave: function(t4) {
                return e4.emit("dragleave", t4);
              }, drop: function(t4) {
                return r2(t4), e4.drop(t4);
              }, dragend: function(t4) {
                return e4.emit("dragend", t4);
              } } }], this.clickableElements.forEach(function(t4) {
                return e4.listeners.push({ element: t4, events: { click: function(i4) {
                  return (t4 !== e4.element || i4.target === e4.element || o2.elementInside(i4.target, e4.element.querySelector(".dz-message"))) && e4.hiddenFileInput.click(), true;
                } } });
              }), this.enable(), this.options.init.call(this);
            } }, { key: "destroy", value: function() {
              return this.disable(), this.removeAllFiles(true), (null != this.hiddenFileInput ? this.hiddenFileInput.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone, o2.instances.splice(o2.instances.indexOf(this), 1);
            } }, { key: "updateTotalUploadProgress", value: function() {
              var e4 = void 0, t3 = 0, i3 = 0;
              if (this.getActiveFiles().length) {
                for (var n2 = 0, r2 = r2 = this.getActiveFiles(); ; ) {
                  if (n2 >= r2.length)
                    break;
                  var o3 = r2[n2++];
                  t3 += o3.upload.bytesSent, i3 += o3.upload.total;
                }
                e4 = 100 * t3 / i3;
              } else
                e4 = 100;
              return this.emit("totaluploadprogress", e4, i3, t3);
            } }, { key: "_getParamName", value: function(e4) {
              return "function" == typeof this.options.paramName ? this.options.paramName(e4) : this.options.paramName + (this.options.uploadMultiple ? "[" + e4 + "]" : "");
            } }, { key: "_renameFile", value: function(e4) {
              return "function" != typeof this.options.renameFile ? e4.name : this.options.renameFile(e4);
            } }, { key: "getFallbackForm", value: function() {
              var e4, t3 = void 0;
              if (e4 = this.getExistingFallback())
                return e4;
              var i3 = '<div class="dz-fallback">';
              this.options.dictFallbackText && (i3 += "<p>" + this.options.dictFallbackText + "</p>"), i3 += '<input type="file" name="' + this._getParamName(0) + '" ' + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + ' /><input type="submit" value="Upload!"></div>';
              var n2 = o2.createElement(i3);
              return "FORM" !== this.element.tagName ? (t3 = o2.createElement('<form action="' + this.options.url + '" enctype="multipart/form-data" method="' + this.options.method + '"></form>')).appendChild(n2) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), null != t3 ? t3 : n2;
            } }, { key: "getExistingFallback", value: function() {
              for (var e4 = function(e5) {
                for (var t4 = 0, i4 = i4 = e5; ; ) {
                  if (t4 >= i4.length)
                    break;
                  var n3 = i4[t4++];
                  if (/(^| )fallback($| )/.test(n3.className))
                    return n3;
                }
              }, t3 = ["div", "form"], i3 = 0; i3 < t3.length; i3++) {
                var n2, r2 = t3[i3];
                if (n2 = e4(this.element.getElementsByTagName(r2)))
                  return n2;
              }
            } }, { key: "setupEventListeners", value: function() {
              return this.listeners.map(function(e4) {
                return function() {
                  var t3 = [];
                  for (var i3 in e4.events) {
                    var n2 = e4.events[i3];
                    t3.push(e4.element.addEventListener(i3, n2, false));
                  }
                  return t3;
                }();
              });
            } }, { key: "removeEventListeners", value: function() {
              return this.listeners.map(function(e4) {
                return function() {
                  var t3 = [];
                  for (var i3 in e4.events) {
                    var n2 = e4.events[i3];
                    t3.push(e4.element.removeEventListener(i3, n2, false));
                  }
                  return t3;
                }();
              });
            } }, { key: "disable", value: function() {
              var e4 = this;
              return this.clickableElements.forEach(function(e5) {
                return e5.classList.remove("dz-clickable");
              }), this.removeEventListeners(), this.disabled = true, this.files.map(function(t3) {
                return e4.cancelUpload(t3);
              });
            } }, { key: "enable", value: function() {
              return delete this.disabled, this.clickableElements.forEach(function(e4) {
                return e4.classList.add("dz-clickable");
              }), this.setupEventListeners();
            } }, { key: "filesize", value: function(e4) {
              var t3 = 0, i3 = "b";
              if (e4 > 0) {
                for (var n2 = ["tb", "gb", "mb", "kb", "b"], r2 = 0; r2 < n2.length; r2++) {
                  var o3 = n2[r2];
                  if (e4 >= Math.pow(this.options.filesizeBase, 4 - r2) / 10) {
                    t3 = e4 / Math.pow(this.options.filesizeBase, 4 - r2), i3 = o3;
                    break;
                  }
                }
                t3 = Math.round(10 * t3) / 10;
              }
              return "<strong>" + t3 + "</strong> " + this.options.dictFileSizeUnits[i3];
            } }, { key: "_updateMaxFilesReachedClass", value: function() {
              return null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (this.getAcceptedFiles().length === this.options.maxFiles && this.emit("maxfilesreached", this.files), this.element.classList.add("dz-max-files-reached")) : this.element.classList.remove("dz-max-files-reached");
            } }, { key: "drop", value: function(e4) {
              if (e4.dataTransfer) {
                this.emit("drop", e4);
                for (var t3 = [], i3 = 0; i3 < e4.dataTransfer.files.length; i3++)
                  t3[i3] = e4.dataTransfer.files[i3];
                if (this.emit("addedfiles", t3), t3.length) {
                  var n2 = e4.dataTransfer.items;
                  n2 && n2.length && null != n2[0].webkitGetAsEntry ? this._addFilesFromItems(n2) : this.handleFiles(t3);
                }
              }
            } }, { key: "paste", value: function(e4) {
              if (null != (t3 = null != e4 ? e4.clipboardData : void 0, i3 = function(e5) {
                return e5.items;
              }, null != t3 ? i3(t3) : void 0)) {
                var t3, i3;
                this.emit("paste", e4);
                var n2 = e4.clipboardData.items;
                return n2.length ? this._addFilesFromItems(n2) : void 0;
              }
            } }, { key: "handleFiles", value: function(e4) {
              for (var t3 = 0, i3 = i3 = e4; ; ) {
                if (t3 >= i3.length)
                  break;
                var n2 = i3[t3++];
                this.addFile(n2);
              }
            } }, { key: "_addFilesFromItems", value: function(e4) {
              var t3 = this;
              return function() {
                for (var i3 = [], n2 = 0, r2 = r2 = e4; ; ) {
                  if (n2 >= r2.length)
                    break;
                  var o3, s2 = r2[n2++];
                  null != s2.webkitGetAsEntry && (o3 = s2.webkitGetAsEntry()) ? o3.isFile ? i3.push(t3.addFile(s2.getAsFile())) : o3.isDirectory ? i3.push(t3._addFilesFromDirectory(o3, o3.name)) : i3.push(void 0) : null != s2.getAsFile && (null == s2.kind || "file" === s2.kind) ? i3.push(t3.addFile(s2.getAsFile())) : i3.push(void 0);
                }
                return i3;
              }();
            } }, { key: "_addFilesFromDirectory", value: function(e4, t3) {
              var i3 = this, n2 = e4.createReader(), r2 = function(e5) {
                return t4 = console, i4 = "log", n3 = function(t5) {
                  return t5.log(e5);
                }, null != t4 && "function" == typeof t4[i4] ? n3(t4, i4) : void 0;
                var t4, i4, n3;
              };
              return function e5() {
                return n2.readEntries(function(n3) {
                  if (n3.length > 0) {
                    for (var r3 = 0, o3 = o3 = n3; !(r3 >= o3.length); ) {
                      var s2 = o3[r3++];
                      s2.isFile ? s2.file(function(e6) {
                        if (!i3.options.ignoreHiddenFiles || "." !== e6.name.substring(0, 1))
                          return e6.fullPath = t3 + "/" + e6.name, i3.addFile(e6);
                      }) : s2.isDirectory && i3._addFilesFromDirectory(s2, t3 + "/" + s2.name);
                    }
                    e5();
                  }
                  return null;
                }, r2);
              }();
            } }, { key: "accept", value: function(e4, t3) {
              return this.options.maxFilesize && e4.size > 1024 * this.options.maxFilesize * 1024 ? t3(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(e4.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : o2.isValidFile(e4, this.options.acceptedFiles) ? null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (t3(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", e4)) : this.options.accept.call(this, e4, t3) : t3(this.options.dictInvalidFileType);
            } }, { key: "addFile", value: function(e4) {
              var t3 = this;
              return e4.upload = { uuid: o2.uuidv4(), progress: 0, total: e4.size, bytesSent: 0, filename: this._renameFile(e4), chunked: this.options.chunking && (this.options.forceChunking || e4.size > this.options.chunkSize), totalChunkCount: Math.ceil(e4.size / this.options.chunkSize) }, this.files.push(e4), e4.status = o2.ADDED, this.emit("addedfile", e4), this._enqueueThumbnail(e4), this.accept(e4, function(i3) {
                return i3 ? (e4.accepted = false, t3._errorProcessing([e4], i3)) : (e4.accepted = true, t3.options.autoQueue && t3.enqueueFile(e4)), t3._updateMaxFilesReachedClass();
              });
            } }, { key: "enqueueFiles", value: function(e4) {
              for (var t3 = 0, i3 = i3 = e4; ; ) {
                if (t3 >= i3.length)
                  break;
                var n2 = i3[t3++];
                this.enqueueFile(n2);
              }
              return null;
            } }, { key: "enqueueFile", value: function(e4) {
              var t3 = this;
              if (e4.status !== o2.ADDED || true !== e4.accepted)
                throw new Error("This file can't be queued because it has already been processed or was rejected.");
              if (e4.status = o2.QUEUED, this.options.autoProcessQueue)
                return setTimeout(function() {
                  return t3.processQueue();
                }, 0);
            } }, { key: "_enqueueThumbnail", value: function(e4) {
              var t3 = this;
              if (this.options.createImageThumbnails && e4.type.match(/image.*/) && e4.size <= 1024 * this.options.maxThumbnailFilesize * 1024)
                return this._thumbnailQueue.push(e4), setTimeout(function() {
                  return t3._processThumbnailQueue();
                }, 0);
            } }, { key: "_processThumbnailQueue", value: function() {
              var e4 = this;
              if (!this._processingThumbnail && 0 !== this._thumbnailQueue.length) {
                this._processingThumbnail = true;
                var t3 = this._thumbnailQueue.shift();
                return this.createThumbnail(t3, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function(i3) {
                  return e4.emit("thumbnail", t3, i3), e4._processingThumbnail = false, e4._processThumbnailQueue();
                });
              }
            } }, { key: "removeFile", value: function(e4) {
              if (e4.status === o2.UPLOADING && this.cancelUpload(e4), this.files = s(this.files, e4), this.emit("removedfile", e4), 0 === this.files.length)
                return this.emit("reset");
            } }, { key: "removeAllFiles", value: function(e4) {
              null == e4 && (e4 = false);
              for (var t3 = 0, i3 = i3 = this.files.slice(); ; ) {
                if (t3 >= i3.length)
                  break;
                var n2 = i3[t3++];
                (n2.status !== o2.UPLOADING || e4) && this.removeFile(n2);
              }
              return null;
            } }, { key: "resizeImage", value: function(e4, t3, i3, n2, r2) {
              var s2 = this;
              return this.createThumbnail(e4, t3, i3, n2, true, function(t4, i4) {
                if (null == i4)
                  return r2(e4);
                var n3 = s2.options.resizeMimeType;
                null == n3 && (n3 = e4.type);
                var a2 = i4.toDataURL(n3, s2.options.resizeQuality);
                return "image/jpeg" !== n3 && "image/jpg" !== n3 || (a2 = u.restore(e4.dataURL, a2)), r2(o2.dataURItoBlob(a2));
              });
            } }, { key: "createThumbnail", value: function(e4, t3, i3, n2, r2, o3) {
              var s2 = this, a2 = new FileReader();
              return a2.onload = function() {
                if (e4.dataURL = a2.result, "image/svg+xml" !== e4.type)
                  return s2.createThumbnailFromUrl(e4, t3, i3, n2, r2, o3);
                null != o3 && o3(a2.result);
              }, a2.readAsDataURL(e4);
            } }, { key: "createThumbnailFromUrl", value: function(e4, t3, i3, n2, r2, o3, s2) {
              var a2 = this, u2 = document.createElement("img");
              return s2 && (u2.crossOrigin = s2), u2.onload = function() {
                var s3 = function(e5) {
                  return e5(1);
                };
                return "undefined" != typeof EXIF && null !== EXIF && r2 && (s3 = function(e5) {
                  return EXIF.getData(u2, function() {
                    return e5(EXIF.getTag(this, "Orientation"));
                  });
                }), s3(function(r3) {
                  e4.width = u2.width, e4.height = u2.height;
                  var s4 = a2.options.resize.call(a2, e4, t3, i3, n2), d = document.createElement("canvas"), c = d.getContext("2d");
                  switch (d.width = s4.trgWidth, d.height = s4.trgHeight, r3 > 4 && (d.width = s4.trgHeight, d.height = s4.trgWidth), r3) {
                    case 2:
                      c.translate(d.width, 0), c.scale(-1, 1);
                      break;
                    case 3:
                      c.translate(d.width, d.height), c.rotate(Math.PI);
                      break;
                    case 4:
                      c.translate(0, d.height), c.scale(1, -1);
                      break;
                    case 5:
                      c.rotate(0.5 * Math.PI), c.scale(1, -1);
                      break;
                    case 6:
                      c.rotate(0.5 * Math.PI), c.translate(0, -d.width);
                      break;
                    case 7:
                      c.rotate(0.5 * Math.PI), c.translate(d.height, -d.width), c.scale(-1, 1);
                      break;
                    case 8:
                      c.rotate(-0.5 * Math.PI), c.translate(-d.height, 0);
                  }
                  l(c, u2, null != s4.srcX ? s4.srcX : 0, null != s4.srcY ? s4.srcY : 0, s4.srcWidth, s4.srcHeight, null != s4.trgX ? s4.trgX : 0, null != s4.trgY ? s4.trgY : 0, s4.trgWidth, s4.trgHeight);
                  var p = d.toDataURL("image/png");
                  if (null != o3)
                    return o3(p, d);
                });
              }, null != o3 && (u2.onerror = o3), u2.src = e4.dataURL;
            } }, { key: "processQueue", value: function() {
              var e4 = this.options.parallelUploads, t3 = this.getUploadingFiles().length, i3 = t3;
              if (!(t3 >= e4)) {
                var n2 = this.getQueuedFiles();
                if (n2.length > 0) {
                  if (this.options.uploadMultiple)
                    return this.processFiles(n2.slice(0, e4 - t3));
                  for (; i3 < e4; ) {
                    if (!n2.length)
                      return;
                    this.processFile(n2.shift()), i3++;
                  }
                }
              }
            } }, { key: "processFile", value: function(e4) {
              return this.processFiles([e4]);
            } }, { key: "processFiles", value: function(e4) {
              for (var t3 = 0, i3 = i3 = e4; ; ) {
                if (t3 >= i3.length)
                  break;
                var n2 = i3[t3++];
                n2.processing = true, n2.status = o2.UPLOADING, this.emit("processing", n2);
              }
              return this.options.uploadMultiple && this.emit("processingmultiple", e4), this.uploadFiles(e4);
            } }, { key: "_getFilesWithXhr", value: function(e4) {
              return this.files.filter(function(t3) {
                return t3.xhr === e4;
              }).map(function(e5) {
                return e5;
              });
            } }, { key: "cancelUpload", value: function(e4) {
              if (e4.status === o2.UPLOADING) {
                for (var t3 = this._getFilesWithXhr(e4.xhr), i3 = 0, n2 = n2 = t3; ; ) {
                  if (i3 >= n2.length)
                    break;
                  n2[i3++].status = o2.CANCELED;
                }
                void 0 !== e4.xhr && e4.xhr.abort();
                for (var r2 = 0, s2 = s2 = t3; ; ) {
                  if (r2 >= s2.length)
                    break;
                  var a2 = s2[r2++];
                  this.emit("canceled", a2);
                }
                this.options.uploadMultiple && this.emit("canceledmultiple", t3);
              } else
                e4.status !== o2.ADDED && e4.status !== o2.QUEUED || (e4.status = o2.CANCELED, this.emit("canceled", e4), this.options.uploadMultiple && this.emit("canceledmultiple", [e4]));
              if (this.options.autoProcessQueue)
                return this.processQueue();
            } }, { key: "resolveOption", value: function(e4) {
              if ("function" == typeof e4) {
                for (var t3 = arguments.length, i3 = Array(t3 > 1 ? t3 - 1 : 0), n2 = 1; n2 < t3; n2++)
                  i3[n2 - 1] = arguments[n2];
                return e4.apply(this, i3);
              }
              return e4;
            } }, { key: "uploadFile", value: function(e4) {
              return this.uploadFiles([e4]);
            } }, { key: "uploadFiles", value: function(e4) {
              var t3 = this;
              this._transformFiles(e4, function(i3) {
                if (e4[0].upload.chunked) {
                  var n2 = e4[0], r2 = i3[0];
                  n2.upload.chunks = [];
                  var s2 = function() {
                    for (var i4 = 0; void 0 !== n2.upload.chunks[i4]; )
                      i4++;
                    if (!(i4 >= n2.upload.totalChunkCount)) {
                      var s3 = i4 * t3.options.chunkSize, a3 = Math.min(s3 + t3.options.chunkSize, n2.size), l3 = { name: t3._getParamName(0), data: r2.webkitSlice ? r2.webkitSlice(s3, a3) : r2.slice(s3, a3), filename: n2.upload.filename, chunkIndex: i4 };
                      n2.upload.chunks[i4] = { file: n2, index: i4, dataBlock: l3, status: o2.UPLOADING, progress: 0, retries: 0 }, t3._uploadData(e4, [l3]);
                    }
                  };
                  if (n2.upload.finishedChunkUpload = function(i4) {
                    var r3 = true;
                    i4.status = o2.SUCCESS, i4.dataBlock = null, i4.xhr = null;
                    for (var a3 = 0; a3 < n2.upload.totalChunkCount; a3++) {
                      if (void 0 === n2.upload.chunks[a3])
                        return s2();
                      n2.upload.chunks[a3].status !== o2.SUCCESS && (r3 = false);
                    }
                    r3 && t3.options.chunksUploaded(n2, function() {
                      t3._finished(e4, "", null);
                    });
                  }, t3.options.parallelChunkUploads)
                    for (var a2 = 0; a2 < n2.upload.totalChunkCount; a2++)
                      s2();
                  else
                    s2();
                } else {
                  for (var l2 = [], u2 = 0; u2 < e4.length; u2++)
                    l2[u2] = { name: t3._getParamName(u2), data: i3[u2], filename: e4[u2].upload.filename };
                  t3._uploadData(e4, l2);
                }
              });
            } }, { key: "_getChunk", value: function(e4, t3) {
              for (var i3 = 0; i3 < e4.upload.totalChunkCount; i3++)
                if (void 0 !== e4.upload.chunks[i3] && e4.upload.chunks[i3].xhr === t3)
                  return e4.upload.chunks[i3];
            } }, { key: "_uploadData", value: function(e4, t3) {
              for (var i3 = this, n2 = new XMLHttpRequest(), r2 = 0, s2 = s2 = e4; ; ) {
                if (r2 >= s2.length)
                  break;
                s2[r2++].xhr = n2;
              }
              e4[0].upload.chunked && (e4[0].upload.chunks[t3[0].chunkIndex].xhr = n2);
              var a2 = this.resolveOption(this.options.method, e4), l2 = this.resolveOption(this.options.url, e4);
              n2.open(a2, l2, true), n2.timeout = this.resolveOption(this.options.timeout, e4), n2.withCredentials = !!this.options.withCredentials, n2.onload = function(t4) {
                i3._finishedUploading(e4, n2, t4);
              }, n2.onerror = function() {
                i3._handleUploadError(e4, n2);
              }, (null != n2.upload ? n2.upload : n2).onprogress = function(t4) {
                return i3._updateFilesUploadProgress(e4, n2, t4);
              };
              var u2 = { Accept: "application/json", "Cache-Control": "no-cache", "X-Requested-With": "XMLHttpRequest" };
              for (var d in this.options.headers && o2.extend(u2, this.options.headers), u2) {
                var c = u2[d];
                c && n2.setRequestHeader(d, c);
              }
              var p = new FormData();
              if (this.options.params) {
                var h = this.options.params;
                for (var f in "function" == typeof h && (h = h.call(this, e4, n2, e4[0].upload.chunked ? this._getChunk(e4[0], n2) : null)), h) {
                  var m = h[f];
                  p.append(f, m);
                }
              }
              for (var v = 0, g = g = e4; ; ) {
                if (v >= g.length)
                  break;
                var k = g[v++];
                this.emit("sending", k, n2, p);
              }
              this.options.uploadMultiple && this.emit("sendingmultiple", e4, n2, p), this._addFormElementData(p);
              for (var y = 0; y < t3.length; y++) {
                var b = t3[y];
                p.append(b.name, b.data, b.filename);
              }
              this.submitRequest(n2, p, e4);
            } }, { key: "_transformFiles", value: function(e4, t3) {
              for (var i3 = this, n2 = [], r2 = 0, o3 = function(o4) {
                i3.options.transformFile.call(i3, e4[o4], function(i4) {
                  n2[o4] = i4, ++r2 === e4.length && t3(n2);
                });
              }, s2 = 0; s2 < e4.length; s2++)
                o3(s2);
            } }, { key: "_addFormElementData", value: function(e4) {
              if ("FORM" === this.element.tagName)
                for (var t3 = 0, i3 = i3 = this.element.querySelectorAll("input, textarea, select, button"); ; ) {
                  if (t3 >= i3.length)
                    break;
                  var n2 = i3[t3++], r2 = n2.getAttribute("name"), o3 = n2.getAttribute("type");
                  if (o3 && (o3 = o3.toLowerCase()), null != r2)
                    if ("SELECT" === n2.tagName && n2.hasAttribute("multiple"))
                      for (var s2 = 0, a2 = a2 = n2.options; ; ) {
                        if (s2 >= a2.length)
                          break;
                        var l2 = a2[s2++];
                        l2.selected && e4.append(r2, l2.value);
                      }
                    else
                      (!o3 || "checkbox" !== o3 && "radio" !== o3 || n2.checked) && e4.append(r2, n2.value);
                }
            } }, { key: "_updateFilesUploadProgress", value: function(e4, t3, i3) {
              var n2 = void 0;
              if (void 0 !== i3) {
                if (n2 = 100 * i3.loaded / i3.total, e4[0].upload.chunked) {
                  var r2 = e4[0], o3 = this._getChunk(r2, t3);
                  o3.progress = n2, o3.total = i3.total, o3.bytesSent = i3.loaded, r2.upload.progress = 0, r2.upload.total = 0, r2.upload.bytesSent = 0;
                  for (var s2 = 0; s2 < r2.upload.totalChunkCount; s2++)
                    void 0 !== r2.upload.chunks[s2] && void 0 !== r2.upload.chunks[s2].progress && (r2.upload.progress += r2.upload.chunks[s2].progress, r2.upload.total += r2.upload.chunks[s2].total, r2.upload.bytesSent += r2.upload.chunks[s2].bytesSent);
                  r2.upload.progress = r2.upload.progress / r2.upload.totalChunkCount;
                } else
                  for (var a2 = 0, l2 = l2 = e4; ; ) {
                    if (a2 >= l2.length)
                      break;
                    var u2 = l2[a2++];
                    u2.upload.progress = n2, u2.upload.total = i3.total, u2.upload.bytesSent = i3.loaded;
                  }
                for (var d = 0, c = c = e4; ; ) {
                  if (d >= c.length)
                    break;
                  var p = c[d++];
                  this.emit("uploadprogress", p, p.upload.progress, p.upload.bytesSent);
                }
              } else {
                var h = true;
                n2 = 100;
                for (var f = 0, m = m = e4; ; ) {
                  if (f >= m.length)
                    break;
                  var v = m[f++];
                  100 === v.upload.progress && v.upload.bytesSent === v.upload.total || (h = false), v.upload.progress = n2, v.upload.bytesSent = v.upload.total;
                }
                if (h)
                  return;
                for (var g = 0, k = k = e4; ; ) {
                  if (g >= k.length)
                    break;
                  var y = k[g++];
                  this.emit("uploadprogress", y, n2, y.upload.bytesSent);
                }
              }
            } }, { key: "_finishedUploading", value: function(e4, t3, i3) {
              var n2 = void 0;
              if (e4[0].status !== o2.CANCELED && 4 === t3.readyState) {
                if ("arraybuffer" !== t3.responseType && "blob" !== t3.responseType && (n2 = t3.responseText, t3.getResponseHeader("content-type") && ~t3.getResponseHeader("content-type").indexOf("application/json")))
                  try {
                    n2 = JSON.parse(n2);
                  } catch (e5) {
                    i3 = e5, n2 = "Invalid JSON response from server.";
                  }
                this._updateFilesUploadProgress(e4), 200 <= t3.status && t3.status < 300 ? e4[0].upload.chunked ? e4[0].upload.finishedChunkUpload(this._getChunk(e4[0], t3)) : this._finished(e4, n2, i3) : this._handleUploadError(e4, t3, n2);
              }
            } }, { key: "_handleUploadError", value: function(e4, t3, i3) {
              if (e4[0].status !== o2.CANCELED) {
                if (e4[0].upload.chunked && this.options.retryChunks) {
                  var n2 = this._getChunk(e4[0], t3);
                  if (n2.retries++ < this.options.retryChunksLimit)
                    return void this._uploadData(e4, [n2.dataBlock]);
                  console.warn("Retried this chunk too often. Giving up.");
                }
                for (var r2 = 0, s2 = s2 = e4; ; ) {
                  if (r2 >= s2.length)
                    break;
                  s2[r2++], this._errorProcessing(e4, i3 || this.options.dictResponseError.replace("{{statusCode}}", t3.status), t3);
                }
              }
            } }, { key: "submitRequest", value: function(e4, t3, i3) {
              e4.send(t3);
            } }, { key: "_finished", value: function(e4, t3, i3) {
              for (var n2 = 0, r2 = r2 = e4; ; ) {
                if (n2 >= r2.length)
                  break;
                var s2 = r2[n2++];
                s2.status = o2.SUCCESS, this.emit("success", s2, t3, i3), this.emit("complete", s2);
              }
              if (this.options.uploadMultiple && (this.emit("successmultiple", e4, t3, i3), this.emit("completemultiple", e4)), this.options.autoProcessQueue)
                return this.processQueue();
            } }, { key: "_errorProcessing", value: function(e4, t3, i3) {
              for (var n2 = 0, r2 = r2 = e4; ; ) {
                if (n2 >= r2.length)
                  break;
                var s2 = r2[n2++];
                s2.status = o2.ERROR, this.emit("error", s2, t3, i3), this.emit("complete", s2);
              }
              if (this.options.uploadMultiple && (this.emit("errormultiple", e4, t3, i3), this.emit("completemultiple", e4)), this.options.autoProcessQueue)
                return this.processQueue();
            } }], [{ key: "uuidv4", value: function() {
              return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e4) {
                var t3 = 16 * Math.random() | 0;
                return ("x" === e4 ? t3 : 3 & t3 | 8).toString(16);
              });
            } }]), o2;
          }();
          o.initClass(), o.version = "5.5.1", o.options = {}, o.optionsForElement = function(e3) {
            return e3.getAttribute("id") ? o.options[a(e3.getAttribute("id"))] : void 0;
          }, o.instances = [], o.forElement = function(e3) {
            if ("string" == typeof e3 && (e3 = document.querySelector(e3)), null == (null != e3 ? e3.dropzone : void 0))
              throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
            return e3.dropzone;
          }, o.autoDiscover = true, o.discover = function() {
            var e3 = void 0;
            if (document.querySelectorAll)
              e3 = document.querySelectorAll(".dropzone");
            else {
              e3 = [];
              var t3 = function(t4) {
                return function() {
                  for (var i3 = [], n2 = 0, r2 = r2 = t4; ; ) {
                    if (n2 >= r2.length)
                      break;
                    var o2 = r2[n2++];
                    /(^| )dropzone($| )/.test(o2.className) ? i3.push(e3.push(o2)) : i3.push(void 0);
                  }
                  return i3;
                }();
              };
              t3(document.getElementsByTagName("div")), t3(document.getElementsByTagName("form"));
            }
            return function() {
              for (var t4 = [], i3 = 0, n2 = n2 = e3; ; ) {
                if (i3 >= n2.length)
                  break;
                var r2 = n2[i3++];
                false !== o.optionsForElement(r2) ? t4.push(new o(r2)) : t4.push(void 0);
              }
              return t4;
            }();
          }, o.blacklistedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i], o.isBrowserSupported = function() {
            var e3 = true;
            if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector)
              if ("classList" in document.createElement("a"))
                for (var t3 = 0, i3 = i3 = o.blacklistedBrowsers; ; ) {
                  if (t3 >= i3.length)
                    break;
                  i3[t3++].test(navigator.userAgent) && (e3 = false);
                }
              else
                e3 = false;
            else
              e3 = false;
            return e3;
          }, o.dataURItoBlob = function(e3) {
            for (var t3 = atob(e3.split(",")[1]), i3 = e3.split(",")[0].split(":")[1].split(";")[0], n2 = new ArrayBuffer(t3.length), r2 = new Uint8Array(n2), o2 = 0, s2 = t3.length, a2 = 0 <= s2; a2 ? o2 <= s2 : o2 >= s2; a2 ? o2++ : o2--)
              r2[o2] = t3.charCodeAt(o2);
            return new Blob([n2], { type: i3 });
          };
          var s = function(e3, t3) {
            return e3.filter(function(e4) {
              return e4 !== t3;
            }).map(function(e4) {
              return e4;
            });
          }, a = function(e3) {
            return e3.replace(/[\-_](\w)/g, function(e4) {
              return e4.charAt(1).toUpperCase();
            });
          };
          o.createElement = function(e3) {
            var t3 = document.createElement("div");
            return t3.innerHTML = e3, t3.childNodes[0];
          }, o.elementInside = function(e3, t3) {
            if (e3 === t3)
              return true;
            for (; e3 = e3.parentNode; )
              if (e3 === t3)
                return true;
            return false;
          }, o.getElement = function(e3, t3) {
            var i3 = void 0;
            if ("string" == typeof e3 ? i3 = document.querySelector(e3) : null != e3.nodeType && (i3 = e3), null == i3)
              throw new Error("Invalid `" + t3 + "` option provided. Please provide a CSS selector or a plain HTML element.");
            return i3;
          }, o.getElements = function(e3, t3) {
            var i3 = void 0, n2 = void 0;
            if (e3 instanceof Array) {
              n2 = [];
              try {
                for (var r2 = 0, o2 = o2 = e3; !(r2 >= o2.length); )
                  i3 = o2[r2++], n2.push(this.getElement(i3, t3));
              } catch (e4) {
                n2 = null;
              }
            } else if ("string" == typeof e3) {
              n2 = [];
              for (var s2 = 0, a2 = a2 = document.querySelectorAll(e3); !(s2 >= a2.length); )
                i3 = a2[s2++], n2.push(i3);
            } else
              null != e3.nodeType && (n2 = [e3]);
            if (null == n2 || !n2.length)
              throw new Error("Invalid `" + t3 + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
            return n2;
          }, o.confirm = function(e3, t3, i3) {
            return window.confirm(e3) ? t3() : null != i3 ? i3() : void 0;
          }, o.isValidFile = function(e3, t3) {
            if (!t3)
              return true;
            t3 = t3.split(",");
            for (var i3 = e3.type, n2 = i3.replace(/\/.*$/, ""), r2 = 0, o2 = o2 = t3; ; ) {
              if (r2 >= o2.length)
                break;
              var s2 = o2[r2++];
              if ("." === (s2 = s2.trim()).charAt(0)) {
                if (-1 !== e3.name.toLowerCase().indexOf(s2.toLowerCase(), e3.name.length - s2.length))
                  return true;
              } else if (/\/\*$/.test(s2)) {
                if (n2 === s2.replace(/\/.*$/, ""))
                  return true;
              } else if (i3 === s2)
                return true;
            }
            return false;
          }, "undefined" != typeof jQuery && null !== jQuery && (jQuery.fn.dropzone = function(e3) {
            return this.each(function() {
              return new o(this, e3);
            });
          }), null !== e2 ? e2.exports = o : window.Dropzone = o, o.ADDED = "added", o.QUEUED = "queued", o.ACCEPTED = o.QUEUED, o.UPLOADING = "uploading", o.PROCESSING = o.UPLOADING, o.CANCELED = "canceled", o.ERROR = "error", o.SUCCESS = "success";
          var l = function(e3, t3, i3, n2, r2, o2, s2, a2, l2, u2) {
            var d = function(e4) {
              e4.naturalWidth;
              var t4 = e4.naturalHeight, i4 = document.createElement("canvas");
              i4.width = 1, i4.height = t4;
              var n3 = i4.getContext("2d");
              n3.drawImage(e4, 0, 0);
              for (var r3 = n3.getImageData(1, 0, 1, t4).data, o3 = 0, s3 = t4, a3 = t4; a3 > o3; )
                0 === r3[4 * (a3 - 1) + 3] ? s3 = a3 : o3 = a3, a3 = s3 + o3 >> 1;
              var l3 = a3 / t4;
              return 0 === l3 ? 1 : l3;
            }(t3);
            return e3.drawImage(t3, i3, n2, r2, o2, s2, a2, l2, u2 / d);
          }, u = function() {
            function e3() {
              n(this, e3);
            }
            return t2(e3, null, [{ key: "initClass", value: function() {
              this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            } }, { key: "encode64", value: function(e4) {
              for (var t3 = "", i3 = void 0, n2 = void 0, r2 = "", o2 = void 0, s2 = void 0, a2 = void 0, l2 = "", u2 = 0; o2 = (i3 = e4[u2++]) >> 2, s2 = (3 & i3) << 4 | (n2 = e4[u2++]) >> 4, a2 = (15 & n2) << 2 | (r2 = e4[u2++]) >> 6, l2 = 63 & r2, isNaN(n2) ? a2 = l2 = 64 : isNaN(r2) && (l2 = 64), t3 = t3 + this.KEY_STR.charAt(o2) + this.KEY_STR.charAt(s2) + this.KEY_STR.charAt(a2) + this.KEY_STR.charAt(l2), i3 = n2 = r2 = "", o2 = s2 = a2 = l2 = "", u2 < e4.length; )
                ;
              return t3;
            } }, { key: "restore", value: function(e4, t3) {
              if (!e4.match("data:image/jpeg;base64,"))
                return t3;
              var i3 = this.decode64(e4.replace("data:image/jpeg;base64,", "")), n2 = this.slice2Segments(i3), r2 = this.exifManipulation(t3, n2);
              return "data:image/jpeg;base64," + this.encode64(r2);
            } }, { key: "exifManipulation", value: function(e4, t3) {
              var i3 = this.getExifArray(t3), n2 = this.insertExif(e4, i3);
              return new Uint8Array(n2);
            } }, { key: "getExifArray", value: function(e4) {
              for (var t3 = void 0, i3 = 0; i3 < e4.length; ) {
                if (255 === (t3 = e4[i3])[0] & 225 === t3[1])
                  return t3;
                i3++;
              }
              return [];
            } }, { key: "insertExif", value: function(e4, t3) {
              var i3 = e4.replace("data:image/jpeg;base64,", ""), n2 = this.decode64(i3), r2 = n2.indexOf(255, 3), o2 = n2.slice(0, r2), s2 = n2.slice(r2), a2 = o2;
              return a2 = (a2 = a2.concat(t3)).concat(s2);
            } }, { key: "slice2Segments", value: function(e4) {
              for (var t3 = 0, i3 = []; ; ) {
                if (255 === e4[t3] & 218 === e4[t3 + 1])
                  break;
                if (255 === e4[t3] & 216 === e4[t3 + 1])
                  t3 += 2;
                else {
                  var n2 = t3 + (256 * e4[t3 + 2] + e4[t3 + 3]) + 2, r2 = e4.slice(t3, n2);
                  i3.push(r2), t3 = n2;
                }
                if (t3 > e4.length)
                  break;
              }
              return i3;
            } }, { key: "decode64", value: function(e4) {
              var t3 = void 0, i3 = void 0, n2 = "", r2 = void 0, o2 = void 0, s2 = "", a2 = 0, l2 = [];
              for (/[^A-Za-z0-9\+\/\=]/g.exec(e4) && console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."), e4 = e4.replace(/[^A-Za-z0-9\+\/\=]/g, ""); t3 = this.KEY_STR.indexOf(e4.charAt(a2++)) << 2 | (r2 = this.KEY_STR.indexOf(e4.charAt(a2++))) >> 4, i3 = (15 & r2) << 4 | (o2 = this.KEY_STR.indexOf(e4.charAt(a2++))) >> 2, n2 = (3 & o2) << 6 | (s2 = this.KEY_STR.indexOf(e4.charAt(a2++))), l2.push(t3), 64 !== o2 && l2.push(i3), 64 !== s2 && l2.push(n2), t3 = i3 = n2 = "", r2 = o2 = s2 = "", a2 < e4.length; )
                ;
              return l2;
            } }]), e3;
          }();
          u.initClass(), o._autoDiscoverFunction = function() {
            if (o.autoDiscover)
              return o.discover();
          }, function(e3, t3) {
            var i3 = false, n2 = true, r2 = e3.document, o2 = r2.documentElement, s2 = r2.addEventListener ? "addEventListener" : "attachEvent", a2 = r2.addEventListener ? "removeEventListener" : "detachEvent", l2 = r2.addEventListener ? "" : "on", u2 = function n3(o3) {
              if ("readystatechange" !== o3.type || "complete" === r2.readyState)
                return ("load" === o3.type ? e3 : r2)[a2](l2 + o3.type, n3, false), !i3 && (i3 = true) ? t3.call(e3, o3.type || o3) : void 0;
            };
            if ("complete" !== r2.readyState) {
              if (r2.createEventObject && o2.doScroll) {
                try {
                  n2 = !e3.frameElement;
                } catch (e4) {
                }
                n2 && function e4() {
                  try {
                    o2.doScroll("left");
                  } catch (t4) {
                    return void setTimeout(e4, 50);
                  }
                  return u2("poll");
                }();
              }
              r2[s2](l2 + "DOMContentLoaded", u2, false), r2[s2](l2 + "readystatechange", u2, false), e3[s2](l2 + "load", u2, false);
            }
          }(window, o._autoDiscoverFunction);
        }(e = { exports: {} }, e.exports), e.exports), i = { getSignedURL(e2, t2) {
          let i2 = { filePath: e2.name, contentType: e2.type };
          return new Promise((n, r) => {
            var o = new FormData();
            let s = new XMLHttpRequest(), a = "function" == typeof t2.signingURL ? t2.signingURL(e2) : t2.signingURL;
            s.open("POST", a), s.onload = function() {
              200 == s.status ? n(JSON.parse(s.response)) : r(s.statusText);
            }, s.onerror = function(e3) {
              console.error("Network Error : Could not send request to AWS (Maybe CORS errors)"), r(e3);
            }, true === t2.withCredentials && (s.withCredentials = true), Object.entries(t2.headers || {}).forEach(([e3, t3]) => {
              s.setRequestHeader(e3, t3);
            }), i2 = Object.assign(i2, t2.params || {}), Object.entries(i2).forEach(([e3, t3]) => {
              o.append(e3, t3);
            }), s.send(o);
          });
        }, sendFile(e2, t2, i2) {
          var n = i2 ? this.setResponseHandler : this.sendS3Handler;
          return this.getSignedURL(e2, t2).then((t3) => n(t3, e2)).catch((e3) => e3);
        }, setResponseHandler(e2, t2) {
          t2.s3Signature = e2.signature, t2.s3Url = e2.postEndpoint;
        }, sendS3Handler(e2, t2) {
          let i2 = new FormData(), n = e2.signature;
          return Object.keys(n).forEach(function(e3) {
            i2.append(e3, n[e3]);
          }), i2.append("file", t2), new Promise((t3, n2) => {
            let r = new XMLHttpRequest();
            r.open("POST", e2.postEndpoint), r.onload = function() {
              if (201 == r.status) {
                var e3 = new window.DOMParser().parseFromString(r.response, "text/xml").firstChild.children[0].innerHTML;
                t3({ success: true, message: e3 });
              } else {
                var i3 = new window.DOMParser().parseFromString(r.response, "text/xml").firstChild.children[0].innerHTML;
                n2({ success: false, message: i3 + ". Request is marked as resolved when returns as status 201" });
              }
            }, r.onerror = function(e3) {
              var t4 = new window.DOMParser().parseFromString(r.response, "text/xml").firstChild.children[1].innerHTML;
              n2({ success: false, message: t4 });
            }, r.send(i2);
          });
        } };
        t.autoDiscover = false;
        return function(e2, t2, i2, n, r, o, s, a, l, u) {
          "boolean" != typeof s && (l = a, a = s, s = false);
          var d, c = "function" == typeof i2 ? i2.options : i2;
          if (e2 && e2.render && (c.render = e2.render, c.staticRenderFns = e2.staticRenderFns, c._compiled = true, r && (c.functional = true)), n && (c._scopeId = n), o ? (d = function(e3) {
            (e3 = e3 || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (e3 = __VUE_SSR_CONTEXT__), t2 && t2.call(this, l(e3)), e3 && e3._registeredComponents && e3._registeredComponents.add(o);
          }, c._ssrRegister = d) : t2 && (d = s ? function() {
            t2.call(this, u(this.$root.$options.shadowRoot));
          } : function(e3) {
            t2.call(this, a(e3));
          }), d)
            if (c.functional) {
              var p = c.render;
              c.render = function(e3, t3) {
                return d.call(t3), p(e3, t3);
              };
            } else {
              var h = c.beforeCreate;
              c.beforeCreate = h ? [].concat(h, d) : [d];
            }
          return i2;
        }({ render: function() {
          var e2 = this.$createElement, t2 = this._self._c || e2;
          return t2("div", { ref: "dropzoneElement", class: { "vue-dropzone dropzone": this.includeStyling }, attrs: { id: this.id } }, [this.useCustomSlot ? t2("div", { staticClass: "dz-message" }, [this._t("default", [this._v("Drop files here to upload")])], 2) : this._e()]);
        }, staticRenderFns: [] }, void 0, { props: { id: { type: String, required: true, default: "dropzone" }, options: { type: Object, required: true }, includeStyling: { type: Boolean, default: true, required: false }, awss3: { type: Object, required: false, default: null }, destroyDropzone: { type: Boolean, default: true, required: false }, duplicateCheck: { type: Boolean, default: false, required: false }, useCustomSlot: { type: Boolean, default: false, required: false } }, data: () => ({ isS3: false, isS3OverridesServerPropagation: false, wasQueueAutoProcess: true }), computed: { dropzoneSettings() {
          let e2 = { thumbnailWidth: 200, thumbnailHeight: 200 };
          return Object.keys(this.options).forEach(function(t2) {
            e2[t2] = this.options[t2];
          }, this), null !== this.awss3 && (e2.autoProcessQueue = false, this.isS3 = true, this.isS3OverridesServerPropagation = false === this.awss3.sendFileToServer, void 0 !== this.options.autoProcessQueue && (this.wasQueueAutoProcess = this.options.autoProcessQueue), this.isS3OverridesServerPropagation && (e2.url = (e3) => e3[0].s3Url)), e2;
        } }, mounted() {
          if (this.$isServer && this.hasBeenMounted)
            return;
          this.hasBeenMounted = true, this.dropzone = new t(this.$refs.dropzoneElement, this.dropzoneSettings);
          let e2 = this;
          this.dropzone.on("thumbnail", function(t2, i2) {
            e2.$emit("vdropzone-thumbnail", t2, i2);
          }), this.dropzone.on("addedfile", function(t2) {
            var i2, n;
            if (e2.duplicateCheck && this.files.length)
              for (i2 = 0, n = this.files.length; i2 < n - 1; i2++)
                this.files[i2].name === t2.name && this.files[i2].size === t2.size && this.files[i2].lastModifiedDate.toString() === t2.lastModifiedDate.toString() && (this.removeFile(t2), e2.$emit("vdropzone-duplicate-file", t2));
            e2.$emit("vdropzone-file-added", t2), e2.isS3 && e2.wasQueueAutoProcess && !t2.manuallyAdded && e2.getSignedAndUploadToS3(t2);
          }), this.dropzone.on("addedfiles", function(t2) {
            e2.$emit("vdropzone-files-added", t2);
          }), this.dropzone.on("removedfile", function(t2) {
            e2.$emit("vdropzone-removed-file", t2), t2.manuallyAdded && null !== e2.dropzone.options.maxFiles && e2.dropzone.options.maxFiles++;
          }), this.dropzone.on("success", function(t2, i2) {
            if (e2.$emit("vdropzone-success", t2, i2), e2.isS3) {
              if (e2.isS3OverridesServerPropagation) {
                var n = new window.DOMParser().parseFromString(i2, "text/xml").firstChild.children[0].innerHTML;
                e2.$emit("vdropzone-s3-upload-success", n);
              }
              e2.wasQueueAutoProcess && e2.setOption("autoProcessQueue", false);
            }
          }), this.dropzone.on("successmultiple", function(t2, i2) {
            e2.$emit("vdropzone-success-multiple", t2, i2);
          }), this.dropzone.on("error", function(t2, i2, n) {
            e2.$emit("vdropzone-error", t2, i2, n), this.isS3 && e2.$emit("vdropzone-s3-upload-error");
          }), this.dropzone.on("errormultiple", function(t2, i2, n) {
            e2.$emit("vdropzone-error-multiple", t2, i2, n);
          }), this.dropzone.on("sending", function(t2, i2, n) {
            if (e2.isS3)
              if (e2.isS3OverridesServerPropagation) {
                let e3 = t2.s3Signature;
                Object.keys(e3).forEach(function(t3) {
                  n.append(t3, e3[t3]);
                });
              } else
                n.append("s3ObjectLocation", t2.s3ObjectLocation);
            e2.$emit("vdropzone-sending", t2, i2, n);
          }), this.dropzone.on("sendingmultiple", function(t2, i2, n) {
            e2.$emit("vdropzone-sending-multiple", t2, i2, n);
          }), this.dropzone.on("complete", function(t2) {
            e2.$emit("vdropzone-complete", t2);
          }), this.dropzone.on("completemultiple", function(t2) {
            e2.$emit("vdropzone-complete-multiple", t2);
          }), this.dropzone.on("canceled", function(t2) {
            e2.$emit("vdropzone-canceled", t2);
          }), this.dropzone.on("canceledmultiple", function(t2) {
            e2.$emit("vdropzone-canceled-multiple", t2);
          }), this.dropzone.on("maxfilesreached", function(t2) {
            e2.$emit("vdropzone-max-files-reached", t2);
          }), this.dropzone.on("maxfilesexceeded", function(t2) {
            e2.$emit("vdropzone-max-files-exceeded", t2);
          }), this.dropzone.on("processing", function(t2) {
            e2.$emit("vdropzone-processing", t2);
          }), this.dropzone.on("processingmultiple", function(t2) {
            e2.$emit("vdropzone-processing-multiple", t2);
          }), this.dropzone.on("uploadprogress", function(t2, i2, n) {
            e2.$emit("vdropzone-upload-progress", t2, i2, n);
          }), this.dropzone.on("totaluploadprogress", function(t2, i2, n) {
            e2.$emit("vdropzone-total-upload-progress", t2, i2, n);
          }), this.dropzone.on("reset", function() {
            e2.$emit("vdropzone-reset");
          }), this.dropzone.on("queuecomplete", function() {
            e2.$emit("vdropzone-queue-complete");
          }), this.dropzone.on("drop", function(t2) {
            e2.$emit("vdropzone-drop", t2);
          }), this.dropzone.on("dragstart", function(t2) {
            e2.$emit("vdropzone-drag-start", t2);
          }), this.dropzone.on("dragend", function(t2) {
            e2.$emit("vdropzone-drag-end", t2);
          }), this.dropzone.on("dragenter", function(t2) {
            e2.$emit("vdropzone-drag-enter", t2);
          }), this.dropzone.on("dragover", function(t2) {
            e2.$emit("vdropzone-drag-over", t2);
          }), this.dropzone.on("dragleave", function(t2) {
            e2.$emit("vdropzone-drag-leave", t2);
          }), e2.$emit("vdropzone-mounted");
        }, beforeDestroy() {
          this.destroyDropzone && this.dropzone.destroy();
        }, methods: { manuallyAddFile: function(e2, t2) {
          e2.manuallyAdded = true, this.dropzone.emit("addedfile", e2);
          let i2 = false;
          if ((t2.indexOf(".svg") > -1 || t2.indexOf(".png") > -1 || t2.indexOf(".jpg") > -1 || t2.indexOf(".jpeg") > -1 || t2.indexOf(".gif") > -1 || t2.indexOf(".webp") > -1) && (i2 = true), this.dropzone.options.createImageThumbnails && i2 && e2.size <= 1024 * this.dropzone.options.maxThumbnailFilesize * 1024) {
            t2 && this.dropzone.emit("thumbnail", e2, t2);
            for (var n = e2.previewElement.querySelectorAll("[data-dz-thumbnail]"), r = 0; r < n.length; r++)
              n[r].style.width = this.dropzoneSettings.thumbnailWidth + "px", n[r].style.height = this.dropzoneSettings.thumbnailHeight + "px", n[r].style["object-fit"] = "contain";
          }
          this.dropzone.emit("complete", e2), this.dropzone.options.maxFiles && this.dropzone.options.maxFiles--, this.dropzone.files.push(e2), this.$emit("vdropzone-file-added-manually", e2);
        }, setOption: function(e2, t2) {
          this.dropzone.options[e2] = t2;
        }, removeAllFiles: function(e2) {
          this.dropzone.removeAllFiles(e2);
        }, processQueue: function() {
          let e2 = this.dropzone;
          this.isS3 && !this.wasQueueAutoProcess ? this.getQueuedFiles().forEach((e3) => {
            this.getSignedAndUploadToS3(e3);
          }) : this.dropzone.processQueue(), this.dropzone.on("success", function() {
            e2.options.autoProcessQueue = true;
          }), this.dropzone.on("queuecomplete", function() {
            e2.options.autoProcessQueue = false;
          });
        }, init: function() {
          return this.dropzone.init();
        }, destroy: function() {
          return this.dropzone.destroy();
        }, updateTotalUploadProgress: function() {
          return this.dropzone.updateTotalUploadProgress();
        }, getFallbackForm: function() {
          return this.dropzone.getFallbackForm();
        }, getExistingFallback: function() {
          return this.dropzone.getExistingFallback();
        }, setupEventListeners: function() {
          return this.dropzone.setupEventListeners();
        }, removeEventListeners: function() {
          return this.dropzone.removeEventListeners();
        }, disable: function() {
          return this.dropzone.disable();
        }, enable: function() {
          return this.dropzone.enable();
        }, filesize: function(e2) {
          return this.dropzone.filesize(e2);
        }, accept: function(e2, t2) {
          return this.dropzone.accept(e2, t2);
        }, addFile: function(e2) {
          return this.dropzone.addFile(e2);
        }, removeFile: function(e2) {
          this.dropzone.removeFile(e2);
        }, getAcceptedFiles: function() {
          return this.dropzone.getAcceptedFiles();
        }, getRejectedFiles: function() {
          return this.dropzone.getRejectedFiles();
        }, getFilesWithStatus: function() {
          return this.dropzone.getFilesWithStatus();
        }, getQueuedFiles: function() {
          return this.dropzone.getQueuedFiles();
        }, getUploadingFiles: function() {
          return this.dropzone.getUploadingFiles();
        }, getAddedFiles: function() {
          return this.dropzone.getAddedFiles();
        }, getActiveFiles: function() {
          return this.dropzone.getActiveFiles();
        }, getSignedAndUploadToS3(e2) {
          var t2 = i.sendFile(e2, this.awss3, this.isS3OverridesServerPropagation);
          this.isS3OverridesServerPropagation ? t2.then(() => {
            setTimeout(() => this.dropzone.processFile(e2));
          }) : t2.then((t3) => {
            t3.success ? (e2.s3ObjectLocation = t3.message, setTimeout(() => this.dropzone.processFile(e2)), this.$emit("vdropzone-s3-upload-success", t3.message)) : void 0 !== t3.message ? this.$emit("vdropzone-s3-upload-error", t3.message) : this.$emit("vdropzone-s3-upload-error", "Network Error : Could not send request to AWS. (Maybe CORS error)");
          }), t2.catch((e3) => {
            alert(e3);
          });
        }, setAWSSigningURL(e2) {
          this.isS3 && (this.awss3.signingURL = e2);
        } } }, void 0, false, void 0, void 0, void 0);
      });
    }
  });

  // app/javascript/application2.js
  var import_vue_common3 = __toESM(require_vue_common());
  var import_lux_design_system2 = __toESM(require_system());

  // app/javascript/store/index.js
  var import_vue_common = __toESM(require_vue_common());

  // node_modules/vuex/dist/vuex.esm.js
  var applyMixin = function(Vue5) {
    var version2 = Number(Vue5.version.split(".")[0]);
    if (version2 >= 2) {
      Vue5.mixin({ beforeCreate: vuexInit });
    } else {
      var _init = Vue5.prototype._init;
      Vue5.prototype._init = function(options) {
        if (options === void 0)
          options = {};
        options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;
        _init.call(this, options);
      };
    }
    function vuexInit() {
      var options = this.$options;
      if (options.store) {
        this.$store = typeof options.store === "function" ? options.store() : options.store;
      } else if (options.parent && options.parent.$store) {
        this.$store = options.parent.$store;
      }
    }
  };
  var devtoolHook = typeof window !== "undefined" && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
  function devtoolPlugin(store2) {
    if (!devtoolHook) {
      return;
    }
    store2._devtoolHook = devtoolHook;
    devtoolHook.emit("vuex:init", store2);
    devtoolHook.on("vuex:travel-to-state", function(targetState) {
      store2.replaceState(targetState);
    });
    store2.subscribe(function(mutation, state) {
      devtoolHook.emit("vuex:mutation", mutation, state);
    });
  }
  function forEachValue(obj, fn) {
    Object.keys(obj).forEach(function(key) {
      return fn(obj[key], key);
    });
  }
  function isObject(obj) {
    return obj !== null && typeof obj === "object";
  }
  function isPromise(val) {
    return val && typeof val.then === "function";
  }
  function assert(condition, msg) {
    if (!condition) {
      throw new Error("[vuex] " + msg);
    }
  }
  var Module = function Module2(rawModule, runtime) {
    this.runtime = runtime;
    this._children = /* @__PURE__ */ Object.create(null);
    this._rawModule = rawModule;
    var rawState = rawModule.state;
    this.state = (typeof rawState === "function" ? rawState() : rawState) || {};
  };
  var prototypeAccessors$1 = { namespaced: { configurable: true } };
  prototypeAccessors$1.namespaced.get = function() {
    return !!this._rawModule.namespaced;
  };
  Module.prototype.addChild = function addChild(key, module2) {
    this._children[key] = module2;
  };
  Module.prototype.removeChild = function removeChild(key) {
    delete this._children[key];
  };
  Module.prototype.getChild = function getChild(key) {
    return this._children[key];
  };
  Module.prototype.update = function update(rawModule) {
    this._rawModule.namespaced = rawModule.namespaced;
    if (rawModule.actions) {
      this._rawModule.actions = rawModule.actions;
    }
    if (rawModule.mutations) {
      this._rawModule.mutations = rawModule.mutations;
    }
    if (rawModule.getters) {
      this._rawModule.getters = rawModule.getters;
    }
  };
  Module.prototype.forEachChild = function forEachChild(fn) {
    forEachValue(this._children, fn);
  };
  Module.prototype.forEachGetter = function forEachGetter(fn) {
    if (this._rawModule.getters) {
      forEachValue(this._rawModule.getters, fn);
    }
  };
  Module.prototype.forEachAction = function forEachAction(fn) {
    if (this._rawModule.actions) {
      forEachValue(this._rawModule.actions, fn);
    }
  };
  Module.prototype.forEachMutation = function forEachMutation(fn) {
    if (this._rawModule.mutations) {
      forEachValue(this._rawModule.mutations, fn);
    }
  };
  Object.defineProperties(Module.prototype, prototypeAccessors$1);
  var ModuleCollection = function ModuleCollection2(rawRootModule) {
    this.register([], rawRootModule, false);
  };
  ModuleCollection.prototype.get = function get(path) {
    return path.reduce(function(module2, key) {
      return module2.getChild(key);
    }, this.root);
  };
  ModuleCollection.prototype.getNamespace = function getNamespace(path) {
    var module2 = this.root;
    return path.reduce(function(namespace, key) {
      module2 = module2.getChild(key);
      return namespace + (module2.namespaced ? key + "/" : "");
    }, "");
  };
  ModuleCollection.prototype.update = function update$1(rawRootModule) {
    update2([], this.root, rawRootModule);
  };
  ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
    var this$1 = this;
    if (runtime === void 0)
      runtime = true;
    if (true) {
      assertRawModule(path, rawModule);
    }
    var newModule = new Module(rawModule, runtime);
    if (path.length === 0) {
      this.root = newModule;
    } else {
      var parent = this.get(path.slice(0, -1));
      parent.addChild(path[path.length - 1], newModule);
    }
    if (rawModule.modules) {
      forEachValue(rawModule.modules, function(rawChildModule, key) {
        this$1.register(path.concat(key), rawChildModule, runtime);
      });
    }
  };
  ModuleCollection.prototype.unregister = function unregister(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    if (!parent.getChild(key).runtime) {
      return;
    }
    parent.removeChild(key);
  };
  function update2(path, targetModule, newModule) {
    if (true) {
      assertRawModule(path, newModule);
    }
    targetModule.update(newModule);
    if (newModule.modules) {
      for (var key in newModule.modules) {
        if (!targetModule.getChild(key)) {
          if (true) {
            console.warn(
              "[vuex] trying to add a new module '" + key + "' on hot reloading, manual reload is needed"
            );
          }
          return;
        }
        update2(
          path.concat(key),
          targetModule.getChild(key),
          newModule.modules[key]
        );
      }
    }
  }
  var functionAssert = {
    assert: function(value) {
      return typeof value === "function";
    },
    expected: "function"
  };
  var objectAssert = {
    assert: function(value) {
      return typeof value === "function" || typeof value === "object" && typeof value.handler === "function";
    },
    expected: 'function or object with "handler" function'
  };
  var assertTypes = {
    getters: functionAssert,
    mutations: functionAssert,
    actions: objectAssert
  };
  function assertRawModule(path, rawModule) {
    Object.keys(assertTypes).forEach(function(key) {
      if (!rawModule[key]) {
        return;
      }
      var assertOptions = assertTypes[key];
      forEachValue(rawModule[key], function(value, type) {
        assert(
          assertOptions.assert(value),
          makeAssertionMessage(path, key, type, value, assertOptions.expected)
        );
      });
    });
  }
  function makeAssertionMessage(path, key, type, value, expected) {
    var buf = key + " should be " + expected + ' but "' + key + "." + type + '"';
    if (path.length > 0) {
      buf += ' in module "' + path.join(".") + '"';
    }
    buf += " is " + JSON.stringify(value) + ".";
    return buf;
  }
  var Vue;
  var Store = function Store2(options) {
    var this$1 = this;
    if (options === void 0)
      options = {};
    if (!Vue && typeof window !== "undefined" && window.Vue) {
      install(window.Vue);
    }
    if (true) {
      assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
      assert(typeof Promise !== "undefined", "vuex requires a Promise polyfill in this browser.");
      assert(this instanceof Store2, "Store must be called with the new operator.");
    }
    var plugins = options.plugins;
    if (plugins === void 0)
      plugins = [];
    var strict = options.strict;
    if (strict === void 0)
      strict = false;
    var state = options.state;
    if (state === void 0)
      state = {};
    if (typeof state === "function") {
      state = state() || {};
    }
    this._committing = false;
    this._actions = /* @__PURE__ */ Object.create(null);
    this._actionSubscribers = [];
    this._mutations = /* @__PURE__ */ Object.create(null);
    this._wrappedGetters = /* @__PURE__ */ Object.create(null);
    this._modules = new ModuleCollection(options);
    this._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    this._subscribers = [];
    this._watcherVM = new Vue();
    var store2 = this;
    var ref = this;
    var dispatch2 = ref.dispatch;
    var commit2 = ref.commit;
    this.dispatch = function boundDispatch(type, payload) {
      return dispatch2.call(store2, type, payload);
    };
    this.commit = function boundCommit(type, payload, options2) {
      return commit2.call(store2, type, payload, options2);
    };
    this.strict = strict;
    installModule(this, state, [], this._modules.root);
    resetStoreVM(this, state);
    plugins.forEach(function(plugin) {
      return plugin(this$1);
    });
    if (Vue.config.devtools) {
      devtoolPlugin(this);
    }
  };
  var prototypeAccessors = { state: { configurable: true } };
  prototypeAccessors.state.get = function() {
    return this._vm._data.$$state;
  };
  prototypeAccessors.state.set = function(v) {
    if (true) {
      assert(false, "Use store.replaceState() to explicit replace store state.");
    }
  };
  Store.prototype.commit = function commit(_type, _payload, _options) {
    var this$1 = this;
    var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;
    var mutation = { type, payload };
    var entry = this._mutations[type];
    if (!entry) {
      if (true) {
        console.error("[vuex] unknown mutation type: " + type);
      }
      return;
    }
    this._withCommit(function() {
      entry.forEach(function commitIterator(handler) {
        handler(payload);
      });
    });
    this._subscribers.forEach(function(sub) {
      return sub(mutation, this$1.state);
    });
    if (options && options.silent) {
      console.warn(
        "[vuex] mutation type: " + type + ". Silent option has been removed. Use the filter functionality in the vue-devtools"
      );
    }
  };
  Store.prototype.dispatch = function dispatch(_type, _payload) {
    var this$1 = this;
    var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;
    var action = { type, payload };
    var entry = this._actions[type];
    if (!entry) {
      if (true) {
        console.error("[vuex] unknown action type: " + type);
      }
      return;
    }
    this._actionSubscribers.forEach(function(sub) {
      return sub(action, this$1.state);
    });
    return entry.length > 1 ? Promise.all(entry.map(function(handler) {
      return handler(payload);
    })) : entry[0](payload);
  };
  Store.prototype.subscribe = function subscribe(fn) {
    return genericSubscribe(fn, this._subscribers);
  };
  Store.prototype.subscribeAction = function subscribeAction(fn) {
    return genericSubscribe(fn, this._actionSubscribers);
  };
  Store.prototype.watch = function watch(getter, cb, options) {
    var this$1 = this;
    if (true) {
      assert(typeof getter === "function", "store.watch only accepts a function.");
    }
    return this._watcherVM.$watch(function() {
      return getter(this$1.state, this$1.getters);
    }, cb, options);
  };
  Store.prototype.replaceState = function replaceState(state) {
    var this$1 = this;
    this._withCommit(function() {
      this$1._vm._data.$$state = state;
    });
  };
  Store.prototype.registerModule = function registerModule(path, rawModule, options) {
    if (options === void 0)
      options = {};
    if (typeof path === "string") {
      path = [path];
    }
    if (true) {
      assert(Array.isArray(path), "module path must be a string or an Array.");
      assert(path.length > 0, "cannot register the root module by using registerModule.");
    }
    this._modules.register(path, rawModule);
    installModule(this, this.state, path, this._modules.get(path), options.preserveState);
    resetStoreVM(this, this.state);
  };
  Store.prototype.unregisterModule = function unregisterModule(path) {
    var this$1 = this;
    if (typeof path === "string") {
      path = [path];
    }
    if (true) {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }
    this._modules.unregister(path);
    this._withCommit(function() {
      var parentState = getNestedState(this$1.state, path.slice(0, -1));
      Vue.delete(parentState, path[path.length - 1]);
    });
    resetStore(this);
  };
  Store.prototype.hotUpdate = function hotUpdate(newOptions) {
    this._modules.update(newOptions);
    resetStore(this, true);
  };
  Store.prototype._withCommit = function _withCommit(fn) {
    var committing = this._committing;
    this._committing = true;
    fn();
    this._committing = committing;
  };
  Object.defineProperties(Store.prototype, prototypeAccessors);
  function genericSubscribe(fn, subs) {
    if (subs.indexOf(fn) < 0) {
      subs.push(fn);
    }
    return function() {
      var i = subs.indexOf(fn);
      if (i > -1) {
        subs.splice(i, 1);
      }
    };
  }
  function resetStore(store2, hot) {
    store2._actions = /* @__PURE__ */ Object.create(null);
    store2._mutations = /* @__PURE__ */ Object.create(null);
    store2._wrappedGetters = /* @__PURE__ */ Object.create(null);
    store2._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    var state = store2.state;
    installModule(store2, state, [], store2._modules.root, true);
    resetStoreVM(store2, state, hot);
  }
  function resetStoreVM(store2, state, hot) {
    var oldVm = store2._vm;
    store2.getters = {};
    var wrappedGetters = store2._wrappedGetters;
    var computed = {};
    forEachValue(wrappedGetters, function(fn, key) {
      computed[key] = function() {
        return fn(store2);
      };
      Object.defineProperty(store2.getters, key, {
        get: function() {
          return store2._vm[key];
        },
        enumerable: true
      });
    });
    var silent = Vue.config.silent;
    Vue.config.silent = true;
    store2._vm = new Vue({
      data: {
        $$state: state
      },
      computed
    });
    Vue.config.silent = silent;
    if (store2.strict) {
      enableStrictMode(store2);
    }
    if (oldVm) {
      if (hot) {
        store2._withCommit(function() {
          oldVm._data.$$state = null;
        });
      }
      Vue.nextTick(function() {
        return oldVm.$destroy();
      });
    }
  }
  function installModule(store2, rootState, path, module2, hot) {
    var isRoot = !path.length;
    var namespace = store2._modules.getNamespace(path);
    if (module2.namespaced) {
      store2._modulesNamespaceMap[namespace] = module2;
    }
    if (!isRoot && !hot) {
      var parentState = getNestedState(rootState, path.slice(0, -1));
      var moduleName = path[path.length - 1];
      store2._withCommit(function() {
        Vue.set(parentState, moduleName, module2.state);
      });
    }
    var local = module2.context = makeLocalContext(store2, namespace, path);
    module2.forEachMutation(function(mutation, key) {
      var namespacedType = namespace + key;
      registerMutation(store2, namespacedType, mutation, local);
    });
    module2.forEachAction(function(action, key) {
      var type = action.root ? key : namespace + key;
      var handler = action.handler || action;
      registerAction(store2, type, handler, local);
    });
    module2.forEachGetter(function(getter, key) {
      var namespacedType = namespace + key;
      registerGetter(store2, namespacedType, getter, local);
    });
    module2.forEachChild(function(child, key) {
      installModule(store2, rootState, path.concat(key), child, hot);
    });
  }
  function makeLocalContext(store2, namespace, path) {
    var noNamespace = namespace === "";
    var local = {
      dispatch: noNamespace ? store2.dispatch : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type = args.type;
        if (!options || !options.root) {
          type = namespace + type;
          if (!store2._actions[type]) {
            console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
            return;
          }
        }
        return store2.dispatch(type, payload);
      },
      commit: noNamespace ? store2.commit : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type = args.type;
        if (!options || !options.root) {
          type = namespace + type;
          if (!store2._mutations[type]) {
            console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
            return;
          }
        }
        store2.commit(type, payload, options);
      }
    };
    Object.defineProperties(local, {
      getters: {
        get: noNamespace ? function() {
          return store2.getters;
        } : function() {
          return makeLocalGetters(store2, namespace);
        }
      },
      state: {
        get: function() {
          return getNestedState(store2.state, path);
        }
      }
    });
    return local;
  }
  function makeLocalGetters(store2, namespace) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store2.getters).forEach(function(type) {
      if (type.slice(0, splitPos) !== namespace) {
        return;
      }
      var localType = type.slice(splitPos);
      Object.defineProperty(gettersProxy, localType, {
        get: function() {
          return store2.getters[type];
        },
        enumerable: true
      });
    });
    return gettersProxy;
  }
  function registerMutation(store2, type, handler, local) {
    var entry = store2._mutations[type] || (store2._mutations[type] = []);
    entry.push(function wrappedMutationHandler(payload) {
      handler.call(store2, local.state, payload);
    });
  }
  function registerAction(store2, type, handler, local) {
    var entry = store2._actions[type] || (store2._actions[type] = []);
    entry.push(function wrappedActionHandler(payload, cb) {
      var res = handler.call(store2, {
        dispatch: local.dispatch,
        commit: local.commit,
        getters: local.getters,
        state: local.state,
        rootGetters: store2.getters,
        rootState: store2.state
      }, payload, cb);
      if (!isPromise(res)) {
        res = Promise.resolve(res);
      }
      if (store2._devtoolHook) {
        return res.catch(function(err) {
          store2._devtoolHook.emit("vuex:error", err);
          throw err;
        });
      } else {
        return res;
      }
    });
  }
  function registerGetter(store2, type, rawGetter, local) {
    if (store2._wrappedGetters[type]) {
      if (true) {
        console.error("[vuex] duplicate getter key: " + type);
      }
      return;
    }
    store2._wrappedGetters[type] = function wrappedGetter(store3) {
      return rawGetter(
        local.state,
        local.getters,
        store3.state,
        store3.getters
      );
    };
  }
  function enableStrictMode(store2) {
    store2._vm.$watch(function() {
      return this._data.$$state;
    }, function() {
      if (true) {
        assert(store2._committing, "Do not mutate vuex store state outside mutation handlers.");
      }
    }, { deep: true, sync: true });
  }
  function getNestedState(state, path) {
    return path.length ? path.reduce(function(state2, key) {
      return state2[key];
    }, state) : state;
  }
  function unifyObjectStyle(type, payload, options) {
    if (isObject(type) && type.type) {
      options = payload;
      payload = type;
      type = type.type;
    }
    if (true) {
      assert(typeof type === "string", "Expects string as the type, but found " + typeof type + ".");
    }
    return { type, payload, options };
  }
  function install(_Vue) {
    if (Vue && _Vue === Vue) {
      if (true) {
        console.error(
          "[vuex] already installed. Vue.use(Vuex) should be called only once."
        );
      }
      return;
    }
    Vue = _Vue;
    applyMixin(Vue);
  }
  var mapState = normalizeNamespace(function(namespace, states) {
    var res = {};
    normalizeMap(states).forEach(function(ref) {
      var key = ref.key;
      var val = ref.val;
      res[key] = function mappedState() {
        var state = this.$store.state;
        var getters = this.$store.getters;
        if (namespace) {
          var module2 = getModuleByNamespace(this.$store, "mapState", namespace);
          if (!module2) {
            return;
          }
          state = module2.context.state;
          getters = module2.context.getters;
        }
        return typeof val === "function" ? val.call(this, state, getters) : state[val];
      };
      res[key].vuex = true;
    });
    return res;
  });
  var mapMutations = normalizeNamespace(function(namespace, mutations) {
    var res = {};
    normalizeMap(mutations).forEach(function(ref) {
      var key = ref.key;
      var val = ref.val;
      res[key] = function mappedMutation() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var commit2 = this.$store.commit;
        if (namespace) {
          var module2 = getModuleByNamespace(this.$store, "mapMutations", namespace);
          if (!module2) {
            return;
          }
          commit2 = module2.context.commit;
        }
        return typeof val === "function" ? val.apply(this, [commit2].concat(args)) : commit2.apply(this.$store, [val].concat(args));
      };
    });
    return res;
  });
  var mapGetters = normalizeNamespace(function(namespace, getters) {
    var res = {};
    normalizeMap(getters).forEach(function(ref) {
      var key = ref.key;
      var val = ref.val;
      val = namespace + val;
      res[key] = function mappedGetter() {
        if (namespace && !getModuleByNamespace(this.$store, "mapGetters", namespace)) {
          return;
        }
        if (!(val in this.$store.getters)) {
          console.error("[vuex] unknown getter: " + val);
          return;
        }
        return this.$store.getters[val];
      };
      res[key].vuex = true;
    });
    return res;
  });
  var mapActions = normalizeNamespace(function(namespace, actions2) {
    var res = {};
    normalizeMap(actions2).forEach(function(ref) {
      var key = ref.key;
      var val = ref.val;
      res[key] = function mappedAction() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var dispatch2 = this.$store.dispatch;
        if (namespace) {
          var module2 = getModuleByNamespace(this.$store, "mapActions", namespace);
          if (!module2) {
            return;
          }
          dispatch2 = module2.context.dispatch;
        }
        return typeof val === "function" ? val.apply(this, [dispatch2].concat(args)) : dispatch2.apply(this.$store, [val].concat(args));
      };
    });
    return res;
  });
  var createNamespacedHelpers = function(namespace) {
    return {
      mapState: mapState.bind(null, namespace),
      mapGetters: mapGetters.bind(null, namespace),
      mapMutations: mapMutations.bind(null, namespace),
      mapActions: mapActions.bind(null, namespace)
    };
  };
  function normalizeMap(map) {
    return Array.isArray(map) ? map.map(function(key) {
      return { key, val: key };
    }) : Object.keys(map).map(function(key) {
      return { key, val: map[key] };
    });
  }
  function normalizeNamespace(fn) {
    return function(namespace, map) {
      if (typeof namespace !== "string") {
        map = namespace;
        namespace = "";
      } else if (namespace.charAt(namespace.length - 1) !== "/") {
        namespace += "/";
      }
      return fn(namespace, map);
    };
  }
  function getModuleByNamespace(store2, helper, namespace) {
    var module2 = store2._modulesNamespaceMap[namespace];
    if (!module2) {
      console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
    }
    return module2;
  }
  var index_esm = {
    Store,
    install,
    version: "2.5.0",
    mapState,
    mapMutations,
    mapGetters,
    mapActions,
    createNamespacedHelpers
  };
  var vuex_esm_default = index_esm;

  // node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet
  } = import_tslib.default;

  // node_modules/apollo-utilities/lib/bundle.esm.js
  var import_visitor = __toESM(require_visitor());

  // node_modules/ts-invariant/lib/invariant.esm.js
  var genericMessage = "Invariant Violation";
  var _a = Object.setPrototypeOf;
  var setPrototypeOf = _a === void 0 ? function(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  } : _a;
  var InvariantError = function(_super) {
    __extends(InvariantError2, _super);
    function InvariantError2(message) {
      if (message === void 0) {
        message = genericMessage;
      }
      var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
      _this.framesToPop = 1;
      _this.name = genericMessage;
      setPrototypeOf(_this, InvariantError2.prototype);
      return _this;
    }
    return InvariantError2;
  }(Error);
  function invariant(condition, message) {
    if (!condition) {
      throw new InvariantError(message);
    }
  }
  function wrapConsoleMethod(method) {
    return function() {
      return console[method].apply(console, arguments);
    };
  }
  (function(invariant2) {
    invariant2.warn = wrapConsoleMethod("warn");
    invariant2.error = wrapConsoleMethod("error");
  })(invariant || (invariant = {}));
  var processStub = { env: {} };
  if (typeof process === "object") {
    processStub = process;
  } else
    try {
      Function("stub", "process = stub")(processStub);
    } catch (atLeastWeTried) {
    }

  // node_modules/apollo-utilities/lib/bundle.esm.js
  var import_fast_json_stable_stringify = __toESM(require_fast_json_stable_stringify());

  // node_modules/@wry/equality/lib/equality.esm.js
  var _a2 = Object.prototype;
  var toString = _a2.toString;
  var hasOwnProperty = _a2.hasOwnProperty;
  var previousComparisons = /* @__PURE__ */ new Map();
  function equal(a, b) {
    try {
      return check(a, b);
    } finally {
      previousComparisons.clear();
    }
  }
  function check(a, b) {
    if (a === b) {
      return true;
    }
    var aTag = toString.call(a);
    var bTag = toString.call(b);
    if (aTag !== bTag) {
      return false;
    }
    switch (aTag) {
      case "[object Array]":
        if (a.length !== b.length)
          return false;
      case "[object Object]": {
        if (previouslyCompared(a, b))
          return true;
        var aKeys = Object.keys(a);
        var bKeys = Object.keys(b);
        var keyCount = aKeys.length;
        if (keyCount !== bKeys.length)
          return false;
        for (var k = 0; k < keyCount; ++k) {
          if (!hasOwnProperty.call(b, aKeys[k])) {
            return false;
          }
        }
        for (var k = 0; k < keyCount; ++k) {
          var key = aKeys[k];
          if (!check(a[key], b[key])) {
            return false;
          }
        }
        return true;
      }
      case "[object Error]":
        return a.name === b.name && a.message === b.message;
      case "[object Number]":
        if (a !== a)
          return b !== b;
      case "[object Boolean]":
      case "[object Date]":
        return +a === +b;
      case "[object RegExp]":
      case "[object String]":
        return a == "" + b;
      case "[object Map]":
      case "[object Set]": {
        if (a.size !== b.size)
          return false;
        if (previouslyCompared(a, b))
          return true;
        var aIterator = a.entries();
        var isMap = aTag === "[object Map]";
        while (true) {
          var info = aIterator.next();
          if (info.done)
            break;
          var _a3 = info.value, aKey = _a3[0], aValue = _a3[1];
          if (!b.has(aKey)) {
            return false;
          }
          if (isMap && !check(aValue, b.get(aKey))) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  function previouslyCompared(a, b) {
    var bSet = previousComparisons.get(a);
    if (bSet) {
      if (bSet.has(b))
        return true;
    } else {
      previousComparisons.set(a, bSet = /* @__PURE__ */ new Set());
    }
    bSet.add(b);
    return false;
  }

  // node_modules/apollo-utilities/lib/bundle.esm.js
  function isStringValue(value) {
    return value.kind === "StringValue";
  }
  function isBooleanValue(value) {
    return value.kind === "BooleanValue";
  }
  function isIntValue(value) {
    return value.kind === "IntValue";
  }
  function isFloatValue(value) {
    return value.kind === "FloatValue";
  }
  function isVariable(value) {
    return value.kind === "Variable";
  }
  function isObjectValue(value) {
    return value.kind === "ObjectValue";
  }
  function isListValue(value) {
    return value.kind === "ListValue";
  }
  function isEnumValue(value) {
    return value.kind === "EnumValue";
  }
  function isNullValue(value) {
    return value.kind === "NullValue";
  }
  function valueToObjectRepresentation(argObj, name, value, variables) {
    if (isIntValue(value) || isFloatValue(value)) {
      argObj[name.value] = Number(value.value);
    } else if (isBooleanValue(value) || isStringValue(value)) {
      argObj[name.value] = value.value;
    } else if (isObjectValue(value)) {
      var nestedArgObj_1 = {};
      value.fields.map(function(obj) {
        return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
      });
      argObj[name.value] = nestedArgObj_1;
    } else if (isVariable(value)) {
      var variableValue = (variables || {})[value.name.value];
      argObj[name.value] = variableValue;
    } else if (isListValue(value)) {
      argObj[name.value] = value.values.map(function(listValue) {
        var nestedArgArrayObj = {};
        valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
        return nestedArgArrayObj[name.value];
      });
    } else if (isEnumValue(value)) {
      argObj[name.value] = value.value;
    } else if (isNullValue(value)) {
      argObj[name.value] = null;
    } else {
      throw false ? new InvariantError(17) : new InvariantError('The inline argument "' + name.value + '" of kind "' + value.kind + '"is not supported. Use variables instead of inline arguments to overcome this limitation.');
    }
  }
  function storeKeyNameFromField(field, variables) {
    var directivesObj = null;
    if (field.directives) {
      directivesObj = {};
      field.directives.forEach(function(directive) {
        directivesObj[directive.name.value] = {};
        if (directive.arguments) {
          directive.arguments.forEach(function(_a3) {
            var name = _a3.name, value = _a3.value;
            return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
          });
        }
      });
    }
    var argObj = null;
    if (field.arguments && field.arguments.length) {
      argObj = {};
      field.arguments.forEach(function(_a3) {
        var name = _a3.name, value = _a3.value;
        return valueToObjectRepresentation(argObj, name, value, variables);
      });
    }
    return getStoreKeyName(field.name.value, argObj, directivesObj);
  }
  var KNOWN_DIRECTIVES = [
    "connection",
    "include",
    "skip",
    "client",
    "rest",
    "export"
  ];
  function getStoreKeyName(fieldName, args, directives) {
    if (directives && directives["connection"] && directives["connection"]["key"]) {
      if (directives["connection"]["filter"] && directives["connection"]["filter"].length > 0) {
        var filterKeys = directives["connection"]["filter"] ? directives["connection"]["filter"] : [];
        filterKeys.sort();
        var queryArgs_1 = args;
        var filteredArgs_1 = {};
        filterKeys.forEach(function(key) {
          filteredArgs_1[key] = queryArgs_1[key];
        });
        return directives["connection"]["key"] + "(" + JSON.stringify(filteredArgs_1) + ")";
      } else {
        return directives["connection"]["key"];
      }
    }
    var completeFieldName = fieldName;
    if (args) {
      var stringifiedArgs = (0, import_fast_json_stable_stringify.default)(args);
      completeFieldName += "(" + stringifiedArgs + ")";
    }
    if (directives) {
      Object.keys(directives).forEach(function(key) {
        if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
          return;
        if (directives[key] && Object.keys(directives[key]).length) {
          completeFieldName += "@" + key + "(" + JSON.stringify(directives[key]) + ")";
        } else {
          completeFieldName += "@" + key;
        }
      });
    }
    return completeFieldName;
  }
  function argumentsObjectFromField(field, variables) {
    if (field.arguments && field.arguments.length) {
      var argObj_1 = {};
      field.arguments.forEach(function(_a3) {
        var name = _a3.name, value = _a3.value;
        return valueToObjectRepresentation(argObj_1, name, value, variables);
      });
      return argObj_1;
    }
    return null;
  }
  function resultKeyNameFromField(field) {
    return field.alias ? field.alias.value : field.name.value;
  }
  function isField(selection) {
    return selection.kind === "Field";
  }
  function isInlineFragment(selection) {
    return selection.kind === "InlineFragment";
  }
  function isIdValue(idObject) {
    return idObject && idObject.type === "id" && typeof idObject.generated === "boolean";
  }
  function toIdValue(idConfig, generated) {
    if (generated === void 0) {
      generated = false;
    }
    return __assign({ type: "id", generated }, typeof idConfig === "string" ? { id: idConfig, typename: void 0 } : idConfig);
  }
  function isJsonValue(jsonObject) {
    return jsonObject != null && typeof jsonObject === "object" && jsonObject.type === "json";
  }
  function getDirectiveInfoFromField(field, variables) {
    if (field.directives && field.directives.length) {
      var directiveObj_1 = {};
      field.directives.forEach(function(directive) {
        directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);
      });
      return directiveObj_1;
    }
    return null;
  }
  function shouldInclude(selection, variables) {
    if (variables === void 0) {
      variables = {};
    }
    return getInclusionDirectives(selection.directives).every(function(_a3) {
      var directive = _a3.directive, ifArgument = _a3.ifArgument;
      var evaledValue = false;
      if (ifArgument.value.kind === "Variable") {
        evaledValue = variables[ifArgument.value.name.value];
        false ? invariant(evaledValue !== void 0, 13) : invariant(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.");
      } else {
        evaledValue = ifArgument.value.value;
      }
      return directive.name.value === "skip" ? !evaledValue : evaledValue;
    });
  }
  function getDirectiveNames(doc) {
    var names = [];
    (0, import_visitor.visit)(doc, {
      Directive: function(node) {
        names.push(node.name.value);
      }
    });
    return names;
  }
  function hasDirectives(names, doc) {
    return getDirectiveNames(doc).some(function(name) {
      return names.indexOf(name) > -1;
    });
  }
  function hasClientExports(document2) {
    return document2 && hasDirectives(["client"], document2) && hasDirectives(["export"], document2);
  }
  function isInclusionDirective(_a3) {
    var value = _a3.name.value;
    return value === "skip" || value === "include";
  }
  function getInclusionDirectives(directives) {
    return directives ? directives.filter(isInclusionDirective).map(function(directive) {
      var directiveArguments = directive.arguments;
      var directiveName = directive.name.value;
      false ? invariant(directiveArguments && directiveArguments.length === 1, 14) : invariant(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.");
      var ifArgument = directiveArguments[0];
      false ? invariant(ifArgument.name && ifArgument.name.value === "if", 15) : invariant(ifArgument.name && ifArgument.name.value === "if", "Invalid argument for the @" + directiveName + " directive.");
      var ifValue = ifArgument.value;
      false ? invariant(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), 16) : invariant(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.");
      return { directive, ifArgument };
    }) : [];
  }
  function getFragmentQueryDocument(document2, fragmentName) {
    var actualFragmentName = fragmentName;
    var fragments = [];
    document2.definitions.forEach(function(definition) {
      if (definition.kind === "OperationDefinition") {
        throw false ? new InvariantError(11) : new InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : "") + ". No operations are allowed when using a fragment as a query. Only fragments are allowed.");
      }
      if (definition.kind === "FragmentDefinition") {
        fragments.push(definition);
      }
    });
    if (typeof actualFragmentName === "undefined") {
      false ? invariant(fragments.length === 1, 12) : invariant(fragments.length === 1, "Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.");
      actualFragmentName = fragments[0].name.value;
    }
    var query = __assign(__assign({}, document2), { definitions: __spreadArrays([
      {
        kind: "OperationDefinition",
        operation: "query",
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "FragmentSpread",
              name: {
                kind: "Name",
                value: actualFragmentName
              }
            }
          ]
        }
      }
    ], document2.definitions) });
    return query;
  }
  function assign(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      sources[_i - 1] = arguments[_i];
    }
    sources.forEach(function(source) {
      if (typeof source === "undefined" || source === null) {
        return;
      }
      Object.keys(source).forEach(function(key) {
        target[key] = source[key];
      });
    });
    return target;
  }
  function checkDocument(doc) {
    false ? invariant(doc && doc.kind === "Document", 2) : invariant(doc && doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
    var operations = doc.definitions.filter(function(d) {
      return d.kind !== "FragmentDefinition";
    }).map(function(definition) {
      if (definition.kind !== "OperationDefinition") {
        throw false ? new InvariantError(3) : new InvariantError('Schema type definitions not allowed in queries. Found: "' + definition.kind + '"');
      }
      return definition;
    });
    false ? invariant(operations.length <= 1, 4) : invariant(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations");
    return doc;
  }
  function getOperationDefinition(doc) {
    checkDocument(doc);
    return doc.definitions.filter(function(definition) {
      return definition.kind === "OperationDefinition";
    })[0];
  }
  function getOperationName(doc) {
    return doc.definitions.filter(function(definition) {
      return definition.kind === "OperationDefinition" && definition.name;
    }).map(function(x) {
      return x.name.value;
    })[0] || null;
  }
  function getFragmentDefinitions(doc) {
    return doc.definitions.filter(function(definition) {
      return definition.kind === "FragmentDefinition";
    });
  }
  function getQueryDefinition(doc) {
    var queryDef = getOperationDefinition(doc);
    false ? invariant(queryDef && queryDef.operation === "query", 6) : invariant(queryDef && queryDef.operation === "query", "Must contain a query definition.");
    return queryDef;
  }
  function getFragmentDefinition(doc) {
    false ? invariant(doc.kind === "Document", 7) : invariant(doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
    false ? invariant(doc.definitions.length <= 1, 8) : invariant(doc.definitions.length <= 1, "Fragment must have exactly one definition.");
    var fragmentDef = doc.definitions[0];
    false ? invariant(fragmentDef.kind === "FragmentDefinition", 9) : invariant(fragmentDef.kind === "FragmentDefinition", "Must be a fragment definition.");
    return fragmentDef;
  }
  function getMainDefinition(queryDoc) {
    checkDocument(queryDoc);
    var fragmentDefinition;
    for (var _i = 0, _a3 = queryDoc.definitions; _i < _a3.length; _i++) {
      var definition = _a3[_i];
      if (definition.kind === "OperationDefinition") {
        var operation = definition.operation;
        if (operation === "query" || operation === "mutation" || operation === "subscription") {
          return definition;
        }
      }
      if (definition.kind === "FragmentDefinition" && !fragmentDefinition) {
        fragmentDefinition = definition;
      }
    }
    if (fragmentDefinition) {
      return fragmentDefinition;
    }
    throw false ? new InvariantError(10) : new InvariantError("Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.");
  }
  function createFragmentMap(fragments) {
    if (fragments === void 0) {
      fragments = [];
    }
    var symTable = {};
    fragments.forEach(function(fragment) {
      symTable[fragment.name.value] = fragment;
    });
    return symTable;
  }
  function getDefaultValues(definition) {
    if (definition && definition.variableDefinitions && definition.variableDefinitions.length) {
      var defaultValues = definition.variableDefinitions.filter(function(_a3) {
        var defaultValue = _a3.defaultValue;
        return defaultValue;
      }).map(function(_a3) {
        var variable = _a3.variable, defaultValue = _a3.defaultValue;
        var defaultValueObj = {};
        valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);
        return defaultValueObj;
      });
      return assign.apply(void 0, __spreadArrays([{}], defaultValues));
    }
    return {};
  }
  function filterInPlace(array, test, context) {
    var target = 0;
    array.forEach(function(elem, i) {
      if (test.call(this, elem, i, array)) {
        array[target++] = elem;
      }
    }, context);
    array.length = target;
    return array;
  }
  var TYPENAME_FIELD = {
    kind: "Field",
    name: {
      kind: "Name",
      value: "__typename"
    }
  };
  function isEmpty(op, fragments) {
    return op.selectionSet.selections.every(function(selection) {
      return selection.kind === "FragmentSpread" && isEmpty(fragments[selection.name.value], fragments);
    });
  }
  function nullIfDocIsEmpty(doc) {
    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;
  }
  function getDirectiveMatcher(directives) {
    return function directiveMatcher(directive) {
      return directives.some(function(dir) {
        return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);
      });
    };
  }
  function removeDirectivesFromDocument(directives, doc) {
    var variablesInUse = /* @__PURE__ */ Object.create(null);
    var variablesToRemove = [];
    var fragmentSpreadsInUse = /* @__PURE__ */ Object.create(null);
    var fragmentSpreadsToRemove = [];
    var modifiedDoc = nullIfDocIsEmpty((0, import_visitor.visit)(doc, {
      Variable: {
        enter: function(node, _key, parent) {
          if (parent.kind !== "VariableDefinition") {
            variablesInUse[node.name.value] = true;
          }
        }
      },
      Field: {
        enter: function(node) {
          if (directives && node.directives) {
            var shouldRemoveField = directives.some(function(directive) {
              return directive.remove;
            });
            if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {
              if (node.arguments) {
                node.arguments.forEach(function(arg) {
                  if (arg.value.kind === "Variable") {
                    variablesToRemove.push({
                      name: arg.value.name.value
                    });
                  }
                });
              }
              if (node.selectionSet) {
                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function(frag) {
                  fragmentSpreadsToRemove.push({
                    name: frag.name.value
                  });
                });
              }
              return null;
            }
          }
        }
      },
      FragmentSpread: {
        enter: function(node) {
          fragmentSpreadsInUse[node.name.value] = true;
        }
      },
      Directive: {
        enter: function(node) {
          if (getDirectiveMatcher(directives)(node)) {
            return null;
          }
        }
      }
    }));
    if (modifiedDoc && filterInPlace(variablesToRemove, function(v) {
      return !variablesInUse[v.name];
    }).length) {
      modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
    }
    if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function(fs) {
      return !fragmentSpreadsInUse[fs.name];
    }).length) {
      modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
    }
    return modifiedDoc;
  }
  function addTypenameToDocument(doc) {
    return (0, import_visitor.visit)(checkDocument(doc), {
      SelectionSet: {
        enter: function(node, _key, parent) {
          if (parent && parent.kind === "OperationDefinition") {
            return;
          }
          var selections = node.selections;
          if (!selections) {
            return;
          }
          var skip = selections.some(function(selection) {
            return isField(selection) && (selection.name.value === "__typename" || selection.name.value.lastIndexOf("__", 0) === 0);
          });
          if (skip) {
            return;
          }
          var field = parent;
          if (isField(field) && field.directives && field.directives.some(function(d) {
            return d.name.value === "export";
          })) {
            return;
          }
          return __assign(__assign({}, node), { selections: __spreadArrays(selections, [TYPENAME_FIELD]) });
        }
      }
    });
  }
  var connectionRemoveConfig = {
    test: function(directive) {
      var willRemove = directive.name.value === "connection";
      if (willRemove) {
        if (!directive.arguments || !directive.arguments.some(function(arg) {
          return arg.name.value === "key";
        })) {
          invariant.warn("Removing an @connection directive even though it does not have a key. You may want to use the key parameter to specify a store key.");
        }
      }
      return willRemove;
    }
  };
  function removeConnectionDirectiveFromDocument(doc) {
    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));
  }
  function getArgumentMatcher(config) {
    return function argumentMatcher(argument) {
      return config.some(function(aConfig) {
        return argument.value && argument.value.kind === "Variable" && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
      });
    };
  }
  function removeArgumentsFromDocument(config, doc) {
    var argMatcher = getArgumentMatcher(config);
    return nullIfDocIsEmpty((0, import_visitor.visit)(doc, {
      OperationDefinition: {
        enter: function(node) {
          return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions.filter(function(varDef) {
            return !config.some(function(arg) {
              return arg.name === varDef.variable.name.value;
            });
          }) });
        }
      },
      Field: {
        enter: function(node) {
          var shouldRemoveField = config.some(function(argConfig) {
            return argConfig.remove;
          });
          if (shouldRemoveField) {
            var argMatchCount_1 = 0;
            node.arguments.forEach(function(arg) {
              if (argMatcher(arg)) {
                argMatchCount_1 += 1;
              }
            });
            if (argMatchCount_1 === 1) {
              return null;
            }
          }
        }
      },
      Argument: {
        enter: function(node) {
          if (argMatcher(node)) {
            return null;
          }
        }
      }
    }));
  }
  function removeFragmentSpreadFromDocument(config, doc) {
    function enter(node) {
      if (config.some(function(def) {
        return def.name === node.name.value;
      })) {
        return null;
      }
    }
    return nullIfDocIsEmpty((0, import_visitor.visit)(doc, {
      FragmentSpread: { enter },
      FragmentDefinition: { enter }
    }));
  }
  function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
    var allFragments = [];
    selectionSet.selections.forEach(function(selection) {
      if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {
        getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function(frag) {
          return allFragments.push(frag);
        });
      } else if (selection.kind === "FragmentSpread") {
        allFragments.push(selection);
      }
    });
    return allFragments;
  }
  function buildQueryFromSelectionSet(document2) {
    var definition = getMainDefinition(document2);
    var definitionOperation = definition.operation;
    if (definitionOperation === "query") {
      return document2;
    }
    var modifiedDoc = (0, import_visitor.visit)(document2, {
      OperationDefinition: {
        enter: function(node) {
          return __assign(__assign({}, node), { operation: "query" });
        }
      }
    });
    return modifiedDoc;
  }
  function removeClientSetsFromDocument(document2) {
    checkDocument(document2);
    var modifiedDoc = removeDirectivesFromDocument([
      {
        test: function(directive) {
          return directive.name.value === "client";
        },
        remove: true
      }
    ], document2);
    if (modifiedDoc) {
      modifiedDoc = (0, import_visitor.visit)(modifiedDoc, {
        FragmentDefinition: {
          enter: function(node) {
            if (node.selectionSet) {
              var isTypenameOnly = node.selectionSet.selections.every(function(selection) {
                return isField(selection) && selection.name.value === "__typename";
              });
              if (isTypenameOnly) {
                return null;
              }
            }
          }
        }
      });
    }
    return modifiedDoc;
  }
  var canUseWeakMap = typeof WeakMap === "function" && !(typeof navigator === "object" && navigator.product === "ReactNative");
  var toString2 = Object.prototype.toString;
  function cloneDeep(value) {
    return cloneDeepHelper(value, /* @__PURE__ */ new Map());
  }
  function cloneDeepHelper(val, seen) {
    switch (toString2.call(val)) {
      case "[object Array]": {
        if (seen.has(val))
          return seen.get(val);
        var copy_1 = val.slice(0);
        seen.set(val, copy_1);
        copy_1.forEach(function(child, i) {
          copy_1[i] = cloneDeepHelper(child, seen);
        });
        return copy_1;
      }
      case "[object Object]": {
        if (seen.has(val))
          return seen.get(val);
        var copy_2 = Object.create(Object.getPrototypeOf(val));
        seen.set(val, copy_2);
        Object.keys(val).forEach(function(key) {
          copy_2[key] = cloneDeepHelper(val[key], seen);
        });
        return copy_2;
      }
      default:
        return val;
    }
  }
  function getEnv() {
    if (typeof process !== "undefined" && "development") {
      return "development";
    }
    return "development";
  }
  function isEnv(env) {
    return getEnv() === env;
  }
  function isProduction() {
    return isEnv("production") === true;
  }
  function isDevelopment() {
    return isEnv("development") === true;
  }
  function isTest() {
    return isEnv("test") === true;
  }
  function tryFunctionOrLogError(f) {
    try {
      return f();
    } catch (e) {
      if (console.error) {
        console.error(e);
      }
    }
  }
  function graphQLResultHasError(result2) {
    return result2.errors && result2.errors.length;
  }
  function deepFreeze(o) {
    Object.freeze(o);
    Object.getOwnPropertyNames(o).forEach(function(prop) {
      if (o[prop] !== null && (typeof o[prop] === "object" || typeof o[prop] === "function") && !Object.isFrozen(o[prop])) {
        deepFreeze(o[prop]);
      }
    });
    return o;
  }
  function maybeDeepFreeze(obj) {
    if (isDevelopment() || isTest()) {
      var symbolIsPolyfilled = typeof Symbol === "function" && typeof Symbol("") === "string";
      if (!symbolIsPolyfilled) {
        return deepFreeze(obj);
      }
    }
    return obj;
  }
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  function mergeDeep() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sources[_i] = arguments[_i];
    }
    return mergeDeepArray(sources);
  }
  function mergeDeepArray(sources) {
    var target = sources[0] || {};
    var count = sources.length;
    if (count > 1) {
      var pastCopies = [];
      target = shallowCopyForMerge(target, pastCopies);
      for (var i = 1; i < count; ++i) {
        target = mergeHelper(target, sources[i], pastCopies);
      }
    }
    return target;
  }
  function isObject2(obj) {
    return obj !== null && typeof obj === "object";
  }
  function mergeHelper(target, source, pastCopies) {
    if (isObject2(source) && isObject2(target)) {
      if (Object.isExtensible && !Object.isExtensible(target)) {
        target = shallowCopyForMerge(target, pastCopies);
      }
      Object.keys(source).forEach(function(sourceKey) {
        var sourceValue = source[sourceKey];
        if (hasOwnProperty2.call(target, sourceKey)) {
          var targetValue = target[sourceKey];
          if (sourceValue !== targetValue) {
            target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);
          }
        } else {
          target[sourceKey] = sourceValue;
        }
      });
      return target;
    }
    return source;
  }
  function shallowCopyForMerge(value, pastCopies) {
    if (value !== null && typeof value === "object" && pastCopies.indexOf(value) < 0) {
      if (Array.isArray(value)) {
        value = value.slice(0);
      } else {
        value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);
      }
      pastCopies.push(value);
    }
    return value;
  }

  // node_modules/zen-observable-ts/lib/bundle.esm.js
  var import_zen_observable = __toESM(require_zen_observable());
  var Observable = import_zen_observable.default;
  var bundle_esm_default = Observable;

  // node_modules/apollo-link/lib/bundle.esm.js
  function validateOperation(operation) {
    var OPERATION_FIELDS = [
      "query",
      "operationName",
      "variables",
      "extensions",
      "context"
    ];
    for (var _i = 0, _a3 = Object.keys(operation); _i < _a3.length; _i++) {
      var key = _a3[_i];
      if (OPERATION_FIELDS.indexOf(key) < 0) {
        throw false ? new InvariantError(2) : new InvariantError("illegal argument: " + key);
      }
    }
    return operation;
  }
  var LinkError = function(_super) {
    __extends(LinkError2, _super);
    function LinkError2(message, link) {
      var _this = _super.call(this, message) || this;
      _this.link = link;
      return _this;
    }
    return LinkError2;
  }(Error);
  function isTerminating(link) {
    return link.request.length <= 1;
  }
  function fromError(errorValue) {
    return new bundle_esm_default(function(observer) {
      observer.error(errorValue);
    });
  }
  function transformOperation(operation) {
    var transformedOperation = {
      variables: operation.variables || {},
      extensions: operation.extensions || {},
      operationName: operation.operationName,
      query: operation.query
    };
    if (!transformedOperation.operationName) {
      transformedOperation.operationName = typeof transformedOperation.query !== "string" ? getOperationName(transformedOperation.query) : "";
    }
    return transformedOperation;
  }
  function createOperation(starting, operation) {
    var context = __assign({}, starting);
    var setContext = function(next) {
      if (typeof next === "function") {
        context = __assign({}, context, next(context));
      } else {
        context = __assign({}, context, next);
      }
    };
    var getContext = function() {
      return __assign({}, context);
    };
    Object.defineProperty(operation, "setContext", {
      enumerable: false,
      value: setContext
    });
    Object.defineProperty(operation, "getContext", {
      enumerable: false,
      value: getContext
    });
    Object.defineProperty(operation, "toKey", {
      enumerable: false,
      value: function() {
        return getKey(operation);
      }
    });
    return operation;
  }
  function getKey(operation) {
    var query = operation.query, variables = operation.variables, operationName = operation.operationName;
    return JSON.stringify([operationName, query, variables]);
  }
  function passthrough(op, forward) {
    return forward ? forward(op) : bundle_esm_default.of();
  }
  function toLink(handler) {
    return typeof handler === "function" ? new ApolloLink(handler) : handler;
  }
  function empty() {
    return new ApolloLink(function() {
      return bundle_esm_default.of();
    });
  }
  function from(links) {
    if (links.length === 0)
      return empty();
    return links.map(toLink).reduce(function(x, y) {
      return x.concat(y);
    });
  }
  function split(test, left, right) {
    var leftLink = toLink(left);
    var rightLink = toLink(right || new ApolloLink(passthrough));
    if (isTerminating(leftLink) && isTerminating(rightLink)) {
      return new ApolloLink(function(operation) {
        return test(operation) ? leftLink.request(operation) || bundle_esm_default.of() : rightLink.request(operation) || bundle_esm_default.of();
      });
    } else {
      return new ApolloLink(function(operation, forward) {
        return test(operation) ? leftLink.request(operation, forward) || bundle_esm_default.of() : rightLink.request(operation, forward) || bundle_esm_default.of();
      });
    }
  }
  var concat = function(first, second) {
    var firstLink = toLink(first);
    if (isTerminating(firstLink)) {
      invariant.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
      return firstLink;
    }
    var nextLink = toLink(second);
    if (isTerminating(nextLink)) {
      return new ApolloLink(function(operation) {
        return firstLink.request(operation, function(op) {
          return nextLink.request(op) || bundle_esm_default.of();
        }) || bundle_esm_default.of();
      });
    } else {
      return new ApolloLink(function(operation, forward) {
        return firstLink.request(operation, function(op) {
          return nextLink.request(op, forward) || bundle_esm_default.of();
        }) || bundle_esm_default.of();
      });
    }
  };
  var ApolloLink = function() {
    function ApolloLink2(request) {
      if (request)
        this.request = request;
    }
    ApolloLink2.prototype.split = function(test, left, right) {
      return this.concat(split(test, left, right || new ApolloLink2(passthrough)));
    };
    ApolloLink2.prototype.concat = function(next) {
      return concat(this, next);
    };
    ApolloLink2.prototype.request = function(operation, forward) {
      throw false ? new InvariantError(1) : new InvariantError("request is not implemented");
    };
    ApolloLink2.empty = empty;
    ApolloLink2.from = from;
    ApolloLink2.split = split;
    ApolloLink2.execute = execute;
    return ApolloLink2;
  }();
  function execute(link, operation) {
    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || bundle_esm_default.of();
  }

  // node_modules/symbol-observable/es/ponyfill.js
  function symbolObservablePonyfill(root2) {
    var result2;
    var Symbol2 = root2.Symbol;
    if (typeof Symbol2 === "function") {
      if (Symbol2.observable) {
        result2 = Symbol2.observable;
      } else {
        result2 = Symbol2("observable");
        Symbol2.observable = result2;
      }
    } else {
      result2 = "@@observable";
    }
    return result2;
  }

  // node_modules/symbol-observable/es/index.js
  var root;
  if (typeof self !== "undefined") {
    root = self;
  } else if (typeof window !== "undefined") {
    root = window;
  } else if (typeof global !== "undefined") {
    root = global;
  } else if (typeof module !== "undefined") {
    root = module;
  } else {
    root = Function("return this")();
  }
  var result = symbolObservablePonyfill(root);
  var es_default = result;

  // node_modules/apollo-client/bundle.esm.js
  var import_visitor2 = __toESM(require_visitor());
  var NetworkStatus;
  (function(NetworkStatus2) {
    NetworkStatus2[NetworkStatus2["loading"] = 1] = "loading";
    NetworkStatus2[NetworkStatus2["setVariables"] = 2] = "setVariables";
    NetworkStatus2[NetworkStatus2["fetchMore"] = 3] = "fetchMore";
    NetworkStatus2[NetworkStatus2["refetch"] = 4] = "refetch";
    NetworkStatus2[NetworkStatus2["poll"] = 6] = "poll";
    NetworkStatus2[NetworkStatus2["ready"] = 7] = "ready";
    NetworkStatus2[NetworkStatus2["error"] = 8] = "error";
  })(NetworkStatus || (NetworkStatus = {}));
  function isNetworkRequestInFlight(networkStatus) {
    return networkStatus < 7;
  }
  var Observable2 = function(_super) {
    __extends(Observable3, _super);
    function Observable3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Observable3.prototype[es_default] = function() {
      return this;
    };
    Observable3.prototype["@@observable"] = function() {
      return this;
    };
    return Observable3;
  }(bundle_esm_default);
  function isNonEmptyArray(value) {
    return Array.isArray(value) && value.length > 0;
  }
  function isApolloError(err) {
    return err.hasOwnProperty("graphQLErrors");
  }
  var generateErrorMessage = function(err) {
    var message = "";
    if (isNonEmptyArray(err.graphQLErrors)) {
      err.graphQLErrors.forEach(function(graphQLError) {
        var errorMessage = graphQLError ? graphQLError.message : "Error message not found.";
        message += "GraphQL error: " + errorMessage + "\n";
      });
    }
    if (err.networkError) {
      message += "Network error: " + err.networkError.message + "\n";
    }
    message = message.replace(/\n$/, "");
    return message;
  };
  var ApolloError = function(_super) {
    __extends(ApolloError2, _super);
    function ApolloError2(_a3) {
      var graphQLErrors = _a3.graphQLErrors, networkError = _a3.networkError, errorMessage = _a3.errorMessage, extraInfo = _a3.extraInfo;
      var _this = _super.call(this, errorMessage) || this;
      _this.graphQLErrors = graphQLErrors || [];
      _this.networkError = networkError || null;
      if (!errorMessage) {
        _this.message = generateErrorMessage(_this);
      } else {
        _this.message = errorMessage;
      }
      _this.extraInfo = extraInfo;
      _this.__proto__ = ApolloError2.prototype;
      return _this;
    }
    return ApolloError2;
  }(Error);
  var FetchType;
  (function(FetchType2) {
    FetchType2[FetchType2["normal"] = 1] = "normal";
    FetchType2[FetchType2["refetch"] = 2] = "refetch";
    FetchType2[FetchType2["poll"] = 3] = "poll";
  })(FetchType || (FetchType = {}));
  var hasError = function(storeValue, policy) {
    if (policy === void 0) {
      policy = "none";
    }
    return storeValue && (storeValue.networkError || policy === "none" && isNonEmptyArray(storeValue.graphQLErrors));
  };
  var ObservableQuery = function(_super) {
    __extends(ObservableQuery2, _super);
    function ObservableQuery2(_a3) {
      var queryManager = _a3.queryManager, options = _a3.options, _b = _a3.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;
      var _this = _super.call(this, function(observer) {
        return _this.onSubscribe(observer);
      }) || this;
      _this.observers = /* @__PURE__ */ new Set();
      _this.subscriptions = /* @__PURE__ */ new Set();
      _this.isTornDown = false;
      _this.options = options;
      _this.variables = options.variables || {};
      _this.queryId = queryManager.generateQueryId();
      _this.shouldSubscribe = shouldSubscribe;
      var opDef = getOperationDefinition(options.query);
      _this.queryName = opDef && opDef.name && opDef.name.value;
      _this.queryManager = queryManager;
      return _this;
    }
    ObservableQuery2.prototype.result = function() {
      var _this = this;
      return new Promise(function(resolve, reject) {
        var observer = {
          next: function(result2) {
            resolve(result2);
            _this.observers.delete(observer);
            if (!_this.observers.size) {
              _this.queryManager.removeQuery(_this.queryId);
            }
            setTimeout(function() {
              subscription.unsubscribe();
            }, 0);
          },
          error: reject
        };
        var subscription = _this.subscribe(observer);
      });
    };
    ObservableQuery2.prototype.currentResult = function() {
      var result2 = this.getCurrentResult();
      if (result2.data === void 0) {
        result2.data = {};
      }
      return result2;
    };
    ObservableQuery2.prototype.getCurrentResult = function() {
      if (this.isTornDown) {
        var lastResult = this.lastResult;
        return {
          data: !this.lastError && lastResult && lastResult.data || void 0,
          error: this.lastError,
          loading: false,
          networkStatus: NetworkStatus.error
        };
      }
      var _a3 = this.queryManager.getCurrentQueryResult(this), data = _a3.data, partial = _a3.partial;
      var queryStoreValue = this.queryManager.queryStore.get(this.queryId);
      var result2;
      var fetchPolicy = this.options.fetchPolicy;
      var isNetworkFetchPolicy = fetchPolicy === "network-only" || fetchPolicy === "no-cache";
      if (queryStoreValue) {
        var networkStatus = queryStoreValue.networkStatus;
        if (hasError(queryStoreValue, this.options.errorPolicy)) {
          return {
            data: void 0,
            loading: false,
            networkStatus,
            error: new ApolloError({
              graphQLErrors: queryStoreValue.graphQLErrors,
              networkError: queryStoreValue.networkError
            })
          };
        }
        if (queryStoreValue.variables) {
          this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);
          this.variables = this.options.variables;
        }
        result2 = {
          data,
          loading: isNetworkRequestInFlight(networkStatus),
          networkStatus
        };
        if (queryStoreValue.graphQLErrors && this.options.errorPolicy === "all") {
          result2.errors = queryStoreValue.graphQLErrors;
        }
      } else {
        var loading = isNetworkFetchPolicy || partial && fetchPolicy !== "cache-only";
        result2 = {
          data,
          loading,
          networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready
        };
      }
      if (!partial) {
        this.updateLastResult(__assign(__assign({}, result2), { stale: false }));
      }
      return __assign(__assign({}, result2), { partial });
    };
    ObservableQuery2.prototype.isDifferentFromLastResult = function(newResult) {
      var snapshot = this.lastResultSnapshot;
      return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && equal(snapshot.data, newResult.data));
    };
    ObservableQuery2.prototype.getLastResult = function() {
      return this.lastResult;
    };
    ObservableQuery2.prototype.getLastError = function() {
      return this.lastError;
    };
    ObservableQuery2.prototype.resetLastResults = function() {
      delete this.lastResult;
      delete this.lastResultSnapshot;
      delete this.lastError;
      this.isTornDown = false;
    };
    ObservableQuery2.prototype.resetQueryStoreErrors = function() {
      var queryStore = this.queryManager.queryStore.get(this.queryId);
      if (queryStore) {
        queryStore.networkError = null;
        queryStore.graphQLErrors = [];
      }
    };
    ObservableQuery2.prototype.refetch = function(variables) {
      var fetchPolicy = this.options.fetchPolicy;
      if (fetchPolicy === "cache-only") {
        return Promise.reject(false ? new InvariantError(1) : new InvariantError("cache-only fetchPolicy option should not be used together with query refetch."));
      }
      if (fetchPolicy !== "no-cache" && fetchPolicy !== "cache-and-network") {
        fetchPolicy = "network-only";
      }
      if (!equal(this.variables, variables)) {
        this.variables = __assign(__assign({}, this.variables), variables);
      }
      if (!equal(this.options.variables, this.variables)) {
        this.options.variables = __assign(__assign({}, this.options.variables), this.variables);
      }
      return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), { fetchPolicy }), FetchType.refetch);
    };
    ObservableQuery2.prototype.fetchMore = function(fetchMoreOptions) {
      var _this = this;
      false ? invariant(fetchMoreOptions.updateQuery, 2) : invariant(fetchMoreOptions.updateQuery, "updateQuery option is required. This function defines how to update the query data with the new results.");
      var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables) })), { fetchPolicy: "network-only" });
      var qid = this.queryManager.generateQueryId();
      return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function(fetchMoreResult) {
        _this.updateQuery(function(previousResult) {
          return fetchMoreOptions.updateQuery(previousResult, {
            fetchMoreResult: fetchMoreResult.data,
            variables: combinedOptions.variables
          });
        });
        _this.queryManager.stopQuery(qid);
        return fetchMoreResult;
      }, function(error) {
        _this.queryManager.stopQuery(qid);
        throw error;
      });
    };
    ObservableQuery2.prototype.subscribeToMore = function(options) {
      var _this = this;
      var subscription = this.queryManager.startGraphQLSubscription({
        query: options.document,
        variables: options.variables
      }).subscribe({
        next: function(subscriptionData) {
          var updateQuery = options.updateQuery;
          if (updateQuery) {
            _this.updateQuery(function(previous, _a3) {
              var variables = _a3.variables;
              return updateQuery(previous, {
                subscriptionData,
                variables
              });
            });
          }
        },
        error: function(err) {
          if (options.onError) {
            options.onError(err);
            return;
          }
          invariant.error("Unhandled GraphQL subscription error", err);
        }
      });
      this.subscriptions.add(subscription);
      return function() {
        if (_this.subscriptions.delete(subscription)) {
          subscription.unsubscribe();
        }
      };
    };
    ObservableQuery2.prototype.setOptions = function(opts) {
      var oldFetchPolicy = this.options.fetchPolicy;
      this.options = __assign(__assign({}, this.options), opts);
      if (opts.pollInterval) {
        this.startPolling(opts.pollInterval);
      } else if (opts.pollInterval === 0) {
        this.stopPolling();
      }
      var fetchPolicy = opts.fetchPolicy;
      return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === "cache-only" || oldFetchPolicy === "standby" || fetchPolicy === "network-only"), opts.fetchResults);
    };
    ObservableQuery2.prototype.setVariables = function(variables, tryFetch, fetchResults) {
      if (tryFetch === void 0) {
        tryFetch = false;
      }
      if (fetchResults === void 0) {
        fetchResults = true;
      }
      this.isTornDown = false;
      variables = variables || this.variables;
      if (!tryFetch && equal(variables, this.variables)) {
        return this.observers.size && fetchResults ? this.result() : Promise.resolve();
      }
      this.variables = this.options.variables = variables;
      if (!this.observers.size) {
        return Promise.resolve();
      }
      return this.queryManager.fetchQuery(this.queryId, this.options);
    };
    ObservableQuery2.prototype.updateQuery = function(mapFn) {
      var queryManager = this.queryManager;
      var _a3 = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a3.previousResult, variables = _a3.variables, document2 = _a3.document;
      var newResult = tryFunctionOrLogError(function() {
        return mapFn(previousResult, { variables });
      });
      if (newResult) {
        queryManager.dataStore.markUpdateQueryResult(document2, variables, newResult);
        queryManager.broadcastQueries();
      }
    };
    ObservableQuery2.prototype.stopPolling = function() {
      this.queryManager.stopPollingQuery(this.queryId);
      this.options.pollInterval = void 0;
    };
    ObservableQuery2.prototype.startPolling = function(pollInterval) {
      assertNotCacheFirstOrOnly(this);
      this.options.pollInterval = pollInterval;
      this.queryManager.startPollingQuery(this.options, this.queryId);
    };
    ObservableQuery2.prototype.updateLastResult = function(newResult) {
      var previousResult = this.lastResult;
      this.lastResult = newResult;
      this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);
      return previousResult;
    };
    ObservableQuery2.prototype.onSubscribe = function(observer) {
      var _this = this;
      try {
        var subObserver = observer._subscription._observer;
        if (subObserver && !subObserver.error) {
          subObserver.error = defaultSubscriptionObserverErrorCallback;
        }
      } catch (_a3) {
      }
      var first = !this.observers.size;
      this.observers.add(observer);
      if (observer.next && this.lastResult)
        observer.next(this.lastResult);
      if (observer.error && this.lastError)
        observer.error(this.lastError);
      if (first) {
        this.setUpQuery();
      }
      return function() {
        if (_this.observers.delete(observer) && !_this.observers.size) {
          _this.tearDownQuery();
        }
      };
    };
    ObservableQuery2.prototype.setUpQuery = function() {
      var _this = this;
      var _a3 = this, queryManager = _a3.queryManager, queryId = _a3.queryId;
      if (this.shouldSubscribe) {
        queryManager.addObservableQuery(queryId, this);
      }
      if (this.options.pollInterval) {
        assertNotCacheFirstOrOnly(this);
        queryManager.startPollingQuery(this.options, queryId);
      }
      var onError = function(error) {
        _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));
        iterateObserversSafely(_this.observers, "error", _this.lastError = error);
      };
      queryManager.observeQuery(queryId, this.options, {
        next: function(result2) {
          if (_this.lastError || _this.isDifferentFromLastResult(result2)) {
            var previousResult_1 = _this.updateLastResult(result2);
            var _a4 = _this.options, query_1 = _a4.query, variables = _a4.variables, fetchPolicy_1 = _a4.fetchPolicy;
            if (queryManager.transform(query_1).hasClientExports) {
              queryManager.getLocalState().addExportedVariables(query_1, variables).then(function(variables2) {
                var previousVariables = _this.variables;
                _this.variables = _this.options.variables = variables2;
                if (!result2.loading && previousResult_1 && fetchPolicy_1 !== "cache-only" && queryManager.transform(query_1).serverQuery && !equal(previousVariables, variables2)) {
                  _this.refetch();
                } else {
                  iterateObserversSafely(_this.observers, "next", result2);
                }
              });
            } else {
              iterateObserversSafely(_this.observers, "next", result2);
            }
          }
        },
        error: onError
      }).catch(onError);
    };
    ObservableQuery2.prototype.tearDownQuery = function() {
      var queryManager = this.queryManager;
      this.isTornDown = true;
      queryManager.stopPollingQuery(this.queryId);
      this.subscriptions.forEach(function(sub) {
        return sub.unsubscribe();
      });
      this.subscriptions.clear();
      queryManager.removeObservableQuery(this.queryId);
      queryManager.stopQuery(this.queryId);
      this.observers.clear();
    };
    return ObservableQuery2;
  }(Observable2);
  function defaultSubscriptionObserverErrorCallback(error) {
    invariant.error("Unhandled error", error.message, error.stack);
  }
  function iterateObserversSafely(observers, method, argument) {
    var observersWithMethod = [];
    observers.forEach(function(obs) {
      return obs[method] && observersWithMethod.push(obs);
    });
    observersWithMethod.forEach(function(obs) {
      return obs[method](argument);
    });
  }
  function assertNotCacheFirstOrOnly(obsQuery) {
    var fetchPolicy = obsQuery.options.fetchPolicy;
    false ? invariant(fetchPolicy !== "cache-first" && fetchPolicy !== "cache-only", 3) : invariant(fetchPolicy !== "cache-first" && fetchPolicy !== "cache-only", "Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.");
  }
  var MutationStore = function() {
    function MutationStore2() {
      this.store = {};
    }
    MutationStore2.prototype.getStore = function() {
      return this.store;
    };
    MutationStore2.prototype.get = function(mutationId) {
      return this.store[mutationId];
    };
    MutationStore2.prototype.initMutation = function(mutationId, mutation, variables) {
      this.store[mutationId] = {
        mutation,
        variables: variables || {},
        loading: true,
        error: null
      };
    };
    MutationStore2.prototype.markMutationError = function(mutationId, error) {
      var mutation = this.store[mutationId];
      if (mutation) {
        mutation.loading = false;
        mutation.error = error;
      }
    };
    MutationStore2.prototype.markMutationResult = function(mutationId) {
      var mutation = this.store[mutationId];
      if (mutation) {
        mutation.loading = false;
        mutation.error = null;
      }
    };
    MutationStore2.prototype.reset = function() {
      this.store = {};
    };
    return MutationStore2;
  }();
  var QueryStore = function() {
    function QueryStore2() {
      this.store = {};
    }
    QueryStore2.prototype.getStore = function() {
      return this.store;
    };
    QueryStore2.prototype.get = function(queryId) {
      return this.store[queryId];
    };
    QueryStore2.prototype.initQuery = function(query) {
      var previousQuery = this.store[query.queryId];
      false ? invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), 19) : invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), "Internal Error: may not update existing query string in store");
      var isSetVariables = false;
      var previousVariables = null;
      if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {
        if (!equal(previousQuery.variables, query.variables)) {
          isSetVariables = true;
          previousVariables = previousQuery.variables;
        }
      }
      var networkStatus;
      if (isSetVariables) {
        networkStatus = NetworkStatus.setVariables;
      } else if (query.isPoll) {
        networkStatus = NetworkStatus.poll;
      } else if (query.isRefetch) {
        networkStatus = NetworkStatus.refetch;
      } else {
        networkStatus = NetworkStatus.loading;
      }
      var graphQLErrors = [];
      if (previousQuery && previousQuery.graphQLErrors) {
        graphQLErrors = previousQuery.graphQLErrors;
      }
      this.store[query.queryId] = {
        document: query.document,
        variables: query.variables,
        previousVariables,
        networkError: null,
        graphQLErrors,
        networkStatus,
        metadata: query.metadata
      };
      if (typeof query.fetchMoreForQueryId === "string" && this.store[query.fetchMoreForQueryId]) {
        this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;
      }
    };
    QueryStore2.prototype.markQueryResult = function(queryId, result2, fetchMoreForQueryId) {
      if (!this.store || !this.store[queryId])
        return;
      this.store[queryId].networkError = null;
      this.store[queryId].graphQLErrors = isNonEmptyArray(result2.errors) ? result2.errors : [];
      this.store[queryId].previousVariables = null;
      this.store[queryId].networkStatus = NetworkStatus.ready;
      if (typeof fetchMoreForQueryId === "string" && this.store[fetchMoreForQueryId]) {
        this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;
      }
    };
    QueryStore2.prototype.markQueryError = function(queryId, error, fetchMoreForQueryId) {
      if (!this.store || !this.store[queryId])
        return;
      this.store[queryId].networkError = error;
      this.store[queryId].networkStatus = NetworkStatus.error;
      if (typeof fetchMoreForQueryId === "string") {
        this.markQueryResultClient(fetchMoreForQueryId, true);
      }
    };
    QueryStore2.prototype.markQueryResultClient = function(queryId, complete) {
      var storeValue = this.store && this.store[queryId];
      if (storeValue) {
        storeValue.networkError = null;
        storeValue.previousVariables = null;
        if (complete) {
          storeValue.networkStatus = NetworkStatus.ready;
        }
      }
    };
    QueryStore2.prototype.stopQuery = function(queryId) {
      delete this.store[queryId];
    };
    QueryStore2.prototype.reset = function(observableQueryIds) {
      var _this = this;
      Object.keys(this.store).forEach(function(queryId) {
        if (observableQueryIds.indexOf(queryId) < 0) {
          _this.stopQuery(queryId);
        } else {
          _this.store[queryId].networkStatus = NetworkStatus.loading;
        }
      });
    };
    return QueryStore2;
  }();
  function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  var LocalState = function() {
    function LocalState2(_a3) {
      var cache = _a3.cache, client2 = _a3.client, resolvers = _a3.resolvers, fragmentMatcher2 = _a3.fragmentMatcher;
      this.cache = cache;
      if (client2) {
        this.client = client2;
      }
      if (resolvers) {
        this.addResolvers(resolvers);
      }
      if (fragmentMatcher2) {
        this.setFragmentMatcher(fragmentMatcher2);
      }
    }
    LocalState2.prototype.addResolvers = function(resolvers) {
      var _this = this;
      this.resolvers = this.resolvers || {};
      if (Array.isArray(resolvers)) {
        resolvers.forEach(function(resolverGroup) {
          _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);
        });
      } else {
        this.resolvers = mergeDeep(this.resolvers, resolvers);
      }
    };
    LocalState2.prototype.setResolvers = function(resolvers) {
      this.resolvers = {};
      this.addResolvers(resolvers);
    };
    LocalState2.prototype.getResolvers = function() {
      return this.resolvers || {};
    };
    LocalState2.prototype.runResolvers = function(_a3) {
      var document2 = _a3.document, remoteResult = _a3.remoteResult, context = _a3.context, variables = _a3.variables, _b = _a3.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_c) {
          if (document2) {
            return [2, this.resolveDocument(document2, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {
              return __assign(__assign({}, remoteResult), { data: localResult.result });
            })];
          }
          return [2, remoteResult];
        });
      });
    };
    LocalState2.prototype.setFragmentMatcher = function(fragmentMatcher2) {
      this.fragmentMatcher = fragmentMatcher2;
    };
    LocalState2.prototype.getFragmentMatcher = function() {
      return this.fragmentMatcher;
    };
    LocalState2.prototype.clientQuery = function(document2) {
      if (hasDirectives(["client"], document2)) {
        if (this.resolvers) {
          return document2;
        }
        invariant.warn("Found @client directives in a query but no ApolloClient resolvers were specified. This means ApolloClient local resolver handling has been disabled, and @client directives will be passed through to your link chain.");
      }
      return null;
    };
    LocalState2.prototype.serverQuery = function(document2) {
      return this.resolvers ? removeClientSetsFromDocument(document2) : document2;
    };
    LocalState2.prototype.prepareContext = function(context) {
      if (context === void 0) {
        context = {};
      }
      var cache = this.cache;
      var newContext = __assign(__assign({}, context), { cache, getCacheKey: function(obj) {
        if (cache.config) {
          return cache.config.dataIdFromObject(obj);
        } else {
          false ? invariant(false, 6) : invariant(false, "To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.");
        }
      } });
      return newContext;
    };
    LocalState2.prototype.addExportedVariables = function(document2, variables, context) {
      if (variables === void 0) {
        variables = {};
      }
      if (context === void 0) {
        context = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          if (document2) {
            return [2, this.resolveDocument(document2, this.buildRootValueFromCache(document2, variables) || {}, this.prepareContext(context), variables).then(function(data) {
              return __assign(__assign({}, variables), data.exportedVariables);
            })];
          }
          return [2, __assign({}, variables)];
        });
      });
    };
    LocalState2.prototype.shouldForceResolvers = function(document2) {
      var forceResolvers = false;
      (0, import_visitor2.visit)(document2, {
        Directive: {
          enter: function(node) {
            if (node.name.value === "client" && node.arguments) {
              forceResolvers = node.arguments.some(function(arg) {
                return arg.name.value === "always" && arg.value.kind === "BooleanValue" && arg.value.value === true;
              });
              if (forceResolvers) {
                return import_visitor2.BREAK;
              }
            }
          }
        }
      });
      return forceResolvers;
    };
    LocalState2.prototype.buildRootValueFromCache = function(document2, variables) {
      return this.cache.diff({
        query: buildQueryFromSelectionSet(document2),
        variables,
        returnPartialData: true,
        optimistic: false
      }).result;
    };
    LocalState2.prototype.resolveDocument = function(document2, rootValue, context, variables, fragmentMatcher2, onlyRunForcedResolvers) {
      if (context === void 0) {
        context = {};
      }
      if (variables === void 0) {
        variables = {};
      }
      if (fragmentMatcher2 === void 0) {
        fragmentMatcher2 = function() {
          return true;
        };
      }
      if (onlyRunForcedResolvers === void 0) {
        onlyRunForcedResolvers = false;
      }
      return __awaiter(this, void 0, void 0, function() {
        var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a3, cache, client2, execContext;
        return __generator(this, function(_b) {
          mainDefinition = getMainDefinition(document2);
          fragments = getFragmentDefinitions(document2);
          fragmentMap = createFragmentMap(fragments);
          definitionOperation = mainDefinition.operation;
          defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : "Query";
          _a3 = this, cache = _a3.cache, client2 = _a3.client;
          execContext = {
            fragmentMap,
            context: __assign(__assign({}, context), {
              cache,
              client: client2
            }),
            variables,
            fragmentMatcher: fragmentMatcher2,
            defaultOperationType,
            exportedVariables: {},
            onlyRunForcedResolvers
          };
          return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function(result2) {
            return {
              result: result2,
              exportedVariables: execContext.exportedVariables
            };
          })];
        });
      });
    };
    LocalState2.prototype.resolveSelectionSet = function(selectionSet, rootValue, execContext) {
      return __awaiter(this, void 0, void 0, function() {
        var fragmentMap, context, variables, resultsToMerge, execute3;
        var _this = this;
        return __generator(this, function(_a3) {
          fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
          resultsToMerge = [rootValue];
          execute3 = function(selection) {
            return __awaiter(_this, void 0, void 0, function() {
              var fragment, typeCondition;
              return __generator(this, function(_a4) {
                if (!shouldInclude(selection, variables)) {
                  return [2];
                }
                if (isField(selection)) {
                  return [2, this.resolveField(selection, rootValue, execContext).then(function(fieldResult) {
                    var _a5;
                    if (typeof fieldResult !== "undefined") {
                      resultsToMerge.push((_a5 = {}, _a5[resultKeyNameFromField(selection)] = fieldResult, _a5));
                    }
                  })];
                }
                if (isInlineFragment(selection)) {
                  fragment = selection;
                } else {
                  fragment = fragmentMap[selection.name.value];
                  false ? invariant(fragment, 7) : invariant(fragment, "No fragment named " + selection.name.value);
                }
                if (fragment && fragment.typeCondition) {
                  typeCondition = fragment.typeCondition.name.value;
                  if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                    return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function(fragmentResult) {
                      resultsToMerge.push(fragmentResult);
                    })];
                  }
                }
                return [2];
              });
            });
          };
          return [2, Promise.all(selectionSet.selections.map(execute3)).then(function() {
            return mergeDeepArray(resultsToMerge);
          })];
        });
      });
    };
    LocalState2.prototype.resolveField = function(field, rootValue, execContext) {
      return __awaiter(this, void 0, void 0, function() {
        var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
        var _this = this;
        return __generator(this, function(_a3) {
          variables = execContext.variables;
          fieldName = field.name.value;
          aliasedFieldName = resultKeyNameFromField(field);
          aliasUsed = fieldName !== aliasedFieldName;
          defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
          resultPromise = Promise.resolve(defaultResult);
          if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
            resolverType = rootValue.__typename || execContext.defaultOperationType;
            resolverMap = this.resolvers && this.resolvers[resolverType];
            if (resolverMap) {
              resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
              if (resolve) {
                resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field, fragmentMap: execContext.fragmentMap }));
              }
            }
          }
          return [2, resultPromise.then(function(result2) {
            if (result2 === void 0) {
              result2 = defaultResult;
            }
            if (field.directives) {
              field.directives.forEach(function(directive) {
                if (directive.name.value === "export" && directive.arguments) {
                  directive.arguments.forEach(function(arg) {
                    if (arg.name.value === "as" && arg.value.kind === "StringValue") {
                      execContext.exportedVariables[arg.value.value] = result2;
                    }
                  });
                }
              });
            }
            if (!field.selectionSet) {
              return result2;
            }
            if (result2 == null) {
              return result2;
            }
            if (Array.isArray(result2)) {
              return _this.resolveSubSelectedArray(field, result2, execContext);
            }
            if (field.selectionSet) {
              return _this.resolveSelectionSet(field.selectionSet, result2, execContext);
            }
          })];
        });
      });
    };
    LocalState2.prototype.resolveSubSelectedArray = function(field, result2, execContext) {
      var _this = this;
      return Promise.all(result2.map(function(item) {
        if (item === null) {
          return null;
        }
        if (Array.isArray(item)) {
          return _this.resolveSubSelectedArray(field, item, execContext);
        }
        if (field.selectionSet) {
          return _this.resolveSelectionSet(field.selectionSet, item, execContext);
        }
      }));
    };
    return LocalState2;
  }();
  function multiplex(inner) {
    var observers = /* @__PURE__ */ new Set();
    var sub = null;
    return new Observable2(function(observer) {
      observers.add(observer);
      sub = sub || inner.subscribe({
        next: function(value) {
          observers.forEach(function(obs) {
            return obs.next && obs.next(value);
          });
        },
        error: function(error) {
          observers.forEach(function(obs) {
            return obs.error && obs.error(error);
          });
        },
        complete: function() {
          observers.forEach(function(obs) {
            return obs.complete && obs.complete();
          });
        }
      });
      return function() {
        if (observers.delete(observer) && !observers.size && sub) {
          sub.unsubscribe();
          sub = null;
        }
      };
    });
  }
  function asyncMap(observable, mapFn) {
    return new Observable2(function(observer) {
      var next = observer.next, error = observer.error, complete = observer.complete;
      var activeNextCount = 0;
      var completed = false;
      var handler = {
        next: function(value) {
          ++activeNextCount;
          new Promise(function(resolve) {
            resolve(mapFn(value));
          }).then(function(result2) {
            --activeNextCount;
            next && next.call(observer, result2);
            completed && handler.complete();
          }, function(e) {
            --activeNextCount;
            error && error.call(observer, e);
          });
        },
        error: function(e) {
          error && error.call(observer, e);
        },
        complete: function() {
          completed = true;
          if (!activeNextCount) {
            complete && complete.call(observer);
          }
        }
      };
      var sub = observable.subscribe(handler);
      return function() {
        return sub.unsubscribe();
      };
    });
  }
  var hasOwnProperty3 = Object.prototype.hasOwnProperty;
  var QueryManager = function() {
    function QueryManager2(_a3) {
      var link = _a3.link, _b = _a3.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store2 = _a3.store, _c = _a3.onBroadcast, onBroadcast = _c === void 0 ? function() {
        return void 0;
      } : _c, _d = _a3.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a3.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a3.localState, assumeImmutableResults = _a3.assumeImmutableResults;
      this.mutationStore = new MutationStore();
      this.queryStore = new QueryStore();
      this.clientAwareness = {};
      this.idCounter = 1;
      this.queries = /* @__PURE__ */ new Map();
      this.fetchQueryRejectFns = /* @__PURE__ */ new Map();
      this.transformCache = new (canUseWeakMap ? WeakMap : Map)();
      this.inFlightLinkObservables = /* @__PURE__ */ new Map();
      this.pollingInfoByQueryId = /* @__PURE__ */ new Map();
      this.link = link;
      this.queryDeduplication = queryDeduplication;
      this.dataStore = store2;
      this.onBroadcast = onBroadcast;
      this.clientAwareness = clientAwareness;
      this.localState = localState || new LocalState({ cache: store2.getCache() });
      this.ssrMode = ssrMode;
      this.assumeImmutableResults = !!assumeImmutableResults;
    }
    QueryManager2.prototype.stop = function() {
      var _this = this;
      this.queries.forEach(function(_info, queryId) {
        _this.stopQueryNoBroadcast(queryId);
      });
      this.fetchQueryRejectFns.forEach(function(reject) {
        reject(false ? new InvariantError(8) : new InvariantError("QueryManager stopped while query was in flight"));
      });
    };
    QueryManager2.prototype.mutate = function(_a3) {
      var mutation = _a3.mutation, variables = _a3.variables, optimisticResponse = _a3.optimisticResponse, updateQueriesByName = _a3.updateQueries, _b = _a3.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a3.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a3.update, _d = _a3.errorPolicy, errorPolicy = _d === void 0 ? "none" : _d, fetchPolicy = _a3.fetchPolicy, _e = _a3.context, context = _e === void 0 ? {} : _e;
      return __awaiter(this, void 0, void 0, function() {
        var mutationId, generateUpdateQueriesInfo, self2;
        var _this = this;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              false ? invariant(mutation, 9) : invariant(mutation, "mutation option is required. You must specify your GraphQL document in the mutation option.");
              false ? invariant(!fetchPolicy || fetchPolicy === "no-cache", 10) : invariant(!fetchPolicy || fetchPolicy === "no-cache", "Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.");
              mutationId = this.generateQueryId();
              mutation = this.transform(mutation).document;
              this.setQuery(mutationId, function() {
                return { document: mutation };
              });
              variables = this.getVariables(mutation, variables);
              if (!this.transform(mutation).hasClientExports)
                return [3, 2];
              return [4, this.localState.addExportedVariables(mutation, variables, context)];
            case 1:
              variables = _f.sent();
              _f.label = 2;
            case 2:
              generateUpdateQueriesInfo = function() {
                var ret = {};
                if (updateQueriesByName) {
                  _this.queries.forEach(function(_a4, queryId) {
                    var observableQuery = _a4.observableQuery;
                    if (observableQuery) {
                      var queryName = observableQuery.queryName;
                      if (queryName && hasOwnProperty3.call(updateQueriesByName, queryName)) {
                        ret[queryId] = {
                          updater: updateQueriesByName[queryName],
                          query: _this.queryStore.get(queryId)
                        };
                      }
                    }
                  });
                }
                return ret;
              };
              this.mutationStore.initMutation(mutationId, mutation, variables);
              this.dataStore.markMutationInit({
                mutationId,
                document: mutation,
                variables,
                updateQueries: generateUpdateQueriesInfo(),
                update: updateWithProxyFn,
                optimisticResponse
              });
              this.broadcastQueries();
              self2 = this;
              return [2, new Promise(function(resolve, reject) {
                var storeResult;
                var error;
                self2.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse }), variables, false).subscribe({
                  next: function(result2) {
                    if (graphQLResultHasError(result2) && errorPolicy === "none") {
                      error = new ApolloError({
                        graphQLErrors: result2.errors
                      });
                      return;
                    }
                    self2.mutationStore.markMutationResult(mutationId);
                    if (fetchPolicy !== "no-cache") {
                      self2.dataStore.markMutationResult({
                        mutationId,
                        result: result2,
                        document: mutation,
                        variables,
                        updateQueries: generateUpdateQueriesInfo(),
                        update: updateWithProxyFn
                      });
                    }
                    storeResult = result2;
                  },
                  error: function(err) {
                    self2.mutationStore.markMutationError(mutationId, err);
                    self2.dataStore.markMutationComplete({
                      mutationId,
                      optimisticResponse
                    });
                    self2.broadcastQueries();
                    self2.setQuery(mutationId, function() {
                      return { document: null };
                    });
                    reject(new ApolloError({
                      networkError: err
                    }));
                  },
                  complete: function() {
                    if (error) {
                      self2.mutationStore.markMutationError(mutationId, error);
                    }
                    self2.dataStore.markMutationComplete({
                      mutationId,
                      optimisticResponse
                    });
                    self2.broadcastQueries();
                    if (error) {
                      reject(error);
                      return;
                    }
                    if (typeof refetchQueries === "function") {
                      refetchQueries = refetchQueries(storeResult);
                    }
                    var refetchQueryPromises = [];
                    if (isNonEmptyArray(refetchQueries)) {
                      refetchQueries.forEach(function(refetchQuery) {
                        if (typeof refetchQuery === "string") {
                          self2.queries.forEach(function(_a4) {
                            var observableQuery = _a4.observableQuery;
                            if (observableQuery && observableQuery.queryName === refetchQuery) {
                              refetchQueryPromises.push(observableQuery.refetch());
                            }
                          });
                        } else {
                          var queryOptions = {
                            query: refetchQuery.query,
                            variables: refetchQuery.variables,
                            fetchPolicy: "network-only"
                          };
                          if (refetchQuery.context) {
                            queryOptions.context = refetchQuery.context;
                          }
                          refetchQueryPromises.push(self2.query(queryOptions));
                        }
                      });
                    }
                    Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function() {
                      self2.setQuery(mutationId, function() {
                        return { document: null };
                      });
                      if (errorPolicy === "ignore" && storeResult && graphQLResultHasError(storeResult)) {
                        delete storeResult.errors;
                      }
                      resolve(storeResult);
                    });
                  }
                });
              })];
          }
        });
      });
    };
    QueryManager2.prototype.fetchQuery = function(queryId, options, fetchType, fetchMoreForQueryId) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result2, shouldFetch, requestId, cancel, networkResult;
        var _this = this;
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              _a3 = options.metadata, metadata = _a3 === void 0 ? null : _a3, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? "cache-first" : _b, _c = options.context, context = _c === void 0 ? {} : _c;
              query = this.transform(options.query).document;
              variables = this.getVariables(query, options.variables);
              if (!this.transform(query).hasClientExports)
                return [3, 2];
              return [4, this.localState.addExportedVariables(query, variables, context)];
            case 1:
              variables = _e.sent();
              _e.label = 2;
            case 2:
              options = __assign(__assign({}, options), { variables });
              isNetworkOnly = fetchPolicy === "network-only" || fetchPolicy === "no-cache";
              needToFetch = isNetworkOnly;
              if (!isNetworkOnly) {
                _d = this.dataStore.getCache().diff({
                  query,
                  variables,
                  returnPartialData: true,
                  optimistic: false
                }), complete = _d.complete, result2 = _d.result;
                needToFetch = !complete || fetchPolicy === "cache-and-network";
                storeResult = result2;
              }
              shouldFetch = needToFetch && fetchPolicy !== "cache-only" && fetchPolicy !== "standby";
              if (hasDirectives(["live"], query))
                shouldFetch = true;
              requestId = this.idCounter++;
              cancel = fetchPolicy !== "no-cache" ? this.updateQueryWatch(queryId, query, options) : void 0;
              this.setQuery(queryId, function() {
                return {
                  document: query,
                  lastRequestId: requestId,
                  invalidated: true,
                  cancel
                };
              });
              this.invalidate(fetchMoreForQueryId);
              this.queryStore.initQuery({
                queryId,
                document: query,
                storePreviousVariables: shouldFetch,
                variables,
                isPoll: fetchType === FetchType.poll,
                isRefetch: fetchType === FetchType.refetch,
                metadata,
                fetchMoreForQueryId
              });
              this.broadcastQueries();
              if (shouldFetch) {
                networkResult = this.fetchRequest({
                  requestId,
                  queryId,
                  document: query,
                  options,
                  fetchMoreForQueryId
                }).catch(function(error) {
                  if (isApolloError(error)) {
                    throw error;
                  } else {
                    if (requestId >= _this.getQuery(queryId).lastRequestId) {
                      _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);
                      _this.invalidate(queryId);
                      _this.invalidate(fetchMoreForQueryId);
                      _this.broadcastQueries();
                    }
                    throw new ApolloError({ networkError: error });
                  }
                });
                if (fetchPolicy !== "cache-and-network") {
                  return [2, networkResult];
                }
                networkResult.catch(function() {
                });
              }
              this.queryStore.markQueryResultClient(queryId, !shouldFetch);
              this.invalidate(queryId);
              this.invalidate(fetchMoreForQueryId);
              if (this.transform(query).hasForcedResolvers) {
                return [2, this.localState.runResolvers({
                  document: query,
                  remoteResult: { data: storeResult },
                  context,
                  variables,
                  onlyRunForcedResolvers: true
                }).then(function(result3) {
                  _this.markQueryResult(queryId, result3, options, fetchMoreForQueryId);
                  _this.broadcastQueries();
                  return result3;
                })];
              }
              this.broadcastQueries();
              return [2, { data: storeResult }];
          }
        });
      });
    };
    QueryManager2.prototype.markQueryResult = function(queryId, result2, _a3, fetchMoreForQueryId) {
      var fetchPolicy = _a3.fetchPolicy, variables = _a3.variables, errorPolicy = _a3.errorPolicy;
      if (fetchPolicy === "no-cache") {
        this.setQuery(queryId, function() {
          return {
            newData: { result: result2.data, complete: true }
          };
        });
      } else {
        this.dataStore.markQueryResult(result2, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === "ignore" || errorPolicy === "all");
      }
    };
    QueryManager2.prototype.queryListenerForObserver = function(queryId, options, observer) {
      var _this = this;
      function invoke(method, argument) {
        if (observer[method]) {
          try {
            observer[method](argument);
          } catch (e) {
            invariant.error(e);
          }
        } else if (method === "error") {
          invariant.error(argument);
        }
      }
      return function(queryStoreValue, newData) {
        _this.invalidate(queryId, false);
        if (!queryStoreValue)
          return;
        var _a3 = _this.getQuery(queryId), observableQuery = _a3.observableQuery, document2 = _a3.document;
        var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;
        if (fetchPolicy === "standby")
          return;
        var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);
        var lastResult = observableQuery && observableQuery.getLastResult();
        var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== queryStoreValue.networkStatus);
        var shouldNotifyIfLoading = options.returnPartialData || !newData && queryStoreValue.previousVariables || networkStatusChanged && options.notifyOnNetworkStatusChange || fetchPolicy === "cache-only" || fetchPolicy === "cache-and-network";
        if (loading && !shouldNotifyIfLoading) {
          return;
        }
        var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);
        var errorPolicy = observableQuery && observableQuery.options.errorPolicy || options.errorPolicy || "none";
        if (errorPolicy === "none" && hasGraphQLErrors || queryStoreValue.networkError) {
          return invoke("error", new ApolloError({
            graphQLErrors: queryStoreValue.graphQLErrors,
            networkError: queryStoreValue.networkError
          }));
        }
        try {
          var data = void 0;
          var isMissing = void 0;
          if (newData) {
            if (fetchPolicy !== "no-cache" && fetchPolicy !== "network-only") {
              _this.setQuery(queryId, function() {
                return { newData: null };
              });
            }
            data = newData.result;
            isMissing = !newData.complete;
          } else {
            var lastError = observableQuery && observableQuery.getLastError();
            var errorStatusChanged = errorPolicy !== "none" && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors;
            if (lastResult && lastResult.data && !errorStatusChanged) {
              data = lastResult.data;
              isMissing = false;
            } else {
              var diffResult = _this.dataStore.getCache().diff({
                query: document2,
                variables: queryStoreValue.previousVariables || queryStoreValue.variables,
                returnPartialData: true,
                optimistic: true
              });
              data = diffResult.result;
              isMissing = !diffResult.complete;
            }
          }
          var stale = isMissing && !(options.returnPartialData || fetchPolicy === "cache-only");
          var resultFromStore = {
            data: stale ? lastResult && lastResult.data : data,
            loading,
            networkStatus: queryStoreValue.networkStatus,
            stale
          };
          if (errorPolicy === "all" && hasGraphQLErrors) {
            resultFromStore.errors = queryStoreValue.graphQLErrors;
          }
          invoke("next", resultFromStore);
        } catch (networkError) {
          invoke("error", new ApolloError({ networkError }));
        }
      };
    };
    QueryManager2.prototype.transform = function(document2) {
      var transformCache = this.transformCache;
      if (!transformCache.has(document2)) {
        var cache = this.dataStore.getCache();
        var transformed = cache.transformDocument(document2);
        var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));
        var clientQuery = this.localState.clientQuery(transformed);
        var serverQuery = this.localState.serverQuery(forLink);
        var cacheEntry_1 = {
          document: transformed,
          hasClientExports: hasClientExports(transformed),
          hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
          clientQuery,
          serverQuery,
          defaultVars: getDefaultValues(getOperationDefinition(transformed))
        };
        var add = function(doc) {
          if (doc && !transformCache.has(doc)) {
            transformCache.set(doc, cacheEntry_1);
          }
        };
        add(document2);
        add(transformed);
        add(clientQuery);
        add(serverQuery);
      }
      return transformCache.get(document2);
    };
    QueryManager2.prototype.getVariables = function(document2, variables) {
      return __assign(__assign({}, this.transform(document2).defaultVars), variables);
    };
    QueryManager2.prototype.watchQuery = function(options, shouldSubscribe) {
      if (shouldSubscribe === void 0) {
        shouldSubscribe = true;
      }
      false ? invariant(options.fetchPolicy !== "standby", 11) : invariant(options.fetchPolicy !== "standby", 'client.watchQuery cannot be called with fetchPolicy set to "standby"');
      options.variables = this.getVariables(options.query, options.variables);
      if (typeof options.notifyOnNetworkStatusChange === "undefined") {
        options.notifyOnNetworkStatusChange = false;
      }
      var transformedOptions = __assign({}, options);
      return new ObservableQuery({
        queryManager: this,
        options: transformedOptions,
        shouldSubscribe
      });
    };
    QueryManager2.prototype.query = function(options) {
      var _this = this;
      false ? invariant(options.query, 12) : invariant(options.query, "query option is required. You must specify your GraphQL document in the query option.");
      false ? invariant(options.query.kind === "Document", 13) : invariant(options.query.kind === "Document", 'You must wrap the query string in a "gql" tag.');
      false ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, "returnPartialData option only supported on watchQuery.");
      false ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, "pollInterval option only supported on watchQuery.");
      return new Promise(function(resolve, reject) {
        var watchedQuery = _this.watchQuery(options, false);
        _this.fetchQueryRejectFns.set("query:" + watchedQuery.queryId, reject);
        watchedQuery.result().then(resolve, reject).then(function() {
          return _this.fetchQueryRejectFns.delete("query:" + watchedQuery.queryId);
        });
      });
    };
    QueryManager2.prototype.generateQueryId = function() {
      return String(this.idCounter++);
    };
    QueryManager2.prototype.stopQueryInStore = function(queryId) {
      this.stopQueryInStoreNoBroadcast(queryId);
      this.broadcastQueries();
    };
    QueryManager2.prototype.stopQueryInStoreNoBroadcast = function(queryId) {
      this.stopPollingQuery(queryId);
      this.queryStore.stopQuery(queryId);
      this.invalidate(queryId);
    };
    QueryManager2.prototype.addQueryListener = function(queryId, listener) {
      this.setQuery(queryId, function(_a3) {
        var listeners = _a3.listeners;
        listeners.add(listener);
        return { invalidated: false };
      });
    };
    QueryManager2.prototype.updateQueryWatch = function(queryId, document2, options) {
      var _this = this;
      var cancel = this.getQuery(queryId).cancel;
      if (cancel)
        cancel();
      var previousResult = function() {
        var previousResult2 = null;
        var observableQuery = _this.getQuery(queryId).observableQuery;
        if (observableQuery) {
          var lastResult = observableQuery.getLastResult();
          if (lastResult) {
            previousResult2 = lastResult.data;
          }
        }
        return previousResult2;
      };
      return this.dataStore.getCache().watch({
        query: document2,
        variables: options.variables,
        optimistic: true,
        previousResult,
        callback: function(newData) {
          _this.setQuery(queryId, function() {
            return { invalidated: true, newData };
          });
        }
      });
    };
    QueryManager2.prototype.addObservableQuery = function(queryId, observableQuery) {
      this.setQuery(queryId, function() {
        return { observableQuery };
      });
    };
    QueryManager2.prototype.removeObservableQuery = function(queryId) {
      var cancel = this.getQuery(queryId).cancel;
      this.setQuery(queryId, function() {
        return { observableQuery: null };
      });
      if (cancel)
        cancel();
    };
    QueryManager2.prototype.clearStore = function() {
      this.fetchQueryRejectFns.forEach(function(reject) {
        reject(false ? new InvariantError(16) : new InvariantError("Store reset while query was in flight (not completed in link chain)"));
      });
      var resetIds = [];
      this.queries.forEach(function(_a3, queryId) {
        var observableQuery = _a3.observableQuery;
        if (observableQuery)
          resetIds.push(queryId);
      });
      this.queryStore.reset(resetIds);
      this.mutationStore.reset();
      return this.dataStore.reset();
    };
    QueryManager2.prototype.resetStore = function() {
      var _this = this;
      return this.clearStore().then(function() {
        return _this.reFetchObservableQueries();
      });
    };
    QueryManager2.prototype.reFetchObservableQueries = function(includeStandby) {
      var _this = this;
      if (includeStandby === void 0) {
        includeStandby = false;
      }
      var observableQueryPromises = [];
      this.queries.forEach(function(_a3, queryId) {
        var observableQuery = _a3.observableQuery;
        if (observableQuery) {
          var fetchPolicy = observableQuery.options.fetchPolicy;
          observableQuery.resetLastResults();
          if (fetchPolicy !== "cache-only" && (includeStandby || fetchPolicy !== "standby")) {
            observableQueryPromises.push(observableQuery.refetch());
          }
          _this.setQuery(queryId, function() {
            return { newData: null };
          });
          _this.invalidate(queryId);
        }
      });
      this.broadcastQueries();
      return Promise.all(observableQueryPromises);
    };
    QueryManager2.prototype.observeQuery = function(queryId, options, observer) {
      this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));
      return this.fetchQuery(queryId, options);
    };
    QueryManager2.prototype.startQuery = function(queryId, options, listener) {
      invariant.warn("The QueryManager.startQuery method has been deprecated");
      this.addQueryListener(queryId, listener);
      this.fetchQuery(queryId, options).catch(function() {
        return void 0;
      });
      return queryId;
    };
    QueryManager2.prototype.startGraphQLSubscription = function(_a3) {
      var _this = this;
      var query = _a3.query, fetchPolicy = _a3.fetchPolicy, variables = _a3.variables;
      query = this.transform(query).document;
      variables = this.getVariables(query, variables);
      var makeObservable = function(variables2) {
        return _this.getObservableFromLink(query, {}, variables2, false).map(function(result2) {
          if (!fetchPolicy || fetchPolicy !== "no-cache") {
            _this.dataStore.markSubscriptionResult(result2, query, variables2);
            _this.broadcastQueries();
          }
          if (graphQLResultHasError(result2)) {
            throw new ApolloError({
              graphQLErrors: result2.errors
            });
          }
          return result2;
        });
      };
      if (this.transform(query).hasClientExports) {
        var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);
        return new Observable2(function(observer) {
          var sub = null;
          observablePromise_1.then(function(observable) {
            return sub = observable.subscribe(observer);
          }, observer.error);
          return function() {
            return sub && sub.unsubscribe();
          };
        });
      }
      return makeObservable(variables);
    };
    QueryManager2.prototype.stopQuery = function(queryId) {
      this.stopQueryNoBroadcast(queryId);
      this.broadcastQueries();
    };
    QueryManager2.prototype.stopQueryNoBroadcast = function(queryId) {
      this.stopQueryInStoreNoBroadcast(queryId);
      this.removeQuery(queryId);
    };
    QueryManager2.prototype.removeQuery = function(queryId) {
      this.fetchQueryRejectFns.delete("query:" + queryId);
      this.fetchQueryRejectFns.delete("fetchRequest:" + queryId);
      this.getQuery(queryId).subscriptions.forEach(function(x) {
        return x.unsubscribe();
      });
      this.queries.delete(queryId);
    };
    QueryManager2.prototype.getCurrentQueryResult = function(observableQuery, optimistic) {
      if (optimistic === void 0) {
        optimistic = true;
      }
      var _a3 = observableQuery.options, variables = _a3.variables, query = _a3.query, fetchPolicy = _a3.fetchPolicy, returnPartialData = _a3.returnPartialData;
      var lastResult = observableQuery.getLastResult();
      var newData = this.getQuery(observableQuery.queryId).newData;
      if (newData && newData.complete) {
        return { data: newData.result, partial: false };
      }
      if (fetchPolicy === "no-cache" || fetchPolicy === "network-only") {
        return { data: void 0, partial: false };
      }
      var _b = this.dataStore.getCache().diff({
        query,
        variables,
        previousResult: lastResult ? lastResult.data : void 0,
        returnPartialData: true,
        optimistic
      }), result2 = _b.result, complete = _b.complete;
      return {
        data: complete || returnPartialData ? result2 : void 0,
        partial: !complete
      };
    };
    QueryManager2.prototype.getQueryWithPreviousResult = function(queryIdOrObservable) {
      var observableQuery;
      if (typeof queryIdOrObservable === "string") {
        var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;
        false ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, "ObservableQuery with this id doesn't exist: " + queryIdOrObservable);
        observableQuery = foundObserveableQuery;
      } else {
        observableQuery = queryIdOrObservable;
      }
      var _a3 = observableQuery.options, variables = _a3.variables, query = _a3.query;
      return {
        previousResult: this.getCurrentQueryResult(observableQuery, false).data,
        variables,
        document: query
      };
    };
    QueryManager2.prototype.broadcastQueries = function() {
      var _this = this;
      this.onBroadcast();
      this.queries.forEach(function(info, id) {
        if (info.invalidated) {
          info.listeners.forEach(function(listener) {
            if (listener) {
              listener(_this.queryStore.get(id), info.newData);
            }
          });
        }
      });
    };
    QueryManager2.prototype.getLocalState = function() {
      return this.localState;
    };
    QueryManager2.prototype.getObservableFromLink = function(query, context, variables, deduplication) {
      var _this = this;
      if (deduplication === void 0) {
        deduplication = this.queryDeduplication;
      }
      var observable;
      var serverQuery = this.transform(query).serverQuery;
      if (serverQuery) {
        var _a3 = this, inFlightLinkObservables_1 = _a3.inFlightLinkObservables, link = _a3.link;
        var operation = {
          query: serverQuery,
          variables,
          operationName: getOperationName(serverQuery) || void 0,
          context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication }))
        };
        context = operation.context;
        if (deduplication) {
          var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || /* @__PURE__ */ new Map();
          inFlightLinkObservables_1.set(serverQuery, byVariables_1);
          var varJson_1 = JSON.stringify(variables);
          observable = byVariables_1.get(varJson_1);
          if (!observable) {
            byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));
            var cleanup = function() {
              byVariables_1.delete(varJson_1);
              if (!byVariables_1.size)
                inFlightLinkObservables_1.delete(serverQuery);
              cleanupSub_1.unsubscribe();
            };
            var cleanupSub_1 = observable.subscribe({
              next: cleanup,
              error: cleanup,
              complete: cleanup
            });
          }
        } else {
          observable = multiplex(execute(link, operation));
        }
      } else {
        observable = Observable2.of({ data: {} });
        context = this.prepareContext(context);
      }
      var clientQuery = this.transform(query).clientQuery;
      if (clientQuery) {
        observable = asyncMap(observable, function(result2) {
          return _this.localState.runResolvers({
            document: clientQuery,
            remoteResult: result2,
            context,
            variables
          });
        });
      }
      return observable;
    };
    QueryManager2.prototype.fetchRequest = function(_a3) {
      var _this = this;
      var requestId = _a3.requestId, queryId = _a3.queryId, document2 = _a3.document, options = _a3.options, fetchMoreForQueryId = _a3.fetchMoreForQueryId;
      var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? "none" : _b, fetchPolicy = options.fetchPolicy;
      var resultFromStore;
      var errorsFromStore;
      return new Promise(function(resolve, reject) {
        var observable = _this.getObservableFromLink(document2, options.context, variables);
        var fqrfId = "fetchRequest:" + queryId;
        _this.fetchQueryRejectFns.set(fqrfId, reject);
        var cleanup = function() {
          _this.fetchQueryRejectFns.delete(fqrfId);
          _this.setQuery(queryId, function(_a4) {
            var subscriptions = _a4.subscriptions;
            subscriptions.delete(subscription);
          });
        };
        var subscription = observable.map(function(result2) {
          if (requestId >= _this.getQuery(queryId).lastRequestId) {
            _this.markQueryResult(queryId, result2, options, fetchMoreForQueryId);
            _this.queryStore.markQueryResult(queryId, result2, fetchMoreForQueryId);
            _this.invalidate(queryId);
            _this.invalidate(fetchMoreForQueryId);
            _this.broadcastQueries();
          }
          if (errorPolicy === "none" && isNonEmptyArray(result2.errors)) {
            return reject(new ApolloError({
              graphQLErrors: result2.errors
            }));
          }
          if (errorPolicy === "all") {
            errorsFromStore = result2.errors;
          }
          if (fetchMoreForQueryId || fetchPolicy === "no-cache") {
            resultFromStore = result2.data;
          } else {
            var _a4 = _this.dataStore.getCache().diff({
              variables,
              query: document2,
              optimistic: false,
              returnPartialData: true
            }), result_1 = _a4.result, complete = _a4.complete;
            if (complete || options.returnPartialData) {
              resultFromStore = result_1;
            }
          }
        }).subscribe({
          error: function(error) {
            cleanup();
            reject(error);
          },
          complete: function() {
            cleanup();
            resolve({
              data: resultFromStore,
              errors: errorsFromStore,
              loading: false,
              networkStatus: NetworkStatus.ready,
              stale: false
            });
          }
        });
        _this.setQuery(queryId, function(_a4) {
          var subscriptions = _a4.subscriptions;
          subscriptions.add(subscription);
        });
      });
    };
    QueryManager2.prototype.getQuery = function(queryId) {
      return this.queries.get(queryId) || {
        listeners: /* @__PURE__ */ new Set(),
        invalidated: false,
        document: null,
        newData: null,
        lastRequestId: 1,
        observableQuery: null,
        subscriptions: /* @__PURE__ */ new Set()
      };
    };
    QueryManager2.prototype.setQuery = function(queryId, updater) {
      var prev = this.getQuery(queryId);
      var newInfo = __assign(__assign({}, prev), updater(prev));
      this.queries.set(queryId, newInfo);
    };
    QueryManager2.prototype.invalidate = function(queryId, invalidated) {
      if (invalidated === void 0) {
        invalidated = true;
      }
      if (queryId) {
        this.setQuery(queryId, function() {
          return { invalidated };
        });
      }
    };
    QueryManager2.prototype.prepareContext = function(context) {
      if (context === void 0) {
        context = {};
      }
      var newContext = this.localState.prepareContext(context);
      return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });
    };
    QueryManager2.prototype.checkInFlight = function(queryId) {
      var query = this.queryStore.get(queryId);
      return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;
    };
    QueryManager2.prototype.startPollingQuery = function(options, queryId, listener) {
      var _this = this;
      var pollInterval = options.pollInterval;
      false ? invariant(pollInterval, 18) : invariant(pollInterval, "Attempted to start a polling query without a polling interval.");
      if (!this.ssrMode) {
        var info = this.pollingInfoByQueryId.get(queryId);
        if (!info) {
          this.pollingInfoByQueryId.set(queryId, info = {});
        }
        info.interval = pollInterval;
        info.options = __assign(__assign({}, options), { fetchPolicy: "network-only" });
        var maybeFetch_1 = function() {
          var info2 = _this.pollingInfoByQueryId.get(queryId);
          if (info2) {
            if (_this.checkInFlight(queryId)) {
              poll_1();
            } else {
              _this.fetchQuery(queryId, info2.options, FetchType.poll).then(poll_1, poll_1);
            }
          }
        };
        var poll_1 = function() {
          var info2 = _this.pollingInfoByQueryId.get(queryId);
          if (info2) {
            clearTimeout(info2.timeout);
            info2.timeout = setTimeout(maybeFetch_1, info2.interval);
          }
        };
        if (listener) {
          this.addQueryListener(queryId, listener);
        }
        poll_1();
      }
      return queryId;
    };
    QueryManager2.prototype.stopPollingQuery = function(queryId) {
      this.pollingInfoByQueryId.delete(queryId);
    };
    return QueryManager2;
  }();
  var DataStore = function() {
    function DataStore2(initialCache) {
      this.cache = initialCache;
    }
    DataStore2.prototype.getCache = function() {
      return this.cache;
    };
    DataStore2.prototype.markQueryResult = function(result2, document2, variables, fetchMoreForQueryId, ignoreErrors) {
      if (ignoreErrors === void 0) {
        ignoreErrors = false;
      }
      var writeWithErrors = !graphQLResultHasError(result2);
      if (ignoreErrors && graphQLResultHasError(result2) && result2.data) {
        writeWithErrors = true;
      }
      if (!fetchMoreForQueryId && writeWithErrors) {
        this.cache.write({
          result: result2.data,
          dataId: "ROOT_QUERY",
          query: document2,
          variables
        });
      }
    };
    DataStore2.prototype.markSubscriptionResult = function(result2, document2, variables) {
      if (!graphQLResultHasError(result2)) {
        this.cache.write({
          result: result2.data,
          dataId: "ROOT_SUBSCRIPTION",
          query: document2,
          variables
        });
      }
    };
    DataStore2.prototype.markMutationInit = function(mutation) {
      var _this = this;
      if (mutation.optimisticResponse) {
        var optimistic_1;
        if (typeof mutation.optimisticResponse === "function") {
          optimistic_1 = mutation.optimisticResponse(mutation.variables);
        } else {
          optimistic_1 = mutation.optimisticResponse;
        }
        this.cache.recordOptimisticTransaction(function(c) {
          var orig = _this.cache;
          _this.cache = c;
          try {
            _this.markMutationResult({
              mutationId: mutation.mutationId,
              result: { data: optimistic_1 },
              document: mutation.document,
              variables: mutation.variables,
              updateQueries: mutation.updateQueries,
              update: mutation.update
            });
          } finally {
            _this.cache = orig;
          }
        }, mutation.mutationId);
      }
    };
    DataStore2.prototype.markMutationResult = function(mutation) {
      var _this = this;
      if (!graphQLResultHasError(mutation.result)) {
        var cacheWrites_1 = [{
          result: mutation.result.data,
          dataId: "ROOT_MUTATION",
          query: mutation.document,
          variables: mutation.variables
        }];
        var updateQueries_1 = mutation.updateQueries;
        if (updateQueries_1) {
          Object.keys(updateQueries_1).forEach(function(id) {
            var _a3 = updateQueries_1[id], query = _a3.query, updater = _a3.updater;
            var _b = _this.cache.diff({
              query: query.document,
              variables: query.variables,
              returnPartialData: true,
              optimistic: false
            }), currentQueryResult = _b.result, complete = _b.complete;
            if (complete) {
              var nextQueryResult = tryFunctionOrLogError(function() {
                return updater(currentQueryResult, {
                  mutationResult: mutation.result,
                  queryName: getOperationName(query.document) || void 0,
                  queryVariables: query.variables
                });
              });
              if (nextQueryResult) {
                cacheWrites_1.push({
                  result: nextQueryResult,
                  dataId: "ROOT_QUERY",
                  query: query.document,
                  variables: query.variables
                });
              }
            }
          });
        }
        this.cache.performTransaction(function(c) {
          cacheWrites_1.forEach(function(write) {
            return c.write(write);
          });
          var update3 = mutation.update;
          if (update3) {
            tryFunctionOrLogError(function() {
              return update3(c, mutation.result);
            });
          }
        });
      }
    };
    DataStore2.prototype.markMutationComplete = function(_a3) {
      var mutationId = _a3.mutationId, optimisticResponse = _a3.optimisticResponse;
      if (optimisticResponse) {
        this.cache.removeOptimistic(mutationId);
      }
    };
    DataStore2.prototype.markUpdateQueryResult = function(document2, variables, newResult) {
      this.cache.write({
        result: newResult,
        dataId: "ROOT_QUERY",
        variables,
        query: document2
      });
    };
    DataStore2.prototype.reset = function() {
      return this.cache.reset();
    };
    return DataStore2;
  }();
  var version = "2.6.10";
  var hasSuggestedDevtools = false;
  var ApolloClient = function() {
    function ApolloClient2(options) {
      var _this = this;
      this.defaultOptions = {};
      this.resetStoreCallbacks = [];
      this.clearStoreCallbacks = [];
      var cache = options.cache, _a3 = options.ssrMode, ssrMode = _a3 === void 0 ? false : _a3, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions2 = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher2 = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
      var link = options.link;
      if (!link && resolvers) {
        link = ApolloLink.empty();
      }
      if (!link || !cache) {
        throw false ? new InvariantError(4) : new InvariantError("In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\nThese options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\nFor more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup");
      }
      this.link = link;
      this.cache = cache;
      this.store = new DataStore(cache);
      this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
      this.queryDeduplication = queryDeduplication;
      this.defaultOptions = defaultOptions2 || {};
      this.typeDefs = typeDefs;
      if (ssrForceFetchDelay) {
        setTimeout(function() {
          return _this.disableNetworkFetches = false;
        }, ssrForceFetchDelay);
      }
      this.watchQuery = this.watchQuery.bind(this);
      this.query = this.query.bind(this);
      this.mutate = this.mutate.bind(this);
      this.resetStore = this.resetStore.bind(this);
      this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
      var defaultConnectToDevTools = typeof window !== "undefined" && !window.__APOLLO_CLIENT__;
      if (typeof connectToDevTools === "undefined" ? defaultConnectToDevTools : connectToDevTools && typeof window !== "undefined") {
        window.__APOLLO_CLIENT__ = this;
      }
      if (!hasSuggestedDevtools && true) {
        hasSuggestedDevtools = true;
        if (typeof window !== "undefined" && window.document && window.top === window.self) {
          if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("Chrome") > -1) {
              console.debug("Download the Apollo DevTools for a better development experience: https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm");
            }
          }
        }
      }
      this.version = version;
      this.localState = new LocalState({
        cache,
        client: this,
        resolvers,
        fragmentMatcher: fragmentMatcher2
      });
      this.queryManager = new QueryManager({
        link: this.link,
        store: this.store,
        queryDeduplication,
        ssrMode,
        clientAwareness: {
          name: clientAwarenessName,
          version: clientAwarenessVersion
        },
        localState: this.localState,
        assumeImmutableResults,
        onBroadcast: function() {
          if (_this.devToolsHookCb) {
            _this.devToolsHookCb({
              action: {},
              state: {
                queries: _this.queryManager.queryStore.getStore(),
                mutations: _this.queryManager.mutationStore.getStore()
              },
              dataWithOptimisticResults: _this.cache.extract(true)
            });
          }
        }
      });
    }
    ApolloClient2.prototype.stop = function() {
      this.queryManager.stop();
    };
    ApolloClient2.prototype.watchQuery = function(options) {
      if (this.defaultOptions.watchQuery) {
        options = __assign(__assign({}, this.defaultOptions.watchQuery), options);
      }
      if (this.disableNetworkFetches && (options.fetchPolicy === "network-only" || options.fetchPolicy === "cache-and-network")) {
        options = __assign(__assign({}, options), { fetchPolicy: "cache-first" });
      }
      return this.queryManager.watchQuery(options);
    };
    ApolloClient2.prototype.query = function(options) {
      if (this.defaultOptions.query) {
        options = __assign(__assign({}, this.defaultOptions.query), options);
      }
      false ? invariant(options.fetchPolicy !== "cache-and-network", 5) : invariant(options.fetchPolicy !== "cache-and-network", "The cache-and-network fetchPolicy does not work with client.query, because client.query can only return a single result. Please use client.watchQuery to receive multiple results from the cache and the network, or consider using a different fetchPolicy, such as cache-first or network-only.");
      if (this.disableNetworkFetches && options.fetchPolicy === "network-only") {
        options = __assign(__assign({}, options), { fetchPolicy: "cache-first" });
      }
      return this.queryManager.query(options);
    };
    ApolloClient2.prototype.mutate = function(options) {
      if (this.defaultOptions.mutate) {
        options = __assign(__assign({}, this.defaultOptions.mutate), options);
      }
      return this.queryManager.mutate(options);
    };
    ApolloClient2.prototype.subscribe = function(options) {
      return this.queryManager.startGraphQLSubscription(options);
    };
    ApolloClient2.prototype.readQuery = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return this.cache.readQuery(options, optimistic);
    };
    ApolloClient2.prototype.readFragment = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return this.cache.readFragment(options, optimistic);
    };
    ApolloClient2.prototype.writeQuery = function(options) {
      var result2 = this.cache.writeQuery(options);
      this.queryManager.broadcastQueries();
      return result2;
    };
    ApolloClient2.prototype.writeFragment = function(options) {
      var result2 = this.cache.writeFragment(options);
      this.queryManager.broadcastQueries();
      return result2;
    };
    ApolloClient2.prototype.writeData = function(options) {
      var result2 = this.cache.writeData(options);
      this.queryManager.broadcastQueries();
      return result2;
    };
    ApolloClient2.prototype.__actionHookForDevTools = function(cb) {
      this.devToolsHookCb = cb;
    };
    ApolloClient2.prototype.__requestRaw = function(payload) {
      return execute(this.link, payload);
    };
    ApolloClient2.prototype.initQueryManager = function() {
      invariant.warn("Calling the initQueryManager method is no longer necessary, and it will be removed from ApolloClient in version 3.0.");
      return this.queryManager;
    };
    ApolloClient2.prototype.resetStore = function() {
      var _this = this;
      return Promise.resolve().then(function() {
        return _this.queryManager.clearStore();
      }).then(function() {
        return Promise.all(_this.resetStoreCallbacks.map(function(fn) {
          return fn();
        }));
      }).then(function() {
        return _this.reFetchObservableQueries();
      });
    };
    ApolloClient2.prototype.clearStore = function() {
      var _this = this;
      return Promise.resolve().then(function() {
        return _this.queryManager.clearStore();
      }).then(function() {
        return Promise.all(_this.clearStoreCallbacks.map(function(fn) {
          return fn();
        }));
      });
    };
    ApolloClient2.prototype.onResetStore = function(cb) {
      var _this = this;
      this.resetStoreCallbacks.push(cb);
      return function() {
        _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {
          return c !== cb;
        });
      };
    };
    ApolloClient2.prototype.onClearStore = function(cb) {
      var _this = this;
      this.clearStoreCallbacks.push(cb);
      return function() {
        _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {
          return c !== cb;
        });
      };
    };
    ApolloClient2.prototype.reFetchObservableQueries = function(includeStandby) {
      return this.queryManager.reFetchObservableQueries(includeStandby);
    };
    ApolloClient2.prototype.extract = function(optimistic) {
      return this.cache.extract(optimistic);
    };
    ApolloClient2.prototype.restore = function(serializedState) {
      return this.cache.restore(serializedState);
    };
    ApolloClient2.prototype.addResolvers = function(resolvers) {
      this.localState.addResolvers(resolvers);
    };
    ApolloClient2.prototype.setResolvers = function(resolvers) {
      this.localState.setResolvers(resolvers);
    };
    ApolloClient2.prototype.getResolvers = function() {
      return this.localState.getResolvers();
    };
    ApolloClient2.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher2) {
      this.localState.setFragmentMatcher(fragmentMatcher2);
    };
    return ApolloClient2;
  }();

  // node_modules/apollo-link-http-common/lib/bundle.esm.js
  var import_printer = __toESM(require_printer());
  var defaultHttpOptions = {
    includeQuery: true,
    includeExtensions: false
  };
  var defaultHeaders = {
    accept: "*/*",
    "content-type": "application/json"
  };
  var defaultOptions = {
    method: "POST"
  };
  var fallbackHttpConfig = {
    http: defaultHttpOptions,
    headers: defaultHeaders,
    options: defaultOptions
  };
  var throwServerError = function(response, result2, message) {
    var error = new Error(message);
    error.name = "ServerError";
    error.response = response;
    error.statusCode = response.status;
    error.result = result2;
    throw error;
  };
  var parseAndCheckHttpResponse = function(operations) {
    return function(response) {
      return response.text().then(function(bodyText) {
        try {
          return JSON.parse(bodyText);
        } catch (err) {
          var parseError = err;
          parseError.name = "ServerParseError";
          parseError.response = response;
          parseError.statusCode = response.status;
          parseError.bodyText = bodyText;
          return Promise.reject(parseError);
        }
      }).then(function(result2) {
        if (response.status >= 300) {
          throwServerError(response, result2, "Response not successful: Received status code " + response.status);
        }
        if (!Array.isArray(result2) && !result2.hasOwnProperty("data") && !result2.hasOwnProperty("errors")) {
          throwServerError(response, result2, "Server response was missing for query '" + (Array.isArray(operations) ? operations.map(function(op) {
            return op.operationName;
          }) : operations.operationName) + "'.");
        }
        return result2;
      });
    };
  };
  var checkFetcher = function(fetcher) {
    if (!fetcher && typeof fetch === "undefined") {
      var library = "unfetch";
      if (typeof window === "undefined")
        library = "node-fetch";
      throw false ? new InvariantError(1) : new InvariantError("\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\nyour environment like https://www.npmjs.com/package/" + library + ".\n\nFor example:\nimport fetch from '" + library + "';\nimport { createHttpLink } from 'apollo-link-http';\n\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });");
    }
  };
  var createSignalIfSupported = function() {
    if (typeof AbortController === "undefined")
      return { controller: false, signal: false };
    var controller = new AbortController();
    var signal = controller.signal;
    return { controller, signal };
  };
  var selectHttpOptionsAndBody = function(operation, fallbackConfig) {
    var configs = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      configs[_i - 2] = arguments[_i];
    }
    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });
    var http = fallbackConfig.http;
    configs.forEach(function(config) {
      options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });
      if (config.credentials)
        options.credentials = config.credentials;
      http = __assign({}, http, config.http);
    });
    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
    var body = { operationName, variables };
    if (http.includeExtensions)
      body.extensions = extensions;
    if (http.includeQuery)
      body.query = (0, import_printer.print)(query);
    return {
      options,
      body
    };
  };
  var serializeFetchParameter = function(p, label) {
    var serialized;
    try {
      serialized = JSON.stringify(p);
    } catch (e) {
      var parseError = false ? new InvariantError(2) : new InvariantError("Network request failed. " + label + " is not serializable: " + e.message);
      parseError.parseError = e;
      throw parseError;
    }
    return serialized;
  };
  var selectURI = function(operation, fallbackURI) {
    var context = operation.getContext();
    var contextURI = context.uri;
    if (contextURI) {
      return contextURI;
    } else if (typeof fallbackURI === "function") {
      return fallbackURI(operation);
    } else {
      return fallbackURI || "/graphql";
    }
  };

  // node_modules/apollo-link-http/lib/bundle.esm.js
  var createHttpLink = function(linkOptions) {
    if (linkOptions === void 0) {
      linkOptions = {};
    }
    var _a3 = linkOptions.uri, uri = _a3 === void 0 ? "/graphql" : _a3, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, ["uri", "fetch", "includeExtensions", "useGETForQueries"]);
    checkFetcher(fetcher);
    if (!fetcher) {
      fetcher = fetch;
    }
    var linkConfig = {
      http: { includeExtensions },
      options: requestOptions.fetchOptions,
      credentials: requestOptions.credentials,
      headers: requestOptions.headers
    };
    return new ApolloLink(function(operation) {
      var chosenURI = selectURI(operation, uri);
      var context = operation.getContext();
      var clientAwarenessHeaders = {};
      if (context.clientAwareness) {
        var _a4 = context.clientAwareness, name_1 = _a4.name, version2 = _a4.version;
        if (name_1) {
          clientAwarenessHeaders["apollographql-client-name"] = name_1;
        }
        if (version2) {
          clientAwarenessHeaders["apollographql-client-version"] = version2;
        }
      }
      var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);
      var contextConfig = {
        http: context.http,
        options: context.fetchOptions,
        credentials: context.credentials,
        headers: contextHeaders
      };
      var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;
      var controller;
      if (!options.signal) {
        var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
        controller = _controller;
        if (controller)
          options.signal = signal;
      }
      var definitionIsMutation = function(d) {
        return d.kind === "OperationDefinition" && d.operation === "mutation";
      };
      if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {
        options.method = "GET";
      }
      if (options.method === "GET") {
        var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
        if (parseError) {
          return fromError(parseError);
        }
        chosenURI = newURI;
      } else {
        try {
          options.body = serializeFetchParameter(body, "Payload");
        } catch (parseError2) {
          return fromError(parseError2);
        }
      }
      return new bundle_esm_default(function(observer) {
        fetcher(chosenURI, options).then(function(response) {
          operation.setContext({ response });
          return response;
        }).then(parseAndCheckHttpResponse(operation)).then(function(result2) {
          observer.next(result2);
          observer.complete();
          return result2;
        }).catch(function(err) {
          if (err.name === "AbortError")
            return;
          if (err.result && err.result.errors && err.result.data) {
            observer.next(err.result);
          }
          observer.error(err);
        });
        return function() {
          if (controller)
            controller.abort();
        };
      });
    });
  };
  function rewriteURIForGET(chosenURI, body) {
    var queryParams = [];
    var addQueryParam = function(key, value) {
      queryParams.push(key + "=" + encodeURIComponent(value));
    };
    if ("query" in body) {
      addQueryParam("query", body.query);
    }
    if (body.operationName) {
      addQueryParam("operationName", body.operationName);
    }
    if (body.variables) {
      var serializedVariables = void 0;
      try {
        serializedVariables = serializeFetchParameter(body.variables, "Variables map");
      } catch (parseError) {
        return { parseError };
      }
      addQueryParam("variables", serializedVariables);
    }
    if (body.extensions) {
      var serializedExtensions = void 0;
      try {
        serializedExtensions = serializeFetchParameter(body.extensions, "Extensions map");
      } catch (parseError) {
        return { parseError };
      }
      addQueryParam("extensions", serializedExtensions);
    }
    var fragment = "", preFragment = chosenURI;
    var fragmentStart = chosenURI.indexOf("#");
    if (fragmentStart !== -1) {
      fragment = chosenURI.substr(fragmentStart);
      preFragment = chosenURI.substr(0, fragmentStart);
    }
    var queryParamsPrefix = preFragment.indexOf("?") === -1 ? "?" : "&";
    var newURI = preFragment + queryParamsPrefix + queryParams.join("&") + fragment;
    return { newURI };
  }
  var HttpLink = function(_super) {
    __extends(HttpLink2, _super);
    function HttpLink2(opts) {
      return _super.call(this, createHttpLink(opts).request) || this;
    }
    return HttpLink2;
  }(ApolloLink);

  // node_modules/apollo-cache/lib/bundle.esm.js
  function queryFromPojo(obj) {
    var op = {
      kind: "OperationDefinition",
      operation: "query",
      name: {
        kind: "Name",
        value: "GeneratedClientQuery"
      },
      selectionSet: selectionSetFromObj(obj)
    };
    var out = {
      kind: "Document",
      definitions: [op]
    };
    return out;
  }
  function fragmentFromPojo(obj, typename) {
    var frag = {
      kind: "FragmentDefinition",
      typeCondition: {
        kind: "NamedType",
        name: {
          kind: "Name",
          value: typename || "__FakeType"
        }
      },
      name: {
        kind: "Name",
        value: "GeneratedClientQuery"
      },
      selectionSet: selectionSetFromObj(obj)
    };
    var out = {
      kind: "Document",
      definitions: [frag]
    };
    return out;
  }
  function selectionSetFromObj(obj) {
    if (typeof obj === "number" || typeof obj === "boolean" || typeof obj === "string" || typeof obj === "undefined" || obj === null) {
      return null;
    }
    if (Array.isArray(obj)) {
      return selectionSetFromObj(obj[0]);
    }
    var selections = [];
    Object.keys(obj).forEach(function(key) {
      var nestedSelSet = selectionSetFromObj(obj[key]);
      var field = {
        kind: "Field",
        name: {
          kind: "Name",
          value: key
        },
        selectionSet: nestedSelSet || void 0
      };
      selections.push(field);
    });
    var selectionSet = {
      kind: "SelectionSet",
      selections
    };
    return selectionSet;
  }
  var justTypenameQuery = {
    kind: "Document",
    definitions: [
      {
        kind: "OperationDefinition",
        operation: "query",
        name: null,
        variableDefinitions: null,
        directives: [],
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              alias: null,
              name: {
                kind: "Name",
                value: "__typename"
              },
              arguments: [],
              directives: [],
              selectionSet: null
            }
          ]
        }
      }
    ]
  };
  var ApolloCache = function() {
    function ApolloCache2() {
    }
    ApolloCache2.prototype.transformDocument = function(document2) {
      return document2;
    };
    ApolloCache2.prototype.transformForLink = function(document2) {
      return document2;
    };
    ApolloCache2.prototype.readQuery = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return this.read({
        query: options.query,
        variables: options.variables,
        optimistic
      });
    };
    ApolloCache2.prototype.readFragment = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return this.read({
        query: getFragmentQueryDocument(options.fragment, options.fragmentName),
        variables: options.variables,
        rootId: options.id,
        optimistic
      });
    };
    ApolloCache2.prototype.writeQuery = function(options) {
      this.write({
        dataId: "ROOT_QUERY",
        result: options.data,
        query: options.query,
        variables: options.variables
      });
    };
    ApolloCache2.prototype.writeFragment = function(options) {
      this.write({
        dataId: options.id,
        result: options.data,
        variables: options.variables,
        query: getFragmentQueryDocument(options.fragment, options.fragmentName)
      });
    };
    ApolloCache2.prototype.writeData = function(_a3) {
      var id = _a3.id, data = _a3.data;
      if (typeof id !== "undefined") {
        var typenameResult = null;
        try {
          typenameResult = this.read({
            rootId: id,
            optimistic: false,
            query: justTypenameQuery
          });
        } catch (e) {
        }
        var __typename = typenameResult && typenameResult.__typename || "__ClientData";
        var dataToWrite = Object.assign({ __typename }, data);
        this.writeFragment({
          id,
          fragment: fragmentFromPojo(dataToWrite, __typename),
          data: dataToWrite
        });
      } else {
        this.writeQuery({ query: queryFromPojo(data), data });
      }
    };
    return ApolloCache2;
  }();
  var Cache;
  (function(Cache3) {
  })(Cache || (Cache = {}));

  // node_modules/@wry/context/lib/context.esm.js
  var currentContext = null;
  var MISSING_VALUE = {};
  var idCounter = 1;
  var makeSlotClass = function() {
    return function() {
      function Slot2() {
        this.id = [
          "slot",
          idCounter++,
          Date.now(),
          Math.random().toString(36).slice(2)
        ].join(":");
      }
      Slot2.prototype.hasValue = function() {
        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {
          if (this.id in context_1.slots) {
            var value = context_1.slots[this.id];
            if (value === MISSING_VALUE)
              break;
            if (context_1 !== currentContext) {
              currentContext.slots[this.id] = value;
            }
            return true;
          }
        }
        if (currentContext) {
          currentContext.slots[this.id] = MISSING_VALUE;
        }
        return false;
      };
      Slot2.prototype.getValue = function() {
        if (this.hasValue()) {
          return currentContext.slots[this.id];
        }
      };
      Slot2.prototype.withValue = function(value, callback, args, thisArg) {
        var _a3;
        var slots = (_a3 = {
          __proto__: null
        }, _a3[this.id] = value, _a3);
        var parent = currentContext;
        currentContext = { parent, slots };
        try {
          return callback.apply(thisArg, args);
        } finally {
          currentContext = parent;
        }
      };
      Slot2.bind = function(callback) {
        var context = currentContext;
        return function() {
          var saved = currentContext;
          try {
            currentContext = context;
            return callback.apply(this, arguments);
          } finally {
            currentContext = saved;
          }
        };
      };
      Slot2.noContext = function(callback, args, thisArg) {
        if (currentContext) {
          var saved = currentContext;
          try {
            currentContext = null;
            return callback.apply(thisArg, args);
          } finally {
            currentContext = saved;
          }
        } else {
          return callback.apply(thisArg, args);
        }
      };
      return Slot2;
    }();
  };
  var globalKey = "@wry/context:Slot";
  var host = Array;
  var Slot = host[globalKey] || function() {
    var Slot2 = makeSlotClass();
    try {
      Object.defineProperty(host, globalKey, {
        value: host[globalKey] = Slot2,
        enumerable: false,
        writable: false,
        configurable: false
      });
    } finally {
      return Slot2;
    }
  }();
  var bind = Slot.bind;
  var noContext = Slot.noContext;

  // node_modules/optimism/lib/bundle.esm.js
  function defaultDispose() {
  }
  var Cache2 = function() {
    function Cache3(max, dispose) {
      if (max === void 0) {
        max = Infinity;
      }
      if (dispose === void 0) {
        dispose = defaultDispose;
      }
      this.max = max;
      this.dispose = dispose;
      this.map = /* @__PURE__ */ new Map();
      this.newest = null;
      this.oldest = null;
    }
    Cache3.prototype.has = function(key) {
      return this.map.has(key);
    };
    Cache3.prototype.get = function(key) {
      var entry = this.getEntry(key);
      return entry && entry.value;
    };
    Cache3.prototype.getEntry = function(key) {
      var entry = this.map.get(key);
      if (entry && entry !== this.newest) {
        var older = entry.older, newer = entry.newer;
        if (newer) {
          newer.older = older;
        }
        if (older) {
          older.newer = newer;
        }
        entry.older = this.newest;
        entry.older.newer = entry;
        entry.newer = null;
        this.newest = entry;
        if (entry === this.oldest) {
          this.oldest = newer;
        }
      }
      return entry;
    };
    Cache3.prototype.set = function(key, value) {
      var entry = this.getEntry(key);
      if (entry) {
        return entry.value = value;
      }
      entry = {
        key,
        value,
        newer: null,
        older: this.newest
      };
      if (this.newest) {
        this.newest.newer = entry;
      }
      this.newest = entry;
      this.oldest = this.oldest || entry;
      this.map.set(key, entry);
      return entry.value;
    };
    Cache3.prototype.clean = function() {
      while (this.oldest && this.map.size > this.max) {
        this.delete(this.oldest.key);
      }
    };
    Cache3.prototype.delete = function(key) {
      var entry = this.map.get(key);
      if (entry) {
        if (entry === this.newest) {
          this.newest = entry.older;
        }
        if (entry === this.oldest) {
          this.oldest = entry.newer;
        }
        if (entry.newer) {
          entry.newer.older = entry.older;
        }
        if (entry.older) {
          entry.older.newer = entry.newer;
        }
        this.map.delete(key);
        this.dispose(entry.value, key);
        return true;
      }
      return false;
    };
    return Cache3;
  }();
  var parentEntrySlot = new Slot();
  var reusableEmptyArray = [];
  var emptySetPool = [];
  var POOL_TARGET_SIZE = 100;
  function assert2(condition, optionalMessage) {
    if (!condition) {
      throw new Error(optionalMessage || "assertion failure");
    }
  }
  function valueIs(a, b) {
    var len = a.length;
    return len > 0 && len === b.length && a[len - 1] === b[len - 1];
  }
  function valueGet(value) {
    switch (value.length) {
      case 0:
        throw new Error("unknown value");
      case 1:
        return value[0];
      case 2:
        throw value[1];
    }
  }
  function valueCopy(value) {
    return value.slice(0);
  }
  var Entry = function() {
    function Entry2(fn, args) {
      this.fn = fn;
      this.args = args;
      this.parents = /* @__PURE__ */ new Set();
      this.childValues = /* @__PURE__ */ new Map();
      this.dirtyChildren = null;
      this.dirty = true;
      this.recomputing = false;
      this.value = [];
      ++Entry2.count;
    }
    Entry2.prototype.recompute = function() {
      assert2(!this.recomputing, "already recomputing");
      if (!rememberParent(this) && maybeReportOrphan(this)) {
        return void 0;
      }
      return mightBeDirty(this) ? reallyRecompute(this) : valueGet(this.value);
    };
    Entry2.prototype.setDirty = function() {
      if (this.dirty)
        return;
      this.dirty = true;
      this.value.length = 0;
      reportDirty(this);
      maybeUnsubscribe(this);
    };
    Entry2.prototype.dispose = function() {
      var _this = this;
      forgetChildren(this).forEach(maybeReportOrphan);
      maybeUnsubscribe(this);
      this.parents.forEach(function(parent) {
        parent.setDirty();
        forgetChild(parent, _this);
      });
    };
    Entry2.count = 0;
    return Entry2;
  }();
  function rememberParent(child) {
    var parent = parentEntrySlot.getValue();
    if (parent) {
      child.parents.add(parent);
      if (!parent.childValues.has(child)) {
        parent.childValues.set(child, []);
      }
      if (mightBeDirty(child)) {
        reportDirtyChild(parent, child);
      } else {
        reportCleanChild(parent, child);
      }
      return parent;
    }
  }
  function reallyRecompute(entry) {
    var originalChildren = forgetChildren(entry);
    parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);
    if (maybeSubscribe(entry)) {
      setClean(entry);
    }
    originalChildren.forEach(maybeReportOrphan);
    return valueGet(entry.value);
  }
  function recomputeNewValue(entry) {
    entry.recomputing = true;
    entry.value.length = 0;
    try {
      entry.value[0] = entry.fn.apply(null, entry.args);
    } catch (e) {
      entry.value[1] = e;
    }
    entry.recomputing = false;
  }
  function mightBeDirty(entry) {
    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
  }
  function setClean(entry) {
    entry.dirty = false;
    if (mightBeDirty(entry)) {
      return;
    }
    reportClean(entry);
  }
  function reportDirty(child) {
    child.parents.forEach(function(parent) {
      return reportDirtyChild(parent, child);
    });
  }
  function reportClean(child) {
    child.parents.forEach(function(parent) {
      return reportCleanChild(parent, child);
    });
  }
  function reportDirtyChild(parent, child) {
    assert2(parent.childValues.has(child));
    assert2(mightBeDirty(child));
    if (!parent.dirtyChildren) {
      parent.dirtyChildren = emptySetPool.pop() || /* @__PURE__ */ new Set();
    } else if (parent.dirtyChildren.has(child)) {
      return;
    }
    parent.dirtyChildren.add(child);
    reportDirty(parent);
  }
  function reportCleanChild(parent, child) {
    assert2(parent.childValues.has(child));
    assert2(!mightBeDirty(child));
    var childValue = parent.childValues.get(child);
    if (childValue.length === 0) {
      parent.childValues.set(child, valueCopy(child.value));
    } else if (!valueIs(childValue, child.value)) {
      parent.setDirty();
    }
    removeDirtyChild(parent, child);
    if (mightBeDirty(parent)) {
      return;
    }
    reportClean(parent);
  }
  function removeDirtyChild(parent, child) {
    var dc = parent.dirtyChildren;
    if (dc) {
      dc.delete(child);
      if (dc.size === 0) {
        if (emptySetPool.length < POOL_TARGET_SIZE) {
          emptySetPool.push(dc);
        }
        parent.dirtyChildren = null;
      }
    }
  }
  function maybeReportOrphan(entry) {
    return entry.parents.size === 0 && typeof entry.reportOrphan === "function" && entry.reportOrphan() === true;
  }
  function forgetChildren(parent) {
    var children = reusableEmptyArray;
    if (parent.childValues.size > 0) {
      children = [];
      parent.childValues.forEach(function(_value, child) {
        forgetChild(parent, child);
        children.push(child);
      });
    }
    assert2(parent.dirtyChildren === null);
    return children;
  }
  function forgetChild(parent, child) {
    child.parents.delete(parent);
    parent.childValues.delete(child);
    removeDirtyChild(parent, child);
  }
  function maybeSubscribe(entry) {
    if (typeof entry.subscribe === "function") {
      try {
        maybeUnsubscribe(entry);
        entry.unsubscribe = entry.subscribe.apply(null, entry.args);
      } catch (e) {
        entry.setDirty();
        return false;
      }
    }
    return true;
  }
  function maybeUnsubscribe(entry) {
    var unsubscribe = entry.unsubscribe;
    if (typeof unsubscribe === "function") {
      entry.unsubscribe = void 0;
      unsubscribe();
    }
  }
  var KeyTrie = function() {
    function KeyTrie2(weakness) {
      this.weakness = weakness;
    }
    KeyTrie2.prototype.lookup = function() {
      var array = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
      }
      return this.lookupArray(array);
    };
    KeyTrie2.prototype.lookupArray = function(array) {
      var node = this;
      array.forEach(function(key) {
        return node = node.getChildTrie(key);
      });
      return node.data || (node.data = /* @__PURE__ */ Object.create(null));
    };
    KeyTrie2.prototype.getChildTrie = function(key) {
      var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = /* @__PURE__ */ new WeakMap()) : this.strong || (this.strong = /* @__PURE__ */ new Map());
      var child = map.get(key);
      if (!child)
        map.set(key, child = new KeyTrie2(this.weakness));
      return child;
    };
    return KeyTrie2;
  }();
  function isObjRef(value) {
    switch (typeof value) {
      case "object":
        if (value === null)
          break;
      case "function":
        return true;
    }
    return false;
  }
  var keyTrie = new KeyTrie(typeof WeakMap === "function");
  function defaultMakeCacheKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return keyTrie.lookupArray(args);
  }
  var caches = /* @__PURE__ */ new Set();
  function wrap(originalFunction, options) {
    if (options === void 0) {
      options = /* @__PURE__ */ Object.create(null);
    }
    var cache = new Cache2(options.max || Math.pow(2, 16), function(entry) {
      return entry.dispose();
    });
    var disposable = !!options.disposable;
    var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;
    function optimistic() {
      if (disposable && !parentEntrySlot.hasValue()) {
        return void 0;
      }
      var key = makeCacheKey.apply(null, arguments);
      if (key === void 0) {
        return originalFunction.apply(null, arguments);
      }
      var args = Array.prototype.slice.call(arguments);
      var entry = cache.get(key);
      if (entry) {
        entry.args = args;
      } else {
        entry = new Entry(originalFunction, args);
        cache.set(key, entry);
        entry.subscribe = options.subscribe;
        if (disposable) {
          entry.reportOrphan = function() {
            return cache.delete(key);
          };
        }
      }
      var value = entry.recompute();
      cache.set(key, entry);
      caches.add(cache);
      if (!parentEntrySlot.hasValue()) {
        caches.forEach(function(cache2) {
          return cache2.clean();
        });
        caches.clear();
      }
      return disposable ? void 0 : value;
    }
    optimistic.dirty = function() {
      var key = makeCacheKey.apply(null, arguments);
      var child = key !== void 0 && cache.get(key);
      if (child) {
        child.setDirty();
      }
    };
    return optimistic;
  }

  // node_modules/apollo-cache-inmemory/lib/bundle.esm.js
  var haveWarned = false;
  function shouldWarn() {
    var answer = !haveWarned;
    if (!isTest()) {
      haveWarned = true;
    }
    return answer;
  }
  var HeuristicFragmentMatcher = function() {
    function HeuristicFragmentMatcher2() {
    }
    HeuristicFragmentMatcher2.prototype.ensureReady = function() {
      return Promise.resolve();
    };
    HeuristicFragmentMatcher2.prototype.canBypassInit = function() {
      return true;
    };
    HeuristicFragmentMatcher2.prototype.match = function(idValue, typeCondition, context) {
      var obj = context.store.get(idValue.id);
      var isRootQuery = idValue.id === "ROOT_QUERY";
      if (!obj) {
        return isRootQuery;
      }
      var _a3 = obj.__typename, __typename = _a3 === void 0 ? isRootQuery && "Query" : _a3;
      if (!__typename) {
        if (shouldWarn()) {
          invariant.warn("You're using fragments in your queries, but either don't have the addTypename:\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\n   can accurately match fragments.");
          invariant.warn("Could not find __typename on Fragment ", typeCondition, obj);
          invariant.warn("DEPRECATION WARNING: using fragments without __typename is unsupported behavior and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.");
        }
        return "heuristic";
      }
      if (__typename === typeCondition) {
        return true;
      }
      if (shouldWarn()) {
        invariant.error("You are using the simple (heuristic) fragment matcher, but your queries contain union or interface types. Apollo Client will not be able to accurately map fragments. To make this error go away, use the `IntrospectionFragmentMatcher` as described in the docs: https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher");
      }
      return "heuristic";
    };
    return HeuristicFragmentMatcher2;
  }();
  var IntrospectionFragmentMatcher = function() {
    function IntrospectionFragmentMatcher2(options) {
      if (options && options.introspectionQueryResultData) {
        this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);
        this.isReady = true;
      } else {
        this.isReady = false;
      }
      this.match = this.match.bind(this);
    }
    IntrospectionFragmentMatcher2.prototype.match = function(idValue, typeCondition, context) {
      false ? invariant(this.isReady, 1) : invariant(this.isReady, "FragmentMatcher.match() was called before FragmentMatcher.init()");
      var obj = context.store.get(idValue.id);
      var isRootQuery = idValue.id === "ROOT_QUERY";
      if (!obj) {
        return isRootQuery;
      }
      var _a3 = obj.__typename, __typename = _a3 === void 0 ? isRootQuery && "Query" : _a3;
      false ? invariant(__typename, 2) : invariant(__typename, "Cannot match fragment because __typename property is missing: " + JSON.stringify(obj));
      if (__typename === typeCondition) {
        return true;
      }
      var implementingTypes = this.possibleTypesMap[typeCondition];
      if (__typename && implementingTypes && implementingTypes.indexOf(__typename) > -1) {
        return true;
      }
      return false;
    };
    IntrospectionFragmentMatcher2.prototype.parseIntrospectionResult = function(introspectionResultData) {
      var typeMap = {};
      introspectionResultData.__schema.types.forEach(function(type) {
        if (type.kind === "UNION" || type.kind === "INTERFACE") {
          typeMap[type.name] = type.possibleTypes.map(function(implementingType) {
            return implementingType.name;
          });
        }
      });
      return typeMap;
    };
    return IntrospectionFragmentMatcher2;
  }();
  var hasOwn = Object.prototype.hasOwnProperty;
  var DepTrackingCache = function() {
    function DepTrackingCache2(data) {
      var _this = this;
      if (data === void 0) {
        data = /* @__PURE__ */ Object.create(null);
      }
      this.data = data;
      this.depend = wrap(function(dataId) {
        return _this.data[dataId];
      }, {
        disposable: true,
        makeCacheKey: function(dataId) {
          return dataId;
        }
      });
    }
    DepTrackingCache2.prototype.toObject = function() {
      return this.data;
    };
    DepTrackingCache2.prototype.get = function(dataId) {
      this.depend(dataId);
      return this.data[dataId];
    };
    DepTrackingCache2.prototype.set = function(dataId, value) {
      var oldValue = this.data[dataId];
      if (value !== oldValue) {
        this.data[dataId] = value;
        this.depend.dirty(dataId);
      }
    };
    DepTrackingCache2.prototype.delete = function(dataId) {
      if (hasOwn.call(this.data, dataId)) {
        delete this.data[dataId];
        this.depend.dirty(dataId);
      }
    };
    DepTrackingCache2.prototype.clear = function() {
      this.replace(null);
    };
    DepTrackingCache2.prototype.replace = function(newData) {
      var _this = this;
      if (newData) {
        Object.keys(newData).forEach(function(dataId) {
          _this.set(dataId, newData[dataId]);
        });
        Object.keys(this.data).forEach(function(dataId) {
          if (!hasOwn.call(newData, dataId)) {
            _this.delete(dataId);
          }
        });
      } else {
        Object.keys(this.data).forEach(function(dataId) {
          _this.delete(dataId);
        });
      }
    };
    return DepTrackingCache2;
  }();
  function defaultNormalizedCacheFactory(seed) {
    return new DepTrackingCache(seed);
  }
  var StoreReader = function() {
    function StoreReader2(_a3) {
      var _this = this;
      var _b = _a3 === void 0 ? {} : _a3, _c = _b.cacheKeyRoot, cacheKeyRoot = _c === void 0 ? new KeyTrie(canUseWeakMap) : _c, _d = _b.freezeResults, freezeResults = _d === void 0 ? false : _d;
      var _e = this, executeStoreQuery = _e.executeStoreQuery, executeSelectionSet = _e.executeSelectionSet, executeSubSelectedArray = _e.executeSubSelectedArray;
      this.freezeResults = freezeResults;
      this.executeStoreQuery = wrap(function(options) {
        return executeStoreQuery.call(_this, options);
      }, {
        makeCacheKey: function(_a4) {
          var query = _a4.query, rootValue = _a4.rootValue, contextValue = _a4.contextValue, variableValues = _a4.variableValues, fragmentMatcher2 = _a4.fragmentMatcher;
          if (contextValue.store instanceof DepTrackingCache) {
            return cacheKeyRoot.lookup(contextValue.store, query, fragmentMatcher2, JSON.stringify(variableValues), rootValue.id);
          }
        }
      });
      this.executeSelectionSet = wrap(function(options) {
        return executeSelectionSet.call(_this, options);
      }, {
        makeCacheKey: function(_a4) {
          var selectionSet = _a4.selectionSet, rootValue = _a4.rootValue, execContext = _a4.execContext;
          if (execContext.contextValue.store instanceof DepTrackingCache) {
            return cacheKeyRoot.lookup(execContext.contextValue.store, selectionSet, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);
          }
        }
      });
      this.executeSubSelectedArray = wrap(function(options) {
        return executeSubSelectedArray.call(_this, options);
      }, {
        makeCacheKey: function(_a4) {
          var field = _a4.field, array = _a4.array, execContext = _a4.execContext;
          if (execContext.contextValue.store instanceof DepTrackingCache) {
            return cacheKeyRoot.lookup(execContext.contextValue.store, field, array, JSON.stringify(execContext.variableValues));
          }
        }
      });
    }
    StoreReader2.prototype.readQueryFromStore = function(options) {
      return this.diffQueryAgainstStore(__assign(__assign({}, options), { returnPartialData: false })).result;
    };
    StoreReader2.prototype.diffQueryAgainstStore = function(_a3) {
      var store2 = _a3.store, query = _a3.query, variables = _a3.variables, previousResult = _a3.previousResult, _b = _a3.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a3.rootId, rootId = _c === void 0 ? "ROOT_QUERY" : _c, fragmentMatcherFunction = _a3.fragmentMatcherFunction, config = _a3.config;
      var queryDefinition = getQueryDefinition(query);
      variables = assign({}, getDefaultValues(queryDefinition), variables);
      var context = {
        store: store2,
        dataIdFromObject: config && config.dataIdFromObject,
        cacheRedirects: config && config.cacheRedirects || {}
      };
      var execResult = this.executeStoreQuery({
        query,
        rootValue: {
          type: "id",
          id: rootId,
          generated: true,
          typename: "Query"
        },
        contextValue: context,
        variableValues: variables,
        fragmentMatcher: fragmentMatcherFunction
      });
      var hasMissingFields = execResult.missing && execResult.missing.length > 0;
      if (hasMissingFields && !returnPartialData) {
        execResult.missing.forEach(function(info) {
          if (info.tolerable)
            return;
          throw false ? new InvariantError(8) : new InvariantError("Can't find field " + info.fieldName + " on object " + JSON.stringify(info.object, null, 2) + ".");
        });
      }
      if (previousResult) {
        if (equal(previousResult, execResult.result)) {
          execResult.result = previousResult;
        }
      }
      return {
        result: execResult.result,
        complete: !hasMissingFields
      };
    };
    StoreReader2.prototype.executeStoreQuery = function(_a3) {
      var query = _a3.query, rootValue = _a3.rootValue, contextValue = _a3.contextValue, variableValues = _a3.variableValues, _b = _a3.fragmentMatcher, fragmentMatcher2 = _b === void 0 ? defaultFragmentMatcher : _b;
      var mainDefinition = getMainDefinition(query);
      var fragments = getFragmentDefinitions(query);
      var fragmentMap = createFragmentMap(fragments);
      var execContext = {
        query,
        fragmentMap,
        contextValue,
        variableValues,
        fragmentMatcher: fragmentMatcher2
      };
      return this.executeSelectionSet({
        selectionSet: mainDefinition.selectionSet,
        rootValue,
        execContext
      });
    };
    StoreReader2.prototype.executeSelectionSet = function(_a3) {
      var _this = this;
      var selectionSet = _a3.selectionSet, rootValue = _a3.rootValue, execContext = _a3.execContext;
      var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;
      var finalResult = { result: null };
      var objectsToMerge = [];
      var object = contextValue.store.get(rootValue.id);
      var typename = object && object.__typename || rootValue.id === "ROOT_QUERY" && "Query" || void 0;
      function handleMissing(result2) {
        var _a4;
        if (result2.missing) {
          finalResult.missing = finalResult.missing || [];
          (_a4 = finalResult.missing).push.apply(_a4, result2.missing);
        }
        return result2.result;
      }
      selectionSet.selections.forEach(function(selection) {
        var _a4;
        if (!shouldInclude(selection, variables)) {
          return;
        }
        if (isField(selection)) {
          var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));
          if (typeof fieldResult !== "undefined") {
            objectsToMerge.push((_a4 = {}, _a4[resultKeyNameFromField(selection)] = fieldResult, _a4));
          }
        } else {
          var fragment = void 0;
          if (isInlineFragment(selection)) {
            fragment = selection;
          } else {
            fragment = fragmentMap[selection.name.value];
            if (!fragment) {
              throw false ? new InvariantError(9) : new InvariantError("No fragment named " + selection.name.value);
            }
          }
          var typeCondition = fragment.typeCondition && fragment.typeCondition.name.value;
          var match = !typeCondition || execContext.fragmentMatcher(rootValue, typeCondition, contextValue);
          if (match) {
            var fragmentExecResult = _this.executeSelectionSet({
              selectionSet: fragment.selectionSet,
              rootValue,
              execContext
            });
            if (match === "heuristic" && fragmentExecResult.missing) {
              fragmentExecResult = __assign(__assign({}, fragmentExecResult), { missing: fragmentExecResult.missing.map(function(info) {
                return __assign(__assign({}, info), { tolerable: true });
              }) });
            }
            objectsToMerge.push(handleMissing(fragmentExecResult));
          }
        }
      });
      finalResult.result = mergeDeepArray(objectsToMerge);
      if (this.freezeResults && true) {
        Object.freeze(finalResult.result);
      }
      return finalResult;
    };
    StoreReader2.prototype.executeField = function(object, typename, field, execContext) {
      var variables = execContext.variableValues, contextValue = execContext.contextValue;
      var fieldName = field.name.value;
      var args = argumentsObjectFromField(field, variables);
      var info = {
        resultKey: resultKeyNameFromField(field),
        directives: getDirectiveInfoFromField(field, variables)
      };
      var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);
      if (Array.isArray(readStoreResult.result)) {
        return this.combineExecResults(readStoreResult, this.executeSubSelectedArray({
          field,
          array: readStoreResult.result,
          execContext
        }));
      }
      if (!field.selectionSet) {
        assertSelectionSetForIdValue(field, readStoreResult.result);
        if (this.freezeResults && true) {
          maybeDeepFreeze(readStoreResult);
        }
        return readStoreResult;
      }
      if (readStoreResult.result == null) {
        return readStoreResult;
      }
      return this.combineExecResults(readStoreResult, this.executeSelectionSet({
        selectionSet: field.selectionSet,
        rootValue: readStoreResult.result,
        execContext
      }));
    };
    StoreReader2.prototype.combineExecResults = function() {
      var execResults = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        execResults[_i] = arguments[_i];
      }
      var missing;
      execResults.forEach(function(execResult) {
        if (execResult.missing) {
          missing = missing || [];
          missing.push.apply(missing, execResult.missing);
        }
      });
      return {
        result: execResults.pop().result,
        missing
      };
    };
    StoreReader2.prototype.executeSubSelectedArray = function(_a3) {
      var _this = this;
      var field = _a3.field, array = _a3.array, execContext = _a3.execContext;
      var missing;
      function handleMissing(childResult) {
        if (childResult.missing) {
          missing = missing || [];
          missing.push.apply(missing, childResult.missing);
        }
        return childResult.result;
      }
      array = array.map(function(item) {
        if (item === null) {
          return null;
        }
        if (Array.isArray(item)) {
          return handleMissing(_this.executeSubSelectedArray({
            field,
            array: item,
            execContext
          }));
        }
        if (field.selectionSet) {
          return handleMissing(_this.executeSelectionSet({
            selectionSet: field.selectionSet,
            rootValue: item,
            execContext
          }));
        }
        assertSelectionSetForIdValue(field, item);
        return item;
      });
      if (this.freezeResults && true) {
        Object.freeze(array);
      }
      return { result: array, missing };
    };
    return StoreReader2;
  }();
  function assertSelectionSetForIdValue(field, value) {
    if (!field.selectionSet && isIdValue(value)) {
      throw false ? new InvariantError(10) : new InvariantError("Missing selection set for object of type " + value.typename + " returned for query field " + field.name.value);
    }
  }
  function defaultFragmentMatcher() {
    return true;
  }
  function readStoreResolver(object, typename, fieldName, args, context, _a3) {
    var resultKey = _a3.resultKey, directives = _a3.directives;
    var storeKeyName = fieldName;
    if (args || directives) {
      storeKeyName = getStoreKeyName(storeKeyName, args, directives);
    }
    var fieldValue = void 0;
    if (object) {
      fieldValue = object[storeKeyName];
      if (typeof fieldValue === "undefined" && context.cacheRedirects && typeof typename === "string") {
        var type = context.cacheRedirects[typename];
        if (type) {
          var resolver = type[fieldName];
          if (resolver) {
            fieldValue = resolver(object, args, {
              getCacheKey: function(storeObj) {
                var id = context.dataIdFromObject(storeObj);
                return id && toIdValue({
                  id,
                  typename: storeObj.__typename
                });
              }
            });
          }
        }
      }
    }
    if (typeof fieldValue === "undefined") {
      return {
        result: fieldValue,
        missing: [{
          object,
          fieldName: storeKeyName,
          tolerable: false
        }]
      };
    }
    if (isJsonValue(fieldValue)) {
      fieldValue = fieldValue.json;
    }
    return {
      result: fieldValue
    };
  }
  var ObjectCache = function() {
    function ObjectCache2(data) {
      if (data === void 0) {
        data = /* @__PURE__ */ Object.create(null);
      }
      this.data = data;
    }
    ObjectCache2.prototype.toObject = function() {
      return this.data;
    };
    ObjectCache2.prototype.get = function(dataId) {
      return this.data[dataId];
    };
    ObjectCache2.prototype.set = function(dataId, value) {
      this.data[dataId] = value;
    };
    ObjectCache2.prototype.delete = function(dataId) {
      this.data[dataId] = void 0;
    };
    ObjectCache2.prototype.clear = function() {
      this.data = /* @__PURE__ */ Object.create(null);
    };
    ObjectCache2.prototype.replace = function(newData) {
      this.data = newData || /* @__PURE__ */ Object.create(null);
    };
    return ObjectCache2;
  }();
  var WriteError = function(_super) {
    __extends(WriteError2, _super);
    function WriteError2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.type = "WriteError";
      return _this;
    }
    return WriteError2;
  }(Error);
  function enhanceErrorWithDocument(error, document2) {
    var enhancedError = new WriteError("Error writing result to store for query:\n " + JSON.stringify(document2));
    enhancedError.message += "\n" + error.message;
    enhancedError.stack = error.stack;
    return enhancedError;
  }
  var StoreWriter = function() {
    function StoreWriter2() {
    }
    StoreWriter2.prototype.writeQueryToStore = function(_a3) {
      var query = _a3.query, result2 = _a3.result, _b = _a3.store, store2 = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a3.variables, dataIdFromObject = _a3.dataIdFromObject, fragmentMatcherFunction = _a3.fragmentMatcherFunction;
      return this.writeResultToStore({
        dataId: "ROOT_QUERY",
        result: result2,
        document: query,
        store: store2,
        variables,
        dataIdFromObject,
        fragmentMatcherFunction
      });
    };
    StoreWriter2.prototype.writeResultToStore = function(_a3) {
      var dataId = _a3.dataId, result2 = _a3.result, document2 = _a3.document, _b = _a3.store, store2 = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a3.variables, dataIdFromObject = _a3.dataIdFromObject, fragmentMatcherFunction = _a3.fragmentMatcherFunction;
      var operationDefinition = getOperationDefinition(document2);
      try {
        return this.writeSelectionSetToStore({
          result: result2,
          dataId,
          selectionSet: operationDefinition.selectionSet,
          context: {
            store: store2,
            processedData: {},
            variables: assign({}, getDefaultValues(operationDefinition), variables),
            dataIdFromObject,
            fragmentMap: createFragmentMap(getFragmentDefinitions(document2)),
            fragmentMatcherFunction
          }
        });
      } catch (e) {
        throw enhanceErrorWithDocument(e, document2);
      }
    };
    StoreWriter2.prototype.writeSelectionSetToStore = function(_a3) {
      var _this = this;
      var result2 = _a3.result, dataId = _a3.dataId, selectionSet = _a3.selectionSet, context = _a3.context;
      var variables = context.variables, store2 = context.store, fragmentMap = context.fragmentMap;
      selectionSet.selections.forEach(function(selection) {
        var _a4;
        if (!shouldInclude(selection, variables)) {
          return;
        }
        if (isField(selection)) {
          var resultFieldKey = resultKeyNameFromField(selection);
          var value = result2[resultFieldKey];
          if (typeof value !== "undefined") {
            _this.writeFieldToStore({
              dataId,
              value,
              field: selection,
              context
            });
          } else {
            var isDefered = false;
            var isClient = false;
            if (selection.directives && selection.directives.length) {
              isDefered = selection.directives.some(function(directive) {
                return directive.name && directive.name.value === "defer";
              });
              isClient = selection.directives.some(function(directive) {
                return directive.name && directive.name.value === "client";
              });
            }
            if (!isDefered && !isClient && context.fragmentMatcherFunction) {
              invariant.warn("Missing field " + resultFieldKey + " in " + JSON.stringify(result2, null, 2).substring(0, 100));
            }
          }
        } else {
          var fragment = void 0;
          if (isInlineFragment(selection)) {
            fragment = selection;
          } else {
            fragment = (fragmentMap || {})[selection.name.value];
            false ? invariant(fragment, 3) : invariant(fragment, "No fragment named " + selection.name.value + ".");
          }
          var matches = true;
          if (context.fragmentMatcherFunction && fragment.typeCondition) {
            var id = dataId || "self";
            var idValue = toIdValue({ id, typename: void 0 });
            var fakeContext = {
              store: new ObjectCache((_a4 = {}, _a4[id] = result2, _a4)),
              cacheRedirects: {}
            };
            var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);
            if (!isProduction() && match === "heuristic") {
              invariant.error("WARNING: heuristic fragment matching going on!");
            }
            matches = !!match;
          }
          if (matches) {
            _this.writeSelectionSetToStore({
              result: result2,
              selectionSet: fragment.selectionSet,
              dataId,
              context
            });
          }
        }
      });
      return store2;
    };
    StoreWriter2.prototype.writeFieldToStore = function(_a3) {
      var _b;
      var field = _a3.field, value = _a3.value, dataId = _a3.dataId, context = _a3.context;
      var variables = context.variables, dataIdFromObject = context.dataIdFromObject, store2 = context.store;
      var storeValue;
      var storeObject;
      var storeFieldName = storeKeyNameFromField(field, variables);
      if (!field.selectionSet || value === null) {
        storeValue = value != null && typeof value === "object" ? { type: "json", json: value } : value;
      } else if (Array.isArray(value)) {
        var generatedId = dataId + "." + storeFieldName;
        storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);
      } else {
        var valueDataId = dataId + "." + storeFieldName;
        var generated = true;
        if (!isGeneratedId(valueDataId)) {
          valueDataId = "$" + valueDataId;
        }
        if (dataIdFromObject) {
          var semanticId = dataIdFromObject(value);
          false ? invariant(!semanticId || !isGeneratedId(semanticId), 4) : invariant(!semanticId || !isGeneratedId(semanticId), 'IDs returned by dataIdFromObject cannot begin with the "$" character.');
          if (semanticId || typeof semanticId === "number" && semanticId === 0) {
            valueDataId = semanticId;
            generated = false;
          }
        }
        if (!isDataProcessed(valueDataId, field, context.processedData)) {
          this.writeSelectionSetToStore({
            dataId: valueDataId,
            result: value,
            selectionSet: field.selectionSet,
            context
          });
        }
        var typename = value.__typename;
        storeValue = toIdValue({ id: valueDataId, typename }, generated);
        storeObject = store2.get(dataId);
        var escapedId = storeObject && storeObject[storeFieldName];
        if (escapedId !== storeValue && isIdValue(escapedId)) {
          var hadTypename = escapedId.typename !== void 0;
          var hasTypename = typename !== void 0;
          var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;
          false ? invariant(!generated || escapedId.generated || typenameChanged, 5) : invariant(!generated || escapedId.generated || typenameChanged, "Store error: the application attempted to write an object with no provided id but the store already contains an id of " + escapedId.id + " for this object. The selectionSet that was trying to be written is:\n" + JSON.stringify(field));
          false ? invariant(!hadTypename || hasTypename, 6) : invariant(!hadTypename || hasTypename, "Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of " + escapedId.typename + " for the object of id " + escapedId.id + ". The selectionSet that was trying to be written is:\n" + JSON.stringify(field));
          if (escapedId.generated) {
            if (typenameChanged) {
              if (!generated) {
                store2.delete(escapedId.id);
              }
            } else {
              mergeWithGenerated(escapedId.id, storeValue.id, store2);
            }
          }
        }
      }
      storeObject = store2.get(dataId);
      if (!storeObject || !equal(storeValue, storeObject[storeFieldName])) {
        store2.set(dataId, __assign(__assign({}, storeObject), (_b = {}, _b[storeFieldName] = storeValue, _b)));
      }
    };
    StoreWriter2.prototype.processArrayValue = function(value, generatedId, selectionSet, context) {
      var _this = this;
      return value.map(function(item, index) {
        if (item === null) {
          return null;
        }
        var itemDataId = generatedId + "." + index;
        if (Array.isArray(item)) {
          return _this.processArrayValue(item, itemDataId, selectionSet, context);
        }
        var generated = true;
        if (context.dataIdFromObject) {
          var semanticId = context.dataIdFromObject(item);
          if (semanticId) {
            itemDataId = semanticId;
            generated = false;
          }
        }
        if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {
          _this.writeSelectionSetToStore({
            dataId: itemDataId,
            result: item,
            selectionSet,
            context
          });
        }
        return toIdValue({ id: itemDataId, typename: item.__typename }, generated);
      });
    };
    return StoreWriter2;
  }();
  function isGeneratedId(id) {
    return id[0] === "$";
  }
  function mergeWithGenerated(generatedKey, realKey, cache) {
    if (generatedKey === realKey) {
      return false;
    }
    var generated = cache.get(generatedKey);
    var real = cache.get(realKey);
    var madeChanges = false;
    Object.keys(generated).forEach(function(key) {
      var value = generated[key];
      var realValue = real[key];
      if (isIdValue(value) && isGeneratedId(value.id) && isIdValue(realValue) && !equal(value, realValue) && mergeWithGenerated(value.id, realValue.id, cache)) {
        madeChanges = true;
      }
    });
    cache.delete(generatedKey);
    var newRealValue = __assign(__assign({}, generated), real);
    if (equal(newRealValue, real)) {
      return madeChanges;
    }
    cache.set(realKey, newRealValue);
    return true;
  }
  function isDataProcessed(dataId, field, processedData) {
    if (!processedData) {
      return false;
    }
    if (processedData[dataId]) {
      if (processedData[dataId].indexOf(field) >= 0) {
        return true;
      } else {
        processedData[dataId].push(field);
      }
    } else {
      processedData[dataId] = [field];
    }
    return false;
  }
  var defaultConfig = {
    fragmentMatcher: new HeuristicFragmentMatcher(),
    dataIdFromObject: defaultDataIdFromObject,
    addTypename: true,
    resultCaching: true,
    freezeResults: false
  };
  function defaultDataIdFromObject(result2) {
    if (result2.__typename) {
      if (result2.id !== void 0) {
        return result2.__typename + ":" + result2.id;
      }
      if (result2._id !== void 0) {
        return result2.__typename + ":" + result2._id;
      }
    }
    return null;
  }
  var hasOwn$1 = Object.prototype.hasOwnProperty;
  var OptimisticCacheLayer = function(_super) {
    __extends(OptimisticCacheLayer2, _super);
    function OptimisticCacheLayer2(optimisticId, parent, transaction) {
      var _this = _super.call(this, /* @__PURE__ */ Object.create(null)) || this;
      _this.optimisticId = optimisticId;
      _this.parent = parent;
      _this.transaction = transaction;
      return _this;
    }
    OptimisticCacheLayer2.prototype.toObject = function() {
      return __assign(__assign({}, this.parent.toObject()), this.data);
    };
    OptimisticCacheLayer2.prototype.get = function(dataId) {
      return hasOwn$1.call(this.data, dataId) ? this.data[dataId] : this.parent.get(dataId);
    };
    return OptimisticCacheLayer2;
  }(ObjectCache);
  var InMemoryCache = function(_super) {
    __extends(InMemoryCache2, _super);
    function InMemoryCache2(config) {
      if (config === void 0) {
        config = {};
      }
      var _this = _super.call(this) || this;
      _this.watches = /* @__PURE__ */ new Set();
      _this.typenameDocumentCache = /* @__PURE__ */ new Map();
      _this.cacheKeyRoot = new KeyTrie(canUseWeakMap);
      _this.silenceBroadcast = false;
      _this.config = __assign(__assign({}, defaultConfig), config);
      if (_this.config.customResolvers) {
        invariant.warn("customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.");
        _this.config.cacheRedirects = _this.config.customResolvers;
      }
      if (_this.config.cacheResolvers) {
        invariant.warn("cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.");
        _this.config.cacheRedirects = _this.config.cacheResolvers;
      }
      _this.addTypename = !!_this.config.addTypename;
      _this.data = _this.config.resultCaching ? new DepTrackingCache() : new ObjectCache();
      _this.optimisticData = _this.data;
      _this.storeWriter = new StoreWriter();
      _this.storeReader = new StoreReader({
        cacheKeyRoot: _this.cacheKeyRoot,
        freezeResults: config.freezeResults
      });
      var cache = _this;
      var maybeBroadcastWatch = cache.maybeBroadcastWatch;
      _this.maybeBroadcastWatch = wrap(function(c) {
        return maybeBroadcastWatch.call(_this, c);
      }, {
        makeCacheKey: function(c) {
          if (c.optimistic) {
            return;
          }
          if (c.previousResult) {
            return;
          }
          if (cache.data instanceof DepTrackingCache) {
            return cache.cacheKeyRoot.lookup(c.query, JSON.stringify(c.variables));
          }
        }
      });
      return _this;
    }
    InMemoryCache2.prototype.restore = function(data) {
      if (data)
        this.data.replace(data);
      return this;
    };
    InMemoryCache2.prototype.extract = function(optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return (optimistic ? this.optimisticData : this.data).toObject();
    };
    InMemoryCache2.prototype.read = function(options) {
      if (typeof options.rootId === "string" && typeof this.data.get(options.rootId) === "undefined") {
        return null;
      }
      var fragmentMatcher2 = this.config.fragmentMatcher;
      var fragmentMatcherFunction = fragmentMatcher2 && fragmentMatcher2.match;
      return this.storeReader.readQueryFromStore({
        store: options.optimistic ? this.optimisticData : this.data,
        query: this.transformDocument(options.query),
        variables: options.variables,
        rootId: options.rootId,
        fragmentMatcherFunction,
        previousResult: options.previousResult,
        config: this.config
      }) || null;
    };
    InMemoryCache2.prototype.write = function(write) {
      var fragmentMatcher2 = this.config.fragmentMatcher;
      var fragmentMatcherFunction = fragmentMatcher2 && fragmentMatcher2.match;
      this.storeWriter.writeResultToStore({
        dataId: write.dataId,
        result: write.result,
        variables: write.variables,
        document: this.transformDocument(write.query),
        store: this.data,
        dataIdFromObject: this.config.dataIdFromObject,
        fragmentMatcherFunction
      });
      this.broadcastWatches();
    };
    InMemoryCache2.prototype.diff = function(query) {
      var fragmentMatcher2 = this.config.fragmentMatcher;
      var fragmentMatcherFunction = fragmentMatcher2 && fragmentMatcher2.match;
      return this.storeReader.diffQueryAgainstStore({
        store: query.optimistic ? this.optimisticData : this.data,
        query: this.transformDocument(query.query),
        variables: query.variables,
        returnPartialData: query.returnPartialData,
        previousResult: query.previousResult,
        fragmentMatcherFunction,
        config: this.config
      });
    };
    InMemoryCache2.prototype.watch = function(watch2) {
      var _this = this;
      this.watches.add(watch2);
      return function() {
        _this.watches.delete(watch2);
      };
    };
    InMemoryCache2.prototype.evict = function(query) {
      throw false ? new InvariantError(7) : new InvariantError("eviction is not implemented on InMemory Cache");
    };
    InMemoryCache2.prototype.reset = function() {
      this.data.clear();
      this.broadcastWatches();
      return Promise.resolve();
    };
    InMemoryCache2.prototype.removeOptimistic = function(idToRemove) {
      var toReapply = [];
      var removedCount = 0;
      var layer = this.optimisticData;
      while (layer instanceof OptimisticCacheLayer) {
        if (layer.optimisticId === idToRemove) {
          ++removedCount;
        } else {
          toReapply.push(layer);
        }
        layer = layer.parent;
      }
      if (removedCount > 0) {
        this.optimisticData = layer;
        while (toReapply.length > 0) {
          var layer_1 = toReapply.pop();
          this.performTransaction(layer_1.transaction, layer_1.optimisticId);
        }
        this.broadcastWatches();
      }
    };
    InMemoryCache2.prototype.performTransaction = function(transaction, optimisticId) {
      var _a3 = this, data = _a3.data, silenceBroadcast = _a3.silenceBroadcast;
      this.silenceBroadcast = true;
      if (typeof optimisticId === "string") {
        this.data = this.optimisticData = new OptimisticCacheLayer(optimisticId, this.optimisticData, transaction);
      }
      try {
        transaction(this);
      } finally {
        this.silenceBroadcast = silenceBroadcast;
        this.data = data;
      }
      this.broadcastWatches();
    };
    InMemoryCache2.prototype.recordOptimisticTransaction = function(transaction, id) {
      return this.performTransaction(transaction, id);
    };
    InMemoryCache2.prototype.transformDocument = function(document2) {
      if (this.addTypename) {
        var result2 = this.typenameDocumentCache.get(document2);
        if (!result2) {
          result2 = addTypenameToDocument(document2);
          this.typenameDocumentCache.set(document2, result2);
          this.typenameDocumentCache.set(result2, result2);
        }
        return result2;
      }
      return document2;
    };
    InMemoryCache2.prototype.broadcastWatches = function() {
      var _this = this;
      if (!this.silenceBroadcast) {
        this.watches.forEach(function(c) {
          return _this.maybeBroadcastWatch(c);
        });
      }
    };
    InMemoryCache2.prototype.maybeBroadcastWatch = function(c) {
      c.callback(this.diff({
        query: c.query,
        variables: c.variables,
        previousResult: c.previousResult && c.previousResult(),
        optimistic: c.optimistic
      }));
    };
    return InMemoryCache2;
  }(ApolloCache);

  // app/javascript/helpers/apolloClient.js
  var csrfToken = document.getElementsByName("csrf-token")[0] ? document.getElementsByName("csrf-token")[0].content : void 0;
  var httpLink = createHttpLink({
    uri: "/graphql",
    credentials: "include",
    headers: {
      "X-CSRF-Token": csrfToken
    }
  });
  var fragmentMatcher = new IntrospectionFragmentMatcher({
    introspectionQueryResultData: {
      __schema: {
        types: [
          {
            kind: "INTERFACE",
            name: "Resource",
            possibleTypes: [
              { name: "FileSet" },
              { name: "ScannedResource" },
              { name: "ScannedMap" }
            ]
          }
        ]
      }
    }
  });
  var client = new ApolloClient({
    link: httpLink,
    cache: new InMemoryCache({ fragmentMatcher })
  });
  var apolloClient_default = client;

  // app/javascript/helpers/mutationBuilder.js
  function MutationBuilder(resource, filesets) {
    this.filesetNum = filesets.length;
    this.query_template = "mutation UpdateResource(__inputs__: UpdateResourceInput!) { __mutations__ }";
    this.inputs = function() {
      let inputs = ["$input"];
      for (let i = 0; i < this.filesetNum; i++) {
        inputs.push("$fileset_" + i);
      }
      return inputs;
    };
    this.mutations = function() {
      let mutations = [];
      let mutation_template = "__mname__: updateResource(input: $__mname__) { resource { id, thumbnail { id, iiifServiceUrl, thumbnailUrl }, ... on ScannedResource { startPage, viewingHint, viewingDirection, members { id, label, thumbnail { id, thumbnailUrl, iiifServiceUrl } } }, ... on ScannedMap { startPage, viewingHint, viewingDirection, members { id, label, thumbnail { id, thumbnailUrl, iiifServiceUrl } } } }, errors }";
      let inputs = this.inputs();
      let mutationNum = inputs.length;
      for (let i = 0; i < mutationNum; i++) {
        mutations.push(mutation_template.replace(/__mname__/g, inputs[i]).substr(1));
      }
      return mutations;
    };
    this.variables = function() {
      let variables = {};
      variables.input = resource;
      for (let i = 0; i < this.filesetNum; i++) {
        variables["fileset_" + i] = filesets[i];
      }
      return variables;
    };
    this.build = function() {
      let request = this.query_template.replace("__inputs__", this.inputs().join(": UpdateResourceInput!,"));
      return request.replace("__mutations__", this.mutations().join());
    };
  }

  // node_modules/graphql-tag/node_modules/tslib/modules/index.js
  var import_tslib9 = __toESM(require_tslib2(), 1);
  var {
    __extends: __extends2,
    __assign: __assign2,
    __rest: __rest2,
    __decorate: __decorate2,
    __param: __param2,
    __metadata: __metadata2,
    __awaiter: __awaiter2,
    __generator: __generator2,
    __exportStar: __exportStar2,
    __createBinding: __createBinding2,
    __values: __values2,
    __read: __read2,
    __spread: __spread2,
    __spreadArrays: __spreadArrays2,
    __spreadArray,
    __await: __await2,
    __asyncGenerator: __asyncGenerator2,
    __asyncDelegator: __asyncDelegator2,
    __asyncValues: __asyncValues2,
    __makeTemplateObject: __makeTemplateObject2,
    __importStar: __importStar2,
    __importDefault: __importDefault2,
    __classPrivateFieldGet: __classPrivateFieldGet2,
    __classPrivateFieldSet: __classPrivateFieldSet2,
    __classPrivateFieldIn
  } = import_tslib9.default;

  // node_modules/graphql/index.mjs
  var import_graphql = __toESM(require_graphql(), 1);
  var import_type = __toESM(require_type(), 1);
  var import_language = __toESM(require_language(), 1);
  var import_execution = __toESM(require_execution(), 1);
  var import_subscription = __toESM(require_subscription(), 1);
  var import_validation = __toESM(require_validation(), 1);
  var import_error = __toESM(require_error(), 1);
  var import_utilities = __toESM(require_utilities(), 1);

  // node_modules/graphql-tag/lib/index.js
  var docCache = /* @__PURE__ */ new Map();
  var fragmentSourceMap = /* @__PURE__ */ new Map();
  var printFragmentWarnings = true;
  var experimentalFragmentVariables = false;
  function normalize(string2) {
    return string2.replace(/[\s,]+/g, " ").trim();
  }
  function cacheKeyFromLoc(loc) {
    return normalize(loc.source.body.substring(loc.start, loc.end));
  }
  function processFragments(ast) {
    var seenKeys = /* @__PURE__ */ new Set();
    var definitions = [];
    ast.definitions.forEach(function(fragmentDefinition) {
      if (fragmentDefinition.kind === "FragmentDefinition") {
        var fragmentName = fragmentDefinition.name.value;
        var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
        var sourceKeySet = fragmentSourceMap.get(fragmentName);
        if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
          if (printFragmentWarnings) {
            console.warn("Warning: fragment with name " + fragmentName + " already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
          }
        } else if (!sourceKeySet) {
          fragmentSourceMap.set(fragmentName, sourceKeySet = /* @__PURE__ */ new Set());
        }
        sourceKeySet.add(sourceKey);
        if (!seenKeys.has(sourceKey)) {
          seenKeys.add(sourceKey);
          definitions.push(fragmentDefinition);
        }
      } else {
        definitions.push(fragmentDefinition);
      }
    });
    return __assign2(__assign2({}, ast), { definitions });
  }
  function stripLoc(doc) {
    var workSet = new Set(doc.definitions);
    workSet.forEach(function(node) {
      if (node.loc)
        delete node.loc;
      Object.keys(node).forEach(function(key) {
        var value = node[key];
        if (value && typeof value === "object") {
          workSet.add(value);
        }
      });
    });
    var loc = doc.loc;
    if (loc) {
      delete loc.startToken;
      delete loc.endToken;
    }
    return doc;
  }
  function parseDocument(source) {
    var cacheKey = normalize(source);
    if (!docCache.has(cacheKey)) {
      var parsed = (0, import_language.parse)(source, {
        experimentalFragmentVariables,
        allowLegacyFragmentVariables: experimentalFragmentVariables
      });
      if (!parsed || parsed.kind !== "Document") {
        throw new Error("Not a valid GraphQL document.");
      }
      docCache.set(cacheKey, stripLoc(processFragments(parsed)));
    }
    return docCache.get(cacheKey);
  }
  function gql(literals) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (typeof literals === "string") {
      literals = [literals];
    }
    var result2 = literals[0];
    args.forEach(function(arg, i) {
      if (arg && arg.kind === "Document") {
        result2 += arg.loc.source.body;
      } else {
        result2 += arg;
      }
      result2 += literals[i + 1];
    });
    return parseDocument(result2);
  }
  function resetCaches() {
    docCache.clear();
    fragmentSourceMap.clear();
  }
  function disableFragmentWarnings() {
    printFragmentWarnings = false;
  }
  function enableExperimentalFragmentVariables() {
    experimentalFragmentVariables = true;
  }
  function disableExperimentalFragmentVariables() {
    experimentalFragmentVariables = false;
  }
  var extras = {
    gql,
    resetCaches,
    disableFragmentWarnings,
    enableExperimentalFragmentVariables,
    disableExperimentalFragmentVariables
  };
  (function(gql_1) {
    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
  })(gql || (gql = {}));
  gql["default"] = gql;
  var lib_default = gql;

  // app/javascript/store/vuex/actions.js
  var actions = {
    cut(context, items) {
      context.commit("CUT", items);
    },
    paste(context, items) {
      context.commit("PASTE", items);
    },
    select(context, selectList) {
      context.commit("SELECT", selectList);
    },
    updateChanges(context, changeList) {
      context.commit("UPDATE_CHANGES", changeList);
    },
    updateItems(context, items) {
      context.commit("UPDATE_ITEMS", items);
    },
    updateStartCanvas(context, startCanvas) {
      context.commit("UPDATE_STARTCANVAS", startCanvas);
    },
    updateThumbnail(context, thumbnail) {
      context.commit("UPDATE_THUMBNAIL", thumbnail);
    },
    updateViewHint(context, value) {
      context.commit("UPDATE_VIEWHINT", value);
    },
    updateViewDir(context, value) {
      context.commit("UPDATE_VIEWDIR", value);
    },
    async loadImageCollectionGql(context, resource) {
      if (resource == null) {
        context.commit("CHANGE_RESOURCE_LOAD_STATE", "LOADING_ERROR");
        console.error("Failed to retrieve the resource");
        return;
      }
      let id = resource.id;
      console.time(`getResourceById ${id}`);
      const query = lib_default`
        query GetResource($id: ID!) {
          resource(id: $id) {
             id,
             label,
             viewingHint,
             thumbnail {
               id,
               thumbnailUrl,
               iiifServiceUrl
             },
             ... on ScannedResource {
               viewingDirection,
               startPage
             },
             ... on ScannedMap {
               viewingDirection,
               startPage
             },
             __typename,
             members {
               id,
               label,
               thumbnail {
                id,
               	thumbnailUrl,
                iiifServiceUrl
               },
               viewingHint,
               __typename
             }
          }
        }`;
      const variables = {
        id
      };
      try {
        const response = await apolloClient_default.query({
          query,
          variables
        });
        context.commit("SET_RESOURCE", response.data.resource);
      } catch (err) {
        context.commit("CHANGE_RESOURCE_LOAD_STATE", "LOADING_ERROR");
        console.error(err);
      }
      console.timeEnd(`getResourceById ${resource.id}`);
    },
    async saveStateGql(context, resource) {
      context.commit("SAVED_STATE", "SAVING");
      let newResource = resource.body;
      let newFilesets = resource.filesets;
      let mb = new MutationBuilder(newResource, newFilesets);
      const template = mb.build();
      const mutation = lib_default`${template}`;
      const variables = mb.variables();
      return apolloClient_default.mutate({ mutation, variables }).then(() => {
        context.commit("SAVED_STATE", "SAVED");
        context.commit("APPLY_STATE");
      }).catch((err) => {
        console.error(err);
        context.commit("SAVED_STATE", "ERROR");
      });
    }
  };
  var actions_default = actions;

  // app/javascript/store/resource/index.js
  var resourceState = {
    resource: {
      id: "",
      resourceClassName: "",
      bibId: "",
      label: "Resource not available.",
      thumbnail: "",
      startCanvas: "",
      isMultiVolume: false,
      viewingHint: null,
      viewingDirection: null,
      members: [],
      loadState: "NOT_LOADED",
      saveState: "NOT_SAVED",
      ogState: {}
    }
  };
  var resourceMutations = {
    APPLY_STATE(state) {
      state.gallery.ogItems = state.gallery.items;
      state.gallery.changeList = [];
      state.resource.saveState = "NOT_SAVED";
    },
    CHANGE_RESOURCE_LOAD_STATE(state, loadState) {
      state.resource.loadState = loadState;
    },
    SAVED_STATE(state, saveStatus) {
      state.resource.saveState = saveStatus;
    },
    SET_RESOURCE(state, resource) {
      state.resource.id = resource.id;
      state.resource.resourceClassName = resource.__typename;
      state.resource.label = resource.label;
      state.resource.startCanvas = resource.startPage;
      state.resource.viewingHint = resource.viewingHint;
      state.resource.viewingDirection = resource.viewingDirection;
      state.resource.thumbnail = resource.thumbnail != null ? resource.thumbnail.id : null;
      state.resource.members = resource.members;
      const items = resource.members.map((member) => ({
        id: member.id,
        viewingHint: member.viewingHint != null ? member.viewingHint : "single",
        caption: member.label,
        service: member["thumbnail"] && typeof member.thumbnail.iiifServiceUrl != "undefined" ? member.thumbnail.iiifServiceUrl : Global.figgy.resource.defaultThumbnail,
        mediaUrl: member["thumbnail"] && typeof member.thumbnail.iiifServiceUrl != "undefined" ? member.thumbnail.iiifServiceUrl + "/full/300,/0/default.jpg" : Global.figgy.resource.defaultThumbnail
      }));
      state.gallery.items = items;
      state.gallery.ogItems = items;
      state.resource.loadState = "LOADED";
      state.resource.ogState = {
        startCanvas: resource.startPage,
        thumbnail: resource.thumbnail != null ? resource.thumbnail.id : null,
        viewingHint: resource.viewingHint,
        viewingDirection: resource.viewingDirection
      };
    },
    UPDATE_STARTCANVAS(state, startCanvas) {
      state.resource.startCanvas = startCanvas;
    },
    UPDATE_THUMBNAIL(state, thumbnail) {
      state.resource.thumbnail = thumbnail;
    },
    UPDATE_VIEWDIR(state, viewDir) {
      state.resource.viewingDirection = viewDir;
    },
    UPDATE_VIEWHINT(state, viewHint) {
      state.resource.viewingHint = viewHint;
    }
  };
  var resourceGetters = {
    getMemberCount: (state) => {
      return state.resource.members.length;
    },
    isMultiVolume: (state) => {
      const volumes = state.resource.members.filter((member) => member.__typename === "ScannedResource");
      return volumes.length > 0 ? true : false;
    },
    orderChanged: (state) => {
      let ogOrder = JSON.stringify(state.gallery.ogItems.map((item) => item.id));
      let imgOrder = JSON.stringify(state.gallery.items.map((item) => item.id));
      return ogOrder !== imgOrder;
    },
    stateChanged: (state, getters) => {
      var propsChanged = [];
      propsChanged.push(state.resource.ogState.thumbnail !== state.resource.thumbnail);
      propsChanged.push(state.resource.ogState.startCanvas !== state.resource.startCanvas);
      propsChanged.push(state.resource.ogState.viewingHint !== state.resource.viewingHint);
      propsChanged.push(state.resource.ogState.viewingDirection !== state.resource.viewingDirection);
      propsChanged.push(state.gallery.changeList.length > 0);
      propsChanged.push(getters.orderChanged);
      if (propsChanged.indexOf(true) > -1) {
        return true;
      } else {
        return false;
      }
    }
  };

  // app/javascript/store/index.js
  var import_lux_design_system = __toESM(require_system());
  import_vue_common.default.use(vuex_esm_default);
  var resourceModule = {
    state: resourceState,
    mutations: resourceMutations,
    getters: resourceGetters,
    modules: {
      gallery: import_lux_design_system.modules.galleryModule
    }
  };
  var store = new vuex_esm_default.Store({
    actions: actions_default,
    modules: {
      ordermanager: resourceModule,
      gallery: import_lux_design_system.modules.galleryModule
    }
  });
  var store_default = store;

  // app/javascript/components/document_adder.vue
  var import_axios = __toESM(require_axios2());
  var __vue_script__ = {
    props: {
      resourceId: {
        type: String,
        required: true
      }
    },
    data() {
      return {
        recordings: [],
        recording_query: "",
        addingTracks: false
      };
    },
    methods: {
      fileSetFormData(fileSetIds) {
        let form = new FormData();
        form.append("_method", "patch");
        for (var id of fileSetIds) {
          form.append("playlist[file_set_ids][]", id);
        }
        return form;
      },
      addTrack(track) {
        this.addingTracks = true;
        import_axios.default.post(
          `/concern/playlists/${this.resourceId}`,
          this.fileSetFormData([track.id])
        ).then(function(response) {
          window.location = response.request.responseURL;
        });
      },
      addTracks(recording) {
        if (recording.tracks.length < 1) {
          return;
        }
        this.addingTracks = true;
        import_axios.default.post(
          `/concern/playlists/${this.resourceId}`,
          this.fileSetFormData(recording.tracks.map(
            function(track) {
              return track.id;
            }
          ))
        ).then(function(response) {
          window.location = response.request.responseURL;
        });
      },
      tracks_by_recording_id(recordingId) {
        const query = lib_default`
        query GetResource($id: ID!) {
          resource(id: $id) {
             members {
               id,
               label
             }
          }
        }`;
        const variables = {
          id: recordingId
        };
        return apolloClient_default.query({
          query,
          variables
        }).then(function(data) {
          return data.data.resource.members;
        });
      },
      search(event) {
        if (this.recording_query.trim() === "") {
          this.recordings = [];
          return;
        }
        let vm = this;
        fetch(`/catalog.json?f[internal_resource_ssim][]=ScannedResource&f[change_set_ssim][]=recording&q=${this.recording_query}&async=true`).then(function(response) {
          return response.json();
        }).then(function(data) {
          return data["response"]["docs"].map(
            function(recordingDocument) {
              const titles = recordingDocument["title_ssim"] || recordingDocument["figgy_title_ssim"];
              return {
                id: recordingDocument["id"],
                title: titles[0],
                tracks: []
              };
            }
          );
        }).then(function(recordings) {
          let promises = [];
          for (let recording of recordings) {
            promises.concat(vm.tracks_by_recording_id(recording.id).then(function(tracks) {
              recording.tracks = tracks;
            }));
          }
          Promise.all(promises).then(function() {
            vm.recordings = recordings;
          });
        });
      }
    }
  };
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "playlist-tracks" }, [
      _c("h2", [_vm._v("Search for Recordings to Add Tracks")]),
      _vm._v(" "),
      _c(
        "form",
        {
          on: {
            submit: function($event) {
              $event.preventDefault();
              return _vm.search.apply(null, arguments);
            }
          }
        },
        [
          _c("div", { staticClass: "input-group" }, [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.recording_query,
                  expression: "recording_query"
                }
              ],
              staticClass: "form-control",
              attrs: { name: "recording-query", placeholder: "Search" },
              domProps: { value: _vm.recording_query },
              on: {
                input: function($event) {
                  if ($event.target.composing) {
                    return;
                  }
                  _vm.recording_query = $event.target.value;
                }
              }
            }),
            _vm._v(" "),
            _vm._m(0)
          ])
        ]
      ),
      _vm._v(" "),
      _c("div", [
        _c(
          "table",
          { staticClass: "table table-striped" },
          [
            _vm.recordings.length > 0 ? [_vm._m(1)] : _vm._e(),
            _vm._v(" "),
            _c(
              "tbody",
              [
                _vm._l(_vm.recordings, function(recording) {
                  return [
                    _c("tr", { key: recording.id }, [
                      _c("td", [
                        _c("a", { attrs: { href: "/catalog/" + recording.id } }, [
                          _vm._v(
                            "\n                " + _vm._s(recording.title) + "\n              "
                          )
                        ])
                      ]),
                      _vm._v(" "),
                      _c("td", [
                        _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: {
                              disabled: _vm.addingTracks || recording.tracks.length == 0
                            },
                            on: {
                              click: function($event) {
                                return _vm.addTracks(recording);
                              }
                            }
                          },
                          [
                            _vm._v(
                              "\n                Add All Tracks\n              "
                            )
                          ]
                        )
                      ])
                    ]),
                    _vm._v(" "),
                    _vm._l(recording.tracks, function(track) {
                      return _c(
                        "tr",
                        { key: track.id, staticClass: "track-cell" },
                        [
                          _c("td", [
                            _vm._v(
                              "\n              " + _vm._s(track.label) + "\n            "
                            )
                          ]),
                          _vm._v(" "),
                          _c("td", [
                            _c(
                              "button",
                              {
                                staticClass: "btn btn-primary",
                                attrs: { disabled: _vm.addingTracks },
                                on: {
                                  click: function($event) {
                                    return _vm.addTrack(track);
                                  }
                                }
                              },
                              [
                                _vm._v(
                                  "\n                Add Track\n              "
                                )
                              ]
                            )
                          ])
                        ]
                      );
                    })
                  ];
                })
              ],
              2
            )
          ],
          2
        )
      ])
    ]);
  };
  var __vue_staticRenderFns__ = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", { staticClass: "input-group-btn" }, [
        _c("button", { staticClass: "btn btn-primary" }, [
          _vm._v("\n          Search\n        ")
        ])
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("thead", [
        _c("th", [_vm._v("Title")]),
        _vm._v(" "),
        _c("th", [_vm._v("Actions")])
      ]);
    }
  ];
  __vue_render__._withStripped = true;
  var __vue_inject_styles__ = function(inject) {
    if (!inject)
      return;
    inject("data-v-4b3cf119_0", { source: "\n.table > tbody > tr.track-cell > td {\n  padding-left: 20px;\n}\n", map: { "version": 3, "sources": ["app/javascript/components/document_adder.vue"], "names": [], "mappings": ";AAiMA;EACA,kBAAA;AACA", "file": "document_adder.vue", "sourcesContent": [`<template>
  <div class="playlist-tracks">
    <h2>Search for Recordings to Add Tracks</h2>
    <form @submit.prevent="search">
      <div class="input-group">
        <input
          v-model="recording_query"
          name="recording-query"
          placeholder="Search"
          class="form-control"
        >
        <span class="input-group-btn">
          <button
            class="btn btn-primary"
          >
            Search
          </button>
        </span>
      </div>
    </form>
    <div>
      <table class="table table-striped">
        <template v-if="recordings.length > 0">
          <thead>
            <th>Title</th>
            <th>Actions</th>
          </thead>
        </template>
        <tbody>
          <template
            v-for="recording in recordings"
          >
            <tr
              :key="recording.id"
            >
              <td>
                <a :href="'/catalog/' + recording.id">
                  {{ recording.title }}
                </a>
              </td>
              <td>
                <button
                  class="btn btn-primary"
                  :disabled="addingTracks || recording.tracks.length == 0"
                  @click="addTracks(recording)"
                >
                  Add All Tracks
                </button>
              </td>
            </tr>
            <tr
              v-for="track in recording.tracks"
              :key="track.id"
              class="track-cell"
            >
              <td>
                {{ track.label }}
              </td>
              <td>
                <button
                  class="btn btn-primary"
                  :disabled="addingTracks"
                  @click="addTrack(track)"
                >
                  Add Track
                </button>
              </td>
            </tr>
          </template>
        </tbody>
      </table>
    </div>
  </div>
</template>
<script>
import axios from 'axios'
import apollo from '../helpers/apolloClient'
import gql from 'graphql-tag'
export default {
  props: {
    resourceId: {
      type: String,
      required: true
    }
  },
  data () {
    return {
      recordings: [],
      recording_query: '',
      addingTracks: false
    }
  },
  methods: {
    fileSetFormData (fileSetIds) {
      let form = new FormData()
      form.append('_method', 'patch')
      for (var id of fileSetIds) {
        form.append('playlist[file_set_ids][]', id)
      }
      return form
    },
    addTrack (track) {
      this.addingTracks = true
      axios.post(\`/concern/playlists/\${this.resourceId}\`,
        this.fileSetFormData([track.id])
      )
        .then(function (response) {
          window.location = response.request.responseURL
        })
    },
    addTracks (recording) {
      if (recording.tracks.length < 1) {
        return
      }
      this.addingTracks = true
      axios.post(\`/concern/playlists/\${this.resourceId}\`,
        this.fileSetFormData(recording.tracks.map(
          function (track) {
            return track.id
          }
        ))
      )
        .then(function (response) {
          window.location = response.request.responseURL
        })
    },
    tracks_by_recording_id (recordingId) {
      const query = gql\`
        query GetResource($id: ID!) {
          resource(id: $id) {
             members {
               id,
               label
             }
          }
        }\`

      const variables = {
        id: recordingId
      }
      return apollo.query({
        query, variables
      }).then(function (data) {
        return data.data.resource.members
      })
    },
    search (event) {
      if (this.recording_query.trim() === '') {
        this.recordings = []
        return
      }
      let vm = this

      // Get all recording titles and IDs from a catalog search (Solr).
      // Ensure that this AJAX request does not trigger the caching of query
      // parameters (this is the default behavior for Blacklight 6 Controllers)
      fetch(\`/catalog.json?f[internal_resource_ssim][]=ScannedResource&f[change_set_ssim][]=recording&q=\${this.recording_query}&async=true\`)
        .then(function (response) {
          return response.json()
        })
        .then(function (data) { // Map to objects
          return data['response']['docs'].map(
            function (recordingDocument) {
              const titles = recordingDocument['title_ssim'] ||
recordingDocument['figgy_title_ssim']
              return {
                id: recordingDocument['id'],
                title: titles[0],
                tracks: []
              }
            }
          )
        })
        .then(function (recordings) {
          let promises = []
          // Set tracks for every recording, store promises in an array so we
          // can tell when they resolve.
          for (let recording of recordings) {
            promises.concat(vm.tracks_by_recording_id(recording.id).then(function (tracks) {
              recording.tracks = tracks
            }))
          }
          // When all the tracks are set, update the Vue data to be now-complete
          // recordings array.
          Promise.all(promises).then(function () {
            vm.recordings = recordings
          })
        })
    }
  }
}
<\/script>
<style scope>
.table > tbody > tr.track-cell > td {
  padding-left: 20px;
}
</style>
`] }, media: void 0 });
  };
  var __vue_scope_id__ = void 0;
  var __vue_module_identifier__ = void 0;
  var __vue_is_functional_template__ = false;
  function __vue_normalize__(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/document_adder.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__() {
    const styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__ = /* @__PURE__ */ __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    __vue_create_injector__,
    void 0,
    void 0
  );
  var document_adder_default = __vue_component__;

  // app/javascript/components/playlist_members.vue
  var import_axios2 = __toESM(require_axios2());

  // app/javascript/components/playlist_member.vue
  var __vue_script__2 = {
    name: "PlaylistMember",
    props: {
      resource: {
        type: Object,
        default: null
      }
    },
    data() {
      const resourceId = this.resource.id;
      return {
        id: resourceId.id,
        detachClicked: false,
        checked: false
      };
    },
    methods: {
      detach: function(event) {
        this.detachClicked = true;
        let buttons = document.getElementsByClassName("detach-btn");
        for (let b of buttons) {
          b.disabled = true;
        }
        this.$emit("update", [this.id]);
      },
      checkboxChanged: function(event) {
        if (event.target.checked) {
          this.$emit("idSelected", this.id);
        } else {
          this.$emit("idRemoved", this.id);
        }
      }
    }
  };
  var __vue_render__2 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("tr", [
      _c("td", { staticClass: "member-checkbox" }, [
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.checked,
              expression: "checked"
            }
          ],
          attrs: { id: "checkbox", type: "checkbox" },
          domProps: {
            checked: Array.isArray(_vm.checked) ? _vm._i(_vm.checked, null) > -1 : _vm.checked
          },
          on: {
            change: [
              function($event) {
                var $$a = _vm.checked, $$el = $event.target, $$c = $$el.checked ? true : false;
                if (Array.isArray($$a)) {
                  var $$v = null, $$i = _vm._i($$a, $$v);
                  if ($$el.checked) {
                    $$i < 0 && (_vm.checked = $$a.concat([$$v]));
                  } else {
                    $$i > -1 && (_vm.checked = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                  }
                } else {
                  _vm.checked = $$c;
                }
              },
              _vm.checkboxChanged
            ]
          }
        })
      ]),
      _vm._v(" "),
      _c("td", [
        _vm._v("\n    " + _vm._s(_vm.resource.label[0]) + " ("),
        _c("a", { attrs: { href: "" + _vm.resource.recording_url } }, [
          _vm._v("\n      " + _vm._s(_vm.resource.recording_title) + "\n    ")
        ]),
        _vm._v(")\n  ")
      ]),
      _vm._v(" "),
      _c("td", [
        _c(
          "button",
          {
            staticClass: "btn btn-danger detach-btn",
            on: {
              click: function($event) {
                return _vm.detach($event);
              }
            }
          },
          [
            _vm.detachClicked ? _c("loader", { attrs: { size: "x-small", wrapper: "span" } }) : _vm._e(),
            _vm._v(" Detach\n    ")
          ],
          1
        )
      ])
    ]);
  };
  var __vue_staticRenderFns__2 = [];
  __vue_render__2._withStripped = true;
  var __vue_inject_styles__2 = function(inject) {
    if (!inject)
      return;
    inject("data-v-a14cf150_0", { source: "\n.lux-loader {\n  display: inline-block;\n}\n.detach-btn {\n  width: 150px;\n}\n", map: { "version": 3, "sources": ["app/javascript/components/playlist_member.vue"], "names": [], "mappings": ";AAuEA;EACA,qBAAA;AACA;AACA;EACA,YAAA;AACA", "file": "playlist_member.vue", "sourcesContent": [`<template>
  <tr>
    <td class="member-checkbox">
      <input
        id="checkbox"
        v-model="checked"
        type="checkbox"
        @change="checkboxChanged"
      >
    </td>
    <td>
      {{ resource.label[0] }} (<a :href="\`\${resource.recording_url}\`">
        {{ resource.recording_title }}
      </a>)
    </td>
    <td>
      <button
        class="btn btn-danger detach-btn"
        @click="detach($event)"
      >
        <loader
          v-if="detachClicked"
          size="x-small"
          wrapper="span"
        /> Detach
      </button>
    </td>
  </tr>
</template>
<script>

export default {
  name: 'PlaylistMember',
  props: {
    resource: {
      type: Object,
      default: null
    }
  },
  data () {
    // This is due to the fact that Valkyrie::ID objects are not serialized as strings
    const resourceId = this.resource.id
    return {
      id: resourceId.id,
      detachClicked: false,
      checked: false
    }
  },
  methods: {
    detach: function (event) {
      // add spinner to button that was clicked
      this.detachClicked = true
      // disable all detach buttons
      let buttons = document.getElementsByClassName('detach-btn')
      for (let b of buttons) {
        b.disabled = true
      }
      // do the detach
      this.$emit('update', [this.id])
    },
    checkboxChanged: function (event) {
      if (event.target.checked) {
        this.$emit('idSelected', this.id)
      } else {
        this.$emit('idRemoved', this.id)
      }
    }
  }
}
<\/script>
<style scope>
.lux-loader {
  display: inline-block;
}
.detach-btn {
  width: 150px;
}
</style>
`] }, media: void 0 });
  };
  var __vue_scope_id__2 = void 0;
  var __vue_module_identifier__2 = void 0;
  var __vue_is_functional_template__2 = false;
  function __vue_normalize__2(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/playlist_member.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__2() {
    const styles = __vue_create_injector__2.styles || (__vue_create_injector__2.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__2 = /* @__PURE__ */ __vue_normalize__2(
    { render: __vue_render__2, staticRenderFns: __vue_staticRenderFns__2 },
    __vue_inject_styles__2,
    __vue_script__2,
    __vue_scope_id__2,
    __vue_is_functional_template__2,
    __vue_module_identifier__2,
    false,
    __vue_create_injector__2,
    void 0,
    void 0
  );
  var playlist_member_default = __vue_component__2;

  // app/javascript/components/playlist_members.vue
  var __vue_script__3 = {
    name: "PlaylistMembers",
    components: {
      "playlist-member": playlist_member_default
    },
    props: {
      resourceId: {
        type: String,
        required: true
      },
      members: {
        type: Array,
        default: function() {
          return [];
        }
      }
    },
    data() {
      return { submitting: false, selectedFileIds: [] };
    },
    methods: {
      buildFormData() {
        let form = new FormData();
        form.append("_method", "delete");
        return form;
      },
      submit() {
        return false;
      },
      detach(proxyIds) {
        let vm = this;
        this.submitting = true;
        let promise = Promise.resolve();
        for (let proxyId of proxyIds) {
          promise = promise.then((response) => {
            return import_axios2.default.post(
              `/concern/playlists/${proxyId}`,
              this.buildFormData()
            );
          });
        }
        promise.then(function(response) {
          vm.submitting = false;
          window.location.reload();
        });
      },
      detachAll() {
        let buttons = document.getElementsByClassName("detach-btn");
        for (let b of buttons) {
          b.disabled = true;
        }
        this.detach(this.selectedFileIds);
      },
      addId(id) {
        this.selectedFileIds.push(id);
      },
      removeId(id) {
        this.selectedFileIds = this.selectedFileIds.filter((item) => item !== id);
      }
    }
  };
  var __vue_render__3 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "panel panel-default" }, [
      _vm._m(0),
      _vm._v(" "),
      _c("div", { staticClass: "row panel-body" }, [
        _c(
          "form",
          {
            on: {
              submit: function($event) {
                $event.preventDefault();
                return _vm.submit.apply(null, arguments);
              }
            }
          },
          [
            _c(
              "table",
              {
                staticClass: "table table-striped member-resources member-recordings"
              },
              [
                _c("thead", [
                  _c("tr", [
                    _c("th", { staticClass: "member-checkbox" }, [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-danger detach-btn",
                          attrs: { disabled: _vm.selectedFileIds.length == 0 },
                          on: { click: _vm.detachAll }
                        },
                        [
                          _vm._v(
                            "\n                Detach Selected\n              "
                          )
                        ]
                      )
                    ]),
                    _vm._v(" "),
                    _c("th", [_vm._v("Title")]),
                    _vm._v(" "),
                    _c("th", [_vm._v("Actions")])
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "tbody",
                  [
                    _vm._l(_vm.members, function(member) {
                      return [
                        _c("playlist-member", {
                          key: member.id.id,
                          attrs: { resource: member },
                          on: {
                            update: _vm.detach,
                            idSelected: _vm.addId,
                            idRemoved: _vm.removeId
                          }
                        })
                      ];
                    })
                  ],
                  2
                )
              ]
            )
          ]
        )
      ])
    ]);
  };
  var __vue_staticRenderFns__3 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { staticClass: "panel-heading" }, [
        _c("h2", { staticClass: "panel-title" }, [
          _vm._v("\n      Tracks\n    ")
        ])
      ]);
    }
  ];
  __vue_render__3._withStripped = true;
  var __vue_inject_styles__3 = function(inject) {
    if (!inject)
      return;
    inject("data-v-7d856057_0", { source: "\nmember-resources > tbody > tr > td.member-checkbox {\n    width: 10px;\n}\n", map: { "version": 3, "sources": ["app/javascript/components/playlist_members.vue"], "names": [], "mappings": ";AA8GA;IACA,WAAA;AACA", "file": "playlist_members.vue", "sourcesContent": [`<template>
  <div class="panel panel-default">
    <div class="panel-heading">
      <h2 class="panel-title">
        Tracks
      </h2>
    </div>
    <div class="row panel-body">
      <form @submit.prevent="submit">
        <table class="table table-striped member-resources member-recordings">
          <thead>
            <tr>
              <th class="member-checkbox">
                <button
                  class="btn btn-danger detach-btn"
                  :disabled="selectedFileIds.length == 0"
                  @click="detachAll"
                >
                  Detach Selected
                </button>
              </th>
              <th>Title</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <template v-for="member in members">
              <playlist-member
                :key="member.id.id"
                :resource="member"
                @update="detach"
                @idSelected="addId"
                @idRemoved="removeId"
              />
            </template>
          </tbody>
        </table>
      </form>
    </div>
  </div>
</template>
<script>
import axios from 'axios'
import PlaylistMember from './playlist_member.vue'

export default {
  name: 'PlaylistMembers',
  components: {
    'playlist-member': PlaylistMember
  },
  props: {
    resourceId: {
      type: String,
      required: true
    },
    members: {
      type: Array,
      default: function () { return [] }
    }
  },
  data () {
    return { submitting: false, selectedFileIds: [] }
  },
  methods: {
    buildFormData () {
      let form = new FormData()
      form.append('_method', 'delete')

      return form
    },
    submit () { return false },
    detach (proxyIds) {
      let vm = this
      this.submitting = true

      // These have to be detached sequentially because of a race condition.
      // The requests delete the child, which then cleans up membership, but if
      // they happen really close to one another then one member gets
      // reinstated. To fix this we'd have to have a way to tell the parent to
      // delete its children
      let promise = Promise.resolve()
      for (let proxyId of proxyIds) {
        promise = promise.then((response) => {
          return axios.post(\`/concern/playlists/\${proxyId}\`,
            this.buildFormData()
          )
        })
      }
      promise.then(function (response) {
        vm.submitting = false
        window.location.reload()
      })
    },
    detachAll () {
      let buttons = document.getElementsByClassName('detach-btn')
      for (let b of buttons) {
        b.disabled = true
      }
      this.detach(this.selectedFileIds)
    },
    addId (id) {
      this.selectedFileIds.push(id)
    },
    removeId (id) {
      this.selectedFileIds = this.selectedFileIds.filter(item => item !== id)
    }
  }
}
<\/script>
<style scope>
member-resources > tbody > tr > td.member-checkbox {
    width: 10px;
  }
</style>
`] }, media: void 0 });
  };
  var __vue_scope_id__3 = void 0;
  var __vue_module_identifier__3 = void 0;
  var __vue_is_functional_template__3 = false;
  function __vue_normalize__3(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/playlist_members.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__3() {
    const styles = __vue_create_injector__3.styles || (__vue_create_injector__3.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__3 = /* @__PURE__ */ __vue_normalize__3(
    { render: __vue_render__3, staticRenderFns: __vue_staticRenderFns__3 },
    __vue_inject_styles__3,
    __vue_script__3,
    __vue_scope_id__3,
    __vue_is_functional_template__3,
    __vue_module_identifier__3,
    false,
    __vue_create_injector__3,
    void 0,
    void 0
  );
  var playlist_members_default = __vue_component__3;

  // app/javascript/components/issue_monogram.vue
  var __vue_script__4 = {
    name: "IssueMonogram",
    props: {
      resource: {
        type: Object,
        default: null
      },
      attached: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        isAttached: this.attached
      };
    },
    methods: {
      attach: function() {
        this.isAttached = true;
        this.$emit("attach", this.resource);
      },
      detach: function() {
        this.isAttached = false;
        this.$emit("detach", this.resource);
      }
    }
  };
  var __vue_render__4 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("td", [
      _c("div", { staticClass: "monogram-content" }, [
        _c("div", { staticClass: "monogram-content-thumbnail" }, [
          _c("img", {
            staticClass: "thumbnail-inner",
            attrs: { src: _vm.resource.thumbnail, alt: "Default" }
          })
        ]),
        _vm._v(" "),
        _c("p", [_vm._v(_vm._s(_vm.resource.title))])
      ]),
      _vm._v(" "),
      _c(
        "div",
        { staticClass: "monogram-options" },
        [
          _c(
            "a",
            {
              staticClass: "btn btn-secondary",
              attrs: { href: _vm.resource.url }
            },
            [_vm._v("View")]
          ),
          _vm._v(" "),
          _vm.isAttached ? [
            _c(
              "button",
              {
                staticClass: "btn btn-danger btn-remove-row",
                attrs: { name: "button" },
                on: {
                  click: function($event) {
                    $event.preventDefault();
                    return _vm.detach.apply(null, arguments);
                  }
                }
              },
              [_vm._v("\n        Detach\n      ")]
            )
          ] : [
            _c(
              "button",
              {
                staticClass: "btn btn-primary btn-add-row",
                attrs: { name: "button" },
                on: {
                  click: function($event) {
                    $event.preventDefault();
                    return _vm.attach.apply(null, arguments);
                  }
                }
              },
              [_vm._v("\n        Attach\n      ")]
            )
          ]
        ],
        2
      )
    ]);
  };
  var __vue_staticRenderFns__4 = [];
  __vue_render__4._withStripped = true;
  var __vue_inject_styles__4 = void 0;
  var __vue_scope_id__4 = void 0;
  var __vue_module_identifier__4 = void 0;
  var __vue_is_functional_template__4 = false;
  function __vue_normalize__4(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/issue_monogram.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__4 = /* @__PURE__ */ __vue_normalize__4(
    { render: __vue_render__4, staticRenderFns: __vue_staticRenderFns__4 },
    __vue_inject_styles__4,
    __vue_script__4,
    __vue_scope_id__4,
    __vue_is_functional_template__4,
    __vue_module_identifier__4,
    false,
    void 0,
    void 0,
    void 0
  );
  var issue_monogram_default = __vue_component__4;

  // app/javascript/components/issue_monograms.vue
  var __vue_script__5 = {
    name: "IssueMonograms",
    components: {
      "issue-monogram": issue_monogram_default
    },
    props: {
      resource: {
        type: Object,
        default: null
      },
      members: {
        type: Array,
        default: function() {
          return [];
        }
      },
      nonMembers: {
        type: Array,
        default: function() {
          return [];
        }
      },
      defaultThumbnailUrl: {
        type: String,
        default: null
      }
    },
    data: function() {
      return {
        attachedMembers: this.members.filter((e) => e.attached)
      };
    },
    methods: {
      attach(attached) {
        this.attachedMembers.push(attached);
      },
      detach(detached) {
        const idx = this.attachedMembers.findIndex((e) => e.id === detached.id);
        this.attachedMembers.splice(idx, 1);
      }
    }
  };
  var __vue_render__5 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "table",
      {
        staticClass: "table table-striped member-resources numismatic-monograms",
        attrs: { id: "numismatic-monograms" }
      },
      [
        _vm._m(0),
        _vm._v(" "),
        _c("tbody", [
          _c(
            "tr",
            [
              _vm._l(_vm.members, function(monogram) {
                return [
                  _c(
                    "td",
                    { key: monogram.id },
                    [
                      _c("issue-monogram", {
                        key: monogram.id,
                        attrs: {
                          resource: monogram,
                          attached: monogram.attached
                        },
                        on: { attach: _vm.attach, detach: _vm.detach }
                      })
                    ],
                    1
                  )
                ];
              })
            ],
            2
          ),
          _vm._v(" "),
          _c(
            "tr",
            { staticClass: "d-none" },
            [
              _vm._l(_vm.attachedMembers, function(monogram) {
                return [
                  _c("td", { key: monogram.id }, [
                    _c("input", {
                      attrs: {
                        type: "hidden",
                        name: "numismatics_issue[numismatic_monogram_ids][]"
                      },
                      domProps: { value: monogram.id }
                    })
                  ])
                ];
              })
            ],
            2
          )
        ]),
        _vm._v(" "),
        _vm._m(1)
      ]
    );
  };
  var __vue_staticRenderFns__5 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("thead", [_c("tr", [_c("th")])]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("tfoot", [_c("tr", {}, [_c("td")])]);
    }
  ];
  __vue_render__5._withStripped = true;
  var __vue_inject_styles__5 = void 0;
  var __vue_scope_id__5 = void 0;
  var __vue_module_identifier__5 = void 0;
  var __vue_is_functional_template__5 = false;
  function __vue_normalize__5(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/issue_monograms.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__5 = /* @__PURE__ */ __vue_normalize__5(
    { render: __vue_render__5, staticRenderFns: __vue_staticRenderFns__5 },
    __vue_inject_styles__5,
    __vue_script__5,
    __vue_scope_id__5,
    __vue_is_functional_template__5,
    __vue_module_identifier__5,
    false,
    void 0,
    void 0,
    void 0
  );
  var issue_monograms_default = __vue_component__5;

  // app/javascript/application2.js
  var import_axios3 = __toESM(require_axios2());

  // app/javascript/components/OrderManagerControls.vue
  var import_openseadragon = __toESM(require_openseadragon());
  var __vue_script__6 = {
    name: "Controls",
    status: "ready",
    release: "1.0.0",
    type: "Pattern",
    metaInfo: {
      title: "OrderManager Controls",
      htmlAttrs: {
        lang: "en"
      }
    },
    props: {
      type: {
        type: String,
        default: "div"
      },
      viewerId: {
        type: String,
        default: "viewer"
      }
    },
    data: function() {
      return {
        viewer: null,
        osdId: this.viewerId
      };
    },
    computed: {
      ...mapState({
        resource: (state) => state.ordermanager.resource,
        gallery: (state) => state.gallery
      }),
      editLink: function() {
        let link = "";
        if (!this.hidden) {
          link = "/catalog/parent/" + this.resource.id + "/" + this.gallery.selected[0].id;
        }
        return link;
      },
      isMultiVolume: function() {
        return this.resource.isMultiVolume;
      },
      isDisabled: function() {
        if (this.resource.saveState === "SAVING") {
          return true;
        } else if (this.$store.getters.stateChanged) {
          return false;
        } else {
          return true;
        }
      },
      orderChanged: function() {
        return this.$store.getters.orderChanged;
      },
      payloadFileset: function() {
        let changed = this.gallery.items.filter((item) => this.gallery.changeList.indexOf(item.id) !== -1);
        let payload = changed.map((file) => {
          return { id: file.id, title: file.title, page_type: file.viewingHint };
        });
        return payload;
      },
      payloadVolume: function() {
        var changed = this.gallery.items.filter((item) => this.gallery.changeList.indexOf(item.id) !== -1);
        var payload = changed.map((file) => {
          return { id: file.id, title: file.title };
        });
        return payload;
      },
      resourceClassName: function() {
        return this.resource.resourceClassName;
      },
      selectedTotal() {
        return this.gallery.selected.length;
      }
    },
    updated: function() {
      if (this.selectedTotal === 1) {
        this.initOSD();
      }
    },
    methods: {
      initOSD: function() {
        if (this.viewer) {
          this.viewer.destroy();
          this.viewer = null;
        }
        this.viewer = (0, import_openseadragon.default)({
          id: this.osdId,
          showNavigationControl: false,
          tileSources: [this.gallery.selected[0].service + "/info.json"]
        });
      },
      hidden: function() {
        if (this.selectedTotal !== 1) {
          return true;
        } else {
          return false;
        }
      },
      galleryToFileset: function(items) {
        var members = items.filter((item) => this.gallery.changeList.indexOf(item.id) > -1).map((item) => {
          return { id: item.id, label: item.caption, viewingHint: item.viewingHint };
        });
        return members;
      },
      galleryToResource: function(items) {
        var members = items.map((item) => {
          return item.id;
        });
        return members;
      },
      saveHandler: function(event) {
        if (this.isMultiVolume) {
          this.saveMVW();
        } else {
          this.save();
        }
      },
      save: function() {
        let resource = {};
        resource.body = {
          id: this.resource.id,
          viewingDirection: this.resource.viewingDirection ? this.resource.viewingDirection.replace(/-/g, "").toUpperCase() : this.resource.viewingDirection,
          viewingHint: this.resource.viewingHint,
          startPage: this.resource.startCanvas,
          thumbnailId: this.resource.thumbnail,
          memberIds: this.galleryToResource(this.gallery.items)
        };
        resource.filesets = [];
        let membersBody = this.galleryToFileset(this.gallery.items);
        let memberNum = membersBody.length;
        for (let i = 0; i < memberNum; i++) {
          resource.filesets.push(membersBody[i]);
        }
        this.$store.dispatch("saveStateGql", resource);
      },
      saveMVW: function() {
        let body = {
          resource: {},
          volumes: this.payloadVolume
        };
        body.resource[this.resourceClassName] = {
          member_ids: this.imageIdList,
          viewing_direction: this.viewingDirection,
          thumbnail_id: this.thumbnail,
          id: this.id
        };
        this.$store.dispatch("saveStateGql", body);
      }
    }
  };
  var __vue_render__6 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "wrapper",
      { staticClass: "lux-bg" },
      [
        _c(
          "div",
          { staticClass: "lux-controls" },
          [
            _vm.orderChanged ? _c("alert", { attrs: { status: "info" } }, [
              _vm._v("\n      Page order has changed.\n    ")
            ]) : _vm._e(),
            _vm._v(" "),
            _c(
              "input-button",
              {
                attrs: {
                  id: "save_btn",
                  variation: "solid",
                  size: "medium",
                  disabled: _vm.isDisabled
                },
                on: {
                  "button-clicked": function($event) {
                    return _vm.saveHandler($event);
                  }
                }
              },
              [_vm._v("\n      Apply Changes\n    ")]
            ),
            _vm._v(" "),
            !_vm.hidden ? _c(
              "a",
              { attrs: { id: "replace-file-button", href: _vm.editLink } },
              [_vm._v("\n      Manage Page Files\n    ")]
            ) : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _vm.selectedTotal === 1 ? _c("heading", { attrs: { level: "h2" } }, [
          _vm._v("\n    Zoom "),
          _c("small", [_vm._v("on the selected item")])
        ]) : _vm._e(),
        _vm._v(" "),
        _vm.selectedTotal === 1 ? _c("div", { staticClass: "lux-osd-wrapper" }, [
          _c("div", { staticClass: "lux-osd" }, [
            _c("div", {
              staticClass: "lux-viewport",
              attrs: { id: _vm.viewerId }
            })
          ])
        ]) : _vm._e()
      ],
      1
    );
  };
  var __vue_staticRenderFns__6 = [];
  __vue_render__6._withStripped = true;
  var __vue_inject_styles__6 = function(inject) {
    if (!inject)
      return;
    inject("data-v-33d26236_0", { source: "small[data-v-33d26236] {\n  font-size: 1rem;\n  font-weight: 400;\n}\n#replace-file-button[data-v-33d26236] {\n  padding: 1.5rem;\n  display: inline-block;\n}\n.lux-is-hidden[data-v-33d26236] {\n  display: none;\n}\n.lux-bg[data-v-33d26236] {\n  background: #f9f9f9;\n  margin-left: -30px;\n  margin-right: -30px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n.lux-osd[data-v-33d26236] {\n  background: #fff;\n  height: 100%;\n  width: 100%;\n}\n.lux-osd-wrapper[data-v-33d26236] {\n  background: #fff;\n  flex-basis: 40%;\n  border-radius: 4px;\n  border: 2px solid #9ecaed;\n  box-shadow: 0 0 10px #9ecaed;\n  padding: 10px;\n}\nh3.lux-osd-title[data-v-33d26236] {\n  font-size: 18px;\n}\n.lux-viewport[data-v-33d26236] {\n  height: 100%;\n  width: 100%;\n}\n\n/*# sourceMappingURL=OrderManagerControls.vue.map */", map: { "version": 3, "sources": ["app/javascript/components/OrderManagerControls.vue", "OrderManagerControls.vue"], "names": [], "mappings": "AAoNA;EACA,eAAA;EACA,gBAAA;ACnNA;ADqNA;EACA,eAAA;EACA,qBAAA;AClNA;ADoNA;EACA,aAAA;ACjNA;ADmNA;EACA,mBAAA;EACA,kBAAA;EACA,mBAAA;EACA,aAAA;EACA,aAAA;EACA,sBAAA;EACA,YAAA;AChNA;ADmNA;EACA,gBAAA;EACA,YAAA;EACA,WAAA;AChNA;ADmNA;EACA,gBAAA;EACA,eAAA;EACA,kBAAA;EACA,yBAAA;EACA,4BAAA;EACA,aAAA;AChNA;ADmNA;EACA,eAAA;AChNA;ADmNA;EACA,YAAA;EACA,WAAA;AChNA;;AAEA,mDAAmD", "file": "OrderManagerControls.vue", "sourcesContent": [`<template>
  <wrapper class="lux-bg">
    <div class="lux-controls">
      <alert
        v-if="orderChanged"
        status="info"
      >
        Page order has changed.
      </alert>
      <input-button
        id="save_btn"
        variation="solid"
        size="medium"
        :disabled="isDisabled"
        @button-clicked="saveHandler($event)"
      >
        Apply Changes
      </input-button>
      <a
        v-if="!hidden"
        id="replace-file-button"
        :href="editLink"
      >
        Manage Page Files
      </a>
    </div>
    <heading
      v-if="selectedTotal === 1"
      level="h2"
    >
      Zoom <small>on the selected item</small>
    </heading>
    <div
      v-if="selectedTotal === 1"
      class="lux-osd-wrapper"
    >
      <div class="lux-osd">
        <div
          :id="viewerId"
          class="lux-viewport"
        />
      </div>
    </div>
  </wrapper>
</template>

<script>
import OpenSeadragon from 'openseadragon'
import { mapState } from 'vuex'
/**
 * This is the Persistence and Deep Zoom pieces of the Order Manager interface.
 * Note: use \`yarn add openseadragon\` for deep zoom to work.
 */
export default {
  name: 'Controls',
  status: 'ready',
  release: '1.0.0',
  type: 'Pattern',
  metaInfo: {
    title: 'OrderManager Controls',
    htmlAttrs: {
      lang: 'en'
    }
  },
  props: {
    /**
     * The html element name used for the component.
     */
    type: {
      type: String,
      default: 'div'
    },
    viewerId: {
      type: String,
      default: 'viewer'
    }
  },
  data: function () {
    return {
      viewer: null,
      osdId: this.viewerId
    }
  },
  computed: {
    ...mapState({
      resource: state => state.ordermanager.resource,
      gallery: state => state.gallery
    }),
    editLink: function () {
      let link = ''
      if (!this.hidden) {
        link = '/catalog/parent/' + this.resource.id + '/' + this.gallery.selected[0].id
      }
      return link
    },
    isMultiVolume: function () {
      return this.resource.isMultiVolume
    },
    isDisabled: function () {
      if (this.resource.saveState === 'SAVING') {
        return true
      } else if (this.$store.getters.stateChanged) {
        return false
      } else {
        return true
      }
    },
    orderChanged: function () {
      return this.$store.getters.orderChanged
    },
    payloadFileset: function () {
      let changed = this.gallery.items.filter(item => this.gallery.changeList.indexOf(item.id) !== -1)
      let payload = changed.map(file => {
        return { id: file.id, title: file.title, page_type: file.viewingHint }
      })
      return payload
    },
    payloadVolume: function () {
      var changed = this.gallery.items.filter(item => this.gallery.changeList.indexOf(item.id) !== -1)
      var payload = changed.map(file => {
        return { id: file.id, title: file.title }
      })
      return payload
    },
    resourceClassName: function () {
      return this.resource.resourceClassName
    },
    selectedTotal () {
      return this.gallery.selected.length
    }
  },
  updated: function () {
    if (this.selectedTotal === 1) {
      this.initOSD()
    }
  },
  methods: {
    initOSD: function () {
      if (this.viewer) {
        this.viewer.destroy()
        this.viewer = null
      }
      this.viewer = OpenSeadragon({
        id: this.osdId,
        showNavigationControl: false,
        tileSources: [this.gallery.selected[0].service + '/info.json']
      })
    },
    hidden: function () {
      if (this.selectedTotal !== 1) {
        return true
      } else {
        return false
      }
    },
    galleryToFileset: function (items) {
      var members = items.filter(item => this.gallery.changeList.indexOf(item.id) > -1).map(item => {
        return { id: item.id, label: item.caption, viewingHint: item.viewingHint }
      })
      return members
    },
    galleryToResource: function (items) {
      var members = items.map(item => {
        return item.id
      })
      return members
    },
    saveHandler: function (event) {
      if (this.isMultiVolume) {
        this.saveMVW()
      } else {
        this.save()
      }
    },
    save: function () {
      let resource = {}
      resource.body = {
        id: this.resource.id,
        viewingDirection: this.resource.viewingDirection
          ? this.resource.viewingDirection.replace(/-/g, '').toUpperCase()
          : this.resource.viewingDirection,
        viewingHint: this.resource.viewingHint,
        startPage: this.resource.startCanvas,
        thumbnailId: this.resource.thumbnail,
        memberIds: this.galleryToResource(this.gallery.items)
      }
      resource.filesets = []
      let membersBody = this.galleryToFileset(this.gallery.items)
      let memberNum = membersBody.length
      for (let i = 0; i < memberNum; i++) {
        resource.filesets.push(membersBody[i])
      }
      this.$store.dispatch('saveStateGql', resource)
    },
    saveMVW: function () {
      let body = {
        resource: {},
        volumes: this.payloadVolume
      }
      body.resource[this.resourceClassName] = {
        member_ids: this.imageIdList,
        viewing_direction: this.viewingDirection,
        thumbnail_id: this.thumbnail,
        id: this.id
      }
      this.$store.dispatch('saveStateGql', body)
    }
  }
}
<\/script>

<style lang="scss" scoped>
small {
  font-size: 1rem;
  font-weight: 400;
}
#replace-file-button {
  padding: 1.5rem;
  display: inline-block;
}
.lux-is-hidden {
  display: none;
}
.lux-bg {
  background: #f9f9f9;
  margin-left: -30px;
  margin-right: -30px;
  padding: 20px;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.lux-osd {
  background: #fff;
  height: 100%;
  width: 100%;
}

.lux-osd-wrapper {
  background: #fff;
  flex-basis: 40%;
  border-radius: 4px;
  border: 2px solid #9ecaed;
  box-shadow: 0 0 10px #9ecaed;
  padding: 10px;
}

h3.lux-osd-title {
  font-size: 18px;
}

.lux-viewport {
  height: 100%;
  width: 100%;
}
</style>
`, "small {\n  font-size: 1rem;\n  font-weight: 400;\n}\n\n#replace-file-button {\n  padding: 1.5rem;\n  display: inline-block;\n}\n\n.lux-is-hidden {\n  display: none;\n}\n\n.lux-bg {\n  background: #f9f9f9;\n  margin-left: -30px;\n  margin-right: -30px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.lux-osd {\n  background: #fff;\n  height: 100%;\n  width: 100%;\n}\n\n.lux-osd-wrapper {\n  background: #fff;\n  flex-basis: 40%;\n  border-radius: 4px;\n  border: 2px solid #9ecaed;\n  box-shadow: 0 0 10px #9ecaed;\n  padding: 10px;\n}\n\nh3.lux-osd-title {\n  font-size: 18px;\n}\n\n.lux-viewport {\n  height: 100%;\n  width: 100%;\n}\n\n/*# sourceMappingURL=OrderManagerControls.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__6 = "data-v-33d26236";
  var __vue_module_identifier__6 = void 0;
  var __vue_is_functional_template__6 = false;
  function __vue_normalize__6(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/OrderManagerControls.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__4() {
    const styles = __vue_create_injector__4.styles || (__vue_create_injector__4.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__6 = /* @__PURE__ */ __vue_normalize__6(
    { render: __vue_render__6, staticRenderFns: __vue_staticRenderFns__6 },
    __vue_inject_styles__6,
    __vue_script__6,
    __vue_scope_id__6,
    __vue_is_functional_template__6,
    __vue_module_identifier__6,
    false,
    __vue_create_injector__4,
    void 0,
    void 0
  );
  var OrderManagerControls_default = __vue_component__6;

  // app/javascript/components/OrderManagerToolbar.vue
  var __vue_script__7 = {
    name: "Toolbar",
    status: "ready",
    release: "1.0.0",
    type: "Pattern",
    props: {
      type: {
        type: String,
        default: "div"
      }
    },
    computed: {
      ...mapState({
        resource: (state) => state.ordermanager.resource,
        gallery: (state) => state.gallery
      }),
      cut: {
        get() {
          return this.gallery.cut;
        }
      }
    },
    methods: {
      cutSelected: function() {
        this.$store.dispatch("cut", this.gallery.selected);
        this.selectNone();
      },
      getItemIndexById: function(id) {
        return this.gallery.items.map(function(item) {
          return item.id;
        }).indexOf(id);
      },
      isCutDisabled: function() {
        return !!this.gallery.cut.length;
      },
      isPasteDisabled: function() {
        return !(this.gallery.cut.length && this.gallery.selected.length);
      },
      paste: function(indexModifier) {
        let items = this.gallery.items;
        items = items.filter((val) => !this.gallery.cut.includes(val));
        let pasteAfterIndex = this.getItemIndexById(this.gallery.selected[this.gallery.selected.length - 1].id) + indexModifier;
        items.splice(pasteAfterIndex, 0, ...this.gallery.cut);
        this.$store.dispatch("paste", items);
        this.resetCut();
        this.selectNone();
      },
      resetCut: function() {
        this.$store.dispatch("cut", []);
      },
      resizeCards: function(event) {
        this.$emit("cards-resized", event);
      },
      menuSelection(value) {
        switch (value.target.innerText) {
          case "All":
            this.selectAll();
            break;
          case "None":
            this.selectNone();
            break;
          case "Alternate":
            this.selectAlternate();
            break;
          case "Inverse":
            this.selectInverse();
            break;
          case "Cut":
            this.cutSelected();
            break;
          case "Paste Before":
            this.paste(-1);
            break;
          case "Paste After":
            this.paste(1);
            break;
        }
      },
      selectAll: function() {
        this.$store.dispatch("select", this.gallery.items);
      },
      selectAlternate: function() {
        let selected = [];
        let itemTotal = this.gallery.items.length;
        for (let i = 0; i < itemTotal; i = i + 2) {
          selected.push(this.gallery.items[i]);
        }
        this.$store.dispatch("select", selected);
      },
      selectInverse: function() {
        let selected = [];
        let itemTotal = this.gallery.items.length;
        for (let i = 1; i < itemTotal; i = i + 2) {
          selected.push(this.gallery.items[i]);
        }
        this.$store.dispatch("select", selected);
      },
      selectNone: function() {
        this.$store.dispatch("select", []);
      }
    }
  };
  var __vue_render__7 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      _vm.type,
      { tag: "component", class: ["lux-toolbar"] },
      [
        _c("dropdown-menu", {
          attrs: {
            "button-label": "Selection Options",
            "menu-items": [
              { name: "All", component: "All" },
              { name: "None", component: "None" },
              { name: "Alternate", component: "Alternate", disabled: true },
              { name: "Inverse", component: "Inverse" }
            ]
          },
          on: {
            "menu-item-clicked": function($event) {
              return _vm.menuSelection($event);
            }
          }
        }),
        _vm._v(" "),
        _c("dropdown-menu", {
          attrs: {
            "button-label": "With Selected...",
            "menu-items": [
              { name: "Cut", component: "Cut", disabled: _vm.isCutDisabled() },
              {
                name: "Paste Before",
                component: "Paste Before",
                disabled: _vm.isPasteDisabled()
              },
              {
                name: "Paste After",
                component: "Paste After",
                disabled: _vm.isPasteDisabled()
              }
            ]
          },
          on: {
            "menu-item-clicked": function($event) {
              return _vm.menuSelection($event);
            }
          }
        }),
        _vm._v(" "),
        _c("spacer"),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "lux-zoom-slider" },
          [
            _c(
              "lux-icon-base",
              {
                staticClass: "lux-svg-icon",
                attrs: {
                  "icon-name": "shrink",
                  "icon-color": "rgb(0,0,0)",
                  width: "12",
                  height: "12"
                }
              },
              [_c("lux-icon-picture")],
              1
            ),
            _vm._v(" "),
            _c("label", { attrs: { for: "img_zoom" } }, [
              _vm._v("\n      Image zoom\n    ")
            ]),
            _vm._v(" "),
            _c("input", {
              attrs: {
                id: "img_zoom",
                type: "range",
                min: "40",
                max: "500",
                value: "300"
              },
              on: {
                input: function($event) {
                  return _vm.resizeCards($event);
                }
              }
            }),
            _vm._v(" "),
            _c(
              "lux-icon-base",
              {
                staticClass: "lux-svg-icon",
                attrs: {
                  "icon-name": "grow",
                  "icon-color": "rgb(0,0,0)",
                  width: "24",
                  height: "24"
                }
              },
              [_c("lux-icon-picture")],
              1
            )
          ],
          1
        )
      ],
      1
    );
  };
  var __vue_staticRenderFns__7 = [];
  __vue_render__7._withStripped = true;
  var __vue_inject_styles__7 = function(inject) {
    if (!inject)
      return;
    inject("data-v-22d73fdc_0", { source: ".lux-toolbar[data-v-22d73fdc] {\n  box-sizing: border-box;\n  margin: 0;\n  margin-bottom: 16px;\n  font-family: franklin-gothic-urw, Helvetica, Arial, sans-serif;\n  font-size: 16px;\n  line-height: 1;\n  background: #f5f5f5;\n  height: 64px;\n  align-items: center;\n  display: flex;\n  padding: 0 24px;\n}\n.lux-zoom-slider .lux-svg-icon[data-v-22d73fdc],\n.lux-zoom-slider input[data-v-22d73fdc] {\n  vertical-align: middle;\n  line-height: 1;\n  margin: 0;\n}\n.lux-zoom-slider input[type=range][data-v-22d73fdc] {\n  display: inline;\n  width: auto;\n}\n.lux-zoom-slider label[data-v-22d73fdc] {\n  position: absolute;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 0;\n  border: 0;\n  height: 1px;\n  width: 1px;\n  overflow: hidden;\n}\n\n/*# sourceMappingURL=OrderManagerToolbar.vue.map */", map: { "version": 3, "sources": ["app/javascript/components/OrderManagerToolbar.vue", "OrderManagerToolbar.vue"], "names": [], "mappings": "AA+KA;EACA,sBAAA;EACA,SAAA;EACA,mBAAA;EACA,8DAAA;EACA,eAAA;EACA,cAAA;EACA,mBAAA;EACA,YAAA;EACA,mBAAA;EACA,aAAA;EACA,eAAA;AC9KA;ADkLA;;EAEA,sBAAA;EACA,cAAA;EACA,SAAA;AC/KA;ADkLA;EACA,eAAA;EACA,WAAA;AChLA;ADmLA;EACA,kBAAA;EACA,8BAAA;EACA,UAAA;EACA,SAAA;EACA,WAAA;EACA,UAAA;EACA,gBAAA;ACjLA;;AAEA,kDAAkD", "file": "OrderManagerToolbar.vue", "sourcesContent": [`<template>
  <component
    :is="type"
    :class="['lux-toolbar']"
  >
    <dropdown-menu
      button-label="Selection Options"
      :menu-items="[
        {name: 'All', component: 'All'},
        {name: 'None', component: 'None'},
        {name: 'Alternate', component: 'Alternate', disabled: true},
        {name: 'Inverse', component: 'Inverse'}
      ]"
      @menu-item-clicked="menuSelection($event)"
    />
    <dropdown-menu
      button-label="With Selected..."
      :menu-items="[
        {name: 'Cut', component: 'Cut', disabled: isCutDisabled()},
        {name: 'Paste Before', component: 'Paste Before', disabled: isPasteDisabled()},
        {name: 'Paste After', component: 'Paste After', disabled: isPasteDisabled()}
      ]"
      @menu-item-clicked="menuSelection($event)"
    />
    <spacer />
    <div class="lux-zoom-slider">
      <lux-icon-base
        class="lux-svg-icon"
        icon-name="shrink"
        icon-color="rgb(0,0,0)"
        width="12"
        height="12"
      >
        <lux-icon-picture />
      </lux-icon-base>
      <label for="img_zoom">
        Image zoom
      </label>
      <input
        id="img_zoom"
        type="range"
        min="40"
        max="500"
        value="300"
        @input="resizeCards($event)"
      >
      <lux-icon-base
        class="lux-svg-icon"
        icon-name="grow"
        icon-color="rgb(0,0,0)"
        width="24"
        height="24"
      >
        <lux-icon-picture />
      </lux-icon-base>
    </div>
  </component>
</template>

<script>
import { mapState } from 'vuex'
/**
 * Toolbars allows a user to select a value from a series of options.
 */
export default {
  name: 'Toolbar',
  status: 'ready',
  release: '1.0.0',
  type: 'Pattern',
  props: {
    /**
     * The html element name used for the container
     */
    type: {
      type: String,
      default: 'div'
    }
  },
  computed: {
    ...mapState({
      resource: state => state.ordermanager.resource,
      gallery: state => state.gallery
    }),
    cut: {
      get () {
        return this.gallery.cut
      }
    }
  },
  methods: {
    cutSelected: function () {
      this.$store.dispatch('cut', this.gallery.selected)
      this.selectNone()
    },
    getItemIndexById: function (id) {
      return this.gallery.items
        .map(function (item) {
          return item.id
        })
        .indexOf(id)
    },
    isCutDisabled: function () {
      return !!this.gallery.cut.length
    },
    isPasteDisabled: function () {
      return !(this.gallery.cut.length && this.gallery.selected.length)
    },
    paste: function (indexModifier) {
      let items = this.gallery.items
      items = items.filter(val => !this.gallery.cut.includes(val))
      let pasteAfterIndex =
        this.getItemIndexById(this.gallery.selected[this.gallery.selected.length - 1].id) + indexModifier
      items.splice(pasteAfterIndex, 0, ...this.gallery.cut)
      this.$store.dispatch('paste', items)
      this.resetCut()
      this.selectNone()
    },
    resetCut: function () {
      this.$store.dispatch('cut', [])
    },
    resizeCards: function (event) {
      this.$emit('cards-resized', event)
    },
    menuSelection (value) {
      switch (value.target.innerText) {
        case 'All':
          this.selectAll()
          break
        case 'None':
          this.selectNone()
          break
        case 'Alternate':
          this.selectAlternate()
          break
        case 'Inverse':
          this.selectInverse()
          break
        case 'Cut':
          this.cutSelected()
          break
        case 'Paste Before':
          this.paste(-1)
          break
        case 'Paste After':
          this.paste(1)
          break
      }
    },
    selectAll: function () {
      this.$store.dispatch('select', this.gallery.items)
    },
    selectAlternate: function () {
      let selected = []
      let itemTotal = this.gallery.items.length
      for (let i = 0; i < itemTotal; i = i + 2) {
        selected.push(this.gallery.items[i])
      }
      this.$store.dispatch('select', selected)
    },
    selectInverse: function () {
      let selected = []
      let itemTotal = this.gallery.items.length
      for (let i = 1; i < itemTotal; i = i + 2) {
        selected.push(this.gallery.items[i])
      }
      this.$store.dispatch('select', selected)
    },
    selectNone: function () {
      this.$store.dispatch('select', [])
    }
  }
}
<\/script>

<style lang="scss" scoped>
.lux-toolbar {
  box-sizing: border-box;
  margin: 0;
  margin-bottom: 16px;
  font-family: franklin-gothic-urw,Helvetica,Arial,sans-serif;
  font-size: 16px;
  line-height: 1;
  background: #f5f5f5;
  height: 64px;
  align-items: center;
  display: flex;
  padding: 0 24px;
}

.lux-zoom-slider {
  .lux-svg-icon,
  input {
    vertical-align: middle;
    line-height: 1;
    margin: 0;
  }

  input[type="range"] {
    display: inline;
    width: auto;
  }

  label {
    position: absolute;
    clip: rect(1px, 1px, 1px, 1px);
    padding: 0;
    border: 0;
    height: 1px;
    width: 1px;
    overflow: hidden;
  }
}
</style>
`, ".lux-toolbar {\n  box-sizing: border-box;\n  margin: 0;\n  margin-bottom: 16px;\n  font-family: franklin-gothic-urw, Helvetica, Arial, sans-serif;\n  font-size: 16px;\n  line-height: 1;\n  background: #f5f5f5;\n  height: 64px;\n  align-items: center;\n  display: flex;\n  padding: 0 24px;\n}\n\n.lux-zoom-slider .lux-svg-icon,\n.lux-zoom-slider input {\n  vertical-align: middle;\n  line-height: 1;\n  margin: 0;\n}\n.lux-zoom-slider input[type=range] {\n  display: inline;\n  width: auto;\n}\n.lux-zoom-slider label {\n  position: absolute;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 0;\n  border: 0;\n  height: 1px;\n  width: 1px;\n  overflow: hidden;\n}\n\n/*# sourceMappingURL=OrderManagerToolbar.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__7 = "data-v-22d73fdc";
  var __vue_module_identifier__7 = void 0;
  var __vue_is_functional_template__7 = false;
  function __vue_normalize__7(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/OrderManagerToolbar.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__5() {
    const styles = __vue_create_injector__5.styles || (__vue_create_injector__5.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__7 = /* @__PURE__ */ __vue_normalize__7(
    { render: __vue_render__7, staticRenderFns: __vue_staticRenderFns__7 },
    __vue_inject_styles__7,
    __vue_script__7,
    __vue_scope_id__7,
    __vue_is_functional_template__7,
    __vue_module_identifier__7,
    false,
    __vue_create_injector__5,
    void 0,
    void 0
  );
  var OrderManagerToolbar_default = __vue_component__7;

  // app/javascript/components/OrderManagerFilesetForm.vue
  var import_lodash = __toESM(require_lodash());
  var __vue_script__8 = {
    name: "FilesetForm",
    status: "ready",
    release: "1.0.0",
    type: "Pattern",
    metaInfo: {
      title: "Fileset Form",
      htmlAttrs: {
        lang: "en"
      }
    },
    props: {
      type: {
        type: String,
        default: "div"
      }
    },
    computed: {
      ...mapState({
        resource: (state) => state.ordermanager.resource,
        gallery: (state) => state.gallery
      }),
      memberViewHint: function() {
        let id = this.gallery.selected[0].id;
        let selectedMember = this.resource.members.find((member) => member.id === id);
        return selectedMember.viewingHint;
      },
      startCanvas: function() {
        return this.resource.startCanvas;
      },
      thumbnail: function() {
        return this.resource.thumbnail;
      },
      isMultiVolume() {
        return this.$store.getters.isMultiVolume;
      },
      isStartCanvas: function() {
        let id = this.gallery.selected[0].id;
        return this.resource.startCanvas === id;
      },
      isThumbnail: function() {
        let id = this.gallery.selected[0].id;
        return this.resource.thumbnail === id;
      },
      startCanvasOpts: function() {
        return [
          {
            name: "isStartCanvas",
            value: "Set as Start Page",
            id: "isStartCanvas",
            checked: this.isStartCanvas
          }
        ];
      },
      thumbnailOpts: function() {
        return [
          {
            name: "isThumbnail",
            value: "Set as Resource Thumbnail",
            id: "isThumbnail",
            checked: this.isThumbnail
          }
        ];
      },
      viewHintOpts: function() {
        return [
          { label: "Single Page (Default)", value: "single", selected: this.isViewHint("single") },
          { label: "Non-paged", value: "non-paged", selected: this.isViewHint("non-paged") },
          { label: "Facing Pages", value: "facing", selected: this.isViewHint("facing") }
        ];
      },
      singleForm() {
        return {
          caption: this.gallery.selected[0].caption,
          id: this.gallery.selected[0].id,
          mediaUrl: this.gallery.selected[0].mediaUrl,
          service: this.gallery.selected[0].service,
          title: this.gallery.selected[0].title,
          viewingHint: this.gallery.selected[0].viewingHint
        };
      }
    },
    methods: {
      isViewHint(hint) {
        return this.singleForm.viewingHint === hint;
      },
      updateStartCanvas(checked) {
        let startCanvas = null;
        if (checked) {
          startCanvas = this.gallery.selected[0].id;
        }
        this.$store.dispatch("updateStartCanvas", startCanvas);
      },
      updateThumbnail(checked) {
        let thumbnail = null;
        if (checked) {
          thumbnail = this.gallery.selected[0].id;
        } else {
          thumbnail = null;
        }
        this.$store.dispatch("updateThumbnail", thumbnail);
      },
      updateViewHint(event) {
        let viewHint = this.gallery.selected[0].viewingHint;
        if (event) {
          viewHint = event;
        }
        this.singleForm.viewingHint = viewHint;
        this.updateSingle();
      },
      updateSingle: (0, import_lodash.debounce)(function() {
        var changeList = this.gallery.changeList;
        var items = this.gallery.items;
        var index = this.gallery.items.map(function(item) {
          return item.id;
        }).indexOf(this.gallery.selected[0].id);
        items[index] = this.singleForm;
        if (changeList.indexOf(this.gallery.selected[0].id) === -1) {
          changeList.push(this.gallery.selected[0].id);
        }
        this.$store.dispatch("updateChanges", changeList);
        this.$store.dispatch("updateItems", items);
      }, 300, { "leading": false, "trailing": true })
    }
  };
  var __vue_render__8 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c("heading", { attrs: { level: "h2" } }, [
          _vm._v("\n    Edit "),
          _c("small", { staticClass: "text-muted" }, [
            _vm._v("the selected item")
          ])
        ]),
        _vm._v(" "),
        _c(
          "form",
          { attrs: { id: "app", novalidate: "true" } },
          [
            _c("input-text", {
              attrs: {
                id: "itemLabel",
                label: "Label",
                placeholder: "e.g., example.tif"
              },
              on: {
                input: function($event) {
                  return _vm.updateSingle();
                }
              },
              model: {
                value: _vm.singleForm.caption,
                callback: function($$v) {
                  _vm.$set(_vm.singleForm, "caption", $$v);
                },
                expression: "singleForm.caption"
              }
            }),
            _vm._v(" "),
            !_vm.isMultiVolume ? _c("input-select", {
              attrs: {
                id: "pageType",
                label: "Page Type",
                value: _vm.singleForm.viewingHint,
                options: _vm.viewHintOpts
              },
              on: {
                change: function($event) {
                  return _vm.updateViewHint($event);
                }
              }
            }) : _vm._e(),
            _vm._v(" "),
            !_vm.isMultiVolume ? _c("input-checkbox", {
              attrs: {
                id: "startCanvasCheckbox",
                options: _vm.startCanvasOpts
              },
              on: {
                change: function($event) {
                  return _vm.updateStartCanvas($event);
                }
              }
            }) : _vm._e(),
            _vm._v(" "),
            _c("input-checkbox", {
              attrs: { id: "thumbnailCheckbox", options: _vm.thumbnailOpts },
              on: {
                change: function($event) {
                  return _vm.updateThumbnail($event);
                }
              }
            })
          ],
          1
        )
      ],
      1
    );
  };
  var __vue_staticRenderFns__8 = [];
  __vue_render__8._withStripped = true;
  var __vue_inject_styles__8 = function(inject) {
    if (!inject)
      return;
    inject("data-v-1c87c529_0", { source: "small[data-v-1c87c529] {\n  font-size: 1rem;\n  font-weight: 400;\n}\n.lux-vertical[data-v-1c87c529] {\n  display: block;\n}\n\n/*# sourceMappingURL=OrderManagerFilesetForm.vue.map */", map: { "version": 3, "sources": ["app/javascript/components/OrderManagerFilesetForm.vue", "OrderManagerFilesetForm.vue"], "names": [], "mappings": "AAwLA;EACA,eAAA;EACA,gBAAA;ACvLA;ADyLA;EACA,cAAA;ACtLA;;AAEA,sDAAsD", "file": "OrderManagerFilesetForm.vue", "sourcesContent": [`<template>
  <div>
    <heading level="h2">
      Edit <small class="text-muted">the selected item</small>
    </heading>
    <form
      id="app"
      novalidate="true"
    >
      <input-text
        id="itemLabel"
        v-model="singleForm.caption"
        label="Label"
        placeholder="e.g., example.tif"
        @input="updateSingle()"
      />

      <input-select
        v-if="!isMultiVolume"
        id="pageType"
        label="Page Type"
        :value="singleForm.viewingHint"
        :options="viewHintOpts"
        @change="updateViewHint($event)"
      />

      <input-checkbox
        v-if="!isMultiVolume"
        id="startCanvasCheckbox"
        :options="startCanvasOpts"
        @change="updateStartCanvas($event)"
      />
      <input-checkbox
        id="thumbnailCheckbox"
        :options="thumbnailOpts"
        @change="updateThumbnail($event)"
      />
    </form>
  </div>
</template>

<script>
import { mapState } from 'vuex'
import { debounce } from 'lodash'
/**
 * This is the Fileset Form for the Order Manager in Figgy.
 * The only reason you can currently see this pattern is because hiding it causes an OpenSeadragon bug in the Order Manager.
 * Nothing to see here...
 */
export default {
  name: 'FilesetForm',
  status: 'ready',
  release: '1.0.0',
  type: 'Pattern',
  metaInfo: {
    title: 'Fileset Form',
    htmlAttrs: {
      lang: 'en'
    }
  },
  props: {
    /**
     * The html element name used for the component.
     */
    type: {
      type: String,
      default: 'div'
    }
  },
  computed: {
    ...mapState({
      resource: state => state.ordermanager.resource,
      gallery: state => state.gallery
    }),
    memberViewHint: function () {
      let id = this.gallery.selected[0].id
      let selectedMember = this.resource.members.find(member => member.id === id)
      return selectedMember.viewingHint
    },
    startCanvas: function () {
      return this.resource.startCanvas
    },
    thumbnail: function () {
      return this.resource.thumbnail
    },
    isMultiVolume () {
      return this.$store.getters.isMultiVolume
    },
    isStartCanvas: function () {
      let id = this.gallery.selected[0].id
      return this.resource.startCanvas === id
    },
    isThumbnail: function () {
      let id = this.gallery.selected[0].id
      return this.resource.thumbnail === id
    },
    startCanvasOpts: function () {
      return [
        {
          name: 'isStartCanvas',
          value: 'Set as Start Page',
          id: 'isStartCanvas',
          checked: this.isStartCanvas
        }
      ]
    },
    thumbnailOpts: function () {
      return [
        {
          name: 'isThumbnail',
          value: 'Set as Resource Thumbnail',
          id: 'isThumbnail',
          checked: this.isThumbnail
        }
      ]
    },
    viewHintOpts: function () {
      return [
        { label: 'Single Page (Default)', value: 'single', selected: this.isViewHint('single') },
        { label: 'Non-paged', value: 'non-paged', selected: this.isViewHint('non-paged') },
        { label: 'Facing Pages', value: 'facing', selected: this.isViewHint('facing') }
      ]
    },
    singleForm () {
      return {
        caption: this.gallery.selected[0].caption,
        id: this.gallery.selected[0].id,
        mediaUrl: this.gallery.selected[0].mediaUrl,
        service: this.gallery.selected[0].service,
        title: this.gallery.selected[0].title,
        viewingHint: this.gallery.selected[0].viewingHint
      }
    }
  },
  methods: {
    isViewHint (hint) {
      return this.singleForm.viewingHint === hint
    },
    updateStartCanvas (checked) {
      let startCanvas = null
      if (checked) {
        startCanvas = this.gallery.selected[0].id
      }
      this.$store.dispatch('updateStartCanvas', startCanvas)
    },
    updateThumbnail (checked) {
      let thumbnail = null
      if (checked) {
        thumbnail = this.gallery.selected[0].id
      } else {
        thumbnail = null
      }
      this.$store.dispatch('updateThumbnail', thumbnail)
    },
    updateViewHint (event) {
      let viewHint = this.gallery.selected[0].viewingHint
      if (event) {
        viewHint = event
      }
      this.singleForm.viewingHint = viewHint
      this.updateSingle()
    },
    updateSingle: debounce(function () {
      var changeList = this.gallery.changeList
      var items = this.gallery.items
      var index = this.gallery.items
        .map(function (item) {
          return item.id
        })
        .indexOf(this.gallery.selected[0].id)
      items[index] = this.singleForm

      if (changeList.indexOf(this.gallery.selected[0].id) === -1) {
        changeList.push(this.gallery.selected[0].id)
      }

      this.$store.dispatch('updateChanges', changeList)
      this.$store.dispatch('updateItems', items)
    }, 300, { 'leading': false, 'trailing': true })
  }
}
<\/script>

<style lang="scss" scoped>
small {
  font-size: 1rem;
  font-weight: 400;
}
.lux-vertical {
  display: block;
}
</style>
`, "small {\n  font-size: 1rem;\n  font-weight: 400;\n}\n\n.lux-vertical {\n  display: block;\n}\n\n/*# sourceMappingURL=OrderManagerFilesetForm.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__8 = "data-v-1c87c529";
  var __vue_module_identifier__8 = void 0;
  var __vue_is_functional_template__8 = false;
  function __vue_normalize__8(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/OrderManagerFilesetForm.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__6() {
    const styles = __vue_create_injector__6.styles || (__vue_create_injector__6.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__8 = /* @__PURE__ */ __vue_normalize__8(
    { render: __vue_render__8, staticRenderFns: __vue_staticRenderFns__8 },
    __vue_inject_styles__8,
    __vue_script__8,
    __vue_scope_id__8,
    __vue_is_functional_template__8,
    __vue_module_identifier__8,
    false,
    __vue_create_injector__6,
    void 0,
    void 0
  );
  var OrderManagerFilesetForm_default = __vue_component__8;

  // app/javascript/utils/page-label-generator/index.js
  var labelGen = {
    pageLabelGenerator: function* ({
      start = 1,
      method = "paginate",
      frontLabel = "",
      backLabel = "",
      startWith = "front",
      unitLabel = "",
      bracket = false,
      bracketOdds = false,
      bracketEvens = false,
      twoUp = false,
      twoUpSeparator = "/",
      twoUpDir = "ltr",
      twoUpBracketLeftOnly = false,
      twoUpBracketRightOnly = false
    } = {}) {
      let numberer = this.pageNumberGenerator(arguments[0]), frontBackLabeler = this.frontBackLabeler(arguments[0]), bracketVals = this.bracketLogic(arguments[0]), [
        bracketOpen,
        bracketClose,
        bracketLeftOpen,
        bracketLeftClose,
        bracketRightOpen,
        bracketRightClose
      ] = bracketVals, evenOddBracketsAllowed = bracketVals.every((v) => v == ""), open = `${bracketOpen}${bracketLeftOpen}`, close = `${bracketRightClose}${bracketClose}`;
      while (true) {
        let [num1, c] = numberer.next().value, side1 = frontBackLabeler.next().value, page1 = `${num1}${side1}`, [eoBracketL, eoBracketR] = ["", ""];
        if (evenOddBracketsAllowed) {
          [eoBracketL, eoBracketR] = this.evenOddBracket(c, bracketEvens, bracketOdds);
        }
        if (!twoUp) {
          yield `${open}${eoBracketL}${unitLabel}${page1}${eoBracketR}${close}`;
        } else {
          let [num2, c2] = numberer.next().value, side2 = frontBackLabeler.next().value, sep = `${bracketLeftClose}${twoUpSeparator}${bracketRightOpen}`, page2 = `${num2}${side2}`;
          if (twoUpDir == "rtl") {
            yield `${open}${unitLabel}${page2}${sep}${page1}${close}`;
          } else {
            yield `${open}${unitLabel}${page1}${sep}${page2}${close}`;
          }
        }
      }
    },
    evenOddBracket: function(numInt, doEvens, doOdds) {
      if (doOdds && numInt % 2 == 1 || doEvens && numInt % 2 == 0) {
        return ["[", "]"];
      } else {
        return ["", ""];
      }
    },
    pageNumberGenerator: function* ({
      start = 1,
      method = "paginate",
      startWith = "front"
    } = {}) {
      let roman = false, capital = false, counter = start, changeFolio = false;
      if (!isInt(start)) {
        roman = true;
        capital = start == start.toUpperCase();
        start.toLowerCase();
        counter = this.deromanize(start);
      }
      if (startWith == "back")
        changeFolio = !changeFolio;
      while (true) {
        if (roman) {
          let val = this.romanize(counter);
          if (capital)
            val = val.toUpperCase();
          yield [val, counter];
        } else
          yield [String(counter), counter];
        if (method == "foliate") {
          if (changeFolio)
            counter++;
          changeFolio = !changeFolio;
        } else
          counter++;
      }
    },
    frontBackLabeler: function* ({
      frontLabel = "",
      backLabel = "",
      startWith = "front"
    } = {}) {
      let labels = [frontLabel, backLabel];
      if (startWith == "back")
        labels.reverse();
      let labeler = cycle(labels);
      while (true)
        yield labeler.next().value;
    },
    bracketLogic: function({
      bracket = false,
      twoUpBracketLeftOnly = false,
      twoUpBracketRightOnly = false
    } = {}) {
      var bracketOpen = "", bracketClose = "", bracketLeftOpen = "", bracketLeftClose = "", bracketRightOpen = "", bracketRightClose = "";
      if (bracket && !(twoUpBracketLeftOnly || twoUpBracketRightOnly)) {
        [bracketOpen, bracketClose] = ["[", "]"];
      } else if (twoUpBracketLeftOnly && !(bracket || twoUpBracketRightOnly)) {
        [bracketLeftOpen, bracketLeftClose] = ["[", "]"];
      } else if (twoUpBracketRightOnly && !(bracket || twoUpBracketLeftOnly)) {
        [bracketRightOpen, bracketRightClose] = ["[", "]"];
      }
      return [
        bracketOpen,
        bracketClose,
        bracketLeftOpen,
        bracketLeftClose,
        bracketRightOpen,
        bracketRightClose
      ];
    },
    romanize: function(num) {
      if (!+num)
        return false;
      var digits = String(+num).split(""), key = [
        "",
        "c",
        "cc",
        "ccc",
        "cd",
        "d",
        "dc",
        "dcc",
        "dccc",
        "cm",
        "",
        "x",
        "xx",
        "xxx",
        "xl",
        "l",
        "lx",
        "lxx",
        "lxxx",
        "xc",
        "",
        "i",
        "ii",
        "iii",
        "iv",
        "v",
        "vi",
        "vii",
        "viii",
        "ix"
      ], roman = "", i = 3;
      while (i--)
        roman = (key[+digits.pop() + i * 10] || "") + roman;
      return Array(+digits.join("") + 1).join("m") + roman;
    },
    deromanize: function(str) {
      str = str.toLowerCase();
      var validator = /^m*(?:d?c{0,3}|c[md])(?:l?x{0,3}|x[cl])(?:v?i{0,3}|i[xv])$/, token = /[mdlv]|c[md]?|x[cl]?|i[xv]?/g, key = { m: 1e3, cm: 900, d: 500, cd: 400, c: 100, xc: 90, l: 50, xl: 40, x: 10, ix: 9, v: 5, iv: 4, i: 1 }, num = 0, m;
      if (!(str && validator.test(str)))
        return false;
      while (m = token.exec(str))
        num += key[m[0]];
      return num;
    }
  };
  function* cycle(arr) {
    while (true) {
      let nxt = arr.shift();
      arr.push(nxt);
      yield nxt;
    }
  }
  function isInt(n) {
    return Number(n) === n && n % 1 === 0;
  }
  var page_label_generator_default = labelGen;

  // app/javascript/components/OrderManagerFilesetsForm.vue
  var import_lodash2 = __toESM(require_lodash());
  var __vue_script__9 = {
    name: "FilesetsForm",
    status: "ready",
    release: "1.0.0",
    type: "Pattern",
    metaInfo: {
      title: "Fileset Form",
      htmlAttrs: {
        lang: "en"
      }
    },
    props: {
      type: {
        type: String,
        default: "div"
      }
    },
    data: function() {
      return {
        start: "1",
        method: "paginate",
        frontLabel: "r. ",
        backLabel: "v. ",
        startsWith: "front",
        unitLabel: "p. ",
        bracket: false,
        bracketLocation: "default",
        twoUp: false,
        twoUpSeparator: "/"
      };
    },
    computed: {
      ...mapState({
        resource: (state) => state.ordermanager.resource,
        gallery: (state) => state.gallery
      }),
      isMultiVolume() {
        return this.$store.getters.isMultiVolume;
      },
      selectedTotal() {
        return this.gallery.selected.length;
      },
      addBracketOpts: function() {
        return [
          {
            name: "addBrackets",
            value: "Add Brackets",
            id: "addBrackets",
            checked: this.bracket
          }
        ];
      },
      bracketLocationOpts: function() {
        if (this.twoUp) {
          return [
            {
              label: "None",
              value: "default"
            },
            {
              label: "Left Side Only",
              value: "left"
            },
            {
              label: "Right Side Only",
              value: "right"
            }
          ];
        } else {
          return [
            {
              label: "All",
              value: "default"
            },
            {
              label: "Evens",
              value: "left"
            },
            {
              label: "Odds",
              value: "right"
            }
          ];
        }
      },
      methodOpts: function() {
        return [{ label: "Paginate (Default)", value: "paginate" }, { label: "Foliate", value: "foliate" }];
      },
      twoUpOpts: function() {
        return [
          {
            label: "One-up (Default)",
            value: false
          },
          {
            label: "Two-up",
            value: true
          }
        ];
      },
      startWithOpts: function() {
        return [{ label: "Front (Default)", value: "front" }, { label: "Back", value: "back" }];
      },
      bracketAll: function() {
        return this.bracket && !this.twoUp && this.bracketLocation === "default";
      },
      bracketEvens: function() {
        return this.bracket && !this.twoUp && this.bracketLocation === "left";
      },
      bracketOdds: function() {
        return this.bracket && !this.twoUp && this.bracketLocation === "right";
      },
      twoUpBracketLeftOnly: function() {
        return this.bracket && this.twoUp && this.bracketLocation === "left";
      },
      twoUpBracketRightOnly: function() {
        return this.bracket && this.twoUp && this.bracketLocation === "right";
      }
    },
    watch: {
      method: function(val) {
        this.updateUnitLabel();
      }
    },
    methods: {
      updateUnitLabel() {
        if (this.method === "paginate") {
          this.unitLabel = "p. ";
        } else if (this.method === "foliate") {
          this.unitLabel = "f. ";
        }
      },
      labelerOpts() {
        let unitLabel = this.unitLabel;
        let frontLabel = this.method === "paginate" ? "" : this.frontLabel;
        let backLabel = this.method === "paginate" ? "" : this.backLabel;
        return {
          start: this.start,
          method: this.method,
          startsWith: this.startsWith,
          bracket: this.bracketAll,
          bracketEvens: this.bracketEvens,
          bracketOdds: this.bracketOdds,
          frontLabel,
          backLabel,
          unitLabel,
          twoUp: this.twoUp,
          twoUpSeparator: this.twoUpSeparator,
          twoUpBracketLeftOnly: this.twoUpBracketLeftOnly,
          twoUpBracketRightOnly: this.twoUpBracketRightOnly
        };
      },
      isNormalInteger(str) {
        return /^\+?(0|[1-9]\d*)$/.test(str);
      },
      updateMultiLabels: (0, import_lodash2.debounce)(function() {
        let changeList = this.gallery.changeList;
        let items = this.gallery.items;
        this.start = this.isNormalInteger(this.start) ? this.start - 0 : this.start;
        let generator = page_label_generator_default.pageLabelGenerator(this.labelerOpts());
        for (let i = 0; i < this.selectedTotal; i++) {
          let index = this.gallery.items.map(function(item) {
            return item.id;
          }).indexOf(this.gallery.selected[i].id);
          let caption = !this.start || this.start.length === 0 ? "" : generator.next().value;
          items[index].caption = caption;
          if (changeList.indexOf(this.gallery.selected[i].id) === -1) {
            changeList.push(this.gallery.selected[i].id);
          }
        }
        this.$store.dispatch("updateChanges", changeList);
        this.$store.dispatch("updateItems", items);
      }, 300, { "leading": false, "trailing": true })
    }
  };
  var __vue_render__9 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c("heading", { attrs: { level: "h2" } }, [
          _vm._v("\n    Generate Labels "),
          _c("small", { staticClass: "text-muted" }, [
            _vm._v("for selected items")
          ])
        ]),
        _vm._v(" "),
        _c(
          "form",
          { attrs: { id: "app", novalidate: "true" } },
          [
            _c("input-text", {
              attrs: { id: "unitLabel", label: "Label", placeholder: "e.g., p." },
              on: {
                input: function($event) {
                  return _vm.updateMultiLabels();
                }
              },
              model: {
                value: _vm.unitLabel,
                callback: function($$v) {
                  _vm.unitLabel = $$v;
                },
                expression: "unitLabel"
              }
            }),
            _vm._v(" "),
            _c("input-text", {
              attrs: {
                id: "startNum",
                label: "Starting Numeral",
                placeholder: "e.g., 10"
              },
              on: {
                input: function($event) {
                  return _vm.updateMultiLabels();
                }
              },
              model: {
                value: _vm.start,
                callback: function($$v) {
                  _vm.start = $$v;
                },
                expression: "start"
              }
            }),
            _vm._v(" "),
            !_vm.isMultiVolume ? _c("input-checkbox", {
              attrs: { options: _vm.addBracketOpts },
              on: {
                change: function($event) {
                  return _vm.updateMultiLabels();
                }
              },
              model: {
                value: _vm.bracket,
                callback: function($$v) {
                  _vm.bracket = $$v;
                },
                expression: "bracket"
              }
            }) : _vm._e(),
            _vm._v(" "),
            _vm.bracket ? _c("input-select", {
              attrs: {
                id: "bracketLocation",
                label: "Bracket Location",
                options: _vm.bracketLocationOpts
              },
              on: {
                change: function($event) {
                  return _vm.updateMultiLabels();
                }
              },
              model: {
                value: _vm.bracketLocation,
                callback: function($$v) {
                  _vm.bracketLocation = $$v;
                },
                expression: "bracketLocation"
              }
            }) : _vm._e(),
            _vm._v(" "),
            !_vm.isMultiVolume ? _c("input-select", {
              attrs: {
                id: "labelMethod",
                label: "Labeling Method",
                options: _vm.methodOpts
              },
              on: { change: _vm.updateUnitLabel },
              model: {
                value: _vm.method,
                callback: function($$v) {
                  _vm.method = $$v;
                },
                expression: "method"
              }
            }) : _vm._e(),
            _vm._v(" "),
            _c("input-select", {
              attrs: { id: "twoUp", label: "Two Up", options: _vm.twoUpOpts },
              on: {
                change: function($event) {
                  return _vm.updateMultiLabels();
                }
              },
              model: {
                value: _vm.twoUp,
                callback: function($$v) {
                  _vm.twoUp = $$v;
                },
                expression: "twoUp"
              }
            }),
            _vm._v(" "),
            _vm.twoUp ? _c("input-text", {
              attrs: { id: "twoUpSeparator", label: "Two-Up Separator" },
              on: {
                input: function($event) {
                  return _vm.updateMultiLabels();
                }
              },
              model: {
                value: _vm.twoUpSeparator,
                callback: function($$v) {
                  _vm.twoUpSeparator = $$v;
                },
                expression: "twoUpSeparator"
              }
            }) : _vm._e(),
            _vm._v(" "),
            _vm.method === "foliate" ? _c(
              "div",
              { staticClass: "lux-row" },
              [
                _c("input-text", {
                  attrs: {
                    id: "frontLabel",
                    label: "Front Label",
                    placeholder: "(recto)"
                  },
                  on: {
                    input: function($event) {
                      return _vm.updateMultiLabels();
                    }
                  },
                  model: {
                    value: _vm.frontLabel,
                    callback: function($$v) {
                      _vm.frontLabel = $$v;
                    },
                    expression: "frontLabel"
                  }
                }),
                _vm._v(" "),
                _c("input-text", {
                  attrs: {
                    id: "backLabel",
                    label: "Back Label",
                    placeholder: "(verso)"
                  },
                  on: {
                    input: function($event) {
                      return _vm.updateMultiLabels();
                    }
                  },
                  model: {
                    value: _vm.backLabel,
                    callback: function($$v) {
                      _vm.backLabel = $$v;
                    },
                    expression: "backLabel"
                  }
                }),
                _vm._v(" "),
                !_vm.isMultiVolume ? _c("input-select", {
                  attrs: {
                    id: "startWith",
                    label: "Start With",
                    options: _vm.startWithOpts
                  },
                  on: {
                    change: function($event) {
                      return _vm.updateMultiLabels();
                    }
                  },
                  model: {
                    value: _vm.startWith,
                    callback: function($$v) {
                      _vm.startWith = $$v;
                    },
                    expression: "startWith"
                  }
                }) : _vm._e()
              ],
              1
            ) : _vm._e()
          ],
          1
        )
      ],
      1
    );
  };
  var __vue_staticRenderFns__9 = [];
  __vue_render__9._withStripped = true;
  var __vue_inject_styles__9 = function(inject) {
    if (!inject)
      return;
    inject("data-v-7a240d61_0", { source: "small[data-v-7a240d61] {\n  font-size: 1rem;\n  font-weight: 400;\n}\n\n/*# sourceMappingURL=OrderManagerFilesetsForm.vue.map */", map: { "version": 3, "sources": ["app/javascript/components/OrderManagerFilesetsForm.vue", "OrderManagerFilesetsForm.vue"], "names": [], "mappings": "AA+RA;EACA,eAAA;EACA,gBAAA;AC9RA;;AAEA,uDAAuD", "file": "OrderManagerFilesetsForm.vue", "sourcesContent": [`<template>
  <div>
    <heading level="h2">
      Generate Labels <small class="text-muted">for selected items</small>
    </heading>
    <form
      id="app"
      novalidate="true"
    >
      <input-text
        id="unitLabel"
        v-model="unitLabel"
        label="Label"
        placeholder="e.g., p."
        @input="updateMultiLabels()"
      />
      <input-text
        id="startNum"
        v-model="start"
        label="Starting Numeral"
        placeholder="e.g., 10"
        @input="updateMultiLabels()"
      />
      <input-checkbox
        v-if="!isMultiVolume"
        v-model="bracket"
        :options="addBracketOpts"
        @change="updateMultiLabels()"
      />

      <input-select
        v-if="bracket"
        id="bracketLocation"
        v-model="bracketLocation"
        label="Bracket Location"
        :options="bracketLocationOpts"
        @change="updateMultiLabels()"
      />

      <input-select
        v-if="!isMultiVolume"
        id="labelMethod"
        v-model="method"
        label="Labeling Method"
        :options="methodOpts"
        @change="updateUnitLabel"
      />

      <input-select
        id="twoUp"
        v-model="twoUp"
        label="Two Up"
        :options="twoUpOpts"
        @change="updateMultiLabels()"
      />

      <input-text
        v-if="twoUp"
        id="twoUpSeparator"
        v-model="twoUpSeparator"
        label="Two-Up Separator"
        @input="updateMultiLabels()"
      />

      <div
        v-if="method === 'foliate'"
        class="lux-row"
      >
        <input-text
          id="frontLabel"
          v-model="frontLabel"
          label="Front Label"
          placeholder="(recto)"
          @input="updateMultiLabels()"
        />
        <input-text
          id="backLabel"
          v-model="backLabel"
          label="Back Label"
          placeholder="(verso)"
          @input="updateMultiLabels()"
        />
        <input-select
          v-if="!isMultiVolume"
          id="startWith"
          v-model="startWith"
          label="Start With"
          :options="startWithOpts"
          @change="updateMultiLabels()"
        />
      </div>
    </form>
  </div>
</template>

<script>
import Lablr from '../utils/page-label-generator'
import { mapState } from 'vuex'
import { debounce } from 'lodash'
/**
 * This is the Filesets Form for the Order Manager in Figgy
 */
export default {
  name: 'FilesetsForm',
  status: 'ready',
  release: '1.0.0',
  type: 'Pattern',
  metaInfo: {
    title: 'Fileset Form',
    htmlAttrs: {
      lang: 'en'
    }
  },
  props: {
    /**
     * The html element name used for the component.
     */
    type: {
      type: String,
      default: 'div'
    }
  },
  data: function () {
    return {
      start: '1',
      method: 'paginate',
      frontLabel: 'r. ',
      backLabel: 'v. ',
      startsWith: 'front',
      unitLabel: 'p. ',
      bracket: false,
      bracketLocation: 'default',
      twoUp: false,
      twoUpSeparator: '/'
    }
  },
  computed: {
    ...mapState({
      resource: state => state.ordermanager.resource,
      gallery: state => state.gallery
    }),
    isMultiVolume () {
      return this.$store.getters.isMultiVolume
    },
    selectedTotal () {
      return this.gallery.selected.length
    },
    addBracketOpts: function () {
      return [
        {
          name: 'addBrackets',
          value: 'Add Brackets',
          id: 'addBrackets',
          checked: this.bracket
        }
      ]
    },
    bracketLocationOpts: function () {
      if (this.twoUp) {
        return [
          {
            label: 'None', value: 'default'
          },
          {
            label: 'Left Side Only', value: 'left'
          },
          {
            label: 'Right Side Only', value: 'right'
          }
        ]
      } else {
        return [
          {
            label: 'All', value: 'default'
          },
          {
            label: 'Evens', value: 'left'
          },
          {
            label: 'Odds', value: 'right'
          }
        ]
      }
    },
    methodOpts: function () {
      return [{ label: 'Paginate (Default)', value: 'paginate' }, { label: 'Foliate', value: 'foliate' }]
    },
    twoUpOpts: function () {
      return [
        {
          label: 'One-up (Default)', value: false
        },
        {
          label: 'Two-up', value: true
        }
      ]
    },
    startWithOpts: function () {
      return [{ label: 'Front (Default)', value: 'front' }, { label: 'Back', value: 'back' }]
    },
    bracketAll: function () {
      return this.bracket && !this.twoUp && this.bracketLocation === 'default'
    },
    bracketEvens: function () {
      return this.bracket && !this.twoUp && this.bracketLocation === 'left'
    },
    bracketOdds: function () {
      return this.bracket && !this.twoUp && this.bracketLocation === 'right'
    },
    twoUpBracketLeftOnly: function () {
      return this.bracket && this.twoUp && this.bracketLocation === 'left'
    },
    twoUpBracketRightOnly: function () {
      return this.bracket && this.twoUp && this.bracketLocation === 'right'
    }
  },
  watch: {
    method: function (val) {
      this.updateUnitLabel()
    }
  },
  methods: {
    updateUnitLabel () {
      // This should be generated with calculate() or watch()
      if (this.method === 'paginate') {
        this.unitLabel = 'p. '
      } else if (this.method === 'foliate') {
        this.unitLabel = 'f. '
      }
    },
    labelerOpts () {
      let unitLabel = this.unitLabel

      let frontLabel = this.method === 'paginate' ? '' : this.frontLabel
      let backLabel = this.method === 'paginate' ? '' : this.backLabel

      return {
        start: this.start,
        method: this.method,
        startsWith: this.startsWith,
        bracket: this.bracketAll,
        bracketEvens: this.bracketEvens,
        bracketOdds: this.bracketOdds,
        frontLabel,
        backLabel,
        unitLabel,
        twoUp: this.twoUp,
        twoUpSeparator: this.twoUpSeparator,
        twoUpBracketLeftOnly: this.twoUpBracketLeftOnly,
        twoUpBracketRightOnly: this.twoUpBracketRightOnly
      }
    },
    isNormalInteger (str) {
      return /^\\+?(0|[1-9]\\d*)$/.test(str)
    },
    updateMultiLabels: debounce(function () {
      let changeList = this.gallery.changeList
      let items = this.gallery.items
      this.start = this.isNormalInteger(this.start)
        ? this.start - 0
        : this.start
      let generator = Lablr.pageLabelGenerator(this.labelerOpts())
      for (let i = 0; i < this.selectedTotal; i++) {
        let index = this.gallery.items
          .map(function (item) {
            return item.id
          })
          .indexOf(this.gallery.selected[i].id)
        // Allow unnumbered pages / flyleaves
        let caption = !this.start || this.start.length === 0
          ? ''
          : generator.next().value
        items[index].caption = caption

        if (changeList.indexOf(this.gallery.selected[i].id) === -1) {
          changeList.push(this.gallery.selected[i].id)
        }
      }

      this.$store.dispatch('updateChanges', changeList)
      this.$store.dispatch('updateItems', items)
    }, 300, { 'leading': false, 'trailing': true })
  }
}
<\/script>

<style lang="scss" scoped>
small {
  font-size: 1rem;
  font-weight: 400;
}
</style>
`, "small {\n  font-size: 1rem;\n  font-weight: 400;\n}\n\n/*# sourceMappingURL=OrderManagerFilesetsForm.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__9 = "data-v-7a240d61";
  var __vue_module_identifier__9 = void 0;
  var __vue_is_functional_template__9 = false;
  function __vue_normalize__9(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/OrderManagerFilesetsForm.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__7() {
    const styles = __vue_create_injector__7.styles || (__vue_create_injector__7.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__9 = /* @__PURE__ */ __vue_normalize__9(
    { render: __vue_render__9, staticRenderFns: __vue_staticRenderFns__9 },
    __vue_inject_styles__9,
    __vue_script__9,
    __vue_scope_id__9,
    __vue_is_functional_template__9,
    __vue_module_identifier__9,
    false,
    __vue_create_injector__7,
    void 0,
    void 0
  );
  var OrderManagerFilesetsForm_default = __vue_component__9;

  // app/javascript/components/OrderManagerResourceForm.vue
  var __vue_script__10 = {
    name: "ResourceForm",
    status: "ready",
    release: "1.0.0",
    type: "Pattern",
    metaInfo: {
      title: "Resource Form",
      htmlAttrs: {
        lang: "en"
      }
    },
    props: {
      type: {
        type: String,
        default: "div"
      },
      count: {
        type: Number,
        default: 0
      }
    },
    computed: {
      memberCount: function() {
        return this.$store.getters.getMemberCount;
      },
      isMultiVolume() {
        return this.$store.getters.isMultiVolume;
      },
      ...mapState({
        resource: (state) => state.ordermanager.resource
      }),
      viewHints: function() {
        return [
          {
            name: "viewHint",
            value: "individuals",
            id: "individuals",
            checked: this.resource.viewingHint === "individuals"
          },
          { name: "viewHint", value: "paged", id: "paged", checked: this.resource.viewingHint === "paged" },
          {
            name: "viewHint",
            value: "continuous",
            id: "continuous",
            checked: this.resource.viewingHint === "continuous"
          }
        ];
      },
      viewDirs: function() {
        return [
          {
            name: "viewDir",
            value: "LEFTTORIGHT",
            id: "left-to-right",
            label: "left-to-right",
            checked: this.resource.viewingDirection === "LEFTTORIGHT"
          },
          {
            name: "viewDir",
            value: "RIGHTTOLEFT",
            id: "right-to-left",
            label: "right-to-left",
            checked: this.resource.viewingDirection === "RIGHTTOLEFT"
          },
          {
            name: "viewDir",
            value: "TOPTOBOTTOM",
            id: "top-to-bottom",
            label: "top-to-bottom",
            checked: this.resource.viewingDirection === "TOPTOBOTTOM"
          },
          {
            name: "viewDir",
            value: "BOTTOMTOTOP",
            id: "bottom-to-top",
            label: "bottom-to-top",
            checked: this.resource.viewingDirection === "BOTTOMTOTOP"
          }
        ];
      }
    },
    methods: {
      isIndividuals: function() {
        return this.resource.viewingHint === "individuals";
      },
      isPaged: function() {
        return this.resource.viewingHint === "paged";
      },
      isContinuous: function() {
        return this.resource.viewingHint === "continuous";
      },
      updateViewDir(value) {
        this.$store.dispatch("updateViewDir", value);
      },
      updateViewHint(value) {
        this.$store.dispatch("updateViewHint", value);
      }
    }
  };
  var __vue_render__10 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c("heading", { attrs: { level: "h2" } }, [
          _vm._v("\n      Set Properties "),
          _c("small", { staticClass: "text-muted" }, [
            _vm._v("\n        for this "),
            _vm.isMultiVolume ? _c("span", [_vm._v("\n          multi-volume\n        ")]) : _vm._e(),
            _vm._v(" resource\n      ")
          ])
        ]),
        _vm._v(" "),
        _c(
          "span",
          { staticClass: "lux-file_count" },
          [
            _c("text-style", { attrs: { variation: "emphasis" } }, [
              _vm._v(
                "\n        Total files: " + _vm._s(_vm.memberCount) + "\n      "
              )
            ]),
            _vm._v(" "),
            _vm.memberCount < 1 ? _c("text-style", { attrs: { variation: "strong" } }, [
              _vm._v("Please add files to this Resource\nbefore proceeding.")
            ]) : _vm._e()
          ],
          1
        ),
        _vm._v(" "),
        _vm.resource.bibId ? _c("span", { staticClass: "lux-bibid" }, [
          _vm._v("\n      | BibId: " + _vm._s(_vm.resource.bibId) + "\n    ")
        ]) : _vm._e(),
        _vm._v(" "),
        _c(
          "form",
          { attrs: { id: "app", novalidate: "true" } },
          [
            _c("input-radio", {
              attrs: {
                id: "viewDir",
                vertical: "",
                "group-label": "Viewing Direction",
                options: _vm.viewDirs,
                value: _vm.viewDirs.value
              },
              on: {
                change: function($event) {
                  return _vm.updateViewDir($event);
                }
              }
            }),
            _vm._v(" "),
            !_vm.isMultiVolume ? _c("input-radio", {
              attrs: {
                id: "viewHint",
                vertical: "",
                "group-label": "Viewing Hint",
                options: _vm.viewHints,
                value: _vm.viewHints.value
              },
              on: {
                change: function($event) {
                  return _vm.updateViewHint($event);
                }
              }
            }) : _vm._e()
          ],
          1
        )
      ],
      1
    );
  };
  var __vue_staticRenderFns__10 = [];
  __vue_render__10._withStripped = true;
  var __vue_inject_styles__10 = function(inject) {
    if (!inject)
      return;
    inject("data-v-a495f8c4_0", { source: "small[data-v-a495f8c4] {\n  font-size: 1rem;\n  font-weight: 400;\n}\n\n/*# sourceMappingURL=OrderManagerResourceForm.vue.map */", map: { "version": 3, "sources": ["app/javascript/components/OrderManagerResourceForm.vue", "OrderManagerResourceForm.vue"], "names": [], "mappings": "AA6JA;EACA,eAAA;EACA,gBAAA;AC5JA;;AAEA,uDAAuD", "file": "OrderManagerResourceForm.vue", "sourcesContent": [`<template>
  <div>
    <heading level="h2">
      Set Properties <small class="text-muted">
        for this <span v-if="isMultiVolume">
          multi-volume
        </span> resource
      </small>
    </heading>
    <span class="lux-file_count">
      <text-style variation="emphasis">
        Total files: {{ memberCount }}
      </text-style>
      <text-style variation="strong" v-if="memberCount < 1">Please add files to this Resource
before proceeding.</text-style>
    </span>
    <span
      v-if="resource.bibId"
      class="lux-bibid"
    >
      | BibId: {{ resource.bibId }}
    </span>
    <form
      id="app"
      novalidate="true"
    >
      <input-radio
        id="viewDir"
        vertical
        group-label="Viewing Direction"
        :options="viewDirs"
        :value="viewDirs.value"
        @change="updateViewDir($event)"
      />
      <input-radio
        v-if="!isMultiVolume"
        id="viewHint"
        vertical
        group-label="Viewing Hint"
        :options="viewHints"
        :value="viewHints.value"
        @change="updateViewHint($event)"
      />
    </form>
  </div>
</template>

<script>
/**
 * This is the Resource Form for the Order Manager in Figgy
 */
import { mapState } from 'vuex'
export default {
  name: 'ResourceForm',
  status: 'ready',
  release: '1.0.0',
  type: 'Pattern',
  metaInfo: {
    title: 'Resource Form',
    htmlAttrs: {
      lang: 'en'
    }
  },
  props: {
    /**
     * The html element name used for the component.
     */
    type: {
      type: String,
      default: 'div'
    },
    count: {
      type: Number,
      default: 0
    }
  },
  computed: {
    memberCount: function () {
      return this.$store.getters.getMemberCount
    },
    isMultiVolume () {
      return this.$store.getters.isMultiVolume
    },
    ...mapState({
      resource: state => state.ordermanager.resource
    }),
    viewHints: function () {
      return [
        {
          name: 'viewHint',
          value: 'individuals',
          id: 'individuals',
          checked: this.resource.viewingHint === 'individuals'
        },
        { name: 'viewHint', value: 'paged', id: 'paged', checked: this.resource.viewingHint === 'paged' },
        {
          name: 'viewHint',
          value: 'continuous',
          id: 'continuous',
          checked: this.resource.viewingHint === 'continuous'
        }
      ]
    },
    viewDirs: function () {
      return [
        {
          name: 'viewDir',
          value: 'LEFTTORIGHT',
          id: 'left-to-right',
          label: 'left-to-right',
          checked: this.resource.viewingDirection === 'LEFTTORIGHT'
        },
        {
          name: 'viewDir',
          value: 'RIGHTTOLEFT',
          id: 'right-to-left',
          label: 'right-to-left',
          checked: this.resource.viewingDirection === 'RIGHTTOLEFT'
        },
        {
          name: 'viewDir',
          value: 'TOPTOBOTTOM',
          id: 'top-to-bottom',
          label: 'top-to-bottom',
          checked: this.resource.viewingDirection === 'TOPTOBOTTOM'
        },
        {
          name: 'viewDir',
          value: 'BOTTOMTOTOP',
          id: 'bottom-to-top',
          label: 'bottom-to-top',
          checked: this.resource.viewingDirection === 'BOTTOMTOTOP'
        }
      ]
    }
  },
  methods: {
    isIndividuals: function () {
      return this.resource.viewingHint === 'individuals'
    },
    isPaged: function () {
      return this.resource.viewingHint === 'paged'
    },
    isContinuous: function () {
      return this.resource.viewingHint === 'continuous'
    },
    updateViewDir (value) {
      this.$store.dispatch('updateViewDir', value)
    },
    updateViewHint (value) {
      this.$store.dispatch('updateViewHint', value)
    }
  }
}
<\/script>

<style lang="scss" scoped>
small {
  font-size: 1rem;
  font-weight: 400;
}
</style>
`, "small {\n  font-size: 1rem;\n  font-weight: 400;\n}\n\n/*# sourceMappingURL=OrderManagerResourceForm.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__10 = "data-v-a495f8c4";
  var __vue_module_identifier__10 = void 0;
  var __vue_is_functional_template__10 = false;
  function __vue_normalize__10(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/OrderManagerResourceForm.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__8() {
    const styles = __vue_create_injector__8.styles || (__vue_create_injector__8.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__10 = /* @__PURE__ */ __vue_normalize__10(
    { render: __vue_render__10, staticRenderFns: __vue_staticRenderFns__10 },
    __vue_inject_styles__10,
    __vue_script__10,
    __vue_scope_id__10,
    __vue_is_functional_template__10,
    __vue_module_identifier__10,
    false,
    __vue_create_injector__8,
    void 0,
    void 0
  );
  var OrderManagerResourceForm_default = __vue_component__10;

  // app/javascript/components/OrderManager.vue
  var __vue_script__11 = {
    name: "OrderManager",
    status: "ready",
    release: "1.0.0",
    type: "Pattern",
    components: {
      "toolbar": OrderManagerToolbar_default,
      "resource-form": OrderManagerResourceForm_default,
      "filesets-form": OrderManagerFilesetsForm_default,
      "fileset-form": OrderManagerFilesetForm_default,
      "controls": OrderManagerControls_default
    },
    props: {
      resourceObject: {
        type: Object,
        default: null
      },
      resourceId: {
        type: String,
        default: null
      },
      defaultThumbnail: {
        type: String,
        default: "https://picsum.photos/600/300/?random"
      }
    },
    data: function() {
      return {
        cardPixelWidth: 300,
        captionPixelPadding: 9
      };
    },
    computed: {
      galleryItems() {
        return this.resource.members.map((member) => ({
          id: member.id,
          caption: member.label,
          service: member["thumbnail"] && typeof member.thumbnail.iiifServiceUrl !== "undefined" ? member.thumbnail.iiifServiceUrl : this.defaultThumbnail,
          mediaUrl: member["thumbnail"] && typeof member.thumbnail.iiifServiceUrl !== "undefined" ? member.thumbnail.iiifServiceUrl + "/full/300,/0/default.jpg" : this.defaultThumbnail,
          viewingHint: member.viewingHint
        }));
      },
      selectedTotal() {
        return this.gallery.selected.length;
      },
      isMultiVolume() {
        return this.$store.getters.isMultiVolume;
      },
      ...mapState({
        resource: (state) => state.ordermanager.resource,
        gallery: (state) => state.gallery
      }),
      loading: function() {
        return this.resource.loadState !== "LOADED";
      },
      saved() {
        return this.resource.saveState === "SAVED";
      },
      saveError() {
        return this.resource.saveState === "ERROR";
      },
      isLoading() {
        return this.resource.saveState === "SAVING";
      }
    },
    beforeMount: function() {
      if (this.resourceObject) {
        this.$store.commit("SET_RESOURCE", this.resourceObject);
      } else {
        let resource = { id: this.resourceId };
        this.$store.commit("CHANGE_RESOURCE_LOAD_STATE", "LOADING");
        this.$store.dispatch("loadImageCollectionGql", resource);
      }
    },
    methods: {
      resizeCards: function(event) {
        this.cardPixelWidth = event.target.value;
        if (this.cardPixelWidth < 75) {
          this.captionPixelPadding = 0;
        } else {
          this.captionPixelPadding = 9;
        }
      }
    }
  };
  var __vue_render__11 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "lux-orderManager" },
      [
        _c("transition", { attrs: { name: "fade" } }, [
          _vm.loading ? _c(
            "div",
            { staticClass: "lux-overlay" },
            [_c("loader", { attrs: { size: "medium" } })],
            1
          ) : _vm._e()
        ]),
        _vm._v(" "),
        _vm.saved ? _c(
          "alert",
          {
            attrs: {
              status: "success",
              type: "alert",
              autoclear: "",
              dismissible: ""
            }
          },
          [_vm._v("\n    Your work has been saved!\n  ")]
        ) : _vm._e(),
        _vm._v(" "),
        _vm.saveError ? _c(
          "alert",
          {
            attrs: {
              status: "error",
              type: "alert",
              autoclear: "",
              dismissible: ""
            }
          },
          [_vm._v("\n    Sorry, there was a problem saving your work!\n  ")]
        ) : _vm._e(),
        _vm._v(" "),
        _c(
          "wrapper",
          {
            staticClass: "lux-galleryPanel",
            attrs: { "full-width": false, type: "div" }
          },
          [
            _c("toolbar", {
              on: {
                "cards-resized": function($event) {
                  return _vm.resizeCards($event);
                }
              }
            }),
            _vm._v(" "),
            _vm.isLoading ? _c(
              "div",
              { staticClass: "loader" },
              [
                _c("loader", {
                  staticClass: "galleryLoader",
                  attrs: { size: "medium" }
                })
              ],
              1
            ) : _vm._e(),
            _vm._v(" "),
            _c("gallery", {
              staticClass: "lux-galleryWrapper",
              attrs: {
                "card-pixel-width": _vm.cardPixelWidth,
                "gallery-items": _vm.galleryItems
              }
            })
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "wrapper",
          {
            staticClass: "lux-sidePanel",
            attrs: { type: "div", "full-width": false }
          },
          [
            _vm.selectedTotal === 0 ? _c("resource-form") : _vm._e(),
            _vm._v(" "),
            _vm.selectedTotal > 1 ? _c("filesets-form") : _vm._e(),
            _vm._v(" "),
            _vm.selectedTotal === 1 ? _c("fileset-form") : _vm._e(),
            _vm._v(" "),
            _c("controls", { attrs: { "viewer-id": "viewer" } })
          ],
          1
        )
      ],
      1
    );
  };
  var __vue_staticRenderFns__11 = [];
  __vue_render__11._withStripped = true;
  var __vue_inject_styles__11 = function(inject) {
    if (!inject)
      return;
    inject("data-v-e6f301b6_0", { source: ".lux-title {\n  font-weight: bold;\n}\n.lux-orderManager {\n  position: relative;\n  height: 80vh;\n}\n.lux-orderManager .lux-heading {\n  margin: 12px 0 12px 0;\n  line-height: 0.75;\n  color: #001123;\n}\n.lux-orderManager h2 {\n  letter-spacing: 0;\n  font-size: 24px;\n}\n.lux-sidePanel {\n  position: absolute;\n  top: 20px;\n  right: 10px;\n  height: 95%;\n  width: 28.5%;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 0 30px 0 30px;\n  overflow-y: scroll;\n}\n.lux-sidePanel .lux-input {\n  display: block;\n}\n.lux-galleryPanel {\n  position: absolute;\n  top: 20px;\n  left: 0;\n  height: 95%;\n  width: 70%;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n}\n.lux-galleryPanel .lux-icon {\n  margin: auto;\n}\n.lux-galleryWrapper {\n  overflow: auto;\n  height: calc(100% - 80px);\n  border-radius: 4px;\n  margin-bottom: 80px;\n  clear: both;\n}\n.loader {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  padding-bottom: 64px;\n  z-index: 500;\n  margin-top: -16px;\n}\n.loader .galleryLoader {\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.85);\n  display: flex;\n}\n.loader .galleryLoader .lux-loader {\n  margin: auto;\n}\n\n/*# sourceMappingURL=OrderManager.vue.map */", map: { "version": 3, "sources": ["app/javascript/components/OrderManager.vue", "OrderManager.vue"], "names": [], "mappings": "AAsLA;EACA,iBAAA;ACrLA;ADuLA;EACA,kBAAA;EACA,YAAA;ACpLA;ADsLA;EACA,qBAAA;EACA,iBAAA;EACA,cAAA;ACnLA;ADqLA;EACA,iBAAA;EACA,eAAA;AClLA;ADoLA;EACA,kBAAA;EACA,SAAA;EACA,WAAA;EACA,WAAA;EACA,YAAA;EACA,sBAAA;EACA,kBAAA;EAEA,sBAAA;EAEA,kBAAA;ACnLA;ADqLA;EACA,cAAA;AClLA;ADoLA;EACA,kBAAA;EACA,SAAA;EACA,OAAA;EACA,WAAA;EACA,UAAA;EACA,kBAAA;EACA,sBAAA;ACjLA;ADmLA;EACA,YAAA;AChLA;ADkLA;EACA,cAAA;EACA,yBAAA;EACA,kBAAA;EACA,mBAAA;EACA,WAAA;AC/KA;ADkLA;EACA,kBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,oBAAA;EACA,YAAA;EACA,iBAAA;AC/KA;ADiLA;EACA,WAAA;EACA,YAAA;EACA,qCAAA;EACA,aAAA;AC9KA;ADgLA;EACA,YAAA;AC7KA;;AAEA,2CAA2C", "file": "OrderManager.vue", "sourcesContent": [`<template>
  <div class="lux-orderManager">
    <transition name="fade">
      <div
        v-if="loading"
        class="lux-overlay"
      >
        <loader size="medium" />
      </div>
    </transition>
    <alert
      v-if="saved"
      status="success"
      type="alert"
      autoclear
      dismissible
    >
      Your work has been saved!
    </alert>
    <alert
      v-if="saveError"
      status="error"
      type="alert"
      autoclear
      dismissible
    >
      Sorry, there was a problem saving your work!
    </alert>
    <wrapper
      :full-width="false"
      class="lux-galleryPanel"
      type="div"
    >
      <toolbar @cards-resized="resizeCards($event)" />
      <div
        v-if="isLoading"
        class="loader"
      >
        <loader
          size="medium"
          class="galleryLoader"
        />
      </div>
      <gallery
        class="lux-galleryWrapper"
        :card-pixel-width="cardPixelWidth"
        :gallery-items="galleryItems"
      />
    </wrapper>
    <wrapper
      class="lux-sidePanel"
      type="div"
      :full-width="false"
    >
      <!-- Resource Form-->
      <resource-form v-if="selectedTotal === 0" />
      <!-- Multiple Selected Form-->
      <filesets-form v-if="selectedTotal > 1" />
      <!-- Single Selected Form-->
      <fileset-form v-if="selectedTotal === 1" />
      <controls viewer-id="viewer" />
    </wrapper>
  </div>
</template>

<script>
import { mapState } from 'vuex'
import Controls from './OrderManagerControls.vue'
import Toolbar from './OrderManagerToolbar.vue'
import FilesetForm from './OrderManagerFilesetForm.vue'
import FilesetsForm from './OrderManagerFilesetsForm.vue'
import ResourceForm from './OrderManagerResourceForm.vue'

/**
 * OrderManager is a tool for reordering thumbnails that represent members of a complex object (a book, CD, multi-volume work, etc.).
 * Complex patterns like OrderManager come with their own Vuex store that it needs to manage state.
 * The easiest way to use the OrderManager is to simply pass a resource in as a prop.
 * You can see how this is done in the live code example at the end of this section.
 *
 * However you will still need to load the corresponding
 * Vuex module, *resourceModule*. Please see [the state management documentation](/#!/State%20Management) for how to manage state in complex patterns.
 */
export default {
  name: 'OrderManager',
  status: 'ready',
  release: '1.0.0',
  type: 'Pattern',
  components: {
    'toolbar': Toolbar,
    'resource-form': ResourceForm,
    'filesets-form': FilesetsForm,
    'fileset-form': FilesetForm,
    'controls': Controls
  },
  props: {
    /**
     * The resource object in json format.
     */
    resourceObject: {
      type: Object,
      default: null
    },
    /**
     * The resource id. Requires host app to have async lookup of resource.
     */
    resourceId: {
      type: String,
      default: null
    },
    defaultThumbnail: {
      type: String,
      default: 'https://picsum.photos/600/300/?random'
    }
  },
  data: function () {
    return {
      cardPixelWidth: 300,
      captionPixelPadding: 9
    }
  },
  computed: {
    galleryItems () {
      return this.resource.members.map(member => ({
        id: member.id,
        caption: member.label,
        service:
          member['thumbnail'] && typeof (member.thumbnail.iiifServiceUrl) !== 'undefined'
            ? member.thumbnail.iiifServiceUrl
            : this.defaultThumbnail,
        mediaUrl:
          member['thumbnail'] && typeof (member.thumbnail.iiifServiceUrl) !== 'undefined'
            ? member.thumbnail.iiifServiceUrl + '/full/300,/0/default.jpg'
            : this.defaultThumbnail,
        viewingHint: member.viewingHint
      }))
    },
    selectedTotal () {
      return this.gallery.selected.length
    },
    isMultiVolume () {
      return this.$store.getters.isMultiVolume
    },
    ...mapState({
      resource: state => state.ordermanager.resource,
      gallery: state => state.gallery
    }),
    loading: function () {
      return this.resource.loadState !== 'LOADED'
    },
    saved () {
      return this.resource.saveState === 'SAVED'
    },
    saveError () {
      return this.resource.saveState === 'ERROR'
    },
    isLoading () {
      return this.resource.saveState === 'SAVING'
    }
  },
  beforeMount: function () {
    if (this.resourceObject) {
      // if props are passed in set the resource on mount
      this.$store.commit('SET_RESOURCE', this.resourceObject)
    } else {
      let resource = { id: this.resourceId }
      this.$store.commit('CHANGE_RESOURCE_LOAD_STATE', 'LOADING')
      this.$store.dispatch('loadImageCollectionGql', resource)
    }
  },
  methods: {
    resizeCards: function (event) {
      this.cardPixelWidth = event.target.value
      if (this.cardPixelWidth < 75) {
        this.captionPixelPadding = 0
      } else {
        this.captionPixelPadding = 9
      }
    }
  }
}
<\/script>
<style lang="scss">
.lux-title {
  font-weight: bold;
}
.lux-orderManager {
  position: relative;
  height: 80vh;
}
.lux-orderManager .lux-heading {
  margin: 12px 0 12px 0;
  line-height: 0.75;
  color: #001123;
}
.lux-orderManager h2 {
  letter-spacing: 0;
  font-size: 24px;
}
.lux-sidePanel {
  position: absolute;
  top: 20px;
  right: 10px;
  height: 95%;
  width: 28.5%;
  border: 1px solid #ddd;
  border-radius: 4px;

  padding: 0 30px 0 30px;
  // height: 100%;
  overflow-y: scroll;
}
.lux-sidePanel .lux-input {
  display: block;
}
.lux-galleryPanel {
  position: absolute;
  top: 20px;
  left: 0;
  height: 95%;
  width: 70%;
  border-radius: 4px;
  border: 1px solid #ddd;
}
.lux-galleryPanel .lux-icon {
  margin: auto;
}
.lux-galleryWrapper {
  overflow: auto;
  height: calc(100% - 80px);
  border-radius: 4px;
  margin-bottom: 80px;
  clear: both;
}

.loader {
  position: absolute;
  width: 100%;
  height: 100%;
  text-align: center;
  padding-bottom: 64px;
  z-index: 500;
  margin-top: -16px;
}
.loader .galleryLoader {
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.85);
  display: flex;
}
.loader .galleryLoader .lux-loader {
  margin: auto;
}
</style>
`, ".lux-title {\n  font-weight: bold;\n}\n\n.lux-orderManager {\n  position: relative;\n  height: 80vh;\n}\n\n.lux-orderManager .lux-heading {\n  margin: 12px 0 12px 0;\n  line-height: 0.75;\n  color: #001123;\n}\n\n.lux-orderManager h2 {\n  letter-spacing: 0;\n  font-size: 24px;\n}\n\n.lux-sidePanel {\n  position: absolute;\n  top: 20px;\n  right: 10px;\n  height: 95%;\n  width: 28.5%;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 0 30px 0 30px;\n  overflow-y: scroll;\n}\n\n.lux-sidePanel .lux-input {\n  display: block;\n}\n\n.lux-galleryPanel {\n  position: absolute;\n  top: 20px;\n  left: 0;\n  height: 95%;\n  width: 70%;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n}\n\n.lux-galleryPanel .lux-icon {\n  margin: auto;\n}\n\n.lux-galleryWrapper {\n  overflow: auto;\n  height: calc(100% - 80px);\n  border-radius: 4px;\n  margin-bottom: 80px;\n  clear: both;\n}\n\n.loader {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  padding-bottom: 64px;\n  z-index: 500;\n  margin-top: -16px;\n}\n\n.loader .galleryLoader {\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.85);\n  display: flex;\n}\n\n.loader .galleryLoader .lux-loader {\n  margin: auto;\n}\n\n/*# sourceMappingURL=OrderManager.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__11 = void 0;
  var __vue_module_identifier__11 = void 0;
  var __vue_is_functional_template__11 = false;
  function __vue_normalize__11(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/OrderManager.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__9() {
    const styles = __vue_create_injector__9.styles || (__vue_create_injector__9.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__11 = /* @__PURE__ */ __vue_normalize__11(
    { render: __vue_render__11, staticRenderFns: __vue_staticRenderFns__11 },
    __vue_inject_styles__11,
    __vue_script__11,
    __vue_scope_id__11,
    __vue_is_functional_template__11,
    __vue_module_identifier__11,
    false,
    __vue_create_injector__9,
    void 0,
    void 0
  );
  var OrderManager_default = __vue_component__11;

  // app/javascript/packs/auth_link_clipboard.js
  function setupAuthLinkClipboard() {
    let div = document.getElementById("clipboard-trigger-holder");
    if (div) {
      div.innerHTML = '<button class="btn btn-primary" id="clipboard-trigger">Copy link to clipboard</button>';
    }
    new ClipboardJS("#clipboard-trigger", {
      text: function(trigger) {
        let url = document.getElementById("authorized-link").children[0].getAttribute("href");
        return url;
      }
    });
  }

  // app/javascript/components/ajax-select.vue
  var import_vue_select = __toESM(require_vue_select());
  var import_lodash3 = __toESM(require_lodash());
  var __vue_script__12 = {
    name: "AjaxSelect",
    components: {
      "v-select": import_vue_select.default
    },
    props: {
      typeName: {
        type: String,
        required: true
      },
      targetId: {
        type: String,
        required: true
      },
      searchURLBase: {
        type: String,
        default: "/catalog.json"
      }
    },
    data() {
      return {
        options: [],
        selected: null,
        query: null
      };
    },
    computed: {
      searchURL: function() {
        return `${this.searchURLBase}/?f%5Bhuman_readable_type_ssim%5D%5B%5D=${this.typeName}&all_models=true&sort=figgy_title_ssi+asc&q=${this.query}`;
      }
    },
    created: function() {
      const doc = document.getElementById(this.targetId);
      const id = doc.getAttribute("ajax_select_initial_id") || doc.value;
      if (id === "") {
        return;
      }
      this.query = `id:${id}`;
      fetch(
        this.searchURL
      ).then((res) => {
        return res.json();
      }).then((json) => {
        const docs = json.data;
        if (docs.length > 0) {
          this.options = json.data.map(this.mapDocument);
          this.selected = this.options[0];
        }
      });
    },
    methods: {
      updateValue(value) {
        value = value || { id: null };
        const target = document.getElementById(this.targetId);
        target.value = value.id;
        this.selected = value;
      },
      onSearch(search, loading) {
        loading(true);
        this.search(loading, search, this);
      },
      mapDocument(doc) {
        return { id: doc.id, title: import_lodash3.default.get(doc, ["attributes", "figgy_title_ssi", "attributes", "value"]) };
      },
      search: import_lodash3.default.debounce((loading, query, vm) => {
        vm.query = `*${query}*`;
        fetch(
          vm.searchURL
        ).then((res) => {
          res.json().then((json) => vm.options = json.data.map(vm.mapDocument));
          loading(false);
        });
      }, 350)
    }
  };
  var __vue_render__12 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "v-select",
      {
        attrs: {
          label: "id",
          value: _vm.selected,
          filterable: false,
          options: _vm.options
        },
        on: { input: _vm.updateValue, search: _vm.onSearch },
        scopedSlots: _vm._u([
          {
            key: "option",
            fn: function(option) {
              return [
                _c("div", { staticClass: "d-center" }, [
                  _vm._v("\n      " + _vm._s(option["title"]) + "\n      ")
                ])
              ];
            }
          },
          {
            key: "selected-option",
            fn: function(option) {
              return [
                _c("div", { staticClass: "selected d-center" }, [
                  _vm._v("\n      " + _vm._s(option["title"]) + "\n    ")
                ])
              ];
            }
          }
        ])
      },
      [
        _c("template", { slot: "no-options" }, [
          _vm._v("\n    type to search...\n  ")
        ])
      ],
      2
    );
  };
  var __vue_staticRenderFns__12 = [];
  __vue_render__12._withStripped = true;
  var __vue_inject_styles__12 = function(inject) {
    if (!inject)
      return;
    inject("data-v-bf84fb5a_0", { source: ".d-center[data-v-bf84fb5a] {\n  display: flex;\n  align-items: center;\n}\n.v-select .dropdown li[data-v-bf84fb5a] {\n  border-bottom: 1px solid rgba(112, 128, 144, 0.1);\n}\n.v-select .dropdown li[data-v-bf84fb5a]:last-child {\n  border-bottom: none;\n}\n.v-select .dropdown li a[data-v-bf84fb5a] {\n  padding: 10px 20px;\n  width: 100%;\n  font-size: 1.25em;\n  color: #3c3c3c;\n}\n.v-select .dropdown-menu .active > a[data-v-bf84fb5a] {\n  color: #fff;\n}\n\n/*# sourceMappingURL=ajax-select.vue.map */", map: { "version": 3, "sources": ["app/javascript/components/ajax-select.vue", "ajax-select.vue"], "names": [], "mappings": "AAsGA;EACA,aAAA;EACA,mBAAA;ACrGA;ADwGA;EACA,iDAAA;ACrGA;ADwGA;EACA,mBAAA;ACrGA;ADwGA;EACA,kBAAA;EACA,WAAA;EACA,iBAAA;EACA,cAAA;ACrGA;ADwGA;EACA,WAAA;ACrGA;;AAEA,0CAA0C", "file": "ajax-select.vue", "sourcesContent": [`<template>
  <v-select label="id" :value="selected" @input=updateValue :filterable="false" :options="options" @search="onSearch">
    <template slot="no-options">
      type to search...
    </template>
    <template slot="option" slot-scope="option">
      <div class="d-center">
        {{ option["title"] }}
        </div>
    </template>
    <template slot="selected-option" slot-scope="option">
      <div class="selected d-center">
        {{ option["title"] }}
      </div>
    </template>
  </v-select>
</template>
<script>
import vSelect from 'vue-select'
import _ from 'lodash'

export default {
  name: 'AjaxSelect',
  components: {
    'v-select': vSelect
  },
  props: {
    typeName: {
      type: String,
      required: true
    },
    targetId: {
      type: String,
      required: true
    },
    searchURLBase: {
      type: String,
      default: '/catalog.json'
    }
  },
  data () {
    return {
      options: [],
      selected: null,
      query: null
    }
  },
  computed: {
    searchURL: function () {
      return \`\${this.searchURLBase}/?f%5Bhuman_readable_type_ssim%5D%5B%5D=\${this.typeName}&all_models=true&sort=figgy_title_ssi+asc&q=\${this.query}\`
    }
  },
  created: function () {
    const doc = document.getElementById(this.targetId)

    // Gets the current value of the input or a value passed as an attribute
    const id = doc.getAttribute('ajax_select_initial_id') || doc.value

    // Guard clause to return if no id is set
    if (id === '') { return }

    // Fetch the initial document and set that as the selected value
    this.query = \`id:\${id}\`
    fetch(
      this.searchURL
    ).then(res => {
      return res.json()
    }).then(json => {
      const docs = json.data
      if (docs.length > 0) {
        this.options = json.data.map(this.mapDocument)
        this.selected = this.options[0]
      }
    })
  },
  methods: {
    updateValue (value) {
      value = value || { id: null }
      const target = document.getElementById(this.targetId)
      target.value = value.id
      this.selected = value
    },
    onSearch (search, loading) {
      loading(true)
      this.search(loading, search, this)
    },
    mapDocument (doc) {
      return { id: doc.id, title: _.get(doc, ['attributes', 'figgy_title_ssi', 'attributes', 'value']) }
    },
    search: _.debounce((loading, query, vm) => {
      vm.query = \`*\${query}*\`
      fetch(
        vm.searchURL
      ).then(res => {
        res.json().then(json => (vm.options = json.data.map(vm.mapDocument)))
        loading(false)
      })
    }, 350)
  }
}
<\/script>
<style lang="scss" scoped>
  .d-center {
    display: flex;
    align-items: center;
  }

  .v-select .dropdown li {
    border-bottom: 1px solid rgba(112, 128, 144, 0.1);
  }

  .v-select .dropdown li:last-child {
    border-bottom: none;
  }

  .v-select .dropdown li a {
    padding: 10px 20px;
    width: 100%;
    font-size: 1.25em;
    color: #3c3c3c;
  }

  .v-select .dropdown-menu .active > a {
    color: #fff;
  }
</style>
`, ".d-center {\n  display: flex;\n  align-items: center;\n}\n\n.v-select .dropdown li {\n  border-bottom: 1px solid rgba(112, 128, 144, 0.1);\n}\n\n.v-select .dropdown li:last-child {\n  border-bottom: none;\n}\n\n.v-select .dropdown li a {\n  padding: 10px 20px;\n  width: 100%;\n  font-size: 1.25em;\n  color: #3c3c3c;\n}\n\n.v-select .dropdown-menu .active > a {\n  color: #fff;\n}\n\n/*# sourceMappingURL=ajax-select.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__12 = "data-v-bf84fb5a";
  var __vue_module_identifier__12 = void 0;
  var __vue_is_functional_template__12 = false;
  function __vue_normalize__12(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/ajax-select.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__10() {
    const styles = __vue_create_injector__10.styles || (__vue_create_injector__10.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css.media || "default" : id;
      const style = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style.ids.includes(id)) {
        let code = css.source;
        let index = style.ids.length;
        style.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
        }
        if (isOldIE) {
          style.element = style.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style.element = document.createElement("style");
          el.type = "text/css";
          if (css.media)
            el.setAttribute("media", css.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index = parseInt(style.element.getAttribute("data-next-index"));
          style.element.setAttribute("data-next-index", index + 1);
        }
        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style.element.childNodes;
          if (nodes[index])
            style.element.removeChild(nodes[index]);
          if (nodes.length)
            style.element.insertBefore(textNode, nodes[index]);
          else
            style.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__12 = /* @__PURE__ */ __vue_normalize__12(
    { render: __vue_render__12, staticRenderFns: __vue_staticRenderFns__12 },
    __vue_inject_styles__12,
    __vue_script__12,
    __vue_scope_id__12,
    __vue_is_functional_template__12,
    __vue_module_identifier__12,
    false,
    __vue_create_injector__10,
    void 0,
    void 0
  );
  var ajax_select_default = __vue_component__12;

  // app/javascript/helpers/setup_ajax_select.js
  var import_vue_common2 = __toESM(require_vue_common());
  function appendAjaxSelect(ajaxInput) {
    const inputId = ajaxInput.id;
    const inputType = ajaxInput.getAttribute("ajax_select_type");
    const newHTML = `<ajax-select target-id='${inputId}' type-name='${inputType}'></ajax-select>`;
    ajaxInput.insertAdjacentHTML("beforebegin", newHTML);
  }
  function mountVueComponents(rootElement) {
    const $elements = $(rootElement).prev(".nested-fields").find("input[ajax_select_type]");
    $elements.each((i, e) => {
      appendAjaxSelect(e);
      const $ajaxSelect = $(e).prev("ajax-select");
      new import_vue_common2.default({
        el: $ajaxSelect[0],
        components: {
          "ajax-select": ajax_select_default
        },
        data: {
          options: []
        }
      });
    });
  }
  function handleCocoonAfterInsert(event, elements) {
    elements.each(() => {
      mountVueComponents(this);
    });
  }
  function setupAjaxSelect() {
    const ajaxInputs = document.querySelectorAll("input[ajax_select_type]");
    for (var i = 0; i < ajaxInputs.length; i++) {
      const ajaxInput = ajaxInputs[i];
      appendAjaxSelect(ajaxInput);
    }
  }
  function setupCocoonLinks() {
    const cocoonLinks = document.querySelectorAll(".links");
    cocoonLinks.forEach((element) => {
      const $element = $(element);
      $element.on("cocoon:after-insert", handleCocoonAfterInsert);
    });
  }

  // app/javascript/components/file-uploader.vue
  var import_vue2_dropzone = __toESM(require_vue2Dropzone());
  var __vue_script__13 = {
    name: "FileUploader",
    components: {
      "dropzone": import_vue2_dropzone.default
    },
    props: {
      infoString: {
        type: String,
        default: "Drag and drop files here to upload."
      },
      csrfToken: {
        type: String,
        default: document.getElementsByName("csrf-token")[0] ? document.getElementsByName("csrf-token")[0].content : void 0
      },
      tableName: {
        type: String,
        default: null
      },
      mimeTypes: {
        type: String,
        default: null
      },
      uploadPath: {
        type: String,
        required: true
      },
      paramName: {
        type: String,
        default: "file"
      },
      multiple: {
        type: Boolean,
        default: false
      },
      patch: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        options: [],
        dropzoneOptions: {
          acceptedFiles: this.mimeTypes,
          createImageThumbnails: false,
          headers: { "X-CSRF-Token": this.csrfToken },
          url: this.uploadPath,
          paramName: this.paramName,
          uploadMultiple: this.multiple,
          maxFilesize: null,
          timeout: 72e5
        }
      };
    },
    methods: {
      uploadComplete(response) {
        this.$refs.fileUploaderDropzone.removeFile(response);
      },
      sendingEvent(file, xhr, formData) {
        if (this.patch === true) {
          formData.append("_method", "patch");
          formData.append(
            this.paramName.replace(/\[.*\]/, "[skip_validation]"),
            "true"
          );
        }
      },
      reloadPage() {
        window.location.reload();
      }
    }
  };
  var __vue_render__13 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "dropzone",
      {
        ref: "fileUploaderDropzone",
        attrs: {
          id: "dropzone",
          options: _vm.dropzoneOptions,
          "use-custom-slot": true
        },
        on: {
          "vdropzone-complete": _vm.uploadComplete,
          "vdropzone-sending": _vm.sendingEvent,
          "vdropzone-complete-multiple": _vm.reloadPage
        }
      },
      [
        _c("div", { staticClass: "dropzone-custom-content" }, [
          _c("div", { staticClass: "dropzone-custom-title" }, [
            _vm._v("\n      " + _vm._s(_vm.infoString) + "\n    ")
          ])
        ])
      ]
    );
  };
  var __vue_staticRenderFns__13 = [];
  __vue_render__13._withStripped = true;
  var __vue_inject_styles__13 = void 0;
  var __vue_scope_id__13 = void 0;
  var __vue_module_identifier__13 = void 0;
  var __vue_is_functional_template__13 = false;
  function __vue_normalize__13(template, style, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/components/file-uploader.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style) {
            style.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function(context) {
          style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__13 = /* @__PURE__ */ __vue_normalize__13(
    { render: __vue_render__13, staticRenderFns: __vue_staticRenderFns__13 },
    __vue_inject_styles__13,
    __vue_script__13,
    __vue_scope_id__13,
    __vue_is_functional_template__13,
    __vue_module_identifier__13,
    false,
    void 0,
    void 0,
    void 0
  );
  var file_uploader_default = __vue_component__13;

  // app/javascript/figgy/form/required_fields.js
  var RequiredFields = class {
    constructor(form, callback) {
      this.form = form;
      this.callback = callback;
      this.reload();
    }
    get areComplete() {
      return this.requiredFields.filter((n, elem) => {
        return this.isValuePresent(elem);
      }).length === 0;
    }
    isValuePresent(elem) {
      return $(elem).val() === null || $(elem).val().length < 1;
    }
    reload() {
      this.requiredFields = this.form.find(":input[required]");
      this.requiredFields.change(this.callback);
    }
  };

  // app/javascript/figgy/form/checklist_item.js
  var ChecklistItem = class {
    constructor(element) {
      this.element = element;
    }
    check() {
      this.element.removeClass("incomplete");
      this.element.addClass("complete");
    }
    uncheck() {
      this.element.removeClass("complete");
      this.element.addClass("incomplete");
    }
  };

  // app/javascript/figgy/form/save_work_control.js
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function(searchString, position) {
      position = position || 0;
      return this.substr(position, searchString.length) === searchString;
    };
  }
  var SaveWorkControl = class {
    constructor(element) {
      if (element.length < 1) {
        return;
      }
      this.element = element;
      this.form = element.closest("form");
      element.data("save_work_control", this);
      this.activate();
    }
    preventSubmitUnlessValid() {
      this.form.on("submit", (evt) => {
        if (document.activeElement.getAttribute("value") == "Save Draft")
          return;
        if (!this.isValid())
          evt.preventDefault();
      });
    }
    preventSubmitIfAlreadyInProgress() {
      let master = this;
      this.saveButton.on("click", function(evt) {
        if (master.isValid()) {
          let input = $("<input type='hidden' />").attr("name", $(this)[0].name).attr("value", $(this)[0].value);
          $(this).closest("form").append(input);
        }
      });
      this.form.on("submit", (evt) => {
        if (this.isValid())
          this.saveButton.prop("disabled", true);
      });
    }
    preventSubmitIfUploading() {
      this.form.on("submit", (evt) => {
        if (this.uploads.inProgress) {
          evt.preventDefault();
        }
      });
    }
    get isNew() {
      return this.form.attr("id").startsWith("new");
    }
    activate() {
      if (!this.form) {
        return;
      }
      this.saveButton = this.element.find(".save:submit");
      this.requiredFields = new RequiredFields(this.form, () => this.formStateChanged());
      this.requiredMetadata = new ChecklistItem(this.element.find("#required-metadata"));
      this.preventSubmit();
      this.watchMultivaluedFields();
      this.formChanged();
    }
    preventSubmit() {
      this.preventSubmitUnlessValid();
      this.preventSubmitIfAlreadyInProgress();
    }
    watchMultivaluedFields() {
      $(".multi_value.form-group", this.form).bind("managed_field:add", () => this.formChanged());
      $(".multi_value.form-group", this.form).bind("managed_field:remove", () => this.formChanged());
    }
    formStateChanged() {
      this.saveButton.prop("disabled", !this.isValid());
    }
    formChanged() {
      this.requiredFields.reload();
      this.formStateChanged();
    }
    isValid() {
      let metadataValid = this.validateMetadata();
      return metadataValid;
    }
    validateMetadata() {
      if (this.requiredFields.areComplete) {
        this.requiredMetadata.check();
        return true;
      }
      this.requiredMetadata.uncheck();
      return false;
    }
  };

  // app/javascript/figgy/form/detect_duplicates.js
  var DuplicateResourceDetector = class {
    constructor($element, messenger) {
      this.$element = $element;
      this.messenger = messenger;
      this.$element.data("_object", this);
      this.field = this.$element.data("field");
      this.existing = this.$element.data("value");
      this.$element.change(this.onchange);
    }
    setQueryUrl() {
      this.value = this.$element.val();
      this.queryUrl = `/catalog?q=${this.field}:${this.value}`;
      if (this.existing)
        this.queryUrl += `&q=NOT+id:${this.existing}`;
    }
    appendWarning() {
      this.$warning = $(`<div class="duplicates alert alert-warning">${this.messenger.call(this, this.queryUrl)}</div>`).appendTo(this.$element.parent());
    }
    removeWarning() {
      if (this.$warning) {
        this.$warning.remove();
        delete this.$warning;
      }
    }
    query() {
      $.ajax({ url: `${this.queryUrl}&format=json`, context: this }).done(
        function(data) {
          if (data.data.length > 0) {
            this.removeWarning();
            this.appendWarning();
          } else {
            this.removeWarning();
          }
        }
      );
    }
    onchange() {
      let self2 = $(this).data("_object");
      if ($(this).val()) {
        self2.setQueryUrl();
        self2.query();
      } else {
        self2.removeWarning();
      }
    }
  };
  var DuplicateResourceDetectorFactory = class {
    static propertyMessenger() {
      return `This property is already in use.  Please consider a metadata field to help differentiate between objects with the same metadata.`;
    }
    static sourceMetadataIdMessenger(queryUrl) {
      return `This ID is already in use: <a href=${queryUrl}>view records using this Source Metadata ID</a>.  Please consider using the Portion Note field to help differentiate between objects with the same metadata.`;
    }
    static barcodeMessenger(queryUrl) {
      return `This barcode is already in use: <a href=${queryUrl}>view records using this barcode</a>.  Please consider using the Description field to help differentiate between objects with the same metadata.`;
    }
    static build($element) {
      let model = $element.data("model");
      let messenger = DuplicateResourceDetectorFactory.propertyMessenger;
      switch (model) {
        case "ScannedResource":
          messenger = DuplicateResourceDetectorFactory.sourceMetadataIdMessenger;
          break;
        case "EphemeraBox":
          messenger = DuplicateResourceDetectorFactory.barcodeMessenger;
          break;
        case "EphemeraFolder":
          messenger = DuplicateResourceDetectorFactory.barcodeMessenger;
          break;
      }
      return new DuplicateResourceDetector($element, messenger);
    }
  };

  // app/javascript/figgy/server_uploader.js
  var ServerUploader = class {
    constructor() {
      window.addEventListener("browseEverything.upload", ServerUploader.appendElements);
      $("#browse-everything-modal").on("show.bs.modal", (e) => {
        $(document).off("focusin.bs.modal", "**");
        const $modal = $("#browse-everything-modal");
        const modal = $modal.data("bs.modal");
        modal.enforceFocus = (e2) => {
        };
      });
    }
    static submitFiles() {
      $("#browse-everything-modal").modal("hide");
      $("#browse-everything-form").submit();
    }
    static appendElements(event) {
      const upload = event.detail;
      const $input = $(`<input type="hidden" name="browse_everything[uploads][]" value="${upload.id}" />`);
      $("#browse-everything-form").append($input);
      ServerUploader.submitFiles();
    }
  };

  // app/javascript/figgy/collection_bag_uploader.js
  var CollectionBagUploader = class {
    static closeModal() {
      $("#browse-everything-modal").modal("hide");
    }
    static appendElements(event) {
      const upload = event.detail;
      const container = upload.containers.shift();
      $("#collection_bag_path").val(container.id);
      CollectionBagUploader.closeModal();
    }
    constructor() {
      window.addEventListener("browseEverything.upload", CollectionBagUploader.appendElements);
      $("#browse-everything-modal").on("show.bs.modal", (e) => {
        $(document).off("focusin.bs.modal", "**");
        const $modal = $("#browse-everything-modal");
        const modal = $modal.data("bs.modal");
        modal.enforceFocus = (e2) => {
        };
      });
    }
  };

  // app/javascript/figgy/structure_parser.js
  var StructureParser = class {
    constructor(element) {
      this.element = element;
    }
    get serialize() {
      let start_obj = {};
      let nodes = [];
      let children = $("> li", this.element);
      children.each((index, child) => {
        let node = new StructureNode($(child));
        nodes.push(node.serialize);
      });
      if (nodes.length > 0) {
        start_obj["nodes"] = nodes;
      }
      if (this.structure_label) {
        start_obj["label"] = this.structure_label;
      }
      return start_obj;
    }
    get structure_label() {
      let structure_element = $("#structure_label");
      if (structure_element.length > 0) {
        return structure_element.val();
      }
    }
  };
  var StructureNode = class {
    constructor(element) {
      this.element = element;
    }
    get serialize() {
      let new_obj = {};
      if (this.proxy) {
        new_obj["proxy"] = this.proxy;
      }
      if (this.label) {
        new_obj["label"] = this.label;
      }
      if (this.child_nodes.length > 0) {
        let nodes = [];
        this.child_nodes.each((index, child) => {
          let node = new StructureParser($(child));
          for (let n of node.serialize["nodes"]) {
            nodes.push(n);
          }
        });
        new_obj["nodes"] = nodes;
      }
      return new_obj;
    }
    get proxy() {
      return this.element.attr("data-proxy");
    }
    get child_nodes() {
      return $("> ul", this.element);
    }
    get label() {
      let input_element = $("> div input", this.element);
      if (input_element.length > 0) {
        return input_element.val();
      }
    }
  };

  // app/javascript/figgy/shift_selecting.js
  function shift_enabled_selecting() {
    let prev = -1;
    return function(e, ui) {
      let curr = $(ui.selecting.tagName, e.target).index(ui.selecting);
      if (e.shiftKey && prev > -1) {
        $(ui.selecting.tagName, e.target).slice(Math.min(prev, curr), 1 + Math.max(prev, curr)).addClass("ui-selected");
      } else {
        prev = curr;
      }
    };
  }

  // app/javascript/figgy/structure_manager.js
  var StructureManager = class {
    constructor() {
      this.initialize_sortable();
      this.initialize_selectable();
      this.bind_persist();
      this.add_section_button();
    }
    initialize_sortable() {
      $(".sortable").nestedSortable({
        handle: ".move",
        items: "li",
        toleranceElement: "> div",
        listType: "ul",
        placeholder: "placeholder",
        parentNodeFactory: this.new_node,
        preventExpansion: true,
        helper: function(e, item) {
          if (!item.hasClass("ui-selected")) {
            item.parent().children(".ui-selected").removeClass("ui-selected");
            item.addClass("ui-selected");
          }
          var selected = item.parent().children(".ui-selected").clone();
          item.data("multidrag", selected).siblings(".ui-selected").remove();
          return $("<li/>").append(selected);
        },
        stop: function(e, ui) {
          var selected = ui.item.data("multidrag");
          ui.item.after(selected);
          ui.item.remove();
          $(".ui-selected").removeClass("ui-selected");
        },
        start: function(event, ui) {
          ui.placeholder.height(ui.item.height());
        },
        isTree: true,
        collapsedClass: "collapsed",
        expandedClass: "expanded"
      });
      $(".sortable").on("click", ".expand-collapse", function() {
        let parent = $(this).parents("li").first();
        parent.toggleClass("expanded");
        parent.toggleClass("collapsed");
      });
    }
    initialize_selectable() {
      $(".sortable").selectable({
        cancel: ".move,input,a,.expand-collapse,.ignore-select",
        filter: "li",
        selecting: shift_enabled_selecting()
      });
      $(".sortable").on("click", "*[data-action=remove-list]", function(event) {
        event.preventDefault();
        if (confirm("Delete this structure?")) {
          let parent_li = $(this).parents("li").first();
          let child_items = parent_li.children("ul").children();
          parent_li.before(child_items);
          parent_li.remove();
        }
      });
    }
    bind_persist() {
      $("*[data-action=submit-list]").click(function(event) {
        event.preventDefault();
        let element = $(".sortable");
        let serializer = new StructureParser(element);
        let klass = element.attr("data-class-name");
        let singular_klass = element.attr("data-singular-class-name");
        let id = element.attr("data-id");
        let url = `/concern/${klass}/${id}`;
        let button = $(this);
        button.text("Saving..");
        button.addClass("disabled");
        $.ajax({
          type: "PUT",
          url,
          data: JSON.stringify({ [singular_klass]: { "logical_structure": [serializer.serialize] } }),
          dataType: "json",
          contentType: "application/json"
        }).always(() => {
          button.text("Save");
          button.removeClass("disabled");
        });
      });
    }
    add_section_button() {
      let new_node = this.new_node;
      $("*[data-action=add-to-list]").click(function(event) {
        event.preventDefault();
        let top_element = $(".sortable");
        let new_element = new_node();
        top_element.prepend(new_element);
      });
    }
    new_node() {
      return $("<li>", { class: "expanded" }).append(
        $("<div>").append(
          $("<div>", { class: "card" }).append(
            $("<div>", { class: "card-header" }).append(
              $("<div>", { class: "row" }).append(
                $("<div>", { class: "title" }).append(
                  $("<span>", { class: "move glyphicon glyphicon-move" })
                ).append(
                  $("<span>", { class: "glyphicon expand-collapse" })
                ).append(
                  $("<input>", { type: "text", name: "label", id: "label" })
                )
              ).append(
                $("<div>", { class: "toolbar" }).append(
                  $("<a>", { href: "", "data-action": "remove-list", title: "Remove " }).append(
                    $("<span>", { class: "glyphicon glyphicon-remove" })
                  )
                )
              )
            )
          )
        )
      );
    }
  };

  // app/javascript/figgy/modal_viewer.js
  var ModalViewer = class {
    constructor() {
      this.element = $(this.selector);
      $("a", this.element).unbind("click");
      $("body").on("click", this.selector, (event) => {
        event.stopPropagation();
        event.preventDefault();
        let manifest_url = $(event.currentTarget).attr("data-modal-manifest");
        let osd_viewer = $("picture[data-openseadragon]");
        let new_source = $("<source>", { class: "osd-image", src: manifest_url, media: "openseadragon" });
        $("#viewer-modal").modal();
        osd_viewer.height($(window).height() - 100);
        if (this.osd !== void 0) {
          let viewer = this.osd.data("osdViewer");
          viewer.open(manifest_url);
        } else {
          osd_viewer.html("");
          new_source.appendTo(osd_viewer);
          this.osd = osd_viewer.openseadragon();
        }
        return true;
      });
    }
    get selector() {
      return "*[data-modal-manifest]";
    }
  };

  // app/javascript/figgy/derivative_form.js
  var DerivativeForm = class {
    constructor() {
      this.form = $(".rederive");
      this.element = this.form.find("button");
      this.element.click(this.onclick);
    }
    onclick(event) {
      $.ajax({
        type: "PUT",
        url: $(this).parents(".rederive").attr("action"),
        data: $(this).parents(".rederive").serializeArray(),
        dataType: "json"
      }).done(function(data, textStatus, response) {
        $(".flash-message span.text").text("Derivatives are being regenerated").parent().removeAttr("hidden");
      }).fail(function(response, textStatus, errorThrown) {
        $(".flash-message span.text").text("Derivatives cannot be regenerated").parent().removeClass("alert-success").addClass("alert-danger").removeAttr("hidden");
      });
    }
  };

  // app/javascript/figgy/metadata_form.js
  var MetadataForm = class {
    constructor() {
      this.form = $(".extract_metadata");
      this.element = this.form.find("button");
      this.element.click(this.onclick);
    }
    onclick(event) {
      $.ajax({
        type: "PUT",
        url: $(this).parents(".extract_metadata").attr("action"),
        data: $(this).parents(".extract_metadata").serializeArray(),
        dataType: "json"
      }).done(function(data, textStatus, response) {
        $(".flash-message span.text").text("Metadata is being extracted").parent().removeAttr("hidden");
      }).fail(function(response, textStatus, errorThrown) {
        $(".flash-message span.text").text("Metadata cannot be extracted").parent().removeClass("alert-success").addClass("alert-danger").removeAttr("hidden");
      });
    }
  };

  // app/javascript/figgy/universal_viewer.js
  var UniversalViewer = class {
    constructor() {
      this.addFullscreenEventListeners();
      $(".viewer").trigger("resize");
    }
    addFullscreenEventListeners() {
      if (document.addEventListener) {
        document.addEventListener("webkitfullscreenchange", () => this.exitHandler(this), false);
        document.addEventListener("mozfullscreenchange", () => this.exitHandler(this), false);
        document.addEventListener("fullscreenchange", () => this.exitHandler(this), false);
        document.addEventListener("MSFullscreenChange", () => this.exitHandler(this), false);
      }
    }
    exitHandler() {
      let fullscreen = document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement;
      if (fullscreen !== true) {
        this.sleep(200).then(() => {
          let frame = document.getElementsByTagName("iframe")[0];
          frame.style.position = null;
          frame.style.top = null;
          frame.style.left = null;
        });
      } else {
        this.sleep(200).then(() => {
          let frame = document.getElementsByTagName("iframe")[0];
          frame.style.position = "absolute";
        });
      }
    }
    sleep(time) {
      return new Promise((resolve) => setTimeout(resolve, time));
    }
  };

  // app/javascript/figgy/file_set_form.js
  var FileSetForm = class {
    constructor($element) {
      this.$formElement = $element;
      this.$fileInputElements = $element.find('input[type="file"]');
      this.$submitElement = $element.find('input[type="submit"]');
      this.$fileInputElements.data("_object", this);
      this.$fileInputElements.change(this.onchange);
      this.update();
    }
    update() {
      let fileInputValues = this.$fileInputElements.map((_i, element) => element.value).toArray();
      if (fileInputValues.reduce((u, v) => u || v))
        this.$submitElement.prop("disabled", false);
      else
        this.$submitElement.prop("disabled", true);
    }
    onchange(event) {
      let that = $(this).data("_object");
      that.update();
    }
  };

  // app/javascript/figgy/save_and_ingest_handler.js
  var SaveAndIngestHandler = class {
    constructor() {
      this.button_element = $(this.buttonSelector);
      this.field_element = $(this.fieldElementSelector);
      this.info_element = $(this.infoElementSelector);
      this.save_and_ingest_field_element = $(this.saveAndIngestField);
      this.resetButton();
      this.current_promise = null;
      this.field_element.change((e) => {
        this.resetButton();
        this.button_element.val("Searching...");
        let change_set = window.location.pathname.split("/").pop();
        let qs = {};
        if (change_set !== "new" && change_set !== "edit") {
          qs = { "change_set": change_set };
        }
        if (this.current_promise) {
          this.current_promise.abort();
        }
        this.current_promise = $.getJSON(`/concern/scanned_resources/save_and_ingest/${this.field_element.val()}`, qs).done((data) => {
          if (data.exists === true) {
            this.resetButton();
            this.button_element.prop("disabled", false);
            this.save_and_ingest_field_element.val(data.location);
            if (data.file_count != 0) {
              this.info_element.text(`Ingest ${data.file_count} files from ${data.location}`);
            } else {
              this.info_element.text(`Ingest ${data.volume_count} volumes from ${data.location}`);
            }
          } else {
            this.resetButton();
          }
        });
      });
    }
    resetButton() {
      this.save_and_ingest_field_element.val(null);
      this.button_element.attr("disabled", true);
      this.button_element.val("Save and Ingest");
      this.info_element.text("");
    }
    get buttonSelector() {
      return "*[data-save-and-ingest]";
    }
    get fieldElementSelector() {
      return "*[data-field='source_metadata_identifier_ssim']";
    }
    get saveAndIngestField() {
      return "*[name='save_and_ingest_path']";
    }
    get infoElementSelector() {
      return "#save-and-ingest-info";
    }
  };

  // app/javascript/figgy/auto_ingest_handler.js
  var AutoIngestHandler = class {
    constructor() {
      this.button_element = $("#auto-ingest-button");
      this.info_element = $("#auto-ingest-info");
      if (this.button_element.length) {
        $.getJSON(`/concern/numismatics/coins/${this.button_element.attr("data-id")}/discover_files.json`).done((data) => {
          if (data.exists == true) {
            this.button_element.prop("disabled", false);
            this.button_element.attr("value", "Auto Ingest");
            if (data.file_count != 0)
              this.info_element.text(`Ingest ${data.file_count} files from numismatics/${data.location}`);
          } else {
            this.button_element.hide();
          }
        });
      }
    }
  };

  // app/javascript/figgy/relationships/member_resources_table.js
  var MemberResourcesTable = class {
    constructor(element, form) {
      this.element = $(element);
      this.table = this.element.find("table");
      this.$tbody = this.table.find("tbody");
      this.members = this.table.data("members");
      this.initializeDataTable();
      this.update_url = this.table.data("update-url");
      this.query_url = this.table.data("query-url");
      if (!this.query_url) {
        return;
      }
      this.$form = $(form);
      $(this.$form).submit((e) => e.preventDefault());
      this.$authenticityToken = this.$form.find('input[name="authenticity_token"]');
      this.authenticityToken = this.$authenticityToken.val();
      this.model = this.table.data("param-key");
      this.resourceId = this.table.data("resource-id");
      this.loading = false;
      this.$loading = this.table.prev(".loading-status");
      this.bindButtons();
    }
    bindButtons() {
      const $this = this;
      $this.bindAddButton();
      $this.bindRemoveButton();
    }
    bindAddButton() {
      const $this = this;
      $this.element.find(".btn-add-row").click((event) => {
        const $element = $(event.target);
        const $row = $this.element.find(".member-actions");
        const attachedId = $this.element.find(".related_resource_ids").val();
        if (attachedId === "") {
          $this.setWarningMessage($row, "ID cannot be empty.");
        } else if ($.inArray(attachedId, $this.members) > -1) {
          $this.setWarningMessage($row, "Resource is already related.");
        } else {
          $this.datatable.destroy();
          $this.members.push(attachedId);
          $this.hideWarningMessage($row);
          $element.prop("disabled", true);
          $this.setLoading(true);
          $this.callAjax({
            row: $row,
            members: null,
            member: null,
            url: $this.get_child_update_url(attachedId),
            element: $element,
            object: $this,
            data: $this.buildChildFormData(),
            on_error: $this.handleError,
            on_success: $this.reloadTable
          });
        }
        event.preventDefault();
      });
    }
    buildChildFormData() {
      let parentId = this.update_url.split("/").pop();
      return {
        "authenticity_token": this.authenticityToken,
        [this.model]: {
          ["append_id"]: parentId
        }
      };
    }
    get_child_update_url(attachedId) {
      let stuff = this.update_url.split("/");
      stuff.pop();
      stuff.push(attachedId);
      return stuff.join("/");
    }
    bindRemoveButton() {
      const $this = this;
      $this.element.find(".btn-remove-row").click((event) => {
        const $element = $(event.target);
        const $row = $element.parents("tr:first");
        const memberId = $row.data("resource-id");
        const index = $this.members.indexOf(memberId);
        $this.datatable.destroy();
        $this.members.splice(index, 1);
        $element.prop("disabled", true);
        $this.setLoading(true);
        $this.callAjax({
          row: $row,
          members: null,
          member: null,
          data: $this.buildRemoveFormData(),
          url: $this.update_url,
          element: $element,
          object: $this,
          on_error: $this.handleError,
          on_success: $this.reloadTable
        });
        event.preventDefault();
      });
    }
    buildRemoveFormData() {
      return {
        "authenticity_token": this.authenticityToken,
        [this.model]: {
          ["member_ids"]: this.members
        }
      };
    }
    setLoading(state) {
      this.loading = state;
      this.update();
    }
    update() {
      if (this.loading) {
        this.$loading.removeClass("d-none");
        this.table.addClass("loading");
      } else {
        this.$loading.addClass("d-none");
        this.table.removeClass("loading");
      }
    }
    setWarningMessage(row, message) {
      const $this = this;
      const $warning = $this.element.find("#warning-message");
      $warning.text(message);
      $warning.parent().removeClass("d-none");
    }
    hideWarningMessage(row) {
      const $this = this;
      $this.element.find(".message.has-warning").addClass("d-none");
    }
    callAjax(args) {
      const $this = this;
      $.ajax({
        type: "patch",
        contentType: "application/json",
        dataType: "json",
        url: args.url,
        data: JSON.stringify(args.data)
      }).done(() => {
        args.element.prop("disabled", false);
        args.on_success.call($this, args);
      }).fail((jqxhr) => {
        args.element.prop("disabled", false);
        args.on_error.call($this, args, jqxhr);
      });
    }
    reloadTable() {
      const $this = this;
      $this.$tbody.load(`${$this.query_url} #${this.table[0].id} tbody > *`, () => {
        $this.setLoading(false);
        $this.reBindButtons();
        $this.element.find(".related_resource_ids").val("");
        $this.initializeDataTable();
      });
    }
    initializeDataTable() {
      this.datatable = this.element.find(".member-resources-datatable").DataTable();
    }
    reBindButtons() {
      const $this = this;
      $this.element.find(".btn-add-row").unbind("click");
      $this.element.find(".btn-remove-row").unbind("click");
      $this.bindButtons();
    }
    handleError(args, jqxhr) {
      this.setLoading(false);
      let message = jqxhr.statusText;
      if (jqxhr.responseJSON) {
        message = jqxhr.responseJSON.description;
      }
      this.setWarningMessage(args.row, message);
    }
  };

  // app/javascript/figgy/relationships/parent_resources_table.js
  var ParentResourcesTable = class {
    constructor(element, form) {
      this.element = $(element);
      this.table = this.element.find("table");
      this.$tbody = this.table.find("tbody");
      this.parents = this.table.data("parents");
      this.members = this.table.data("members");
      this.update_url = this.table.data("update-url");
      this.query_url = this.table.data("query-url");
      if (!this.query_url) {
        return;
      }
      this.$form = $(form);
      $(this.$form).submit((e) => e.preventDefault());
      this.$authenticityToken = this.$form.find('input[name="authenticity_token"]');
      this.authenticityToken = this.$authenticityToken.val();
      this.model = this.table.data("param-key");
      this.resourceId = this.table.data("resource-id");
      this.loading = false;
      this.$loading = this.table.prev(".loading-status");
      this.bindButtons();
    }
    bindButtons() {
      const $this = this;
      $this.bindAddButton();
      $this.bindRemoveButton();
    }
    bindAddButton() {
      const $this = this;
      $this.element.find(".btn-add-row").click((event) => {
        const $element = $(event.target);
        const $row = $element.parents(".parent-resources-attach");
        const parentId = $this.element.find(".related_resource_ids").val();
        if ($.inArray(parentId, $this.parents) > -1) {
          $this.setWarningMessage($row, "Resource is already related.");
        } else {
          $this.hideWarningMessage($row);
          $element.prop("disabled", true);
          $this.setLoading(true);
          $this.callAjax({
            row: $row,
            members: null,
            member: null,
            url: $this.update_url,
            element: $element,
            object: $this,
            data: { [this.model]: { ["append_id"]: parentId } },
            on_error: $this.handleError,
            on_success: $this.reloadTable
          });
        }
        event.preventDefault();
      });
    }
    bindRemoveButton() {
      const $this = this;
      $this.element.find(".btn-remove-row").click((event) => {
        const $element = $(event.target);
        const $row = $element.parents("tr:first");
        const parentId = $row.data("resource-id");
        const index = $this.parents.indexOf(parentId);
        $this.parents.splice(index, 1);
        const update_url = $row.data("update-url");
        $element.prop("disabled", true);
        $this.setLoading(true);
        $this.callAjax({
          row: $row,
          members: null,
          member: null,
          data: {
            "authenticity_token": this.authenticityToken,
            "parent_resource": { id: parentId }
          },
          url: update_url,
          element: $element,
          object: $this,
          on_error: $this.handleError,
          on_success: $this.reloadTable
        });
        event.preventDefault();
      });
    }
    setLoading(state) {
      this.loading = state;
      this.update();
    }
    update() {
      if (this.loading) {
        this.$loading.removeClass("d-none");
        this.table.addClass("loading");
      } else {
        this.$loading.addClass("d-none");
        this.table.removeClass("loading");
      }
    }
    setWarningMessage(row, message) {
      const $this = this;
      const $warning = $this.element.find("#warning-message");
      $warning.text(message);
      $warning.parent().removeClass("d-none");
    }
    hideWarningMessage(row) {
      const $this = this;
      $this.element.find(".message.has-warning").addClass("d-none");
    }
    callAjax(args) {
      const $this = this;
      $.ajax({
        type: "patch",
        contentType: "application/json",
        dataType: "json",
        url: args.url,
        data: JSON.stringify(args.data)
      }).done(() => {
        args.element.prop("disabled", false);
        args.on_success.call($this, args);
      }).fail((jqxhr) => {
        args.element.prop("disabled", false);
        args.on_error.call($this, args, jqxhr);
      });
    }
    reloadTable() {
      const $this = this;
      $this.$tbody.load(`${$this.query_url} #${this.table[0].id} tbody > *`, () => {
        $this.setLoading(false);
        $this.bindButtons();
        $this.element.find(".related_resource_ids").val("");
      });
    }
    handleError(args, jqxhr) {
      this.setLoading(false);
      let message = jqxhr.statusText;
      if (jqxhr.responseJSON) {
        message = jqxhr.responseJSON.description;
      }
      this.setWarningMessage(args.row, message);
    }
  };

  // app/javascript/figgy/flash.js
  var Flash = class {
    constructor() {
      this.element = $(".alert-js");
      this.element.children(".close").click(
        () => {
          this.element.hide();
        }
      );
    }
    reset_type() {
      this.element.removeClass("alert-success");
      this.element.removeClass("alert-danger");
    }
    set(type, message) {
      this.reset_type();
      this.element.addClass(`alert-${type}`);
      this.element.children(".text").text(message);
      this.element.show();
      this.element.removeClass("hidden");
    }
  };

  // app/javascript/figgy/bulk_labeler/label_generator.js
  var lg = {
    pageLabelGenerator: function* (start = 1, method = "paginate", frontLabel = "", backLabel = "", startWith = "front", unitLabel = "", bracket = false) {
      let numberer = this.pageNumberGenerator(start, method, startWith), frontBackLabeler = this.frontBackLabeler(frontLabel, backLabel, startWith), [bracketOpen, bracketClose] = bracket ? ["[", "]"] : ["", ""];
      while (true) {
        let num = numberer.next().value, side = frontBackLabeler.next().value;
        yield `${bracketOpen}${unitLabel}${num}${side}${bracketClose}`.trim();
      }
    },
    pageNumberGenerator: function* (start = 1, method = "paginate", startWith = "front") {
      let roman = false, capital = false, counter = start, changeFolio = false, noCounter = false;
      if (start == "" || start == void 0) {
        noCounter = true;
      }
      if (!isInt2(start) && !noCounter) {
        roman = true;
        capital = start == start.toUpperCase();
        start.toLowerCase();
        counter = this.deromanize(start);
      }
      if (startWith == "back")
        changeFolio = !changeFolio;
      while (true) {
        if (noCounter) {
          yield "";
        } else if (roman) {
          let val = this.romanize(counter);
          if (capital)
            val = val.toUpperCase();
          yield val;
        } else
          yield counter;
        if (method == "foliate") {
          if (changeFolio)
            counter++;
          changeFolio = !changeFolio;
        } else
          counter++;
      }
    },
    frontBackLabeler: function* (frontLabel = "", backLabel = "", startWith = "front") {
      let labels = [frontLabel, backLabel];
      if (startWith == "back")
        labels.reverse();
      let labeler = cycle2(labels);
      while (true)
        yield labeler.next().value;
    },
    romanize: function(num) {
      if (!+num)
        return false;
      var digits = String(+num).split(""), key = [
        "",
        "c",
        "cc",
        "ccc",
        "cd",
        "d",
        "dc",
        "dcc",
        "dccc",
        "cm",
        "",
        "x",
        "xx",
        "xxx",
        "xl",
        "l",
        "lx",
        "lxx",
        "lxxx",
        "xc",
        "",
        "i",
        "ii",
        "iii",
        "iv",
        "v",
        "vi",
        "vii",
        "viii",
        "ix"
      ], roman = "", i = 3;
      while (i--)
        roman = (key[+digits.pop() + i * 10] || "") + roman;
      return Array(+digits.join("") + 1).join("m") + roman;
    },
    deromanize: function(str) {
      str = str.toLowerCase();
      var validator = /^m*(?:d?c{0,3}|c[md])(?:l?x{0,3}|x[cl])(?:v?i{0,3}|i[xv])$/, token = /[mdlv]|c[md]?|x[cl]?|i[xv]?/g, key = { m: 1e3, cm: 900, d: 500, cd: 400, c: 100, xc: 90, l: 50, xl: 40, x: 10, ix: 9, v: 5, iv: 4, i: 1 }, num = 0, m;
      if (!(str && validator.test(str)))
        return false;
      while (m = token.exec(str))
        num += key[m[0]];
      return num;
    }
  };
  function* cycle2(arr) {
    while (true) {
      let nxt = arr.shift();
      arr.push(nxt);
      yield nxt;
    }
  }
  function isInt2(n) {
    return Number(n) === n && n % 1 === 0;
  }
  var label_generator_default = lg;

  // app/javascript/figgy/bulk_labeler/labeler_actions_manager.js
  var LabelerActionsManager = class {
    constructor(element) {
      this.element = element;
      this.apply_button.disable();
      this.inputs.disable();
      this.element.find("input[name=method]").change(function() {
        var element2 = $(this);
        if (element2.val() == "foliate") {
          $("#foliate-settings").show();
        } else {
          $("#foliate-settings").hide();
        }
      });
    }
    on_apply(func) {
      return this.apply_button.click(func);
    }
    get generator() {
      return label_generator_default.pageLabelGenerator(
        this.first,
        this.method,
        this.frontLabel,
        this.backLabel,
        this.startWith,
        this.unitLabel,
        this.bracket
      );
    }
    get first() {
      let val = this.element.find("input[name=start_with]").val();
      if (isNaN(val) || isNaN(parseInt(val))) {
        return val;
      } else {
        return parseInt(val);
      }
    }
    get method() {
      return this.element.find("input[name=method]:checked").val();
    }
    get frontLabel() {
      let front_label_element = this.element.find("input[name=front_label]");
      if (front_label_element.is(":visible")) {
        return front_label_element.val();
      } else {
        return "";
      }
    }
    get backLabel() {
      let back_label_element = this.element.find("input[name=back_label]");
      if (back_label_element.is(":visible")) {
        return back_label_element.val();
      } else {
        return "";
      }
    }
    get startWith() {
      return this.element.find("input[name=foliate_start_with]:checked").val();
    }
    get unitLabel() {
      return this.element.find("input[name=unit_label]").val();
    }
    get bracket() {
      return this.element.find("input[name=bracket]").prop("checked");
    }
    get apply_button() {
      return new ActionsButton(this.element.find("*[data-action=apply-labels]"));
    }
    get inputs() {
      return new ActionsButton(this.element.find("input"));
    }
  };
  var ActionsButton = class {
    constructor(element) {
      this.element = element;
    }
    disable() {
      this.element.prop("disabled", true);
    }
    enable() {
      this.element.prop("disabled", false);
    }
    click(func) {
      return this.element.click(func);
    }
    prop(property, value) {
      return this.element.prop(property, value);
    }
  };

  // app/javascript/figgy/bulk_labeler/bulk_label.js
  var BulkLabeler = class {
    constructor() {
      this.element = $("*[data-action=file-manager]");
      $("#foliate-settings").hide();
      $("#order-grid").selectable(
        {
          filter: ".panel",
          stop: this.stopped_label_select,
          selecting: shift_enabled_selecting(),
          cancel: "a,input,option,label,button,.ignore-select"
        }
      );
      this.actions_manager = new LabelerActionsManager($("#file-manager-tools .actions"));
      this.apply_button.disable();
      this.apply_button.click(this.apply_labels);
      this.initialize_radio_buttons();
      this.flash = new Flash();
    }
    initialize_radio_buttons() {
      this.element.find("span.radio").each((index, element) => {
        element = $(element);
        let input = $("input[type=radio]", element);
        let label = $("label", element);
        let id = element.parents("li[data-reorder-id]").first().attr("data-reorder-id");
        let current_id = input.attr("id");
        input.attr("id", `${current_id}_${id}`);
        label.attr("for", input.attr("id"));
      });
      this.element.find("li input[type=radio]:checked").each(function(id, element) {
        element = $(element);
        let parent = element.parents("div").first();
        parent.attr("data-first-value", element.val());
      });
    }
    get apply_button() {
      return this.actions_manager.apply_button;
    }
    get apply_labels() {
      return (event) => {
        event.preventDefault();
        let generator = this.generator;
        let value = null;
        let title_field = null;
        for (let i of this.selected_elements.toArray()) {
          i = $(i);
          value = generator.next().value;
          title_field = i.find("input.title");
          title_field.val(value);
          title_field.change();
        }
      };
    }
    get generator() {
      return this.actions_manager.generator;
    }
    get selected_elements() {
      return this.element.find("li .panel.ui-selected");
    }
    get action_inputs() {
      return this.actions_manager.inputs;
    }
    get stopped_label_select() {
      return () => {
        let selected_count = this.selected_elements.length;
        if (selected_count > 0) {
          this.apply_button.enable();
          this.action_inputs.enable();
        } else {
          this.apply_button.disable();
          this.action_inputs.disable();
        }
      };
    }
  };

  // app/javascript/figgy/bounding_box_selector.js
  var BoundingBoxSelector = class {
    constructor($element) {
      this.$inputId = $($element).data().inputId;
      this.$coverage = $($element).data().coverage;
      this.$readOnly = $($element).data().readOnly;
      this.initialize_map();
    }
    initialize_map() {
      let initialBounds;
      let that = this;
      if (!this.$coverage && this.$inputId) {
        this.$coverage = $(this.$inputId).val();
      }
      if (this.$coverage && this.$coverage.length !== 0) {
        initialBounds = this.coverageToBounds(this.$coverage);
        this.updateBboxInputs(initialBounds);
      } else {
        initialBounds = L.latLngBounds([[-50, -100], [72, 100]]);
      }
      ;
      let map = L.map("bbox", {
        maxBounds: [[-100, -180], [100, 180]],
        touchZoom: false,
        scrollWheelZoom: false
      }).fitBounds(initialBounds);
      L.tileLayer("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png", {
        maxZoom: 18
      }).addTo(map);
      L.Control.geocoder({ position: "topleft" }).addTo(map);
      if (this.$readOnly) {
        new L.Rectangle(initialBounds, { color: "blue", weight: 2, opacity: 0.9 }).addTo(map);
      } else {
        let boundingBox = new L.BoundingBox({
          bounds: initialBounds,
          buttonPosition: "topright"
        }).addTo(map);
        boundingBox.on("change", function() {
          $("#" + that.$inputId).val(that.boundsToCoverage(this.getBounds()));
          that.updateBboxInputs(this.getBounds());
        });
        boundingBox.enable();
      }
    }
    clampBounds(bounds) {
      try {
        let n = this.valBetween(bounds.getNorth(), -90, 90);
        let e = this.valBetween(bounds.getEast(), -180, 180);
        let s = this.valBetween(bounds.getSouth(), -90, 90);
        let w = this.valBetween(bounds.getWest(), -180, 180);
        return L.latLngBounds([s, w], [n, e]);
      } catch (err) {
        return null;
      }
    }
    valBetween(val, min, max) {
      return Math.min(max, Math.max(min, val));
    }
    coverageToBounds(coverage) {
      try {
        let n = String(coverage).match(/northlimit=([\.\d\-]+)/m);
        let e = String(coverage).match(/eastlimit=([\.\d\-]+)/m);
        let s = String(coverage).match(/southlimit=([\.\d\-]+)/m);
        let w = String(coverage).match(/westlimit=([\.\d\-]+)/m);
        if (n && e && s && w) {
          return L.latLngBounds([s[1], w[1]], [n[1], e[1]]);
        } else {
          return null;
        }
      } catch (err) {
        return null;
      }
    }
    boundsToCoverage(bounds) {
      try {
        let clamped_bounds = this.clampBounds(bounds);
        let n = clamped_bounds.getNorth().toFixed(6);
        let e = clamped_bounds.getEast().toFixed(6);
        let s = clamped_bounds.getSouth().toFixed(6);
        let w = clamped_bounds.getWest().toFixed(6);
        if (n && e && s && w) {
          return "northlimit=" + n + "; eastlimit=" + e + "; southlimit=" + s + "; westlimit=" + w + "; units=degrees; projection=EPSG:4326";
        } else {
          return "";
        }
      } catch (err) {
        return "";
      }
    }
    updateBboxInputs(bounds) {
      let clamped_bounds = this.clampBounds(bounds);
      $("#bbox-north").val(clamped_bounds.getNorth().toFixed(6));
      $("#bbox-east").val(clamped_bounds.getEast().toFixed(6));
      $("#bbox-south").val(clamped_bounds.getSouth().toFixed(6));
      $("#bbox-west").val(clamped_bounds.getWest().toFixed(6));
    }
  };

  // app/javascript/figgy/field_manager.js
  var FieldManager = class {
    constructor(element, options) {
      this.element = $(element);
      this.options = options;
      this.options.label = this.getFieldLabel(this.element, options);
      this.addSelector = ".add";
      this.removeSelector = ".remove";
      this.adder = this.createAddHtml(this.options);
      this.remover = this.createRemoveHtml(this.options);
      this.controls = $(options.controlsHtml);
      this.inputTypeClass = options.inputTypeClass;
      this.fieldWrapperClass = options.fieldWrapperClass;
      this.warningClass = options.warningClass;
      this.listClass = options.listClass;
      this.init();
    }
    init() {
      this._addInitialClasses();
      this._addAriaLiveRegions();
      this._appendControls();
      this._attachEvents();
      this._addCallbacks();
    }
    _addInitialClasses() {
      this.element.addClass("managed");
      $(this.fieldWrapperClass, this.element).addClass("input-group input-append");
    }
    _addAriaLiveRegions() {
      $(this.element).find(".listing").attr("aria-live", "polite");
    }
    _appendControls() {
      if (!this._hasRemoveControl()) {
        this._createRemoveWrapper();
        this._createRemoveControl();
      }
      if (!this._hasAddControl()) {
        this._createAddControl();
      }
    }
    _createRemoveWrapper() {
      $(this.fieldWrapperClass, this.element).append(this.controls);
    }
    _createRemoveControl() {
      $(this.fieldWrapperClass + " .field-controls", this.element).append(this.remover);
    }
    _createAddControl() {
      this.element.find(this.listClass).after(this.adder);
    }
    _hasRemoveControl() {
      return this.element.find(this.removeSelector).length > 0;
    }
    _hasAddControl() {
      return this.element.find(this.addSelector).length > 0;
    }
    _attachEvents() {
      this.element.on("click", this.removeSelector, (e) => this.removeFromList(e));
      this.element.on("click", this.addSelector, (e) => this.addToList(e));
    }
    _addCallbacks() {
      this.element.bind("managed_field:add", this.options.add);
      this.element.bind("managed_field:remove", this.options.remove);
    }
    _manageFocus() {
      $(this.element).find(this.listClass).children("li").last().find(".form-control").focus();
    }
    addToList(event) {
      event.preventDefault();
      let $listing = $(event.target).closest(this.inputTypeClass).find(this.listClass);
      let $activeField = $listing.children("li").last();
      if (this.inputIsEmpty($activeField)) {
        this.displayEmptyWarning();
      } else {
        this.clearEmptyWarning();
        $listing.append(this._newField($activeField));
      }
      this._manageFocus();
    }
    inputIsEmpty($activeField) {
      return $activeField.children("input.multi-text-field").val() === "";
    }
    _newField($activeField) {
      var $newField = this.createNewField($activeField);
      return $newField;
    }
    createNewField($activeField) {
      let $newField = $activeField.clone();
      let $newChildren = this.createNewChildren($newField);
      this.element.trigger("managed_field:add", $newChildren);
      return $newField;
    }
    clearEmptyWarning() {
      let $listing = $(this.listClass, this.element);
      $listing.children(this.warningClass).remove();
    }
    displayEmptyWarning() {
      let $listing = $(this.listClass, this.element);
      var $warningMessage = $("<div class='message has-warning'>cannot add another with empty field</div>");
      $listing.children(this.warningClass).remove();
      $listing.append($warningMessage);
    }
    removeFromList(event) {
      event.preventDefault();
      var $field = $(event.target).parents(this.fieldWrapperClass).remove();
      this.element.trigger("managed_field:remove", $field);
      this._manageFocus();
    }
    destroy() {
      $(this.fieldWrapperClass, this.element).removeClass("input-append");
      this.element.removeClass("managed");
    }
    getFieldLabel($element, options) {
      var label = "";
      var $label = $element.find("label").first();
      if ($label.length && options.labelControls) {
        var label = $label.data("label") || $.trim($label.contents().filter(function() {
          return this.nodeType === 3;
        }).text());
        label = " " + label;
      }
      return label;
    }
    createAddHtml(options) {
      var $addHtml = $(options.addHtml);
      $addHtml.find(".controls-add-text").html(options.addText + options.label);
      return $addHtml;
    }
    createRemoveHtml(options) {
      var $removeHtml = $(options.removeHtml);
      $removeHtml.find(".controls-remove-text").html(options.removeText);
      $removeHtml.find(".controls-field-name-text").html(options.label);
      return $removeHtml;
    }
    createNewChildren(clone) {
      let $newChildren = $(clone).children(this.inputTypeClass);
      $newChildren.val("").removeAttr("required");
      $newChildren.first().focus();
      return $newChildren.first();
    }
  };

  // app/javascript/figgy/figgy_boot.js
  var Initializer = class {
    constructor() {
      this.server_uploader = new ServerUploader();
      this.collection_bag_uploader = new CollectionBagUploader();
      this.initialize_form();
      this.initialize_timepicker();
      this.initialize_bbox();
      this.structure_manager = new StructureManager();
      this.modal_viewer = new ModalViewer();
      this.derivative_form = new DerivativeForm();
      this.metadata_form = new MetadataForm();
      this.universal_viewer = new UniversalViewer();
      this.save_and_ingest_handler = new SaveAndIngestHandler();
      this.auto_ingest_handler = new AutoIngestHandler();
      this.bulk_labeler = new BulkLabeler();
      this.sortable_placeholder();
      this.initialize_multi_fields();
      $("optgroup:not([label=Favorites])").addClass("closed");
      $("select:not(.select2)").selectpicker({ "liveSearch": true });
      this.initialize_datatables();
    }
    initialize_timepicker() {
      $(".timepicker").datetimepicker({
        timeFormat: "HH:mm:ssZ",
        separator: "T",
        dateFormat: "yy-mm-dd",
        timezone: "0",
        showTimezone: false,
        showHour: false,
        showMinute: false,
        showSecond: false,
        hourMax: 0,
        minuteMax: 0,
        secondMax: 0
      });
    }
    initialize_datatables() {
      $(".datatable").dataTable();
      $(".coin-datatable").dataTable({
        "order": [[2, "asc"]]
      });
      $("#requests-table").dataTable({
        order: [[1, "desc"]]
      });
    }
    initialize_form() {
      if ($("#form-progress").length > 0) {
        new SaveWorkControl($("#form-progress"));
      }
      $(".detect-duplicates").each(
        (_i, element) => DuplicateResourceDetectorFactory.build($(element))
      );
      $("form.edit_file_set.admin_controls").each(
        (_i, element) => new FileSetForm($(element))
      );
      $("select.select2").select2({
        tags: true,
        placeholder: "Nothing selected",
        allowClear: true
      });
      $("body").on("click", ".select2-container--open .select2-results__group", function() {
        $(this).siblings().toggle();
        let id = $(this).closest(".select2-results__options").attr("id");
        let index = $(".select2-results__group").index(this);
        optgroupState[id][index] = !optgroupState[id][index];
        if (optgroupState[id][index]) {
          $(this).addClass("open");
          $(this).removeClass("closed");
        } else {
          $(this).addClass("closed");
          $(this).removeClass("open");
        }
      });
      let optgroupState = {};
      $("select.select2").on("select2:open", function() {
        $(".select2-dropdown--below").css("opacity", 0);
        setTimeout(() => {
          let groups = $(".select2-container--open .select2-results__group");
          let id = $(".select2-results__options").attr("id");
          if (!optgroupState[id]) {
            optgroupState[id] = {};
          }
          $.each(groups, (index, v) => {
            optgroupState[id][index] = optgroupState[id][index] || false;
            if (optgroupState[id][index]) {
              $(v).siblings().show();
              $(v).addClass("open");
              $(v).removeClass("closed");
            } else {
              $(v).siblings().hide();
              $(v).addClass("closed");
              $(v).removeClass("open");
            }
            optgroupState[id][index] ? $(v).siblings().show() : $(v).siblings().hide();
          });
          $(".select2-dropdown--below").css("opacity", 1);
        }, 0);
      });
      $(".document div.member-resources").each((_i, element) => {
        const $element = $(element);
        const $form = $element.parent("form");
        new MemberResourcesTable($element, $form);
      });
      $(".document div.parent-resources").each((_i, element) => {
        const $element = $(element);
        const $form = $element.parent("form");
        new ParentResourcesTable($element, $form);
      });
    }
    initialize_bbox() {
      $("#bbox").each((_i, element) => {
        const $element = $(element);
        new BoundingBoxSelector($element);
      });
    }
    sortable_placeholder() {
      $("#sortable").on("sortstart", function(event, ui) {
        let found_element = $("#sortable").find("li[data-reorder-id]").last();
        ui.placeholder.width(found_element.width());
        ui.placeholder.height(found_element.height());
      });
    }
    initialize_multi_fields() {
      const DEFAULTS = {
        add: null,
        remove: null,
        controlsHtml: '<span class="input-group-btn field-controls">',
        fieldWrapperClass: ".field-wrapper",
        warningClass: ".has-warning",
        listClass: ".listing",
        inputTypeClass: ".multi_value",
        addHtml: '<button type="button" class="btn btn-link add"><span class="glyphicon glyphicon-plus"></span><span class="controls-add-text"></span></button>',
        addText: "Add another",
        removeHtml: '<button type="button" class="btn btn-link remove"><span class="glyphicon glyphicon-remove"></span><span class="controls-remove-text"></span> <span class="sr-only"> previous <span class="controls-field-name-text">field</span></span></button>',
        removeText: "Remove",
        labelControls: true
      };
      $.fn.manage_fields = function(option) {
        return this.each(function() {
          var $this = $(this);
          var data = $this.data("manage_fields");
          var options = $.extend({}, DEFAULTS, $this.data(), typeof option == "object" && option);
          if (!data)
            $this.data("manage_fields", data = new FieldManager(this, options));
        });
      };
      $(".multi_value.form-group").manage_fields();
    }
  };

  // app/javascript/application2.js
  import_vue_common3.default.use(import_lux_design_system2.default);
  document.addEventListener("DOMContentLoaded", () => {
    import_axios3.default.defaults.headers.common["X-CSRF-Token"] = document.querySelector('meta[name="csrf-token"]') ? document.querySelector('meta[name="csrf-token"]').getAttribute("content") : void 0;
    var elements = document.getElementsByClassName("lux");
    for (var i = 0; i < elements.length; i++) {
      new import_vue_common3.default({
        el: elements[i],
        store: store_default,
        components: {
          "document-adder": document_adder_default,
          "playlistMembers": playlist_members_default,
          "order-manager": OrderManager_default,
          "issue-monograms": issue_monograms_default,
          "ajax-select": ajax_select_default,
          "file-uploader": file_uploader_default
        },
        data: {
          options: []
        },
        beforeCreate: function() {
          setupAjaxSelect();
        },
        mounted: function() {
          setupCocoonLinks();
        }
      });
    }
    setupAuthLinkClipboard();
    window.figgy = new Initializer();
  });
})();
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
/*!
 * Vue.js v2.7.8
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * vuex v2.5.0
 * (c) 2017 Evan You
 * @license MIT
 */
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
//! Built on 2020-03-05
//! Git commit: v2.4.2-0-c450749
//! License: http://openseadragon.github.io/license/
//! http://openseadragon.github.io
//! openseadragon 2.4.2
